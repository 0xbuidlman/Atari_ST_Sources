From: "Jim Adams" <tcm.lv@worldnet.att.net>
Newsgroups: rec.games.programmer
Subject: Isometric Screen Coordinates to Map Coordinates Article
Date: 5 Mar 1998 18:20:19 GMT
Organization: AT&T WorldNet Services
Lines: 270
Message-ID: <6dmqd3$eha@bgtnsc03.worldnet.att.net>
NNTP-Posting-Host: 12.64.35.41
X-Newsreader: Microsoft Internet News 4.70.1161
Path: news.alfaskop.net!seunet!mn7.swip.net!mn6.swip.net!seunet!news2.swip.net!genius.dat.hk-r.se!news.lth.se!feed1.news.luth.se!luth.se!Cabal.CESspool!bofh.vszbr.cz!howland.erols.net!news-peer.sprintlink.net!news.sprintlink.net!Sprint!worldnet.att.net!newsadm

OK, I typed this up very quickly today.  Let me know if there's
anything wrong with.  I'll post this on our page in the next day also.

Oh yeah - read it with a monospaced font to see the ascii-graphics.


-------------------------------------------------------

          Converting from Screen Coordinates to Map Coordinates
                  using Isometric Graphics Systems
                          by Jim Adams
                             3-5-98
       Copyright (c) 1998 by Jim Adams.  All rights reserved.

Disclaimer -
Do what you want with this information, although all text is
copyright (c) 1998 to Jim Adams, and may not be duplicated, replicated,
rejuvinated or whatever else you can think of to make a copy.
I'm not responsible for anything you do with this information
or any damage it may cause you, or anybody else, using it.
If you do post this article, you must post it in it's entirety
and give full credit to it's author (me!) AND you must not charge any
money for it.

No animals were harmed during the making of this article.
For further information about this topic, visit your local library.
Badges!?!  Badges?!?!  We don't need no stinking badges!!!!

if(overdoing_it_a_bit)
  exit(1);
-----------------------------------------------------------------------

(Refering to our Sci-Fi Isometric game, 'The Light Befallen')

Our original method to convert from screen space to map space
was to 'cut' the screen into sections the size of our tiles, 64x32.
Once we placed the coordinates inside one of the sections, we
could then look into a 64x32 array and see where exactly it was,
whether it be pointing to the map section up-left, up-right, down-left,
down-right, or on the map section itself.

NOTE:
In actuality, the tiles are 64x31, but are padded down to 32 with the
bottom-most line blank so it all fits together correctly.  The padding
works for calculations ONLY.  Don't waste the space to store the
extra line in memory for graphics purposes.  This is all because when
we tile the screen, the two leftmost and rightmost pixels of the tile
will touch, with room for the topmost and bottommost lines to fit in.

Here's a blow-up of what I mean.


                   Bottom Edge of Tile

                      ............
                      ##........**
  Right edge of Tile  ####....****  Left Edge of Tile
                      ######******
                      ####....****
                      ##........**
                      ............

                    Top Edge of Tile



Here's how the function looked:

void pointer_get_map_position(short pointx, short pointy,signed short
mapxo, signed short mapyo, short *mapx,short *mapy)
{
  short mx, my;
  short rmx, rmy;
  short xo, yo;
  signed char xoff[5] = { -1,  0, 0, 0, 1};
  signed char yoff[5] = {  0, -1, 0, 1, 0};
  char off_map[32][64] = {
    {
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1 },
    {
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1 },
    {
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1 },
    {
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1 },
    {
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,
2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1 },
    {
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,
2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1 },
    {
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,
2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1 },
    {
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1 },
    {
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1 },
    {
0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1 },
    {
0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1 },
    {
0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1 },
    {
0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1 },
    {
0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1 },
    {
0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1 },
    {
0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1 },
    {
2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2 },
    {
3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,4,4 },
    {
3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,4,4,4,4 },
    {
3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,4,4,4,4,4,4 },
    {
3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,4,4,4,4,4,4,4,4 },
    {
3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,4,4,4,4,4,4,4,4,4,4 },
    {
3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,2,2,2,2,2,2,4,4,4,4,4,4,4,4,4,4,4,4 },
    {
3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,2,2,2,2,4,4,4,4,4,4,4,4,4,4,4,4,4,4 },
    {
3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,2,2,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4 },
    {
3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4 },
    {
3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,
2,2,2,2,2,2,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4 },
    {
3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,
2,2,2,2,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4 },
    {
3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,
2,2,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4 },
    {
3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,
4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4 },
    {
3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,4,4,
4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4 },
    {
3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,4,4,4,4,
4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4 }
  };

  // divide by the base tile size, adjusting for the clipping
  mx = (short)((pointx + 32 + mapxo) / 64);
  my = (short)((pointy + 16 + mapyo) / 32);

  // calculate a rough estimate of the map coordinate from those
  rmx = mx + my;
  rmy = my - mx;

  // figure the position of the pointer within that rough map space
  xo = (pointx + 32 + mapxo) & 63;
  yo = (pointy + 16 + mapyo) & 31;

  // further adjust the map positions based on the pointers exact
  // position within those map coordinates
  rmx += xoff[off_map[yo][xo]];
  rmy += yoff[off_map[yo][xo]];

  // store the results
  *mapx = (short)rmx;
  *mapy = (short)rmy;
}

Now that is the quick and dirty method.  Although not to great, as it
uses an array, it does do the job.  For those with a good eye, you'll
notice a small bug - but it's so minor, I didn't bother fixing it.
Don't worry, it still works great.



After a few nights of playing, I came up with the following formulas
to replace the above function:

signed short xo = pointer_xpos - (center_x + xadjust);
signed short yo = pointer_ypos - (center_y + yadjust);
signed short x  = yo + (xo/2);
signed short y  = yo + (-xo/2);

This will return a signed value in x and y that represents the
difference from the center map coordinate to where you are pointing.
The center map coordinate should be where you draw the 0, 0 map coordinate,
which for us is the top-left of the screen (0, 0).  Note that the
x and y values are in fine MAP space (read ahead).

xadjust and yadjust are fine-scrolling variables if your engine is
capable.  Note the coordinates 0, 0 of a tile are the top-middle,
with x going down-right and y going down-left.

Confusing?  Not really.  Let's say we start drawing our screen at
SCREEN coordinates 0,0.  The top-middle of the tile is drawn there,
so the left side of the tile is cut from the screen.

We place our pointer at SCREEN coordinates 125, 304.  We are not
fine scrolling, so those can be 0.

So:

1)
xo = 125 - (0 + 0);
yo = 304 - (0 + 0);
x  = xo + (xo / 2);
y  = yo + (-xo / 2);

2)
xo = 125;
yo = 304;
x  = 125 + (125 / 2);
y  = 304 + (-125 / 2);

3)
x  = 125 + (62);
y  = 304 + -62);

4)
x  = 187;
y  = 242;

Now just divide these values by your MAP section size (32x32 in our
case) and voila!  We have map coordinate 5, 7!  What's that you ask?
What is the MAP section size?  I can't help explain it much here -
I don't have enough time or space, but it's the fine coordinate size
within a single map section.  If you don't know it, use the height of
the tile (32).

I am fairly certain the above will work with all tile sizes that have
a 2:1 ratio (16x8, 32x16, 64x32, etc).  If you use a 3:1 ratio, I
believe you substitue the 2's with 3' in there.


Jim Adams
the Collective Mind
Co-Designer 'The Light Befallen' - A new Sci-Fi Isometric CRPG
nospam.tcm.lv@worldnet.att.net  (remove first part (damn spam-bots))
nospam.tcm@pobox.com            (again, remove first part)
http://www.mackay.net.au/~dace/

.
