Received: from brewhq.swb.de (root@brewhq.swb.de [193.175.30.3]) by mail.kd.qd.se (8.7.5/8.7.3) with SMTP id XAA08435 for <Faltrion@kd.qd.se>; Mon, 2 Sep 1996 23:49:58 +0200
Received: from on.ON-Luebeck.DE by brewhq.swb.de  with smtp
	(Linux Smail3.1.29.0 #5) id m0uxggp-0003B5a; Mon, 2 Sep 96 23:37 MET DST
Received: (from majordomo@localhost) by on.ON-Luebeck.DE (8.6.12/8.6.12) id XAA09928 for stik-outgoing; Mon, 2 Sep 1996 23:36:38 +0200
Date: Mon, 2 Sep 1996 23:36:29 +0200
Message-Id: <199609022136.XAA23045@freke.oden.se>
To: <stik@ON-Luebeck.DE>
Subject: Re: [18] STIK: STIK/DIALER                                                    
From: Ronald Andersson <dlanor@oden.se>
X-Mailer: Ant-Mail Version 0.7.9 (Atari) 
Sender: stik@ON-Luebeck.DE
Precedence: bulk
Reply-To: stik@ON-Luebeck.DE



On Mon, 2 Sep 1996 13:16:12  Dan Ackerman <ackerman.29 wrote: 
>
>     Lost a couple of mails due to my disk being full.  Did I miss anything?

That depends on when it happened, since there was a new AtarIRC in the same
batch with this mail from you.  I haven't seen any other betas today.
I do know that you lost my new CSLIP code though, and have sent a new archive.


>     Also can someone send me a nice routine for detecting the amount of free
>space on a disk?  I tried doing it awhile back and never got a working routine
>and it's a serious bug that exists in Antmail that I would like to get fixed.

The gemdos function 'Dfree' is intended for that very purpose.
The Pure_C prototype for it is contained in 'tos.h' and looks like this:

int  Dfree( DISKINFO *buf, int driveno );

Here 'DISKINFO' is a structure, also declared in 'tos.h' like this:

typedef struct
{
    unsigned long   b_free;     /* Free clusters remaining */
    unsigned long   b_total;    /* Total clusters of disk  */
    unsigned long   b_secsiz;   /* Bytes per sector        */
    unsigned long   b_clsiz;    /* Sectors per cluster     */
} DISKINFO;

The 'driveno' argument should be 1 for 'A:', 2 for 'B:' etc,  with 0
reserved for whatever drive happens to be active at the time.

The value of Dfree is normally zero, but negative after disk errors.

Thus to get the free size in bytes I'd do something like this:
--------------------------------------------------------------
long Dfree_bytes(drive)
int drive;
{   DISKINFO    diskdata;
    long retval;
    retval = (long) Dfree(&diskdata, drive);
    if (retval<0)
        return(retval);
    return( diskdata.b_free * diskdata.b_clsiz * diskdata.b_secsiz);
}   /* End of function Dfree_bytes */ 
--------------------------------------------------------------

That should solve it, but remember to check for the negative values on
disk errors, since these mean all I/O on that drive should be avoided.
'Dfree' is one of the few gemdos functions that bypasses the filesystem,
so if this fails there is something fundamentally screwy going on.

-------------------------------------------------------------------------
Regards:  Ronald Andersson                     mailto:dlanor@oden.se
                                               http://www.oden.se/~dlanor
-------------------------------------------------------------------------

.
