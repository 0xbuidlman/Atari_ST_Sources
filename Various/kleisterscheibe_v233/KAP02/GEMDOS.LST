' GEMDOS.GFA: Sammlung der GEMDOS-Routinen
' und kleine Demoroutinen fÅr SCHEIBENKLEISTER
'
' (C) 1987 Claus Brod, Am Felsenkeller 2, 8772 Marktheidenfeld
'
REPEAT
  CLS
  PRINT AT(25,1);CHR$(27);"pGEMDOS-DEMO";CHR$(27);"q"
  PRINT AT(19,2);"(C) 1987 by Claus Brod"
  PRINT AT(5,4);"Aus SCHEIBENKLEISTER, dem etwas anderen Floppybuch"
  PRINT
  PRINT "(0) Exit"
  PRINT "(1) Filehandling (Erzeugen bis Schlieûen)"
  PRINT "(2) I/O-Umleitung"
  PRINT "(3) Dateibaum ausgeben"
  '
  INPUT choice%
  ON choice% GOSUB filehandling,ioredirect,tree
UNTIL choice%=0
'
PROCEDURE filehandling
  LOCAL f$,buf$
  LOCAL attr%,t%,fhandle%,fehler%
  '
  PRINT
  INPUT "Filename";f$
  INPUT "Attribut";attr%
  fhandle%=@fcreate(f$,attr%)          ! Datei anlegen
  PRINT "Handle der Datei: ";fhandle%
  IF fhandle%<0                        ! auf Fehler abfragen
    PRINT "Fehler beim Anlegen der Datei ";f$;"!"
  ELSE
    buf$=""                            ! 512 Bytes in die Datei schreiben
    FOR t%=0 TO 255
      buf$=buf$+"CB"
    NEXT t%
    fehler%=@fwrite(fhandle%,LEN(buf$),V:buf$)
    PRINT "Schreibe Daten."
    IF fehler%<0
      PRINT "Fehler ";fehler%;" beim Beschreiben"
    ELSE
      PRINT "Schlieûe Datei wieder."
      VOID @fclose(fhandle%)           ! Datei schlieûen
      PRINT "Inhaltsverzeichnis:"
      PRINT "==================="
      FILES
    ENDIF
  ENDIF
  PRINT "Taste drÅcken."
  VOID INP(2)
RETURN
'
PROCEDURE ioredirect
  LOCAL p$
  LOCAL console%,prn%
  '
  PRINT
  PRINT "Ausgabe auf Bildschirm - wie Sie sehen"
  p$="Dieser String wird jetzt Åber den Standard-Ausgabekanal ausgegeben"
  p$=p$+CHR$(13)+CHR$(10)
  VOID @fwrite(1,LEN(p$),V:p$)
  console%=@fdup(1)                     ! Handle von logischem Ausgabe-
  PRINT "Neues Handle fÅr den Ausgabekanal:";console%
  prn%=@fdup(3)                         ! Handle von logischem Listkanal
  PRINT "Neues Handle fÅr List-Kanal:";prn%
  VOID @fforce(1,prn%)                  ! Standardausgabe auf Drucker
  VOID @fwrite(1,LEN(p$),V:p$)
  VOID @fforce(1,console%)              ! Stdout wieder auf Konsole
  VOID @fwrite(1,LEN(p$),V:p$)
  PRINT
  PRINT "Taste drÅcken"
  VOID INP(2)
RETURN
'
'
PROCEDURE tree
  LOCAL pfad$
  INPUT "Ab Pfad";pfad$
  @dir(pfad$,0)                          ! Startverzeichnis
  PRINT "Fertig!"
  VOID INP(2)
RETURN
'
PROCEDURE dir(pfad$,tb%)                 ! rekursive Dir-Routine
  LOCAL p$,fehler%,buf$,buf%
  '
  buf$=STRING$(44,0)
  buf%=VARPTR(buf$)
  VOID @fsetdta(buf%)                    ! lokalen DTA-Puffer setzen
  p$=pfad$
  PRINT CHR$(27);"p";p$;CHR$(27);"q"
  fehler%=@fsfirst(p$+"*.*",0)           ! erste Datei suchen
  IF fehler%>=0
    @getname(1)                          ! Name holen
    fehler%=@fsnext                      ! nÑchste Datei suchen
    WHILE (fehler%>=0)
      @getname(1)
      fehler%=@fsnext
    WEND
  ENDIF
  '
  fehler%=@fsfirst(p$+"*.*",16)          ! ersten Ordner suchen
  WHILE fehler%>=0
    IF PEEK(buf%+21)=16                  ! Ordnerkennung
      @getname(0)
      IF PEEK(buf%+30)<>ASC(".")
        @dir(p$+CHAR{buf%+30}+"\",tb%+5) ! Rekursion
        VOID @fsetdta(buf%)
      ENDIF
    ENDIF
    fehler%=@fsnext
  WEND
RETURN
'
' Getname: Namen, Attribut, Datum, Zeit aus Puffer lesen
PROCEDURE getname(flag%)
  LOCAL n$,attr$,sec$,min$,hr$,tm$,dt$,day$,mon$
  LOCAL t%,buf%,laenge%,tm%,dt%
  '
  buf%=@fgetdta
  n$=CHAR{buf%+30}
  '
  laenge%=LONG{buf%+26}
  '
  attr$=RIGHT$("0"+HEX$(PEEK(buf%+21)),2)
  '
  tm%=DPEEK(buf%+22)
  sec$=RIGHT$("00"+STR$((tm% AND 31)*2),2)
  min$=RIGHT$("00"+STR$((tm% DIV 32) AND 63),2)
  hr$=RIGHT$("00"+STR$((tm% DIV 2048) AND 31),2)
  tm$=" "+hr$+":"+min$+":"+sec$
  dt%=DPEEK(buf%+24)
  day$=RIGHT$("00"+STR$(dt% AND 31),2)
  mon$=RIGHT$("00"+STR$((dt% DIV 32) AND 15),2)
  dt$=" "+day$+"."+mon$+"."+STR$(1980+(dt% DIV 512 AND 63))
  IF flag%
    PRINT TAB(tb%);n$;TAB(tb%+15);laenge%;TAB(tb%+25);attr$;dt$;tm$
  ENDIF
RETURN
'
'
' ---------------------------------------------------------------------
' Fcreate: Erzeugt neue Datei
' IN:  Name$ Pfadname der Datei (nach GEMDOS-Konventionen, allerdings
'            ohne nachfolgende 0)
'      Attr% Attributbyte der Datei (0=normale Datei, 1=Read-Only,
'            2=Hidden, 4=Systemfile, 8=Diskettennamen, 16=Ordner, 32=Archivbit)
' OUT: RÅckgabewert    Handle der neuen Datei bzw. Fehlernummer
' typische Fehlermeldungen:
' EPTHNF Pfad oder Laufwerk nicht gefunden, keine internen Pfadhandles mehr,
'         '.' oder '..' als Name verwendet
' ENHNDL keine freien Handles mehr
' EACCDN Datei darf nur gelesen werden, Diskette voll, Wurzelverzeichnis
'         voll, es gibt schon einen gleichnamigen Ordner
'
FUNCTION fcreate(name$,attr%)
  LOCAL f$
  f$=name$+CHR$(0)
  RETURN GEMDOS(&H3C,L:VARPTR(f$),W:attr%)
ENDFUNC
'
' Fopen: ôffnet eine existierende Datei
' IN:  Name$ Pfadname der Datei (ohne folgende Null)
'      Mode% Zugriffsart (0=read only, 1=write only, 2=read and write)
' OUT: RÅckgabewert     Handle der Datei (bzw. Fehlernummer)
' typische Fehlermeldungen:
' EFILNF kein interner Speicher mehr, ungÅltiges Laufwerk, keine internen
'        Pfadhandles mehr, Datei oder Pfad nicht gefunden, '.' oder
'        '..' als Name verwendet, Datei ist ein Ordner
' ENSMEM kein interner Speicher mehr
' EACCDN Nur-Lese-Datei zum Schreiben geîffnet
'
FUNCTION fopen(name$,mode%)
  LOCAL f%
  f$=name$+CHR$(0)
  RETURN GEMDOS(&H3D,L:VARPTR(f$),W:mode%)
ENDFUNC
'
' Fclose: Schlieût eine Datei
' IN:  Handle% Handle der Datei
' OUT: RÅckgabewert      Fehlernummer
' Typische Fehlermeldungen:
' EIHNDL ungÅltiges Handle
'
FUNCTION fclose(handle%)
  RETURN GEMDOS(&H3E,W:handle%)
ENDFUNC
'
' Fread: Liest Bytes aus einer Datei
' IN:  Handle% Handle der Datei
'      Bytes%  Anzahl der zu lesenden Bytes
'      Buf%    Zeiger auf Puffer fÅr Daten
' OUT: RÅckgabewert      Fehlernummer oder Anzahl der gelesenen Bytes
'      Buf%    zeigt auf gefÅllten Puffer
' Typische Fehlermeldungen:
' EIHNDL ungÅltiges Handle
'
FUNCTION fread(handle%,bytes%,buf%)
  RETURN GEMDOS(&H3F,W:handle%,L:bytes%,L:buf%)
ENDFUNC
'
' Fwrite: Schreibt in eine Datei
' IN:  Handle% Handle der Datei
'      Bytes%  Anzahl zu schreibender Bytes
'      Buf%    Zeiger auf zu schreibende Daten
' OUT: RÅckgabewert   Fehlernummer oder Anzahl geschriebener Bytes
'
' Typische Fehlermeldungen
' EIHNDL ungÅltiges Handle
'
FUNCTION fwrite(handle%,bytes%,buf%)
  RETURN GEMDOS(&H40,handle%,L:bytes%,L:buf%)
ENDFUNC
'
' Fdup: Holt Handle eines logischen Kanals
' IN:  Log_channel% Logische Kanalnummer
' OUT: RÅckgabewert   physikalische Kanalnummer (oder Fehlernummer)
' Typische Fehlermeldungen:
' EIHNDL kein Standardhandle
' ENHNDL keine Dateihandles mehr frei
'
FUNCTION fdup(log_channel%)
  RETURN GEMDOS(&H45,log_channel%)
ENDFUNC
'
' Fforce: Leitet logischen Kanal auf physikalischen Kanal um
' IN:  Log_channel% logischer Kanal
'      Phys_channel% physikalischer Kanal
' OUT: RÅckgabewert   Fehlernummer
' Typische Fehlermeldungen:
' EIHNDL kein Standardhandle, ungÅltiges Dateihandle
'
FUNCTION fforce(log_channel%,phys_channel%)
  RETURN GEMDOS(&H46,log_channel%,phys_channel%)
ENDFUNC
'
' Fsetdta: Setzt die Pufferadresse fÅr Fsfirst & Fsnext
' IN:  buf% Zeiger auf mindestens 44 Byte langen Pufferstring
' OUT: RÅckgabewert     Fehlernummer
' Typische Fehlermeldungen: -
FUNCTION fsetdta(buf%)
  RETURN GEMDOS(&H1A,L:buf%)
ENDFUNC
'
' Fgetdta: Holt aktuelle Pufferadresse
' IN: -
' OUT: RÅckgabewert       Zeiger auf aktuelle DTA
' Typische Fehlermeldungen: -
FUNCTION fgetdta
  RETURN GEMDOS(&H2F)
ENDFUNC
'
' Fdelete: lîscht Datei
' IN:  f$ Pfadname der Datei (ohne nachfolgende Null)
' OUT: RÅckgabewert  Fehlernummer
' Typische Fehlermeldungen:
' EFILNF interner Speicher voll, unbekanntes Laufwerk, keine internen
'        Pfadhandles mehr, Datei oder Pfad nicht gefunden, '.' oder
'        '..' als Name, Datei ist ein Ordner
' EACCDN Datei kann nur gelesen werden oder gehîrt zu einem anderen
'        Prozeû
'
FUNCTION fdelete(fname$)
  LOCAL f$
  f$=fname$+CHR$(0)
  RETURN GEMDOS(&H41,L:VARPTR(f$))
ENDFUNC
'
' Fseek: Sucht Stelle in Datei
' IN:  Offset% Anzahl der Bytes, um die sich der Dateizeiger bewegen soll
'      Handle% Handle der Datei
'      Modus% Suchmodus (0=vom Dateianfang aus, 1=ab aktueller Position,
'                        2=vom Dateiende aus)
' OUT: RÅckgabewert  Fehlernummer
' Typische Fehlermeldungen:
' EIHNDL ungÅltiges Handle
' EINVFN ungÅltiger Modus
' ERANGE Offset auûerhalb des erlaubten Bereichs
'
FUNCTION fseek(offset%,handle%,modus%)
  RETURN GEMDOS(&H42,L:offset%,W:handle%,W:modus%)
ENDFUNC
'
' Fattrib: Holt und setzt Attributbyte einer Datei
' IN:  f$ Pfadname ohne nachfolgende Null
'      Modus% Modus (0=Attribut lesen, 1=setzen)
' OUT: RÅckgabewert  Attribut
' Typische Fehlermeldungen:
' EPTHNF interner Speicher voll, Laufwerk oder Pfad nicht gefunden,
'        keine internen Pfadhandles mehr
' EFILNF Datei nicht gefunden, '.' oder '..' als Name, Datei ist Ordner
'
FUNCTION fattrib(fname$,modus%,attr%)
  LOCAL f$
  f$=fname$+CHR$(0)
  RETURN GEMDOS(&H43,L:VARPTR(f$),modus%,attr%)
ENDFUNC
'
' Fsfirst: Sucht ersten passenden Verzeichniseintrag
' IN:  f$ Pfadname + Suchmuster ohne nachfolgende Null
'      Attr% Attribut der zu durchsuchenden Dateinamen
' OUT: RÅckgabewert  Fehler
'      Datenstruktur im DTA-Buffer:
'      Byte 0-11 Suchmuster
'      Byte 12   Suchattribut
'      Byte 13-16 Offset der gefundenen Datei in der aktuellen Dir.
'      Byte 17-20 Zeiger auf internen Directory-Descriptor
'      Achtung! Byte 0-20 sind undokumentiert und stimmen so nur bis
'      TOS-Version 1.2 (BlitterTOS)
'      Byte 21   Attribut der gefundenen Datei
'      Byte 22-23 Uhrzeit im GEMDOS-Format
'      Byte 24-25 Datum im GEMDOS-Format
'      Byte 26-29 LÑnge der Datei
'      Byte 30-43 Name der Datei
' Typische Fehlermeldungen:
' EFILNF interner Speicher voll, keine internen Pfadhandles mehr, Laufwerk
'        oder Datei oder Pfad nicht gefunden
'
FUNCTION fsfirst(fname$,attr%)
  LOCAL f$
  f$=fname$+CHR$(0)
  RETURN GEMDOS(&H4E,L:VARPTR(f$),W:attr%)
ENDFUNC
'
' Fsnext: Sucht weiter nach Suchmuster (siehe Fsfirst)
' IN: -
' OUT: RÅckgabewert  Fehler (tritt einer auf, ist keine passende Datei mehr da)
'      DTA-Buffer wie oben
' Typische Fehlermeldungen:
' ENMFIL interner Speicher voll, keine Datei mehr gefunden
'
FUNCTION fsnext
  RETURN GEMDOS(&H4F)
ENDFUNC
'
' Frename: Nennt eine Datei um
' IN:  Oldfile$ Alter Pfadname der Datei
'      Nfile$ Neuer Pfadname der Datei
' OUT: RÅckgabewert  Fehler
' Typische Fehlermeldungen:
' ENSMEM interner Speicher voll
' ENSAME alter und neuer Pfadname nicht auf gleichem Laufwerk
'
FUNCTION frename(oldfile$,nfile$)
  oldfile$=oldfile$+CHR$(0)
  nfile$=nfile$+CHR$(0)
  RETURN GEMDOS(&H56,W:0,L:VARPTR(oldfile$),L:VARPTR(nfile$))
ENDFUNC
'
' Fdatime: Setzt oder holt Filedatum und -zeit
' IN:  Datum$ Datums-Puffer (bei Modus%=0)
'      Handle% Handle der Datei
'      Modus% Modus (=1 Datum und Zeit setzen, =0 Datum/Zeit holen)
' OUT: Bei Modus%=1 Datum und Zeit in Datum$ im GEMDOS-Format
' Typische Fehlermeldungen:
' Bomben, wenn Dateihandle ungÅltig!
'
FUNCTION fdatime(datum$,handle%,modus%)
  RETURN GEMDOS(&H57,L:VARPTR(datum$),W:handle%,W:modus%)
ENDFUNC
'
' Dsetdrv: Aktuelles Laufwerk setzen
' IN:  Drive% Drivenummer (0=A, 1=B...)
' OUT: RÅckgabewert  Fehlermeldung
' Typische Fehlermeldungen: -
FUNCTION dsetdrv(drive%)
  RETURN GEMDOS(&HE,W:drive%)
ENDFUNC
'
' Dgetdrv: Holt aktuelle Drivenummer
' IN: -
' OUT: RÅckgabewert  aktuelle Drivenummer
' Typische Fehlermeldungen: -
FUNCTION dgetdrv
  RETURN GEMDOS(&H19)
ENDFUNC
'
' Dfree: Ermittelt freien Disk-Platz
' IN:  buf%   zeigt auf Datenpuffer (mindestens 16 Bytes)
'      Drive% Drivenummer (0=aktives Laufwerk, 1=A, 2=B...)
' OUT: RÅckgabewert  Fehlernummer
'      Struktur in Buf$ (Langworte fÅr freie Cluster, Gesamtanzahl der
'      Cluster, Bytes/Sektor, Sektoren/Cluster)
' Typische Fehlermeldungen:
' ERROR  interner Speicher voll, keine Pfadhandles mehr, Laufwerk
'        unbekannt
'
FUNCTION dfree(buf%,drive%)
  RETURN GEMDOS(&H36,L:buf%,W:drive%)
ENDFUNC
'
' Dcreate: Neuen Ordner erzeugen
' IN:  f$ Pfadname des Ordners ohne nachfolgende Null
' OUT: RÅckgabewert  Fehlernummer
' Typische Fehlermeldungen:
' EPTHNF interner Speicher voll, keine Pfadhandles mehr, Laufwerk
'        oder Pfad nicht gefunden, '.' oder '..' als Name
' ENSMEM interner Speicher voll
' EACCDN Nur-Lese-Datei, Diskette voll, Wurzelverzeichnis voll,
'        Ordner existiert schon
' ENHNDL keine Dateihandles mehr
FUNCTION dcreate(f$)
  f$=f$+CHR$(0)
  RETURN GEMDOS(&H39,L:VARPTR(f$))
ENDFUNC
'
' Ddelete: lîscht Ordner
' IN:  f$ Ordnername ohne nachfolgende Null
' OUT: RÅckgabewert  Fehlernummer
' Typische Fehlermeldungen:
' EPTHNF interner Speicher voll, keine Pfadhandles mehr, Laufwerk
'        oder Pfad nicht gefunden
' ENSMEM interner Speicher voll
' EACCDN ungÅltiger Zugriff auf Ordner
' EINTRN interner Fehler
'
FUNCTION ddelete(f$)
  f$=f$+CHR$(0)
  RETURN GEMDOS(&H3A,L:VARPTR(f$))
ENDFUNC
'
' Dsetpath: aktuellen Pfad setzen
' IN:  f$ Pfadname (ohne 0, wie immer)
' OUT: RÅckgabewert  Fehlermeldung
' Typische Fehlermeldungen:
' ENSMEM interner Speicher voll
' ERROR  Laufwerk nicht gefunden, Pfadhandles erschîpft
'
FUNCTION dsetpath(f$)
  f$=f$+CHR$(0)
  RETURN GEMDOS(&H3B,L:VARPTR(f$))
ENDFUNC
'
' Dgetpath: Holt aktuellen Pfad
' IN:  buf% Zeiger auf Pfadnamenpuffer (mindestens 64 Byte lang)
'      Drive% Drivenummer (0=aktive Drive, 1=A...)
' OUT: RÅckgabewert  Fehlernummer
' Typische Fehlermeldungen:
' EDRIVE kein interner Speicher mehr, Laufwerk nicht gefunden, keine
'        Pfadhandles mehr
'
FUNCTION dgetpath(buf%,drive%)
  RETURN GEMDOS(&H47,L:buf%,W:drive%)
ENDFUNC
'
'
' Im folgenden alle GEMDOS-Funktionen, die nicht direkt etwas mit
' der Massenspeicherprogrammierung zu tun haben:
'
' Pterm0: Programm mit Fehlermeldung 0 (= alles klar) beenden
FUNCTION pterm0
  RETURN GEMDOS(0)
ENDFUNC
'
' Conin: Zeichen von der Tastatur holen
' OUT: L:Zeichen = $EESS00AA
'              EE = Shiftstatus der Tastatur, wenn Bit 3 von _conterm ($484)
'                   gesetzt, siehe XBIOS-Funktion 11, kbshift.
'              SS = Scancode der gedrÅckten Taste
'              AA = ASCII-Code der gedrÅckten Taste
FUNCTION conin
  RETURN GEMDOS(1)
ENDFUNC
'
' Conout: Zeichen ausgeben
' IN: W:Zeichen% = $00AA, AA=ASCII-Code
FUNCTION conout(zeichen%)
  RETURN GEMDOS(2,W:zeichen%)
ENDFUNC
'
' Cauxin: Zeichen vom RS232-Port holen
' OUT: W:Zeichen% = $??ZZ, ZZ= Zeichen
FUNCTION cauxin
  RETURN GEMDOS(3)
ENDFUNC
'
' Cauxout: Zeichen auf Hilfskanal geben
' IN:  W:Zeichen% = $00ZZ, ZZ = Zeichen
FUNCTION cauxout(zeichen%)
  RETURN GEMDOS(4,W:zeichen%)
ENDFUNC
'
' Cprnout: Zeichen auf Drucker ausgeben
' IN:  W:Zeichen% = $00ZZ, ZZ = Zeichen
' OUT: L:Fehler%  -1: Alles klar, 0: Timeout nach 30 Sekunden
FUNCTION cprnout(zeichen%)
  RETURN GEMDOS(5,W:zeichen%)
ENDFUNC
'
' Crawio: Zeichen von Tastatur holen / auf Bildschirm ausgeben
' IN:  W:Zeichen%  $FF: Zeichen von der Tastatur holen
'                  sonst: Zeichen% auf Schirm ausgeben
' OUT: RÅckgabewert   Fehlermeldung / Zeichen von der Tastatur
FUNCTION crawio(zeichen%)
  RETURN GEMDOS(6,W:zeichen%)
ENDFUNC
'
' Crawcin: Zeichen ohne Schirm-Echo von der Tastatur holen
' OUT: L:Zeichen  Tastencode wie bei Cconin
FUNCTION crawcin
  RETURN GEMDOS(7)
ENDFUNC
'
' Cnecin: Zeichen ohne Schirm-Echo von der Tastatur holen
' OUT: L:Zeichen  Tastencode wie bei Cconin
FUNCTION cnecin
  RETURN GEMDOS(8)
ENDFUNC
'
' Cconws: String ausgeben
' IN:  Buf$   String, der ausgegeben werden soll (ohne abschlieûende Null)
' OUT: RÅckgabewert  Anzahl der ausgegebenen Zeichen
FUNCTION cconws(buf$)
  buf$=buf$+CHR$(0)
  RETURN GEMDOS(9,L:VARPTR(buf$))
ENDFUNC
'
' Cconrs: String von Tastatur holen
' IN:  Buf$  genÅgend groûer Zeichenpuffer
' OUT: Mid$(Buf$,2,1)  Anzahl der eingegebenen Zeichen
'      Mid$(Buf$,3)    eingegebener String
FUNCTION cconrs(buf$)
  buf$=CHR$(LEN(buf$))+" "+buf$
  RETURN GEMDOS(10,L:VARPTR(buf$))
ENDFUNC
'
' Cconis: Tastaturpuffer-Status holen
' OUT: RÅckgabewert  0=kein Zeichen da, -1=Zeichen da
FUNCTION cconis
  RETURN GEMDOS(11)
ENDFUNC
'
' Cconos: Konsolenstatus holen
' RÅckgabewert  -1=Konsole fÅr Ausgabe bereit (wird immer geliefert)
FUNCTION cconos
  RETURN GEMDOS(16)
ENDFUNC
'
' Cprnos: Status des Druckers holen
' OUT: RÅckgabewert  -1: Drucker da, 0: Drucker hat Probleme
FUNCTION cprnos
  RETURN GEMDOS(17)
ENDFUNC
'
' Cauxis: Status des RS232-Ports holen
' OUT: RÅckgabewert  -1: Zeichen da, 0: kein Zeichen da
FUNCTION cauxis
  RETURN GEMDOS(18)
ENDFUNC
'
' Cauxos: Ausgabestatus des RS232-Ports holen
' OUT: RÅckgabewert  -1: bereits zum Senden, 0:da lÑuft nix
FUNCTION cauxos
  RETURN GEMDOS(19)
ENDFUNC
'
' Super: Zwischen User- und Supervisormodus wechseln
' IN:  L:Modus%   1: Prozessorzustand ermitteln (0=Usermodus)
'                 0: Userstack wird Supervisorstack
'                 sonst: neuer Stackpointer
' OUT: L:Sv_ssp   (Modus%=1) 0 fÅr Usermodus, -1 fÅr Supervisormodus
'                 (sonst)    Wert des alten Stackpointers
FUNCTION super(modus%)
  RETURN GEMDOS(32,L:modus%)
ENDFUNC
'
' Tgetdate: GEMDOS-Datum holen
' OUT: RÅckgabewert  Gemdos-Datum (siehe Kap. 3)
FUNCTION tgetdate
  RETURN GEMDOS(42)
ENDFUNC
'
' Tsetdate: GEMDOS-Datum setzen
' IN: Datum%   Gemdos-Datum (siehe Kap. 3)
' OUT: RÅckgabewert  0: Datum gÅltig, -1: Datumsfehler
FUNCTION tsetdate(datum%)
  RETURN GEMDOS(43,datum%)
ENDFUNC
'
' Tgettime: GEMDOS-Zeit holen
' OUT: RÅckgabewert   Gemdos-Zeit (siehe Kap. 3)
FUNCTION tgettime
  RETURN GEMDOS(44)
ENDFUNC
'
' Tsettime: GEMDOS-Zeit setzen
' IN:  Time%   Gemdos-Zeit (siehe Kap. 3)
' OUT: RÅckgabewert  -1: Fehler in der Zeitangabe
FUNCTION tsettime(time%)
  RETURN GEMDOS(45,time%)
ENDFUNC
'
' Sversion: GEMDOS-Versionsnummer holen
' OUT: RÅckgabewert  GEMDOS-Version (TOS1.0 und 1.2: immer $1300)
FUNCTION sversion
  RETURN GEMDOS(48)
ENDFUNC
'
' Ptermres: Programm beenden und resident halten
' IN:  L:Behalten%  Anzahl der Programmbytes (ab Basepageanfang),
'                   die resident bleiben sollen
'      W:Fehler%    Fehlermeldung fÅr das Åbergeordnete PRG
FUNCTION ptermres(behalten%,fehler%)
  RETURN GEMDOS(49,L:behalten%,W:fehler%)
ENDFUNC
'
' Malloc: Speicher anfordern
' IN: L:Laenge%   -1: LÑnge des grîûten Speicherblocks holen
'                  sonst: LÑnge des zu reservierenden Speicherblocks
' OUT: RÅckgabewert  Startadresse des reservierten Bereichs oder
'                  LÑnge des grîûten Speicherblocks
FUNCTION malloc(laenge%)
  RETURN GEMDOS(&H48,L:laenge%)
ENDFUNC
'
' Mfree: Allokierten Speicher freigeben
' IN:  Adresse%    Adresse eines allokierten Speicherbereichs
' OUT: RÅckgabewert    0.L: alles klar, ansonsten Fehler
FUNCTION mfree(adresse%)
  RETURN GEMDOS(&H49,L:adresse%)
ENDFUNC
'
' Mshrink: Bestimmten Speicherbereich reservieren
' IN:  Anfang%     Anfang des Speicherblocks
'      Laenge%     Laenge des Speicherblocks
' OUT: RÅckgabewert    Fehlermeldung oder 0
FUNCTION mshrink(anfang%,laenge%)
  RETURN GEMDOS(&H4A,W:0,L:anfang%,L:laenge%)
ENDFUNC
'
' Pexec: Programm nachladen und evt. starten
' IN:  Modus%    0  Programm laden und starten
'                3  Programm laden
'                4  Programm starten
'                5  Basepage anlegen
'      Pfadname% Zeiger auf Pfad- und Dateinamen (mit Null abgeschlossen)
'      Command%  Zeiger auf Kommandozeile oder Zeiger auf Basepage (Modus 4)
'      Envir%    Zeiger auf Laufzeitumgebung
' OUT: RÅckgabewert   RÅckgabewert des Programms (Modus 0 und 4) oder
'                Basepage-Adresse (Modus 3 und 5)
' Genaue Doku siehe Kapitel 2
FUNCTION pexec(modus%,pfadname%,command%,envir%)
  RETURN GEMDOS(&H4B,W:modus%,L:pfadname%,L:command%,L:envir%)
ENDFUNC
'
' Pterm: Programm mit Fehlermeldung beenden
' IN:  Rueckgabe%   RÅckgabewert fÅr aufrufendes Programm
FUNCTION pterm(rueckgabe%)
  RETURN GEMDOS(&H4C,W:rueckgabe%)
ENDFUNC
'
'
' Die GEMDOS-Fehlernummern:
'
'  0   E_OK     kein Fehler
' -1   ERROR    allgemeiner Fehler
' -32  EINVFN   ungÅltige Funktionsnummer
' -33  EFILNF   Datei nicht gefunden
' -34  EPTHNF   Pfadname nicht gefunden
' -35  ENHNDL   keine Handles mehr frei
' -36  EACCDN   kein Zugriff mîglich
' -37  EIHNDL   ungÅltige Handlenummer
' -39  ENSMEM   Speicher voll
' -40  EIMBA    ungÅltige Speicherblockadresse
' -46  EDRIVE   ungÅltige Laufwerksnummer
' -48  ENSAME   nicht die gleichen Laufwerke (bei Frename)
' -49  ENMFIL   keine weiteren Dateien (bei FSNEXT)
' -64  ERANGE   Bereichsfehler bei Dateizeiger
' -65  EINTRN   Interner Fehler
' -66  EPLFMT   Programmfile hat ungÅltiges Format
' -67  EGSBF    Speicherbereich nicht mehr vergrîûerbar
