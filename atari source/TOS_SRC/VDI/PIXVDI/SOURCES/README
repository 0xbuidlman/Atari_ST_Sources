Modern VDI History
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
9/2/92	Add to spxesc.s softblit code for scrolling up and down since
	sbescape.s (sb_scrup and sb_scrdown) is not included in roms
	yet is called in the pixel packed table in routines.s.
	Also change routine.s to make these new calls.  Rename
	old routine.s and spxesc.s as routine.902 and spxesc.902
	Note both PixHard(Soft)List and SPPixHard(Soft)List entries
	must be modified.

9/8/92	Add code at the end of hbscrup and hbscrdn in hbescape.s to 
	clear the 68030 data cache.

9/8/92	Perform above change throughout vdi wherever the blitter is
	used.
	Files modified: hbbitblt.s, hbescape.s, hbline.s, hbmono.s
			hbrect.s, hbtxtblt.s, hpxoblit.s

	
9/8/92	Added a line of code to SetMasks in file gsxasm2.s to set the 
	overlay bit in Sparrow.
	Note: This does not check if you are actually on a Sparrow.
	towns

9/10/92	changed the line of code in SetMasks for Sparrow in gsxasm2.s
	so that the rest of the Shift mode register is preserved.
	(Basically changed move.w to or.w)
	This code still doesn't check for Sparrow
	towns

10/02/92 Changed monout.c so that the user defined pattern is copied
	 in single plane mode (dsf_udpat())
	 L.T.

12/11/92 Fixed bracing problem in above fix
	 Everyone

12/11/92 Added a new parameter to the VsetMasks() call in gsxasm2.s
	 This new parameter is a WORD value overlay_flag. If it is zero,
	 the overlay _hardware_ bit is cleared. If overlay_flag is 
	 non-zero, then the _hardware_ overlay bit is set.

	 Other problems: In the Sparrow documentation, the parameters
	 for the call were backwards and the order of the or and and
	 mask operations was backwards. I will inform Greg LeBrec of 
	 these problems so that they are fixed.
	 towns


1/6/93  Changed escape.s at end_o_line:
	During a scroll, d0 gets trashed in p_sc_up().
	d0 happens to be the x position	of the cursor.
	Solution was to save and restore d0/a1.

	BEFORE:
		pea	save_it(pc)	; return to "save_it"
		bra	p_sc_up		; do the scroll

	TO:
		movem.l	d0/a1,-(sp)	; SAVE ME!
		bsr	p_sc_up		; do the scroll
		movem.l	(sp)+,d0/a1	; RESTORE ME!
		bra	save_it		; go do "save_it"

	cgee

