head	1.10;
access;
symbols;
locks
	ersmith:1.10;
comment	@ * @;


1.10
date	93.06.15.23.20.42;	author ersmith;	state Exp;
branches;
next	1.9;

1.9
date	93.06.14.23.48.02;	author ersmith;	state Exp;
branches;
next	1.8;

1.8
date	93.06.09.23.47.00;	author ersmith;	state Exp;
branches;
next	1.7;

1.7
date	93.05.12.15.50.18;	author ersmith;	state Exp;
branches;
next	1.6;

1.6
date	93.04.27.23.00.14;	author ersmith;	state Exp;
branches;
next	1.5;

1.5
date	93.04.14.22.19.54;	author ersmith;	state Exp;
branches;
next	1.4;

1.4
date	93.03.12.19.51.12;	author ersmith;	state Exp;
branches;
next	1.3;

1.3
date	93.03.10.20.12.42;	author ersmith;	state Exp;
branches;
next	;


desc
@desktop prototypes
@


1.10
log
@Minor fixups, resource file cleanup etc.
@
text
@/* pdesk.h */

#include "portab.h"
#include "deskdefi.h"
#include "deskwin.h"

/* FILE: DESKINF.C
 * --------------------------------------------------------------------
 */
VOID	m_infpath( BYTE *buffer );

BYTE	uhex_dig( REG WORD wd);

BYTE	*escan_str( REG BYTE *pcurr, REG BYTE *ppstr );

BYTE	*scan_2( REG BYTE *pcurr, REG UWORD *pwd );

BYTE	*save_2( REG BYTE *pcurr, UWORD wd );

BYTE	*save_str( REG BYTE *pcurr, REG BYTE *pstr );

BYTE	*inf_xdesk( REG BYTE *pcurr );

BYTE	*inf_parse( REG BYTE *pcurr );

VOID	inf_scan( BYTE *buffer );

VOID	read_inf( VOID );

WORD	hex_dig( REG BYTE achar );

BYTE	*save_win( REG WINDOW *win, REG BYTE *pcurr );

WORD	save_inf( WORD todisk, BYTE *path );

VOID	app_posicon( WORD colx, WORD coly, REG WORD *px, REG WORD *py );

VOID	app_mtoi( WORD newx, WORD newy, REG WORD *px, REG WORD *py );

VOID	tt_color( WORD put );







/* FILE: DESKINS.C
 * --------------------------------------------------------------------
 */
WORD	cp_iblk( WORD number, REG CICONBLK *dest_ciblk );

VOID	rm_icons( VOID );

VOID	ins_icons( VOID );

VOID	ins_wicon( VOID );

VOID	ins_drive( VOID );

VOID	cl_delay( VOID );






/* FILE: DESKMEM.C
 * --------------------------------------------------------------------
 */
WORD	apbuf_init( VOID );

WORD	mem_init( VOID );

BYTE	*lp_fill( REG BYTE *path, BYTE **buf );

WORD	lp_collect( VOID );







/* FILE: DESKMENU.C
 * --------------------------------------------------------------------
 */
VOID	ch_key( WORD i );

VOID	put_keys( VOID );

WORD	loop_find( WORD input, WORD table[], WORD *index );

WORD	key_find( WORD keycode, WORD *index );

VOID	men_ienable( OBJECT *obj, WORD which, WORD enable );

VOID	menu_verify( VOID );

VOID	sel_all( VOID );

VOID	hd_keybd( UWORD key, UWORD keystate );

VOID	foption( REG WINDOW *win );

VOID	do_scroll( WORD msgbuff[] );

VOID	do_opt( WORD msgbuff );

VOID	do_view( WORD msgbuff );

VOID	do_file( WORD msgbuff );

VOID	hd_menu( REG WORD msgbuff[] );

VOID	hd_wicon( WORD msgbuff[] );

VOID	hd_window( REG WORD msgbuff[] );

VOID	hd_msg( WORD msgbuff[] );

VOID	actions( VOID );

LONG	av_mem( VOID );






/* FILE: DESKMISC.C
 * --------------------------------------------------------------------
 */
VOID	XDeselect( OBJECT *tree, WORD obj );

VOID	m_objdraw( OBJECT *obj, WORD which, WORD start,
		   WORD x, WORD y, WORD w, WORD h );

WORD	m_sfirst( BYTE *path, WORD att );

WORD	wait_msg( WORD handle, OBJECT *obj );

WORD	c_path_alloc( BYTE *path );

WORD	hit_disk( WORD drive );

OBJECT	*get_icon( WORD item );

OBJECT	*get_tree( WORD item );

BYTE	*get_string( WORD item );

BYTE	*get_fstring( WORD item );

DIR	*get_dir( WINDOW *win, WORD item );

VOID	up_1( WINDOW *win );

VOID	up_2( WINDOW *win );

BYTE	*put_name( WINDOW *win, BYTE *name );

WORD	in_parent( OBJECT *obj, WORD child );

VOID	xinf_sset( OBJECT *obj, WORD item, BYTE *buf1 );

VOID	desk_mice( WORD state );

VOID	draw_fld( REG OBJECT *obj, WORD which );

WORD	w_draw_fld( WORD handle, REG OBJECT *obj, WORD which );

WORD	getcookie( LONG cookie, LONG *p_value );

VOID	f_str( OBJECT *obj, WORD item, LONG value );

WORD	ch_level( BYTE *path );

WORD	dr_dial_w( WORD item, WORD window, WORD elements );

VOID	do_finish( WORD item );

WORD	xform_do( OBJECT *obj, WORD which );

WORD	fmdodraw( WORD item, WORD which );

WORD	xcut_path( REG BYTE *path, BYTE *buffer, WORD cut );

WORD	cut_path( REG BYTE *path );

VOID	cat_path( BYTE *name, REG BYTE *path );

VOID	rep_path( BYTE *name, BYTE *path );

WORD	do_alert( WORD button, WORD item );

WORD	do1_alert( WORD item );

VOID	rc_center( GRECT *rec1, GRECT *rec2 );

VOID	my_itoa( UWORD number, REG BYTE *pnumstr );

VOID	fmt_time( REG UWORD time, REG BYTE *ptime );

VOID	fmt_date( UWORD date, REG BYTE *pdate );

BYTE	*bldstring( DIR *dir, REG BYTE *dst );

BYTE	*g_name( BYTE *file );

VOID	save_ext( BYTE *path, BYTE *buffer );

VOID	save_mid( BYTE *path, BYTE *buffer );

WORD	chk_par( REG BYTE *srcptr, REG BYTE *dstptr );

WORD	fill_string( BYTE *string, WORD item );






/* FILE: DESKMN.C
 * --------------------------------------------------------------------
 */
WORD	ChkTouchButton( OBJECT *tree, WORD button );

VOID	mv_desk( VOID );

VOID	mins_app( VOID );

VOID	mdesk_pref( VOID );

WORD	set_video( VOID );

VOID	XSelect( OBJECT *tree, WORD obj );

VOID	XDeselect( OBJECT *tree, WORD obj );

VOID	DoPopup( OBJECT *tree, WORD button, WORD title, OBJECT *Mtree,
		 WORD  Mmenu, WORD Mfirst, WORD *Mstart, WORD Mscroll,
         	 WORD FirstMenu, WORD FirstText, WORD Skip );

VOID	init_vtree( VOID );

WORD	DoMKItems( OBJECT *dtree, WORD button, WORD *item );

WORD	DoKeyCheck( WORD item );

WORD	get_that_size( WORD newmode );

VOID	wait_up( VOID );

/* deskact.c */
BYTE	*bld_par( WORD full, WORD style );
BYTE	*blt_argvs( BYTE *file, WORD full );
WORD	ch_obj( WORD mx, WORD my, WINDOW **win, WORD *item, WORD *type );
WORD	ch_undo( VOID );
VOID	file_op( BYTE *dest, WORD mode );
WORD	build_rect( REG OBJECT *obj, REG GRECT *rect, WORD w, WORD h );
VOID	chk_rect( REG WINDOW *win, GRECT *rect, WORD id);
VOID	chk_r2(WINDOW *win, WORD id, WORD mode, WORD x, WORD y);
VOID	frame( WORD x1, WORD y1, WORD x2, WORD y2 );
VOID	r_box( WORD id, WINDOW *win );
WORD	abs( WORD x, WORD y );
VOID	win_desk( REG WINDOW *swin, WORD sitems, WORD ditem, WORD mx, WORD my );
VOID	desk_desk( WORD sitem, WORD ditem, WORD mx, WORD my );
WORD	gh_init( REG OBJECT *obj, WORD disk );
VOID	ghost_icon( REG WORD offx, REG WORD offy, WORD disk );
VOID	hd_down( REG WORD sitem, REG WORD stype, REG WINDOW *swin );
VOID	to_desk( WORD ditem, BYTE *tail );
VOID	to_win( WORD sitem, WINDOW *swin, WORD ditem, WINDOW *dwin );
WORD	make_icon( WORD drive, WORD icon, WORD type, BYTE *text );
WORD	d_dragdrop( WORD apid, WORD winid, WORD msx, WORD msy );
WORD	ddcreate( WORD apid, WORD winid, WORD msx, WORD msy, WORD kstate,
					char *exts );
WORD	ddstry( WORD fd, BYTE *ext, BYTE *name, LONG size );
VOID	ddclose( WORD fd );
WORD	ddopen( WORD ddnam, BYTE *preferext );
WORD	ddrtry( WORD fd, BYTE *name, BYTE **fname, BYTE *whichext, LONG *size );
WORD	ddreply( WORD df, WORD ack );
VOID	rec_ddmsg( WORD msg[]  );
WORD	copypipe(WORD ifd, LONG size, BYTE *path, BYTE *filename, BYTE *ext);

/* deskapp.c */
APP		*app_icon( REG BYTE *name, WORD type, WORD *icon );
VOID	app_free( REG APP *app );
APP		*app_alloc( VOID );
APP		*app_xtype( REG BYTE *name, WORD *install );
WORD	x_wildcmp( BYTE *source, BYTE *dest );
APP		*app_key( WORD key );

/* deskbind.c */
VOID	v_show_c( WORD reset );
VOID	v_hide_c( VOID );
VOID	v_exit_cur( VOID );
VOID	v_enter_cur( VOID );
VOID	vs_clip( WORD clip_flag, WORD pxyarray[] );

/* deskbutt.c */
WORD	av_icon( VOID );
VOID	clr_dicons( VOID );
VOID	hd_button( WORD clicks, WORD kstate, WORD mx, WORD my );

/* deskdir.c */
WORD	dofiles( BYTE *s, BYTE *d, WORD code, LONG *ndirs, LONG *nfiles, 
				 LONG *tsize, WORD type, WORD multiple, WORD handle);
WORD	doright( int flag );
int		doact( VOID );
WORD	count( char *s );
WORD	countrec( VOID );
WORD	wrfile( char *fstr );
int		getinfo( char *s, char *d );
WORD	created( char *dir );
WORD	deleted( VOID );
WORD	mystrcp( char *s0, char *s1 );
VOID	chkbuf( int len, int bufsiz, char **src );
VOID	addfile( char *s, char *obj );
VOID	rmstarb( register char *src );
VOID	backdir( register char *str );
int		chkdf( char *str, int flag );
int		edname( char *src, int kind, int change );
VOID	pack( char *src, int flag );
VOID	getlastpath( register char *buf, register char *src );
VOID	updatnum( int index, int num );
VOID	updatname( int index, char *str );
VOID	updatbox( char *str );

/* deskdisk.c */
VOID	fc_start( BYTE *source, WORD op );
WORD	fc_format( OBJECT *obj );
VOID	fc_copy( OBJECT *obj );
WORD	fc_rwsec( WORD op, LONG buf, WORD nsect, WORD sect, WORD dev );
VOID	clfix( unsigned WORD cl, unsigned WORD fat[] );
VOID	fc_bar( REG OBJECT *obj, REG WORD which );
VOID	fc_draw( OBJECT *obj, WORD which, WORD wait );

/* FILE: DESKFILE.C
 * --------------------------------------------------------------------
 */
WORD 	pri_str(WORD where, BYTE *ptr);
VOID	pri_win(VOID);
VOID	newfolder( REG WINDOW *win);
VOID	sort_file(WINDOW *win, WORD mode);
VOID	set_newview(WORD index, REG WINDOW *win);
WORD 	read_files(REG WINDOW *win, WORD attr);
/*	----------------------------------------------------------
 *	deskwin.c
 */

VOID	draw_loop(WORD, OBJECT *, WORD, WORD, WORD, WORD, WORD, WORD);
VOID	winfo(WINDOW *);
WINDOW	*w_gnext(VOID);
WINDOW	*w_gfirst(VOID);
WINDOW	*w_agnext(VOID);
WINDOW	*w_agfirst(VOID);
VOID	up_2allwin(BYTE *);
VOID	up_1allwin(BYTE	*, WORD, WORD);
VOID	up_allwin(BYTE *, WORD);
WORD	up_win(WINDOW *, WORD);
VOID	bottop(VOID);
WORD	path_alloc(WORD);
VOID	free_path(VOID);
VOID	clr_allwin(VOID);
VOID	clr_xwin(WINDOW *, WORD);
VOID	srl_verbar(WINDOW *, UWORD);
VOID	srl_hzbar(WINDOW *, UWORD);
VOID	srl_row(WINDOW *, WORD, WORD);
VOID	srl_col(WINDOW *, WORD, WORD);
VOID	blt_window(WINDOW *, WORD, WORD);
VOID	view_adjust(WINDOW *);
VOID	sort_show(WORD, WORD);
VOID	view_fixmode(WINDOW *);
VOID	make_top(WINDOW *);
WORD	alloc_obj(WORD, WINDOW *);
VOID	ini_windows(VOID);
VOID	ret_win(WINDOW *);
WINDOW	*alloc_win(VOID);
WINDOW	*get_win(WORD);
VOID	open_window(WORD);
WORD	create_window(VOID);
WINDOW 	*get_top(VOID);
VOID	close_window(WORD, WORD);
VOID	free_windows(VOID);
VOID	do_redraw(WORD, GRECT *, WORD);
VOID	do_xyfix(GRECT *);
VOID	do_blit(WORD, GRECT *, WORD, WORD);
VOID	blit(WORD, WINDOW *, GRECT *, WORD);
VOID	setclip(GRECT *);
VOID	iconify_window(WORD, GRECT *);
VOID	uniconify_window(WORD, GRECT *);
VOID	set_wiconname(WINDOW *);
VOID	set_winfont(TEDINFO *, WORD);

/*	----------------------------------------------------------
 *	deskvdi.c
 */

VOID	d_ncode(VOID);
VOID	d_v_style(WORD);
VOID	d_vsl_udsty(WORD);
VOID	d_v_pline(WORD, WORD *);
VOID	d_xline(WORD, WORD *);
VOID	d_setattr(UWORD, UWORD);
VOID	desk_vopnvwk(WORD *, WORD, WORD **);
VOID	v_show_c(WORD);
VOID	v_hide_c(VOID);
VOID	v_exit_cur(VOID);
VOID	v_enter_cur(VOID);
VOID	vs_clip(WORD, WORD *);
VOID	d_v_clsvwk(VOID);
VOID	d_vro_cpyfm(WORD, WORD *, LONG *, LONG *);
VOID	vq_chcells(WORD *, WORD *);
VOID	d_v_hardcopy( VOID );
WORD	d_v_load_fonts(VOID);
VOID	d_v_unload_fonts(VOID);
WORD	d_v_font_name(WORD, BYTE *, WORD *);
WORD	d_vqt_width(WORD, WORD *, WORD *, WORD *);
WORD	d_vqt_attributes(WORD *);
WORD	d_v_setfont(WORD);
WORD	d_vst_point(WORD, WORD *, WORD *, WORD *, WORD *);
WORD	d_vst_arbpt(WORD, WORD *, WORD *, WORD *, WORD *);
WORD	d_vst_height(WORD, WORD *, WORD *, WORD *, WORD *);

/*	----------------------------------------------------------
 *	deskupda.c
 */

VOID	q_inf(VOID);
VOID	q_sea(BYTE *, BYTE *);
VOID	q_write(VOID);

/*	----------------------------------------------------------
 *	desktop.c
 */
WORD	desk_cMiNT( VOID );
VOID	desk_term(VOID);
WORD	ch_xcache(VOID);
WORD	re_icon(VOID);
WORD	ini_icon(VOID);
WORD	d_load_fonts(VOID);
WORD	build_fontmenu(VOID);
VOID	adj_menu(WORD);
WORD	ini_rsc(VOID);
WORD	chkrscver(BYTE *, BYTE); 
VOID	deskrsc(VOID);
VOID	deskmain(VOID);
VOID	ch_machine(VOID);
LONG	inq_cache(LONG);
VOID	ch_cache(WORD);
VOID	adjdcol(UWORD);
VOID	adjobjects(VOID);

/*	----------------------------------------------------------
 *	deskshow.c
 */

WORD	showfile(BYTE *, WORD);
LONG	uikey(VOID);
WORD	doui(WORD, WORD *);
VOID	bconws(BYTE *);

/*	----------------------------------------------------------
 *	deskshel.c
 */

WORD	ch_tail(BYTE *, BYTE *, BYTE *);
VOID	show_file(BYTE *);
VOID	pr_setup(VOID);
WORD	aprint(BYTE *);
WORD	printit(BYTE *);
VOID	print_file(VOID);
VOID	launch_pref(VOID);
WORD	set_dir(BYTE *);
VOID	exec_file(BYTE *, WINDOW *, WORD, BYTE *);
VOID	run_it(BYTE *, BYTE *, WORD, WORD, WORD, LONG);
VOID 	hide_windows( WORD flag );

/*	----------------------------------------------------------
 *	desksele.c
 */

VOID	x_deselect(VOID);
WORD	m_objfind(OBJECT *, WORD, WORD, WORD);
WORD	o_select(VOID);
WORD	x_select(VOID);
WORD	x_next(BYTE **, WORD *);
WORD	x_first(BYTE **, WORD *);
WORD	i_find(WORD, WORD, WINDOW **, WORD *, WORD *);
WORD	i_next(WORD, OBJECT*, WORD *);
WORD	d_sdesk(BYTE **, WORD *);

/*	----------------------------------------------------------
 *	desksear.c
 */

VOID	pos_item(WINDOW *, WORD);
VOID	sea_file(BYTE *);
WORD	rec_sea(BYTE *);
WORD	display(BYTE *);
VOID	mass_string(BYTE *);

/*	----------------------------------------------------------
 *	deskpref.c
 */

WORD	desk_chres(WORD, WORD);
VOID	col_pa_pref(VOID);

/*	----------------------------------------------------------
 *	deskopen.c
 */

VOID	open_def(VOID);
VOID	ch_path(WINDOW *);
WORD	open_subdir(WINDOW *, WORD, WORD, WORD, WORD);
VOID	show_item(VOID);
VOID	sh_sitems(VOID);
WORD	sh_disk(BYTE *);
VOID	close_path(WINDOW *);
VOID	close_top(VOID);
VOID	open_item(WORD, WORD, WINDOW *);
VOID	open_wfile(WINDOW *, WORD, BYTE *, WINDOW *, WORD);
WORD	open_disk(WORD, BYTE *, WORD);
VOID	do_box(WINDOW *, WORD, WORD, WORD, WORD);
WORD	drv_exist(WORD);
WORD	ch_drive(WORD);
VOID	upfdesk(BYTE *, BYTE *);
VOID	locate_item(WORD, BYTE *, WORD);
WORD	winsmall( WINDOW *win, WORD x, WORD y );

@


1.9
log
@Merged in Hans-Martin and Cary's changes
@
text
@@


1.8
log
@Another check in to save work.
@
text
@d262 2
a263 1
VOID	chk_rect( REG WINDOW *win, GRECT *rect, WORD id );
d356 2
d394 1
d412 1
a412 1
VOID	v_clsvwk(VOID);
d416 9
d442 2
@


1.7
log
@Check in to save work
@
text
@d280 1
a280 1
WORD	ddrtry( WORD fd, BYTE *name, BYTE *whichext, LONG *size );
d283 1
@


1.6
log
@Merged Cary's and Hans-Martin's changes
@
text
@d94 2
d387 3
d461 1
a461 1
VOID	run_it(BYTE *, BYTE *, WORD, WORD, WORD);
d515 1
a515 1

@


1.5
log
@Incorporated more single/multitasking changes.
@
text
@d405 1
d418 1
a418 1

d457 1
a457 2
VOID	hide_windows(WORD);
VOID	show_windows(WINDOW *);
a511 1
         
@


1.4
log
@Merged HMK's loadable resource stuff
@
text
@d456 2
d512 1
@


1.3
log
@Lattice port
@
text
@@
