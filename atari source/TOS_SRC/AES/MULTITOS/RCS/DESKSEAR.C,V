head	1.10;
access;
symbols;
locks
	ersmith:1.10;
comment	@ * @;


1.10
date	93.06.15.22.53.36;	author ersmith;	state Exp;
branches;
next	1.9;

1.9
date	93.06.14.23.48.02;	author ersmith;	state Exp;
branches;
next	1.8;

1.8
date	93.06.09.23.47.00;	author ersmith;	state Exp;
branches;
next	1.7;

1.7
date	93.05.12.01.40.22;	author ersmith;	state Exp;
branches;
next	1.6;

1.6
date	93.04.27.23.00.14;	author ersmith;	state Exp;
branches;
next	1.5;

1.5
date	93.04.14.22.19.54;	author ersmith;	state Exp;
branches;
next	1.4;

1.4
date	93.03.12.19.51.12;	author ersmith;	state Exp;
branches;
next	1.3;

1.3
date	93.03.10.20.12.42;	author ersmith;	state Exp;
branches;
next	1.2;

1.2
date	93.03.08.20.07.02;	author ersmith;	state Exp;
branches;
next	1.1;

1.1
date	93.02.24.23.52.46;	author ersmith;	state Exp;
branches;
next	1.0;

1.0
date	93.02.03.21.26.46;	author ersmith;	state Exp;
branches;
next	;


desc
@Desktop search for file code
@


1.10
log
@Minor resource editing, elclean ups, etc.
@
text
@/*	DESKSEAR.C		1/3/90 - 1/16/90	D.Mui		*/

/************************************************************************/
/*	New Desktop for Atari ST/TT Computer				*/
/*	Atari Corp							*/
/*	Copyright 1989,1990 	All Rights Reserved			*/
/************************************************************************/

#include "portab.h"	
#include "obdefs.h"
#include "deskdefi.h"
#include "osbind.h"
#include "deskwin.h"
#include "deskusa.h"
#include "error.h"
#include "extern.h"
#include "pdesk.h"
#include "pmisc.h"

EXTERN 	WORD	f_level;	/* local level counter same as deskdir	*/
EXTERN	WORD	f_rename;	/* window opened?			*/
EXTERN	WINDOW	*x_win;
EXTERN	WORD	x_type;
EXTERN	WORD	x_status;

/*	Position an item within a window	*/

	VOID
pos_item( win, newi )
	REG WINDOW	*win;
	WORD		newi;
{
	REG WORD	i,j,k;
	LONG		l;

	/******   adjust the vertical bar   ******/	

	j = newi / win->w_icol;

	i = win->w_items / win->w_icol;	/* maximum number of row	*/
	if ( win->w_items % win->w_icol )
	  i++;	

	if ( j >= win->w_xrow )
	  j = j - win->w_xrow + 1;
	else
	  j = 0;

	win->w_rowi = j;

	win->w_srtitem = j * win->w_icol; /* was w_srtitems, changed for LC */
	      	
	if ( i > win->w_xrow )
	{
	  l = 1000L * (LONG)j;
	  l = l / (LONG)( i - win->w_xrow );
	}
	else
	  l = 1000L;

	win->w_obj->ob_y = win->w_work.g_y;
	wind_set( win->w_id, WF_VSLIDE, (UWORD)l, 0, 0, 0 );

	/*******  adjust the horizontal bar  ********/

	win->w_obj->ob_x = win->w_work.g_x;
	win->w_obj->ob_width = win->w_work.g_w;

	i = ( newi % win->w_icol ) + 1;		/* column index		*/
	if ( i > win->w_xcol )			/* bigger than one frame*/ 
	  j = i - win->w_xcol;		/* move left		*/
	else
	  j = 0;
	    
	win->w_coli = j;		/* column index		*/	
		
	k = j * fobj.g_w;			/* move the object if necessary */
	win->w_obj->ob_x -= k;
	win->w_obj->ob_width += k;

	if ( win->w_hvicons )
	{
	  l = 1000L * (LONG)j;
	  l = l / (LONG)win->w_hvicons;
	}
	else
	  l = 1000L;

	wind_set( win->w_id, WF_HSLIDE, (UWORD)l, 0, 0, 0 );	  	
	up_2( win );
}



/*	Search a file	*/

	VOID
sea_file( filename )
	BYTE		*filename;
{
	REG WINDOW	*win;
	REG DIR		*dir;	
	REG WORD	i;	
	BYTE		*str;
	WORD		status,type,change,newi;
	BYTE		buffer[16];

	strcpy( filename, buffer );
	mass_string( filename );

	change = FALSE;
	
	if ( status = x_first( &str, &type ) )
	{
	  f_level = 0;
	  f_rename = FALSE;

	  while( status )
	  {
	    if ( ( type == DISK ) || ( type == SUBDIR ) || ( type == XDIR ) )
	    {
	      if ( *str == 'c' )
		do1_alert( NOSEA );
	      else
	      {			
	        set_dir( str );		/* set the current directory	*/
	        if ( rec_sea( filename ) )
	          goto s_ex1;
	      }
	    }
	    status = x_next( &str, &type );	
	  }

	  if ( f_rename )	/* if there is a window opened, then the */
	  {			/* search must be succeed		 */
	    do1_alert( NOMORE );
	    goto s_ex1;
	  }
	}			
	else
	{
	  if ( win = w_gfirst() )
	  {
	    if ( win->w_path[0] == 'c' )
	    {
	      do1_alert( NOSEA );
	      goto s_ex2;
	    }
	
	    dir = (DIR *) win->w_memory;
	    for ( i = 0; i < win->w_items; i++ )
	    {
	      if ( wildcmp( filename, dir[i].d_name ) )
	      {
		dir[i].d_state = SELECTED;
		if ( !change )
		  newi = i;

		change = TRUE;
	      }
	    }

	    if ( change )
	    {
	      if (win->w_iconified) {
		GRECT pc;		/* open iconified window */
		
		wind_get(win->w_id, WF_UNICONIFY, /* get old size */
			&pc.g_x, &pc.g_y, &pc.g_w, &pc.g_h);
		uniconify_window(win->w_id, &pc);
	      }

	      pos_item( win, newi );
	      goto s_ex2;
	    }		
	  }/* if window */
	}/* else	*/

	fill_string( buffer, FNOTFIND );
	goto s_ex3;
	
s_ex1:				/* if not select from top window */
	if ( ( x_type == WINICON ) && ( x_status ) )
	  clr_xwin( x_win, TRUE );
s_ex2:	  
	clr_dicons();

s_ex3:
	;
}


/*	Recursive search of a file	*/

	WORD
rec_sea( filename )
	REG BYTE	*filename;
{
	DTA		*dtabuf;	
	DTA		*savedta;
	REG WORD	status,ret;
	
	if ( !( dtabuf = (DTA *) malloc( (LONG)sizeof(DTA) ) ) )
	{
	  do1_alert( FCNOMEM );
	  return( TRUE );
	}

	savedta = (DTA *) Fgetdta();	/* save the dta buffer	*/
	Fsetdta( dtabuf );		/* set the new dta	*/

	status = FALSE;			/* not found		*/

/*	desk_mice( HOURGLASS );	*/
					/* look for matching	*/
	ret = Fsfirst( filename, 0x31 );

	while( !ret )
	{				/* matched		*/
	  if ( wildcmp( filename, dtabuf->dirfile.d_name ) )
	  {
	    if ( display( filename ) )
	    {
	      if ( do1_alert( SNEXT ) == 1 )
		 goto s_more; 
	    }

	    status = TRUE;
	    goto s_exit;
	  }
		
          ret = Fsnext();
	}

					/* Look for folder	*/
s_more:	
/*	desk_mice( HOURGLASS );	*/

	Fsetdta( dtabuf );		/* set the new dta	*/
	ret = Fsfirst( getall, 0x31 );
			
	while( !ret )
	{
	  if ( ( dtabuf->dirfile.d_att & SUBDIR ) && 
	       ( dtabuf->dirfile.d_name[0] != '.' ) )
	  {
	      path2[0] = '.';
	      path2[1] = '\\';
	      strcpy( dtabuf->dirfile.d_name, &path2[2] );
	      Dsetpath( path2 );
	      f_level++;
	      if ( f_level > COPYMAXDEPTH )
	      {
		do1_alert( STFO8DEE );
		status = TRUE;
	        break;
	      }

	      status = rec_sea( filename );
	      f_level--;
		
	      if ( !status )		/* if not found then back up one path */
	        Dsetpath( ".." );
	      else		
	        break;			/* quit	*/

	    }/* if SUBDIR	*/

	    ret = Fsnext();
	}/* while		*/

s_exit:	
	free( dtabuf );
	Fsetdta( savedta );
	return( status );		
}


/*	Display a window and highlight the items	*/

	WORD
display( filename )
	BYTE	*filename;
{
#if 0	/* NOT USED: */
	LONG		size;
#endif
	REG BYTE	*addr;
	REG WINDOW	*win;
	REG DIR		*dir;
	REG WORD	i;
	WORD		newi,ret,first;

	addr = malloc( 4096L );
	if ( addr )
	{
	  Dgetpath( addr, 0 );
	  i = strlen( addr ) + 20;
	  free( addr );		/* free the memory		*/
	  addr = malloc( (LONG)i );
	  addr[0] = Dgetdrv() + 'A';	/* get the default drive	*/
	  addr[1] = ':';
	  Dgetpath( &addr[2], 0 );	    
	  strcat( bckslsh, addr );
	  strcat( getall, addr );

	  if ( f_rename )
	  {
	     if ( c_path_alloc( addr ) )
	     {
	       win = w_gfirst();
	       strcpy( addr, win->w_path );
	       free( addr );
	       first = TRUE;
	
	       if ( open_subdir( win, 0, FALSE, FALSE, FALSE ) )
	       {
	    	 dir = (DIR *) win->w_memory;
	    	 for ( i = 0; i < win->w_items; i++ )
	    	 {	
		   if ( wildcmp( filename, dir[i].d_name ) )
		   {
		     if ( first )
		     {
		       newi = i;
		       first = FALSE;	
		     }
		     dir[i].d_state = SELECTED;
		   }
	         }
	       }/* open subdir */
	       else
		 return( FALSE );
	     }
	     else
	     {
	       free( addr );
	       return( FALSE );
	     }
	  }
	  else
	  {
	    f_rename = TRUE;
	    if ( win = alloc_win() )	/* check for window */
	    {
/*	      win->w_sizes.x = full.x;
	      win->w_sizes.y = full.y;
	      win->w_sizes.w = full.w;
	      win->w_sizes.h = full.h / 3;
	      rc_copy( &win->w_sizes, &win->w_work );
*/
	      ret_win( win );		/* return window 	*/
	      ret = open_disk( 0, addr, FALSE );
	    }
	    else
	      ret = FALSE;	

	    free( addr );

	    if ( !ret )
	      return( FALSE );

	    win = w_gfirst();
	    dir = (DIR *) win->w_memory;
	    first = TRUE;

	    for ( i = 0; i < win->w_items; i++ )
	    {	
	      if ( wildcmp( filename, dir[i].d_name ) )
	      {
		if ( first )
		{
		  newi = i;
		  first = FALSE;
		}
		dir[i].d_state = SELECTED;
	      }
	    }
	    wait_msg( -1, (OBJECT *) 0L );
	  }
	  pos_item( win, newi );
	  return( TRUE );
	    
	}/* No memory	*/
	
	return( FALSE );
}


/*	Put in wild card in the name string	*/

	VOID
mass_string( str1 )
	BYTE	*str1;
{
	REG WORD	i;
	BYTE		buffer[6];

	i = 0;	
	
	while( *str1 )
	{
	  if ( *str1 == '.' )
	  {
	    if ( i < 8 )
	    {
	      *str1++ = '*';
	      strcpy( str1, buffer );
	    }
	    else
	      strcpy( str1 + 1, buffer );

	    i = strlen( buffer );
	    if ( i < 3 )
	      buffer[i++] = '*';
	  
	    buffer[i] = 0;
	    *str1++ = '.'; 
	    strcpy( buffer, str1 );
	    return;
	  }	
	  else
	    i++;
		
	  str1++;
	}
	
	strcpy( getall, str1 );	/*  *.*	*/
}	
@


1.9
log
@Merged in Hans-Martin and Cary's changes
@
text
@@


1.8
log
@Another check in to save work.
@
text
@@


1.7
log
@Added iconification,color icons in alerts,etc.
@
text
@@


1.6
log
@Merged Cary's and Hans-Martin's changes
@
text
@d165 8
@


1.5
log
@Incorporated more single/multitasking changes.
@
text
@@


1.4
log
@Merged HMK's loadable resource stuff
@
text
@@


1.3
log
@Lattice port
@
text
@a107 2
/*	desk_mice( HOURGLASS );	*/

d181 1
a181 1
/*	desk_mice( ARROW );	*/
@


1.2
log
@REAL MultiTOS 1.01
@
text
@d9 11
a19 14
#include <portab.h>	
#include <deskobde.h>
#include <deskdefi.h>
#include <osbind.h>
#include <gemdefs.h>
#include <deskwin.h>
#include <deskusa.h>
#include <error.h>
#include <extern.h>

EXTERN	BYTE	*malloc();
EXTERN	VOID	free();
EXTERN	WINDOW	*alloc_win();
EXTERN	WINDOW	*w_gfirst();
a25 1

d51 1
a51 1
	win->w_srtitems = j * win->w_icol;
d55 2
a56 2
	  l = 1000 * j;
	  l = l / ( i - win->w_xrow );
d59 1
a59 1
	  l = 1000;
d61 1
a61 1
	win->w_obj->ob_y = win->w_work.y;
d66 2
a67 2
	win->w_obj->ob_x = win->w_work.x;
	win->w_obj->ob_width = win->w_work.w;
d77 1
a77 1
	k = j * fobj.w;			/* move the object if necessary */
d83 2
a84 2
	  l = 1000 * j;
	  l = l / win->w_hvicons;
d87 1
a87 1
	  l = 1000;
d152 1
a152 1
	    dir = win->w_memory;
d197 1
a197 1
	if ( !( dtabuf = malloc( (LONG)sizeof(DTA) ) ) )
d203 1
a203 1
	savedta = Fgetdta();		/* save the dta buffer	*/
d279 1
d281 1
d312 1
a312 1
	    	 dir = win->w_memory;
d358 1
a358 1
	    dir = win->w_memory;
d373 1
a373 1
	    wait_msg( -1 );
@


1.1
log
@1 meg floppy MultiTOS
@
text
@@


1.0
log
@MultiTOS version 1.0
@
text
@d20 1
d271 1
a271 1
	Mfree( dtabuf );
d290 2
a291 2
	size = malloc( 0xFFFFFFFFL );
	if ( size )
a292 1
	  addr = malloc( size );
d295 1
a295 1
	  Mfree( addr );		/* free the memory		*/
d309 1
a309 1
	       Mfree( addr );
d333 1
a333 1
	       Mfree( addr );
d354 1
a354 1
	    Mfree( addr );
@
