' 3D-vektormetamorfos av Christer Engman
'
'  Du kan g”ra egna figurer genom att
'  „ndra datasatserna, men varje linje
'  m†ste ha 6 koordinater (x1,y1,z1,x2,y2,z2)
'  och gl”m ej att „ndra i Procedure variables.
'
ON BREAK GOSUB exit
@init.screens
@init
DO
  EXIT IF LEN(INKEY$)
  x.rot=180*COSQ(v%/3)
  y.rot=180*SINQ(v%/2)
  z.rot=180*COSQ(v%/4)
  @swap.screens
  @draw.vector(0,0,50,x.rot,y.rot,z.rot)
  @transform
  ADD v%,10
LOOP
@exit
'
> PROCEDURE init.screens
  HIDEM
  DIM scr|(32255)
  scr1%=XBIOS(3)
  scr2%=ARRPTR(scr|())+255 AND &HFFFF00
  SGET c$
RETURN
> PROCEDURE swap.screens
  SWAP scr1%,scr2%
  ~XBIOS(5,L:scr1%,L:scr2%,-1)
  VSYNC
  SPUT c$
RETURN
> PROCEDURE init
  @set.cols
  @variables
  @init.cords
  HIDEM
RETURN
> PROCEDURE variables
  objects%=2
  lines%=9
  steps%=10
  pause%=30
  col.rng%=80
RETURN
> PROCEDURE init.cords
  DEC objects%
  points%=lines%*2
  DIM objx(objects%,points%),objy(objects%,points%),objz(objects%,points%)
  DIM x(points%),y(points%),z(points%)
  DIM linex%(1),liney%(1)
  DIM dx(objects%,points%),dy(objects%,points%),dz(objects%,points%)
  '
  FOR obj%=0 TO objects%
    FOR n%=1 TO points%
      READ objx(obj%,n%),objy(obj%,n%),objz(obj%,n%)
    NEXT n%
  NEXT obj%
  '
  INC objects%
  @init.transform
RETURN
> PROCEDURE draw.vector(x.offs,y.offs,z.offs,ax,ay,az)
  LOCAL sinx,cosx,siny,cosy,sinz,cosz
  LOCAL n%,x,y,z,x2,y2,z2,fact,e%,dist%,col%,oldz
  sinx=SINQ(ax)
  cosx=COSQ(ax)
  siny=SINQ(ay)
  cosy=COSQ(ay)
  sinz=SINQ(az)
  cosz=COSQ(az)
  FOR n%=1 TO points%
    '
    x=objx(obj%,n%)+step%*dx(obj%,n%)
    y=objy(obj%,n%)+step%*dy(obj%,n%)
    z=objz(obj%,n%)+step%*dz(obj%,n%)
    '
    x2=x*cosz+y*sinz
    y2=y*cosz-x*sinz
    z2=z*cosy+x2*siny
    x=x2*cosy-z*siny
    y=y2*cosx+z2*sinx
    z=z2*cosx-y2*sinx
    '
    ADD x,x.offs
    ADD y,y.offs
    ADD z,z.offs
    fact=200/(200+z)
    '
    e%=MOD(n%,2)
    linex%(e%)=160+x*fact
    liney%(e%)=100+y*fact
    IF e%=0
      dist%=(oldz+z-z.offs)/2
      col%=MAX(0,MIN(7,SUB(7,DIV(MUL(ADD(dist%,col.rng%),7),MUL(2,col.rng%)))))
      COLOR col%
      LINE linex%(0),liney%(0),linex%(1),liney%(1)
    ELSE
      oldz=z-z.offs
    ENDIF
  NEXT n%
RETURN
> PROCEDURE init.transform
  FOR obj%=0 TO PRED(objects%)
    nxt%=MOD(SUCC(obj%),objects%)
    FOR n%=1 TO points%
      dx(obj%,n%)=(objx(nxt%,n%)-objx(obj%,n%))/steps%
      dy(obj%,n%)=(objy(nxt%,n%)-objy(obj%,n%))/steps%
      dz(obj%,n%)=(objz(nxt%,n%)-objz(obj%,n%))/steps%
    NEXT n%
  NEXT obj%
  CLR obj%
  pause!=TRUE
RETURN
> PROCEDURE transform
  IF NOT pause!                          ! Transform
    INC step%
    IF step%=steps%
      CLR step%
      obj%=MOD(SUCC(obj%),objects%)
      pause!=TRUE
    ENDIF
  ELSE                                  ! Pause
    INC pa%
    IF pa%>pause%
      CLR pa%
      pause!=FALSE
    ENDIF
  ENDIF
RETURN
> PROCEDURE set.cols
  FOR n%=0 TO 7
    VSETCOLOR n%,n%,n%,n%
  NEXT n%
RETURN
> PROCEDURE exit
  VSETCOLOR 0,7,7,7
  VSETCOLOR 1,0,0,0
  EDIT
RETURN
'
> PROCEDURE data
  ' Square:
  DATA 0,-50,0,40,-50,0
  DATA 40,-50,0,40,0,0
  DATA 40,0,0,40,50,0
  DATA 40,50,0,0,50,0
  DATA 0,50,0,-40,50,0
  DATA -40,50,0,-40,20,0
  DATA -40,20,0,-40,-20,0
  DATA -40,-20,0,-40,-50,0
  DATA -40,-50,0,0,-50,0
  '
  ' Ship:
  DATA 0,-20,-60,70,0,-50
  DATA 70,0,-50,0,10,-60
  DATA 0,10,-60,-70,0,-50
  DATA -70,0,-50,0,-20,-60
  DATA 70,0,-50,0,0,80
  DATA 0,0,80,-70,0,-50
  DATA 0,0,80,0,-20,-60
  DATA 0,-20,-60,0,10,-60
  DATA 0,0,80,0,10,-60
RETURN
