' IMG_COMP.LST
' comprimer un graphique monochrome en graphique IMG
' --------------------------------------------------
' charger et afficher l'image
a$=SPACE$(32034)
BLOAD "photo.PI3",VARPTR(a$)
a$=RIGHT$(a$,32000)
SPUT a$
'
' largeur et hauteur de l'image ou fragment d'image …
' comprimer
w%=640
h%=400
' origine et adresse
GET x%,y%,x%+w%-1,y%+h%-1,s$
s%=VARPTR(s$)+6
'
' effacer le dernier octet lorsque la largeur n'est pas un
' nombre pair
xb%=(w%+7) DIV 8
xxb%=((w%+15) DIV 16)*2
IF xxb%>xb%
  dh%=s%
  FOR m%=y% TO (y%+h%-1)
    BMOVE h%,dh%,xb%
    ADD s%,xxb%
    ADD dh%,xb%
  NEXT m%
ENDIF
s%=VARPTR(s$)+6
'
' r‚server de la place en m‚moire pour le graphique de
' destination(img)
d$=SPACE$(32700)
' adresse
d%=VARPTR(d$)
'
ALERT 2,"Compression de l'image|en GFA Basic ou en|GFA Assembleur ?",1,"Basic|Ass.",question%
t=TIMER
'
' en GFA Basic
IF question%=1
  ' M%, Y%= compteurs de lignes
  m%=0
  y%=0
  '
  ' Z%= longueur actuelle de l'image comprim‚e
  z%=0
  '
  ' ‚crire l'en-tˆte
  a$=MKI$(1)+MKI$(8)+MKI$(1)+MKI$(372)+MKI$(w%)+MKI$(h%)
  BMOVE VARPTR(a$),d%+z%,16
  ADD z%,16
  '
  ' a$= la premiŠre ligne (la ligne … comprimer)
  ' b$= lignes 2 … n
  a$=STRING$(xb%,0)
  REPEAT
    '
    b$=STRING$(xb%,0)
    '
    ' comparer les lignes
    BMOVE s%+y%*xb%,VARPTR(a$),xb%
    REPEAT
      INC y%
      BMOVE s%+y%*xb%,VARPTR(b$),xb%
    UNTIL a$<>b$ OR y%=h% OR y%>m%+255
    '
    ' si plusieurs lignes, en-tˆte des r‚p‚titions de lignes
    ' b$= maintenant en-tˆte de r‚p‚tition de ligne
    IF y%>m%+1
      b$=MKI$(0)+CHR$(255)+CHR$(y%-m%)
      BMOVE VARPTR(b$),d%+z%,4
      ADD z%,4
    ENDIF
    '
    ' analyser la ligne
    ' b$= maintenant : ligne comprim‚e
    CLR b$
    '
    ' start%= derniŠre position de d‚part ; la v‚rification de
    ' start%
    ' permet de savoir s'il y a encore un secteur non comprim‚
    ' entre
    ' deux secteurs comprim‚s; si le secteur non comprim‚ est
    ' comprimable, mb%=zb%-1, c.….d. que le compteur d'octets
    ' saute le
    ' secteur comprim‚.
    '
    FOR mb%=1 TO xb%-2
      a%=CVI(MID$(a$,mb%,2))
      '
      ' blanc
      IF a%=0
        zb%=mb%+1
        REPEAT
          INC zb%
        UNTIL MID$(a$,zb%,1)<>CHR$(0)
        ' lorsqu'il y a plus de trois octets vides (0)
        IF zb%>mb%+2
          IF mb%>start%
            @noncomprime(start%,mb%-1)
          ENDIF
          quantite%=zb%-mb%
          ' comprimer au maximum 127 octets
          REPEAT
            b$=b$+CHR$(MIN(127,quantite%))
            SUB quantite%,127
          UNTIL quantite%<=0
          mb%=zb%-1
          start%=zb%
        ENDIF
      ENDIF
      '
      ' noir
      IF a%=65535
        zb%=m%+1
        REPEAT
          INC zb%
        UNTIL MID$(a$,zb%,1)<>CHR$(255)
        ' lorsqu'il y a plus de trois octets pleins (255)
        IF zb%>mb%+2
          IF mb%>start%
            @noncomprime(start%,mb%-1)
          ENDIF
          quantite%=zb%-mb%
          ' comprimer au maximum 127 octets
          REPEAT
            b$=b$+CHR$(MIN(127,quantite%)+128)
            SUB quantite%,127
          UNTIL quantite%<=0
          mb%=zb%-1
          start%=zb%
        ENDIF
      ENDIF
      '
      ' motif
      IF a%<>0 AND a%<>65535
        zb%=mb%
        REPEAT
          ADD zb%,2
        UNTIL CVI(MID$(a$,zb%,2))<>a%
        ' lorsque le motif se r‚pŠte plus de trois fois (words)
        IF zb%>mb%+4
          IF mb%>start%
            @noncomprime(start%,mb%-1)
          ENDIF
          b$=b$+CHR$((zb%-mb%)/2)+MID$(a$,mb%,2)
          mb%=zb%-1
          start%=zb%
        ENDIF
      ENDIF
    NEXT mb%
    '
    ' octets non comprim‚s en fin de ligne
    IF start%<=xb%
      @noncomprime(start%,xb%)
    ENDIF
    BMOVE VARPTR(b$),d%+z%,LEN(b$)
    ADD z%,LEN(b$)
    m%=y%
  UNTIL m%>=h%
ENDIF
'
' en GFA Assembleur
IF question%=2
  ass_in$=SPACE$(1130)
  ass_in%=VARPTR(ass_in$)
  BLOAD "gemimg.prg",ass_in%
  ' appel du programme en Assembleur, dans lequel
  ' s% et d% sont les adresses de l'information graphique
  ' w% et h% repr‚sentent les dimensions du graphique d'origine,
  ' en pixels
  ' valeur retourn‚e : z%=longueur du fichier comprim‚
  z%=C:ass_in%(1,L:d%,L:s%,W:w%,W:h%)
  d$=LEFT$(d$,z%)
ENDIF
'
tt=(TIMER-t)/200
t$=STR$(tt)
IF question%=1
  ALERT 1,"En GFA Basic,|la compression demande|"+t$+" secondes.",1,"OK",d%
ELSE
  ALERT 1,"En GFA Assembleur,|la compression demande|"+t$+" secondes.",1,"OK",d%
ENDIF
'
z$=STR$(z%)
ALERT 2,"Enregistrer le graphique |au format IMG ? |le fichier occupe|"+z$+" octets.",1,"oui|non",d%
IF d%=1
  BSAVE "photo.IMG",VARPTR(d$),z%
ENDIF
'
EDIT
'
PROCEDURE noncomprime(debut%,fin%)
  quantite%=fin%-debut%+1
  ' maximum de 255 octets non comprim‚s
  REPEAT
    b$=b$+CHR$(128)+CHR$(MIN(quantite%,255))+MID$(a$,debut%,MIN(quantite%,255))
    SUB quantite%,255
    ADD debut%,255
  UNTIL quantite%<=0
RETURN
