' IMG_LECT.LST
' d‚comprimer un graphique monochrome au format IMG
' -------------------------------------------------
' charger et afficher image au format IMG
file$="karin.IMG"+CHR$(0)
VOID GEMDOS(78,L:VARPTR(file$),1+2+4+16+32)
longueur%=LPEEK(GEMDOS(47)+26)
'
d$=SPACE$(longueur%)
BLOAD file$,VARPTR(d$)
' origine et adresse
d%=VARPTR(d$)
'
' d‚terminer dimensions image
w%=DPEEK(d%+12)
h%=DPEEK(d%+14)
'
' lire en-tˆte de IMG
IF RIGHT$(file$,5)=".IMG"+CHR$(0) AND DPEEK(d%+2)=8 AND DPEEK(d%+4)=1 AND DPEEK(d%+6)=2 AND w%<=640 AND h%<=400
  '
  ' s$=fichier d‚comprim‚
  s$=SPACE$(32000)
  s%=VARPTR(s$)
  '
  ALERT 2,"D‚compression de l'image|en GFA Basic|ou en GFA Assembleur ?",1,"Basic|Ass.",question%
  t=TIMER
  '
  ' en GFA Basic
  IF question%=1
    ' xb%= longueur de ligne en octets, arrondie … un octet
    ' complet
    xb%=(w%+7) DIV 8
    '
    ' z%= compteur pour image IMG
    z%=d%+16
    '
    ' zz%, p%= compteurs pour image d‚comprim‚e
    zz%=s%
    '
    ' fin%= nombre de r‚p‚titions de lignes normalement =1
    fin%=1
    '
    CLR limite%
    '
    REPEAT
      '
      ' analyser les octets un par un
      a%=PEEK(z%)
      '
      IF zz%=limite%
        ADD zz%,xb%*(fin%-1)
        fin%=1
      ENDIF
      '
      IF a%=0
        a1%=PEEK(z%+1)
        a2%=PEEK(z%+2)
        a3%=PEEK(z%+3)
        '
        ' r‚p‚tition de mot
        IF a1%>0
          p%=zz%
          FOR m%=1 TO fin%
            c$=STRING$(a1%,CHR$(a2%)+CHR$(a3%))
            BMOVE VARPTR(c$),p%,a1%*2
            ADD p%,xb%
          NEXT m%
          ADD zz%,a1%*2
          ADD z%,4
        ENDIF
        '
        ' r‚p‚tition de lignes
        IF a1%=0 AND a2%=255
          fin%=a3%
          limite%=zz%+xb%
          ADD z%,4
        ENDIF
      ENDIF
      '
      ' octets vides (0)
      IF a%>0 AND a%<128
        p%=zz%
        FOR m%=1 TO fin%
          c$=STRING$(a%,0)
          BMOVE VARPTR(c$),p%,a%
          ADD p%,xb%
        NEXT m%
        ADD zz%,a%
        INC z%
      ENDIF
      '
      ' octets pleins (255)
      IF a%>128
        SUB a%,128
        p%=zz%
        FOR m%=1 TO fin%
          c$=STRING$(a%,255)
          BMOVE VARPTR(c$),p%,a%
          ADD p%,xb%
        NEXT m%
        ADD zz%,a%
        INC z%
      ENDIF
      '
      ' s‚quences non comprim‚es
      IF a%=128
        a%=PEEK(z%+1)
        p%=zz%
        FOR m%=1 TO fin%
          BMOVE z%+2,p%,a%
          ADD p%,xb%
        NEXT m%
        ADD zz%,a%
        ADD z%,a%+2
      ENDIF
    UNTIL z%>=d%+longueur%
  ENDIF
  '
  ' en GFA Assembleur
  IF question%=2
    ass_in$=SPACE$(1130)
    ass_in%=VARPTR(ass_in$)
    BLOAD "gemimg.prg",ass_in%
    ' appel du programme en Assembleur dans lequel
    ' 2 = d‚comprimer
    ' s% et d% adresses information graphique
    ' w% et h% repr‚sentent les dimensions du graphique origine
    ' en pixels
    ' valeur retourn‚e: erreur%=0 si tout se d‚roule bien
    erreur%=C:ass_in%(2,L:s%,L:d%,w%,h%)
  ENDIF
  '
  tt=(TIMER-t)/200
  t$=STR$(tt)
  ' si aucune erreur afficher image
  IF erreur%=0
    z%=XBIOS(2)
    xb%=(w%+7) DIV 8
    FOR n%=0 TO h%-1
      BMOVE s%,z%,xb%
      ADD s%,xb%
      ADD z%,80
    NEXT n%
  ENDIF
  '
  IF question%=1
    ALERT 1,"En GFA Basic,|la d‚compression demande|"+t$+" secondes.",1,"OK",d%
  ELSE
    ALERT 1,"En GFA Assembleur,|la d‚compression demande|"+t$+" secondes.",1,"OK",d%
  ENDIF
ENDIF
'
EDIT
