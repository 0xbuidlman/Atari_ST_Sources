> FUNCTION alert_make$(typ&)
CLR b$,c$
IF a1_var$<>""
  b$=b$+a1_var$+"|"
ENDIF
IF a2_var$<>""
  b$=b$+a2_var$+"|"
ENDIF
IF a3_var$<>""
  b$=b$+a3_var$+"|"
ENDIF
IF a4_var$<>""
  b$=b$+a4_var$+"|"
ENDIF
IF a5_var$<>""
  b$=b$+a5_var$+"|"
ENDIF
IF b$<>""
  b$=LEFT$(b$,LEN(b$)-1)
ENDIF
'
IF b1_var$<>""
  c$=c$+b1_var$+"|"
ENDIF
IF b2_var$<>""
  c$=c$+b2_var$+"|"
ENDIF
IF b3_var$<>""
  c$=c$+b3_var$+"|"
ENDIF
IF c$<>""
  c$=LEFT$(c$,LEN(c$)-1)
ENDIF
'
IF symbol_var!=FALSE
  CLR alertsymbol&
ELSE
  LET alertsymbol&=sym_pop_var&
ENDIF
IF c$=""
  ~@alert_wind(1,5,"")
  RETURN ""
ELSE IF b$=""
  ~@alert_wind(1,6,"")
  RETURN ""
ENDIF
SELECT typ&
CASE 1
  alert$="ALERT "+STR$(alertsymbol&)+","""+b$+""","+STR$(defb_var&)+","""+c$+""",a|"
CASE 2
  a$="["+STR$(alertsymbol&)+"]["+b$+"]["+c$+"]"""")"
  alert$="a=FORM_ALERT("+STR$(defb_var&)+","""+a$
CASE 3
  alert$="alert("""+b$+""")"
ENDSELECT
RETURN alert$
ENDFUNC
> PROCEDURE alert_save(flag!,typ&)
IF flag!=TRUE
datei$=@fileselector$("Save alert",path$,file$,path_only!)
ENDIF
IF datei$<>"" AND @alert_make$(typ&)<>""
OPEN "O",#1,datei$
PRINT #1,@alert_make$(typ&)
CLOSE #1
@olga_update(datei$)
ENDIF
RETURN
> FUNCTION language$(nr&)
RETURN @rsc_get_text$(language&,nr&)
ENDFUNC
> PROCEDURE get_language
a!=@get_cookie("_AKP",value%)
IF a!=TRUE
lang%=SHR(value%,8)
ELSE
a=@appl_xgetinfo(3,b&,c&,d&,xm&)
IF a=0
CLR lang%
ELSE
lang%=b&
ENDIF
ENDIF
RETURN
> FUNCTION open_i(a$,nr)               ! OPEN "I",#nr&,a$
$F%
'
OPEN "I",#nr,a$
RETURN 0
ENDFUNC
> FUNCTION open_o(a$,nr)               ! OPEN "O",#nr&,a$
$F%
LOCAL fh
'
a$=a$+CHR$(0)
fh=GEMDOS(60,L:V:a$,0)           ! f_create()
'
IF fh>0
~GEMDOS(62,fh)               ! f_close()
'
OPEN "O",#nr,a$
'
RETURN 0                      ! Hat geklappt
ENDIF
'
RETURN fh                        ! Error!
ENDFUNC
' ------------------------------------------------------------------------
' WRINKLES INFO/DOCS:
'
> PROCEDURE wrinkles_info
' --------------------------------------------------------------------------
' GEMScriptCMD-Wrinkle   ½1998/2000 Holger Herzog
'
' Use this wrinkle to make your program receiving GEMScript-commands.
' Just have a look into @user_gemscriptcmd_command(). This procedure
' will be called when a command is received from a sender-program.
'
RETURN
'
' ------------------------------------------------------------------------
'
> PROCEDURE user_rsc_context_help(tree&)
SELECT tree&
'
DEFAULT
@call_st_guide("ALERTHLP.HYP","")
'
' êêwsnippetêê  - Wrinkle code: (don't change or delete this flag)
' êêwsnippetêê  - End of Wrinkle code: (don't change or delete this flag)
'
ENDSELECT
RETURN
> PROCEDURE user_rsc_var_init
'
'  You MUST set these variables (and DIMension any listbox arrays here).
'  This is read ONCE, at startup, and the corresponding dialog objects
'  will be set accordingly.
'
current_menubar&=menu&      !set this to the menu bar tree index
'
' snap_windows!=TRUE
quit_alert!=TRUE
'
LET a1_var$=""                            ! Max lenght: 0 - tree: main&
LET a2_var$=""                            ! Max lenght: 40 - tree: main&
LET a3_var$=""                            ! Max lenght: 0 - tree: main&
LET a4_var$=""                            ! Max lenght: 40 - tree: main&
LET a5_var$=""                            ! Max lenght: 40 - tree: main&
LET b1_var$=""                            ! Max lenght: 0 - tree: main&
LET b2_var$=""                            ! Max lenght: 10 - tree: main&
LET b3_var$=""                            ! Max lenght: 10 - tree: main&
LET defb_var&=1                           ! Min=1/Max=4 - tree: main&
LET outpop_var&=1                         ! Min=1/Max=2 - tree: main&
LET symbol_var!=FALSE                     ! TRUE/FALSE - tree: main&
LET sym_pop_var&=1                        ! Min=1/Max=5 - tree: main&
'
' êêwsnippetêê  - Wrinkle code: (don't change or delete this flag)
' êêwsnippetêê  - End of Wrinkle code: (don't change or delete this flag)
'
RETURN
> PROCEDURE user_rsc_interact(index&,tree&,object&,mc&,sub_me&)
'
'  <index&> is the index of this window in window_array&(index&,x)
'           If the object tree is the normal menu bar, <index&>=-1
'   <tree&> is the object tree number
' <object&> is the object that was selected (clicked on OR shortcut)
'     <mc&> is the number of clicks (1=normal/2=double clicked/1 if shortcut)
' <sub_me&> is the chosen menuitem in a popup menu
'
SELECT tree&
'
' ------------------------------------------------------------------------
'
CASE info&
SELECT object&
CASE infook&
@win_close_dialog(info&)
ENDSELECT
'
' ------------------------------------------------------------------------
'
CASE menu&
SELECT object&
CASE about&
~@win_open_dialog(2,info&,icfyicon&)
CASE neu&
LET alertwin&=@win_open_dialog(2,main&,icfyicon&)
CASE save&
@alert_save(FALSE,outpop_var&)
CASE saveas&
@alert_save(TRUE,outpop_var&)
CASE leave&
exit_program!=TRUE
CASE cut&
CASE copy&
'
ENDSELECT
'
' ------------------------------------------------------------------------
'
CASE main&
SELECT object&
CASE defb&
CASE outpop&
CASE sym_pop&
CASE preview&
d$=@alert_make$(outpop_var&)
IF d$<>""
SELECT outpop_var&
CASE 1
ALERT alertsymbol&,b$,defb_var&,c$,xm
CASE 2
a$="["+STR$(alertsymbol&)+"]["+b$+"]["+c$+"]"
~FORM_ALERT(defb_var&,a$)
CASE 3
~@alert_wind(1,7,"")
ENDSELECT
ENDIF
CASE cancel&
@win_close(alertwin&)
CASE ok&
@alert_save(TRUE,outpop_var&)
ENDSELECT
' ------------------------------------------------------------------------
'
CASE fvt_altr&
alert_result&=SUB(object&,7)
@win_close(@find_handle_from_tree(fvt_altr&))
'
' ------------------------------------------------------------------------
'
CASE tear_off&
'
@popup_win_do(index&,tree&,object&,mc&,sub_me&)
'
' ------------------------------------------------------------------------
'
CASE defbutt&
'
@popup_win_do(index&,tree&,object&,mc&,sub_me&)
'
' ------------------------------------------------------------------------
'
CASE output&
'
@popup_win_do(index&,tree&,object&,mc&,sub_me&)
'
' ------------------------------------------------------------------------
'
'
'
CASE tear_off&
'
@popup_win_do(index&,tree&,object&,mc&,sub_me&)
'
' êêwsnippetêê  - Wrinkle code: (don't change or delete this flag)
' êêwsnippetêê  - End of Wrinkle code: (don't change or delete this flag)
'
ENDSELECT
RETURN
> FUNCTION user_rsc_bubble_help$(tree&,object&)
LOCAL help_str$
help_str$=""
'
' To enter a bubble help text for an object, simply write
' help_str$="My help text"like this into its CASE entry
' (directly below it). If you do not want bubble help for
' a given object, just delete its CASE entry...
'
'
CASE info&
SELECT object&
CASE infook&
help_str$=@language$(2)
ENDSELECT
'
' ----------------------------------------------------------------------------
CASE main&
SELECT object&
'
     CASE a1&,a2&,a3&,a4&,a5&
       help_str$=@language$(1)
     CASE b1&,b2&,b3&
       help_str$=@language$(3)
'
CASE defb&
help_str$=@language$(4)
CASE outpop&
help_str$=@language$(5)
CASE symbol&
help_str$=@language$(6)
CASE sym_pop&
help_str$=@language$(7)
CASE preview&
help_str$=@language$(10)
CASE cancel&
help_str$=@language$(8)
CASE ok&
help_str$=@language$(9)
'
'
ENDSELECT
'
'
CASE tear_off&
SELECT object&
CASE icinfo&
help_str$=@language$(11)
CASE icdisk&
help_str$=@language$(12)
ENDSELECT
'
' ----------------------------------------------------------------------------
'
ENDSELECT
RETURN help_str$
ENDFUNC
> PROCEDURE user_on_open
'
' This procedure is called when the program is run, after the RSC is
' loaded and just before the main loop. You can open program windows,
' toolboxes etc. here, or  init things for your program like
' loading an *.INF or .DAT file.
'
' If run as an accessory, this procedure is called EVERY TIME
' THE ACCESSORY IS OPENED. If you need to do anything just ONCE,
' like disable menu-entries spesific to PROGRAM execution, set a global
' flag here to avoid doing things EVERY time the accessory is opened.
'
' êêwsnippetêê  - Wrinkle code: (don't change or delete this flag)
@gemscriptcmd_init                                         !êêFVW:GEMScriptCMDêê
IF dummy!=FALSE
dummy!=TRUE
@ole_init               !êêFVW:olga_libêê
ENDIF
'
~GEMDOS(281,1)               !êêFVW:long_filenamesêê
'
' êêwsnippetêê  - End of Wrinkle code: (don't change or delete this flag)
'
RETURN
> FUNCTION user_quit_ok
$F%
exit_program!=FALSE
IF acc!
RETURN TRUE
ELSE
'
' User wants to quit
' Return value: TRUE  to quit
'               FALSE to ignore
'
' The following SELECT-CASE-ENDSELECT structure is just an example.
' If you want to use an alert,  you may (should?:-) want to use
' a windowed alert...
'
' The rest of the code in this function should *NOT* be altered!
'
' êêwsnippetêê  - Wrinkle code: (don't change or delete this flag)
' êêwsnippetêê  - End of Wrinkle code: (don't change or delete this flag)
'
IF quit_alert!
SELECT @alert_wind(1,4,"")
CASE 1
RETURN TRUE
CASE 2
RETURN FALSE
ENDSELECT
ELSE
RETURN TRUE
ENDIF
'
ENDIF
ENDFUNC
> FUNCTION user_systemcheck
$F%
'
' This function is called immediately when the program is started,
' and only if the requirements in the system procedure 'SYSTEMCHECK'
' is met. Remember: The RSC is NOT YET LOADED! If you need to check
' anything special (like a cookie) before allowing the program to load
' and run, do it here.
'
' To continue, return TRUE
' To abort the program, return FALSE
'
' If you abort the program, use an alert to tell the user WHY the program
' is aborted.
'
' If you have no need to check anything, just leave this function empty,
' except of course for the 'RETURN TRUE' line below.
'
'
' êêwsnippetêê  - Wrinkle code: (don't change or delete this flag)
@get_language
IF lang%=1
LET rsc_path_name$="ALERTGER.RSC"
ELSE
LET rsc_path_name$="ALERTHLP.RSC"
ENDIF
IF @get_cookie("MgMc",value%)=TRUE
os$="MagiCMac"
ELSE IF @get_cookie("MgPC",value%)=TRUE
os$="MagiCPC"
ELSE IF @get_cookie("Gnva",value%)=TRUE
os$="Geneva"
ELSE IF @get_cookie("MTOS",value%)=TRUE
os$="MultiTOS"
ELSE IF @get_cookie("MagX",value%)=TRUE
os$="MagiC"
ELSE IF @get_cookie("nAES",value%)=TRUE
os$="N.AES"
ELSE IF @get_cookie("STEM",value%)=TRUE
os$="STemulator"
ELSE IF @get_cookie("_CPU",value%)=TRUE AND value%=0
os$="Emulator"
ELSE
os$="TOS"
ENDIF
'
'
' êêwsnippetêê  - End of Wrinkle code: (don't change or delete this flag)
'
RETURN TRUE
ENDFUNC
> PROCEDURE user_gem_messages(mx&,my&,ks&,m0&,m1&,m2&,m3&,m4&,m5&,m6&,m7&)
'
' Any message the Face Value engine do not understand, goes to this proc.
' Here, you are free to implement your own communication protocols, or
' to ignore unknown messages completly and leave it empty.
'
' <mx&> and <my&> are the mouse coordinates at the time of the message
' <ks&> is the keyboard state at the time of the message
' <m0&> to <m7&> are the actual words in the message
'
' êêwsnippetêê  - Wrinkle code: (don't change or delete this flag)
@gemscriptcmd_messages(m0&,m1&,m2&,m3&,m4&,m5&,m6&,m7&)    !êêFVW:GEMScriptCMDêê
@ole_new                !êêFVW:olga_libêê
@olga_exit              !êêFVW:olga_libêê
' êêwsnippetêê  - End of Wrinkle code: (don't change or delete this flag)
'
RETURN
'
' ------------------------------------------------------------------------
' WRINKLE CALLBACK ROUTINES: Just fill in...
'
> FUNCTION user_gemscriptcmd_command(cmd$)
$F%
' -----------------------------------------------------------------------------
' GEMScript  Command-Receive V1.0   ½1998 by Holger Herzog
'
'
' This procudre is called, when an gemscript-command
' is received. The command is stored in cmd$ (Upper-Case!).
'
' You can get the first parameter by using:
'
'  par_exist!=@gemscriptcmd_par(par$)
'
' If there's no parameter, par_exist! will be FALSE.
' The value of the parameter will be stored in par$.
' Get the next par using the same call, untill the
' function returns FALSE.
'
' Set the return-value!
' RETURN 0   Command ok (executed)
' RETURN 2   Command failed (an error occuderd)
' RETURN 3   Command unknown
'
' Example:
'
IF cmd$="APPGETLONGNAME"
@gemscriptcmd_return("Alert Help")
RETURN 0
ELSE IF cmd$="GETALERT" OR cmd$="PRINT"
IF @gemscriptcmd_par(file$)
typ&=VAL(file$)
ELSE
typ&=2
ENDIF
IF typ&>3 OR typ&<1
typ&=2
ENDIF
IF cmd$="PRINT"
LPRINT @alert_make$(typ&)
ELSE
@gemscriptcmd_return(@alert_make$(typ&))
ENDIF
RETURN 0
ELSE IF cmd$="OUTPUT"
IF @gemscriptcmd_par(file$)
output_var&=VAL(file$)
IF output_var&<0 OR output_var&>3
output_var&=1
ENDIF
ENDIF
ELSE IF cmd$="NEW"
LET alertwin&=@win_open_dialog(2,main&,-1)
RETURN 0
ELSE IF cmd$="SAVE"
IF @gemscriptcmd_par(file$)
datei$=file$
ENDIF
IF datei$=""
RETURN 2
ELSE
@alert_save(FALSE,outpop_var&)
RETURN 0
ENDIF
ELSE IF cmd$="SAVEAS"
@alert_save(TRUE,outpop_var&)
RETURN 0
ELSE IF cmd$="QUIT"
exit_program!=TRUE
RETURN 0
ELSE IF cmd$="SHUTDOWN"
exit_program!=TRUE
quit_alert!=FALSE
RETURN 0
ENDIF
'
' êêwsnippetêê  - Wrinkle code: (don't change or delete this flag)
' êêwsnippetêê  - End of Wrinkle code: (don't change or delete this flag)
'
RETURN 1      ! command unknown
ENDFUNC
