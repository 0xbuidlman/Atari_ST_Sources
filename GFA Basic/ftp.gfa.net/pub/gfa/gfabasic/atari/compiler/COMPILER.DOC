GFA v3.6 Compiler Shell
=======================

(C) 04/6/1992 # C.A.P Software
Written by Graham Leggett!

Works in low, med and high rez.

This program serves as a replacement shell for the one supplied with
the GFA v3.6 compiler. The shell will work with v3.0x, as well as
v3.5x.

This shell is both a PRG and an ACC - rename the extension of the program
to select which you want.

Selecting 'GFA v3.6 Compiler' or executing 'COMPILER.PRG' will result
in a dialog box. The various options are as follows:

Title Line: 	Click here and the copyright info is displayed. Click on
		save to save settings to COMPILER.INF in same directory
		as COMPILER.PRG/ACC.
GFA:		Click on this line and a fileselect box will appear.
		Select the name of the .GFA program you want to compile.
OBJ:		The compiler produces object code in a file with default
		filename TEST.O - enter its new filename here.
PRG:		The linker produces executable code from the object code.
		Enter exec filename here (*.PRG, *.TOS, *.TTP, *.ACC).
Library:	The default library GFA_BLIB lives on drive B: in the 
		folder COMPILER\. Select a new pathname here.
C-Obj C:	Additional C object files can be linked with TEST.O while
		linking. Enter each filename at each fileselect box. Click
		cancel when done. To clear the filenames select OK at the
		FIRST fileselect box with an empty filename.
GFA-PRG:	Clicking here copies the pathname and filename of the
		GFA line to the PRG line. If the extension in the GFA line
		is .GFA, it will be replaced with .PRG.
Compile:	Runs the compiler. If GFA_BCOM.PRG is not found, a
		fileselect box will appear, asking you to find it.
Link:		Runs the linker. Run this after the compiler. Again if not
		found, a fileselect box will ask for you to find it.
Com/link:	This is a short cut for compile, then link. It works
		the same way as the above two commands.
Exit:		A bit self explanatory, really. 

The switches:	These switches are used to alter the default settings of
		various options in the compiler. Their full meaning can
		be found in the GFA Compiler manual. Here is a brief
		summary of their effects WHEN SELECTED:

S&	SELECT/CASE parameters are two byte values, otherwise four.	
S<	Optimise SELECT/CASE for length, otherwise for time.
%3	Integer division is not converted to floating point division.
*&	Longword multiplication with 1 word MULS is used, otherwise not.
F<	Generate ENDFUNC error checking, otherwise leave out.
P>	Subroutines compiled as GFA subroutines, otherwise 68000.
I+	Enable interrupt routines, otherwise disable.
B+	Dialog box instead of bombs, otherwise bombs.
Mem XXX	Program initialises XXX bytes when loaded, otherwise takes all.
E$	Errors are shown as text. 
E#	Errors are shown as numbers.
E-	Errors are not shown at all.

G3WAIT	The compiler and linker will wait for you to press a key before
	opening a file, so that you can change disks in a single drive
	system.
G3MOVE	The compiler will move compiled procedures to disk when compiled
	instead of all at the end. Slower, but useful when memory is
	tight.

-s	This is sent to the linker, and instructs it to append the
	symbol table to the end of the program.
-t	This is also sent to the linker. This is used to compile
	programs for use in TT ram.

This program is shareware, so if you find it useful throw a fiver in
an envelope and send it to me. I'll send you some other goodies I whipped
up in GFA and machine code.

This program was written in GFA v3.5E, which is positively brilliant and
a welcome relief from the ineptness of pascal.

Registration: œ5-00
	By Graham Leggett
	# C.A.P Software
	15 Okkerneut Street
	Weltevreden Park
	1709
	South Africa

This program was tested on a 1040STFM and a 2040STE, and it worked. It
does not do anything naughty, so it should work fine on anything.
However, because I cannot test it on all machines I'm not responsible
for any trouble experienced and that's that!

While compiling/linking, the screen is cleared, including the menu on the
screen. Because the screen redraw does not redraw the menu, it seems
to disappear. 
The 1st 1920 bytes of the screen are saved first and restored afterwards,
enough to restore the menu. However I don't know how well it will work 
in the extended TT low, medium or high rez. If your menu does not reappear
properly never fear. It will still work as it is.