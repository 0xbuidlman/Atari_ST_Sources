Einige SÑtze Åber WIND_UPDATE:

WIND_UPDATE (im folgenden mit WU abgekÅrzt) dient der Synchronisation der
Bildschirmausgabe verschiedener Programme und Accessoires, und der Sperrung
von Maus- und Tastatureingaben. Ihre Verwendung merkt man auf dem Bildschirm
nicht, doch hat ihre Nichtverwendung je nach Standpunkt interessante oder
Ñrgerliche Folgen, zum Beispiel durch Dialoge hindurchgehende Mausklicks oder
Unsauberkeiten beim Bildschirmredraw.
Mit anderen Worten, diese Funktion ist WICHTIG! Unter MultiTOS und anderen
Multitaskern ist ihre Verwendung Pflicht, sonst bricht auf dem Bildschirm das
Chaos aus!

I. zu WIND_UPDATE(xxx_UPDATE):

  Durch BEG_UPDATE wird jeder AES-Prozess solange angehalten, bis kein anderer
  Prozess mehr auf den Bildschirm schreibt. Erst dann wird der Programmablauf
  fortgesetzt und der Prozeû schreibt _alleine_ auf den Bildschirm, bis er
  WIND_UPDATE(END_UPDATE) aufruft.
  ==> WIND_UPDATE(xxx_UPDATE) immer paarweise aufrufen.

  Dieses Verfahren funktioniert natÅrlich nur dann, wenn alle Prozesse
  WIND_UPDATE korrekt benutzen. D.h., daû alle Ausgaben auf den Bildschirm,
  bzw. VerÑnderungen desselben in WU(xxx_UPDATE) geklammert sein mÅssen.
  Um andere Prozesse nicht zu lange zu behindern, sollte WU nur sparsam
  genutzt werden, also nach Mîglichkeit direkt vor der Bildschirmausgabe
  aufgerufen werden und direkt danach beendet werden:
   ~WIND_UPDATE(BEG_UPDATE)
   PRINT "Hallo Welt"       ! i know, it's Bios. Nethertheless, this is only
   ~WIND_UPDATE(END_UPDATE) ! an example.

  Soweit, so einfach. Leider gibt es ein noch ein paar Probleme zu beachten:
  - WÑhrend der Auswertung der Rechteckliste (beim Redraw eines Fensters) kann
    diese unter UmstÑnden verÑndert werden, so daû der Redraw eventuell
    unvollstÑndig erfolgt. WU(xxx_update) wirkt auch dagegen und sollte also
    wie folgt verwendet werden:
      IF redrawmessage THEN
        VOID WIND_UPDATE(BEG_UPDATE)
        eigentlicher Redraw mit Auswertung der Rechteckliste
        VOID WIND_UPDATE(END_UPDATE)
      END

  - éhnliches gilt fÅr WIND_GET(x,WF_TOP,xx): Auch das oberste Fenster kann
    wechseln. Es gibt interessante Effekte, wenn wÑhrend des Bildschirmaufbaus
    ein anderes Fenster nach oben geklickt wird, deshalb:
      WIND_UPDATE(BEGUPDATE);  (* die Reihenfolge dieser beiden NICHT *)
      WIND_GET(0,WFTOP,handle,3 dummys); (* vertauschen !!*)
      IF (handle = myhandle) THEN
        zeichnen des Fensters;
      ELSE
        mîglicherweise Senden einer Redrawmessage an sich selbst;
      END;
      WIND_UPDATE(END_UPDATE)

  - Bei Diskettenfehlern wirft das System eine Alertbox auf den Bildschirm. So
    nett das auch ist, verursacht es doch ein Problem, da das AES nicht
    reentrant ist. Bîse AbstÅrze kînnen die Folge sein, wenn z.B. bei
    RSRC_LOAD keine Diskette eingelegt ist!
    Auch hier bietet WIND_UPDATE die Lîsung des Problems: Um alle  Datei- oder
    Diskoperationen, egal ob auf BIOS-, AES-, GEMDOS- oder VDI-Ebene gehîrt
    ein WIND_UPDATE(xxx_UPDATE).
    ABER: Bitte nicht das gesamte Einlesen oder Schreiben einer Datei in
    WIND_UPDATE klammern! Ich mîchte ganz gerne, wÑhrend mein Graphikprogramm
    eine lange Datei lÑdt, noch mit dem Editor arbeiten kînnen! Also bitte NUR
    die I/O-Befehle selbst schÅtzen!

  - Vor WIND_NEW muû ein WIND_UPDATE(BEG_UPDATE) stehen, nach WIND_NEW sind
    alle WIND_UPDATE's aufgehoben! Also Vorsicht.

  Faustregel:
  WIND_UPDATE(xxx_UPDATE) gehîrt:
  - um alle VerÑnderungen des Bildschirmaufbaus, die nicht nur durch
   AES-Fensterfunktionen geschehen.
  - um alle Datei/Diskoperationen. RSRC_LOAD, VST_LOAD_FONTS nicht
   vergessen!
  - um Abfragen der Rechteckliste und des Bildschirmaufbaus.
  - nicht um WIND_SET,CREATE,OPEN, CLOSE, DELETE, CALC und _nicht_ um die
   Eventfunktionen.
  - um alle bildschirmverÑndernden (ausgebenden) VDI-Funktionen.
  - Vor WIND_NEW.

II. zu WIND_UPDATE(xxx_MCTRL)

  WU(xxx_MCTRL) lenkt ALLE Maus- und Tastaturevents auf das eigene Programm
  um. Ohne WIND_UPDATE(xxx_MCTRL) gehen die Tastaturevents an den Prozess mit
  dem obersten Fenster und alle Mausevents an den "Besitzer" des betroffenen
  Bildschirmausschnitts.
  Zuviel davon ist fÅr Multitasking schÑdlich, da unter anderem auch die
  MenÅleiste gesperrt wird.

  MCTRL sollte man deshalb nur sehr sparsam verwenden, also nur dort, wo es
  sein MUSS. Dies ist der Fall bei:
  - FORM_DO-Aufrufen. Sie mÅssen in WU(x_MCTRL) geklammert sein, da sonst die
    Mausklicks an das Fenster darunter gemeldet werden - ein sehr
    "interessanter", aber auch stîrender Effekt.
  - GRAF_SLIDEBOX, GRAF_RUBBOX, GRAF_DRAGBOX.
  - Aufrufen des Fileselectors. Der ist intern nichts anderes als eine
    Dialogbox und sollte auch so behandelt werden.

  Faustregel:
  WIND_UPDATE(xxx_MCTRL) sollte immer dann verwendet werden, wenn man die
  Mausklicks auf dem gesamten Bildschirm (also nicht nur fÅr die eigenen
  Fenster) selbst verwalten will oder Dialogboxen aufruft. Auch dann ist es
  nach Mîglichkeit sehr sparsam zu verwenden.


III Typische Fehler
  - Mausklick geht durch den Dialog hindurch?
       ==> WIND_UPDATE(xxx_MCTRL) vergessen.
  - wÑhrend des Redraws kann ein anderes Fenster getopped werden und wird
    Åberzeichnet?
       ==> WIND_UPDATE(xxx_UPDATE) vergessen.
  - In der Fileselectbox kann die MenÅleiste bedient werden?
       ==> WIND_UPDATE(xxx_MCTRL) vergessen.
  - Beim Verschieben von Icons werden darunterliegende Fenster getopped?
       ==> WIND_UPDATE(xxx_MCTRL) vergessen.
  - MenÅleiste kann nicht angefahren werden?
       ==> Irgendwo im Programm oder ACC wurde WIND_UPDATE falsch benutzt, die
           Aufrufe haben sich nicht aufgehoben. Eine beliebte Ursache ist, daû
           irgendwann statt eines WIND_UPDATE(BEG_UPDATE) ein BEG_MCTRL
           getÑtigt wurde und zum ZurÅcksetzen ein END_UPDATE.
  - AbstÅrze bei fehlerhaft verlaufenen Diskoperationen, z.B. nicht
    eingelegter Diskette?
        ==> Mîglicherweise WIND_UPDATE(xxx_UPDATE) vergessen.

IV. und dann wÑre da noch WIND_NEW

  WIND_NEW lîscht nicht nur _alle_ Fenster, sondern setzt auch die
  WIND_UPDATE-Schachtelungen zurÅck. Mit anderen Worten: Die Mauskontrolle ist
  wieder freigegeben, der Bildschirm gehîrt niemanden. Vor der nÑchsten
  Ausgabe MUSS deshalb erneut WIND_UPDATE(BEG_UPDATE) aufgerufen werden.
  Es empfiehlt sich deshalb sehr, mit WIND_NEW vorsichtig umzugehen.

  *Vor* WIND_NEW *muû* ein WIND_UPDATE(BEG_UPDATE), stehen, sonst kann es zu
  Problemen kommen.

V. WIND_UPDATE im GFA-BASIC-Interpreter

  Ein hÑufig auftretendes Problem ist, daû bei ProgrammabbrÅchen
  (CTRL-ALT-SHIFT oder Fehler) WIND_UPDATE-Schachtelungen nicht beendet werden
  und beim nÑchsten Programmlauf die MenÅleiste nicht mehr anwÑhlbar ist. Es
  gibt Leute, die lîsen dieses Problem durch Reset oder RÅckkehr in den
  Desktop, und es gibt Andere, die erledigen dies geschickter.
  Bis zum Wochenende habe ich geglaubt, die zweite Gruppe wÑre zahlenmÑûig weit
  Åberlegen, aber am Sonntag hat mir dann ein Bekannter erklÑrt, daû er eben
  auch deshalb nicht unter GEM programmiert. Und ein anderer Bekannter hat 
  dazu mit dem Kopf genickt :-(

  Die Lîsung des Problem ist ziemlich simpel, man arbeitet in den
  Programmanfang
    ON ERROR GSOUB ende
    ON BREAK GOSUB ende ! oder eine andere Prozedur, die bei Programmabbruch
    '                     "ende" aufruft.
  ein. Statt eines direkten WIND_UPDATE-Aufrufs ruft man selbstgeschriebene
  Prozeduren auf, die die Anzahl der Aufrufe mitzÑhlen.
  Die Prozedur "ende" setzt dann die WIND_UPDATE's zurÅck.

Uwe Ohse @ PB

