' *** REC_LOAD.LST ***                               2nd GFA-Manual, page 20-28
> PROCEDURE rectangle_load(file$,VAR ok!,clip$)
  '
  ' *** Load GET-rectangle file$ and return as clip$
  ' *** ok!=TRUE if resolution of rectangle is same as current resolution
  ' *** Rectangle should have been saved with Procedure Rectangle_save
  ' *** Use extension .PUT for such files
  ' *** Put rectangle clip$ on screen with: PUT x,y,clip$,mode
  '
  ' *** Standard:  high.res!  med.res!  low.res!
  ' *** Procedure:  Program_exit
  '
  LOCAL bytes,bit.planes,m$,k,wrong.res!
  ok!=TRUE
  IF EXIST(file$)
    bytes={FGETDTA()+26}                        ! file-length
    clip$=SPACE$(bytes)
    BLOAD file$,VARPTR(clip$)                   ! load GET-rectangle
    bit.planes=DPEEK(ADD(VARPTR(clip$),4))
    SELECT bit.planes                           ! examine resolution
    CASE 1
      IF NOT high.res!
        wrong.res!=TRUE
        m$="|for High resolution!"
      ENDIF
    CASE 2
      IF NOT med.res!
        wrong.res!=TRUE
        m$="|for Medium resolution!"
      ENDIF
    CASE 4
      IF NOT low.res!
        wrong.res!=TRUE
        m$="|for Low resolution!"
      ENDIF
    ENDSELECT
    IF wrong.res!
      m$="  *** Error ***| |File "+RIGHT$(file$,LEN(file$)-RINSTR(file$,"\"))+m$
      ALERT 3,m$,1," OK ",k
      ALERT 3,m$,1,"Continue|Quit",k
      IF k=1
        ok!=FALSE
      ELSE
        @program_exit
      ENDIF
    ENDIF
  ELSE
    m$="  *** Error ***| |File "+RIGHT$(file$,LEN(file$)-RINSTR(file$,"\"))
    m$=m$+"|not found "
    ALERT 3,m$,1,"Continue|Quit",k
    IF k=1
      ok!=FALSE
    ELSE
      @program_exit
    ENDIF
  ENDIF
RETURN
' *********
'
