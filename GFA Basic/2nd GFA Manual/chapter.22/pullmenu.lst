' *** PULLMENU.LST ***                                2nd GFA-Manual, page 22-3
> PROCEDURE pulldown_menu
  '
  ' *** Activate pulldown-menu (from DATA-lines)
  '
  ' *** Global    :  menu$()  pulldown.exit!
  ' *** Procedures:  Dropdown_select  Key_select  Message_select
  '
  LOCAL n,i
  READ n
  IF DIM?(menu$())
    ERASE menu$()
  ENDIF
  DIM menu$(n)                          ! create menu-array
  READ menu$(0)                         ! fill menu-array
  i=0
  REPEAT
    INC i
    READ menu$(i)
  UNTIL menu$(i)="***"
  CLS
  pulldown.exit!=FALSE
  OPENW 0                               ! protect menu-line
  MENU menu$()                          ! show menu
  ON MENU GOSUB pulldown_select         ! call after item-selection
  ON MENU KEY GOSUB key_select          ! call after keypress
  ON MENU MESSAGE GOSUB message_select  ! call after message (mainly window)
  REPEAT
    ON MENU
  UNTIL pulldown.exit!
  '
  pulldown.menu.data:
  ' Dimension of menu-array
  DATA 30
  ' Insert two spaces in front of each menu-item (room for )
  ' choice1 ... = further input from user will be requested
  ' choice2  ^C = menu-item can also be selected with <Control> C
  DATA " PROGRAM "
  ' Item (1)
  DATA " About Program "
  DATA "------------------------"
  DATA 1,2,3,4,5,6
  DATA ""
  DATA " FILES "
  ' Item (11) - (15)
  DATA "  Choice 1  ^A "
  DATA "  Choice 2  ^B "
  DATA "  Choice 3  ^C "
  DATA "---------------"
  DATA "  Quit      ^Q "
  DATA ""
  DATA " OTHER "
  ' Item (18) - (19)
  DATA "  Choice 4  ^D "
  DATA "  Choice 5  ^E "
  DATA ""
  DATA "","",***
  '
RETURN
' ***
> PROCEDURE pulldown_select
  '
  ' *** Menu-item selected by user
  '
  MENU OFF
  SELECT MENU(0)
  CASE 1                        ! Item (1)
    m$="This is a |demonstration |of Procedure |Pulldown_menu"
    ALERT 1,m$,1," OK ",k
  CASE 11
    m$="   Choice 1   |"
    ALERT 0,m$,1," OK ",k
  CASE 12
    m$="   Choice 2   |"
    ALERT 0,m$,1," OK ",k
  CASE 13
    m$="   Choice 3   |"
    ALERT 0,m$,1," OK ",k
  CASE 15
    ' Quit
    pulldown.exit!=TRUE                 ! use in Procedure Pulldown_menu
    MENU KILL                           ! disable pulldown menu
    m$="Exit Procedure-demo|"
    ALERT 0,m$,1," OK ",k
  CASE 18
    m$="   Choice 4   |"
    ALERT 0,m$,1," OK ",k
  CASE 19
    m$="   Choice 5   |"
    ALERT 0,m$,1," OK ",k
  ENDSELECT
RETURN
' ***
> PROCEDURE key_select
  '
  ' *** User has pressed a key
  '
  LOCAL spec.key|,key,asci|,scan|
  spec.key|=MENU(13)
  key=MENU(14)
  asci|=BYTE(key)
  scan|=BYTE{V:key}
  SELECT spec.key|
    '
  CASE 0
    ' No special key pressed: what's the ASCII-code?
    SELECT asci|
    CASE 65,97
      ' A/a
    CASE 66,98
      ' B/b
    ENDSELECT
    '
  CASE 1,2
    ' <Shift> pressed: what's the ASCII-code?
    SELECT asci|
    CASE 65
      ' <Shift> A
    CASE 66
      ' <Shift> B
    ENDSELECT
    '
  CASE 4
    ' <Control> pressed: what's the code? (no ASCII-codes: A-Z = 1-26 !)
    SELECT asci|
    CASE 1 TO 5
      ' A - E
      m$="   Choice "+STR$(asci|)+"   |"
      ALERT 0,m$,1," OK ",k
    CASE 17                                     ! <Control> Q
      pulldown.exit!=TRUE
      MENU KILL
      m$="Exit Procedure-demo|"
      ALERT 0,m$,1," OK ",k
    ENDSELECT
    '
  CASE 8
    ' <Alternate> pressed: what's the scan-code?
    SELECT scan|
    CASE &H1E
      ' <Alternate> A/a
    CASE &H30
      ' <Alternate> B/b
    ENDSELECT
    '
  ENDSELECT
RETURN
' ***
> PROCEDURE message_select
  '
  ' *** Window-message from user
  '
  LOCAL w
  w=MENU(4)               ! window-handle
  SELECT MENU(1)
  CASE 20
    ' redraw rectangular part of screen
  CASE 21
    ' open window
  CASE 22
    ' close window
  CASE 23
    ' full size window
  CASE 24
    ' arrow or slider was clicked
  CASE 25
    ' horizontal sliderbox moved
  CASE 26
    ' vertical sliderbox moved
  CASE 27
    ' change window-size
  CASE 28
    ' change window-position
  ENDSELECT
RETURN
' *********
'
