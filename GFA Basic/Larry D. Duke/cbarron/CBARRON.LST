INLINE rsc%,3268
'
PROCEDURE load_resource
  obj_field%=CARD{rsc%+2}+rsc%          ! object field address
  tedinfo_pos%=CARD{rsc%+4}+rsc%        ! tedinfo field address
  free_strings%=CARD{rsc%+10}+rsc%      ! free strings address
  tied_strings%=CARD{rsc%+12}+rsc%      ! tied strings address
  tree_pointer%=CARD{rsc%+18}+rsc%      ! tree pointer address
  global%={GB+4}                        ! address of global array
  {global%+10}=tree_pointer%            ! Pointer Address to Global(5)
  ABSOLUTE num_objs&,rsc%+20            ! number of objects
  ABSOLUTE num_trees&,rsc%+22           ! number of trees
  ABSOLUTE num_tedinfos&,rsc%+24        ! number of tedinfos
  ABSOLUTE num_strings&,rsc%+30         ! number of strings
  DIM tree%(num_trees&-1)               ! dimension only what you need
  '
  ' ****************************convert tedinfos first
  '
  IF {tree_pointer%}<&HFFFF             ! if initialized, will be >$FFFF
    IF num_tedinfos&                    ! if tedinfos in resource file
      FOR x&=1 TO num_tedinfos&
        {tedinfo_pos%}=rsc%+{tedinfo_pos%}      ! set first address
        {4+tedinfo_pos%}=rsc%+{4+tedinfo_pos%}  ! set second address
        {8+tedinfo_pos%}=rsc%+{8+tedinfo_pos%}  ! set third address
        ADD tedinfo_pos%,28                     ! point to next tedinfo
      NEXT x&
    ENDIF
    '
    ' ****************************now do objects
    '
    of%=obj_field%
    FOR x&=1 TO num_objs&
      SELECT BYTE{of%+7}                ! only set those that need it
      CASE 21,22,26,28 TO 32
        {of%+12}=rsc%+{of%+12}          ! set OB_SPEC of the object
      ENDSELECT
      ADD of%,24                        ! point to next object
    NEXT x&
    '
    ' ****************************** call ob_fix to set objects to resolution
    '
    FOR x&=0 TO num_objs&-1
      ~RSRC_OBFIX({tree_pointer%}+rsc%,x&)      ! set for resolution
    NEXT x&
    '
    ' *****************************convert tree start addresses
    '
  ENDIF                                 ! go here if already initialized
  FOR x&=0 TO num_trees&-1
    IF {tree_pointer%}<&HFFFF           ! initialized?
      {tree_pointer%}={tree_pointer%}+rsc%      ! nope - add resource offset
    ENDIF
    tree%(x&)={tree_pointer%}           ! set array while we're here
    ADD tree_pointer%,4                 ! point to next address pointer
  NEXT x&
RETURN
'
' **********************************************************************
'
' The preceding commented code should show you what I do for a generic
' embedded resource file.  I put the resource in the inline statement at
' the beginning of the program (easy to find when I need to reload it)
' with the address defined as rsc%.
'
' The global% variable is a pointer to the global array in the AES par-
' ameter block.  Since RSRC_LOAD() sets this address, I figured that I
' would do the same.  Works fine without it, but is more complete with
' this included.  Could help with RSRC_GADDR() or some other GEM routine
' that I am not using.
'
' Haven't had any problems with the RSRC_OBFIX() routine at all.  Seems to
' work on every program that I have done this to without fail.  Notice that
' I only do this for tree%(0), but the loop continues until ALL objects
' in ALL trees are set correctly.
'
' I pulled out the old AES book to figure out how to do it.  Lots of 2 and
' 3 bomb errors later, this is what came out.
'
' And MICHTRON said you couldn't do it when they first released 3.0!
'
' See ya,
'
' Larry D. Duke
'
' **********************************************************************
