' IMAGE.LST
' Pour ‚crire des programmes tournant quelle que soit la r‚solution
' -----------------------------------------------------------------
' r‚server de la place en m‚moire pour le programme
RESERVE 100000
'
' Initialisation du degr‚ de r‚solution
' d‚terminer le degr‚ de r‚solution
resolution%=XBIOS(4)
' nombre maxi de colonnes curseur
x_cursor%=INT{L~A-44}+1
' nombre maxi de lignes curseur
y_cursor%=INT{L~A-42}+1
' r‚solution horizontale
x_dim%=INT{L~A-12}
' facteur de conversion en X
xt=x_dim%/640
' r‚solution verticale
y_dim%=INT{L~A-4}
' facteur de conversion en Y
yt=y_dim%/400
' nombre de niveaux de bit
bit_pl%=INT{L~A}
' largeur d'un caractŠre
x_caractere%=INT{L~A+80}
' hauteur d'un caractŠre
y_caractere%=INT{L~A+82}
' largeur pixel en micromŠtre
x_mue%=WORK_OUT(3)
' hauteur pixel en micromŠtre
y_mue%=WORK_OUT(4)
' nombre de couleurs affichables simultan‚ment
couleurs%=WORK_OUT(13)
' nombre total de couleurs utilisables
coul_total%=WORK_OUT(39)
'
'
DIM menu$(50),s%(8),d%(8),p%(8)
'
' simuler un autre degr‚ de r‚solution ! sim
' 0 = pas de simulation ! sim
' 1 = simuler basse r‚solution pour SC1224 ! sim
' 2 = simuler moyenne r‚solution pour SC1224 ! sim
' 3 = simuler haute r‚solution pour SM124 ! sim
' 4 = simuler haute r‚solution pour MatScreen/M110 ! sim
'
simulation%=1 ! sim
IF simulation%>0 ! sim
  @resolution_simulation ! sim
  BOX 0,0,x_dim%,y_dim% ! sim
  BOX 0,0,x_dim%,y_dim%*2 ! sim
  LINE x_dim%/2,0,x_dim%/2,y_dim% ! sim
ENDIF ! sim
'
' r‚server place m‚moire UNDO pour l'‚cran
h%=dim%*y_dim%/8*bit_pl%
image_adr%=MALLOC(-1)
IF image_adr%>=h%
  image_adr%=MALLOC(h%)
ELSE
  ALERT 1,"|Attention: place m‚moire | insuffisante.",1," FIN ",d%
  EDIT
ENDIF
'
FOR i=0 TO 50
  READ menu$(i)
  @menu_simulation ! sim
  EXIT IF menu$(i)="***"
NEXT i
'
menu$(i)=""
menu$(i+1)=""
'
DATA Bureau,  Info,-------------------
DATA 1,2,3,4,5,6,""
DATA Fichier,-Charger,-Enregistrer,---, FIN,""
DATA Divers,  1 Fileselect ,  2 32034 load,  3 SGET SPUT
DATA  4 Efface img, 5 Efface m‚m, 6 Efface frag, 7 Variable, 8 Centre, 9 Print
DATA  10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23,""
DATA ***
MENU menu$()
'
ON MENU GOSUB menu
'
DO
  ON MENU
LOOP
'
PROCEDURE menu
  MENU OFF
  IF simulation%>0 ! sim
    PRINT AT(1,y_cursor%-1);menu$(MENU(0))'MENU(0), ! sim
  ENDIF
  SELECT MENU(0)
  CASE 1
    @info
  CASE 14
    @fin
  CASE 17
    @fileselect
  CASE 18
    @degas
  CASE 19
    @sget_sput
  CASE 20
    @effacer_image
  CASE 21
    @effacer_memoire
  CASE 22
    @effacer_fragment
  CASE 23
    @variable
  CASE 24
    @centre
  CASE 25
    @print
  ENDSELECT
  MENU menu$()
RETURN
'
PROCEDURE info
  ALERT 1,"|Ce programme peut tourner dans| TOUS les degr‚s de r‚solution ",1,"CONFIRME",d%
RETURN
'
PROCEDURE fin
  ALERT 2,"|Sortir du programme?",1,"Oui|Non",d%
  IF d%=1
    MENU KILL
    ' lib‚rer la place m‚moire UNDO
    VOID MFREE(image_adr%)
    EDIT
  ENDIF
RETURN
'
PROCEDURE menu_simulation ! sim
  INC e%
  l%=LEN(menu$(i))
  IF l%=0
    surface%=(e%-2)*ll%
    IF e%>25
      ALERT 3,"|Le menu "+STR$(m%)+" compte plus|de 23 items!",1,"CONFIRMER",d%
    ENDIF
    IF surface%>361
      ALERT 3,"|Le menu "+STR$(m%)+" est trop grand|pour la basse r‚solution!",1,"CONFIRMER",d%
    ENDIF
    INC m%
    CLR ll%,e%
  ENDIF
  ll%=MAX(ll%,l%)
RETURN
'
PROCEDURE resolution_simulation ! sim
  ' simuler un autre degr‚ de r‚solution ! sim
  ' 1 = simuler basse r‚solution pour SC1224 ! sim
  ' 2 = simuler moyenne r‚solution pour SC1224 ! sim
  ' 3 = simuler haute r‚solution pour SM124 ! sim
  ' 4 = simuler haute r‚solution pour MatScreen/M110 ! sim
  SELECT simulation%
  CASE 1
    resolution%=0
    x_cursor%=40
    y_cursor%=25
    x_dim%=320
    xt=0.5
    y_dim%=200
    yt=0.5
    bit_pl%=4
    x_caractere%=8
    y_caractere%=8
    x_mue%=372
    y_mue%=338
    couleurs%=16
    coul_total%=512
  CASE 2
    resolution%=1
    x_cursor%=80
    y_cursor%=25
    x_dim%=640
    xt=1
    y_dim%=200
    yt=0.5
    bit_pl%=2
    x_caractere%=8
    y_caractere%=8
    x_mue%=372
    y_mue%=169
    couleurs%=4
    coul_total%=512
  CASE 3
    resolution%=2
    x_cursor%=80
    y_cursor%=25
    x_dim%=640
    xt=1
    y_dim%=400
    yt=1
    bit_pl%=1
    x_caractere%=8
    y_caractere%=16
    x_mue%=372
    y_mue%=372
    couleurs%=2
    coul_total%=2
  CASE 4
    resolution%=2
    x_cursor%=160
    y_cursor%=60
    x_dim%=1280
    xt=2
    y_dim%=960
    yt=2.4
    bit_pl%=1
    x_caractere%=8
    y_caractere%=16
    x_mue%=372
    y_mue%=372
    couleurs%=2
    coul_total%=2
  ENDSELECT
  VTAB 3
  PRINT " R‚solution",,resolution%
  PRINT " Nombre maxi de colonnes curseur",x_cursor%
  PRINT " Nombre maxi de lignes curseur",y_cursor%
  PRINT " R‚solution horizontale",x_dim%
  PRINT " Facteur de conversion en X",,xt
  PRINT " R‚solution verticale",y_dim%
  PRINT " Facteur de conversion en Y",,yt
  PRINT " Nombre de niveaux de bit",bit_pl%
  PRINT " Largeur d'un caractŠre",x_caractere%
  PRINT " Hauteur d'un caractŠre",y_caractere%
  PRINT " Largeur pixel en micromŠtre",x_mue%
  PRINT " Hauteur pixel en micromŠtre",y_mue%
  PRINT " Nombre de couleurs affichables simultan‚ment",couleur%
  PRINT " Nombre total de couleurs utilisables",coul_total%
RETURN
'
PROCEDURE fileselect
  ' rechercher le num‚ro de la version du systŠme d'exploitation
  ' Blitter-TOS: 4864, TOS 1.4: 6376 (?)
  titre$="DEMONSTRATION DE FILESELECT"
  IF GEMDOS(48)=4864
    GET 0,0,x_dim%-1,y_caractere%+2,aide$
    PUT 0,0,aide$,0
    LINE 0,y_caractere%+2,x_dim%-1,y_caractere%+2
    '
    ' PRINT AT(X,Y) Simulation ! sim
    @print_at(x_cursor%/2-LEN(titre$)/2+1,1,titre$,resolution%) ! sim
    ' PRINT AT(x_cursor%/2-LEN(titre$)/2+1,1);titre$
    FILESELECT #titre$,"\*.*","",file$
    PUT 0,0,aide$
  ELSE
    FILESELECT #titre$,"\*.*","",file$
  ENDIF
RETURN
'
PROCEDURE print_at(x%,y%,texte$,xbios_4%) ! sim
  ' simulation de la commande PRINT AT
  GRAPHMODE 2
  IF xbios_4%=2
    DEFTEXT 1,0,0,13
    TEXT x%*x_caractere%-x_caractere%,y%*y_caractere%-3,texte$ ! Haute r‚s.
  ELSE
    DEFTEXT 1,0,0,6
    TEXT x%*x_caractere%-x_caractere%,y%*y_caractere%-2,texte$ ! Moy. et basse r‚s.
  ENDIF
RETURN
'
PROCEDURE degas
  ' charger et afficher une image Degas
  ' Une parfaite simulation de l'affichage d'une image dans une
  ' fausse r‚solution nous co–terait trop de travail, mais cela
  ' fonctionnerait! voir aussi chapitre "chargement de fichier"
  h$=SPACE$(32034)
  h%=V:h$
  BLOAD "PHOTO.PI3",h%
  ' affichage seulement si image correspond au degr‚ de r‚solution
  IF resolution%=CARD{h%}
    ' d‚caler l'image
    @bitblt_sd(h%+34,640,400,l,image_adr%,x_dim%,y_dim%)
    @bitblt_p(0,0,639,399,0,0,3)
    '
    @bitblt_sd(image_adr%,x_dim%,y_dim%,1,XBIOS(2),x_dim%,y_dim%)
    @bitblt_p(0,0,x_dim%-1,y_dim%-1,0,0,3)
  ELSE
    ALERT 1,"|L'image ne correspond pas au|degr‚ de r‚solution.",1," OK ",d%
  ENDIF
RETURN
'
PROCEDURE sget_sput
  '
  ' simulation de SGET: sauvegarde du contenu de l'‚cran
  @bitblt_sd(XBIOS(2),x_dim%,y_dim%,1,image_adr%,x_dim%,y_dim%)
  @bitblt_p(0,0,x_dim%-1,y_dim%-1,0,0,3)
  '
  ' … titre de test: modification d'une partie de l'‚cran
  DEFFILL 1,2,16
  PBOX 50,50,150,150
  VOID INP(2)
  '
  ' restaurer le contenu de l'‚cran (simulation de SPUT)
  @bitblt_sd(image_adr%,x_dim%,y_dim%,1,XBIOS(2),x_dim%,y_dim%)
  @bitblt_p(0,0,x_dim%-1,y_dim%-1,0,0,3)
RETURN
'
PROCEDURE effacer_image
  CLS
RETURN
'
PROCEDURE effacer_memoire
  ' mode p%(8)=0 signifie effacer
  @bitblt_sd(image_adr%,x_dim%,y_dim%,1,image_adr%,x_dim%,y_dim%)
  @bitblt_p(0,0,x_dim%-1,y_dim%-1,0,0,0)
RETURN
'
PROCEDURE effacer_fragment
  ' charger image
  @bitblt_sd(image_adr%,x_dim%,y_dim%,1,XBIOS(2),x_dim%,y_dim%)
  @bitblt_p(0,0,x_dim%-1,y_dim%-1,0,0,3)
  '
  ' effacer une partie de l'‚cran
  DEFFILL 1,0
  BOUNDARY 0
  PBOX 160,50,260,150
  '
  ' sauvegarder le fragment effac‚
  @bitblt_sd(XBIOS(2),x_dim%,y_dim%,1,image_adr%,x_dim%,y_dim%)
  @bitblt_p(0,0,x_dim%-1,y_dim%-1,0,0,3)
RETURN
'
PROCEDURE variable
  FOR m%=10 TO 40 STEP 10
    BOX m%*xt,m%*yt,x_dim%-m%*xt,y_dim%-m*yt
  NEXT m%
RETURN
'
PROCEDURE centre
  ' taille fixe, centr‚ dans tout degr‚ de r‚solution
  w%=200
  h%=100
  DEFFILL 1,0
  BOUNDARY 1
  PBOX (x_dim%-w%)/2,(y_dim%-h%)/2,(x_dim%-w%)/2+w%,(y_dim%-h%)/2+h%
  BOX (x_dim%-w%)/2+2,(y_dim%-h%)/2+2,(x_dim%-w%)/2+w%-2,(y_dim%-h%)/2+h%-2
  BOX (x_dim%-w%)/2+3,(y_dim%-h%)/2+3,(x_dim%-w%)/2+w%-3,(y_dim%-h%)/2+h%-3
RETURN
'
PROCEDURE print
  z%=0
  CLS
  VTAB 3
  REPEAT
    FOR x%=5 TO x_cursor% STEP 10
      INC z%
      PRINT TAB(x%);z%;
    NEXT x%
    PRINT
    IF CRSLIN=y_cursor%-2
      PRINT
      PRINT "   - PLUS -"
      LINE x_dim%,0,x_dim%,y_dim% ! sim
      VOID INP(2)
      CLS
      VTAB 3
    ENDIF
  UNTIL z%>=400
RETURN
'
PROCEDURE bitblt_sd(s0%,s1%,s2%,s5%,d0%,d1%,d2%)
  s%(0)=s0%
  s%(1)=s1%
  s%(2)=s2%
  s%(3)=s1%/16
  s%(5)=s5%
  d%(0)=d0%
  d%(1)=d1%
  d%(2)=d2%
  d%(3)=d1%/16
  d%(5)=s5%
RETURN
'
PROCEDURE bitblt_p(p0%,p1%,p2%,p3%,p4%,p5%,p8%)
  p%(0)=p0%
  p%(1)=p1%
  p%(2)=p0%+p2%
  p%(3)=p1%+p3%
  p%(4)=p4%
  p%(5)=p5%
  p%(6)=p4%+p2%
  p%(7)=p5%+p3%
  p%(8)=p8%
  BITBLT s%(),d%(),p%()
RETURN
