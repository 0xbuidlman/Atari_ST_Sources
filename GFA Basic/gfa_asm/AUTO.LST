' fichier: auto.lst
'
' course de voiture
'
GOSUB init ! d‚finition des paramŠtres de jeu...
GOSUB course ! et en voiture!
'
'
DEFWRD "a-z"
' proc‚dures:
' init()
' pour d‚finir l'ensemble des paramŠtres du jeu
' course()
' pour planifier le d‚roulement du prochain tron‡on de route et
' le transmettre pour traitement
' route()
' lancer les diff‚rentes phases de cr‚ation d'un nouveau tron‡on de route
' difficile()
' red‚finition des paramŠtres du jeu (largeur de la route, fr‚quence
' des obstacles, vitesse)
' construire()
' dessin (construction) d'un nouveau tron‡on de route
' contresens()
' gestion du trafic … contre-sens
'
PROCEDURE init
  ass$=SPACE$(500) ! insertion du programme en Assembleur
  ass%=VARPTR(ass$)
  BLOAD "finescr3.pRG",ass%
  '
  ' d‚finir les paramŠtres de d‚part
  '
  maxspeed=10
  retreci=1 ! importance du pas de r‚tr‚cissement
  degre=0 ! probabilit‚ d'intervention d'un v‚hicule … contre-sens
  degredifficulte=100 ! plus le nombre s'‚lŠve, plus diminue la probabilit‚ maximale de voir un obstacle survenir
  obstalargr=8 ! largeur de l'obstacle
  obstalongr=8 ! longueur de l'obstacle
  obstacnt=-1 ! pas encore d'obstacle
  speed=1 ! vitesse mesur‚e en pixels
  distance=0 ! distance parcourue en pixels
  gauche=170 ! d‚but de la piste de voiture
  droite=470
  '
  DEFFILL 1,1,-1 ! pr‚parer la route
  GRAPHMODE 1
  PBOX gauche,0,droite,399
RETURN
'
PROCEDURE course
  DO
    deltay=RND(1)*800 ! calculer la nouvelle position de la route
    deltax=(638-droite+gauche)*RND(1)-gauche+1 ! IF pour ‚viter des virages trop reserr‚s
    IF ABS(deltax)*640*speed/(maxspeed*(droite-gauche))>deltay
      deltax=0
      deltay=10*RND(1)
    ENDIF
    ADD deltay,20
    '
    base=gauche ! en partant de la position de base, tirer une droite
    IF RND(1)<=0.5 ! passant par le nouveau point terminal
      FOR y=0 TO deltay STEP speed ! arrondir cette droite par une multiplication
        nouvgauche=base+deltax*SIN(y/deltay*PI/2) ! par COS ou SIN, ce qui donne
        nouvdroite=droite+nouvgauche-gauche ! des virages plus esth‚tiques
        GOSUB route
        ADD distance,speed
      NEXT y
    ELSE
      FOR y=0 TO deltay STEP speed
        nouvgauche=base+deltax*(1-COS(y/deltay*PI/2))
        nouvdroite=droite+nouvgauche-gauche
        GOSUB route
        ADD distance,speed
      NEXT y
    ENDIF
  LOOP
RETURN
'
PROCEDURE route
  VOID C:ass%(speed) ! proc‚dure de d‚filement
  GOSUB difficile ! ‚lever le degr‚ de difficult‚
  GOSUB construire ! dessin de la route
  GOSUB contresens ! dessin ‚ventuel de v‚hicules circulant en contre sens
RETURN
'
PROCEDURE difficile
  '
  ' Nouveaux paramŠtres de jeu:
  ' retrecissement: nombre de pixels retranch‚s … droite et … gauche
  ' cette variable est commune avec la proc‚dure "construire"
  ' speed: nouvelle vitesse de d‚filement
  ' grad: probabilit‚ de voir survenir un nouvel obstacle
  '
  retrecissement=0
  IF (distance AND 63)=0
    IF speed<maxspeed AND speed*RND(1)<2*maxspeed
      INC speed
    ENDIF
    IF (droite-gauche-retreci-retreci)*RND(1)>3*obstalargr
      retrecissement=retreci
    ELSE
      degre=degre+(16-degre)*(RND(1)-0.2)
    ENDIF
    IF RND(1)<0.2 AND speed+speed>maxspeed
      SUB speed,2
    ENDIF
    IF RND(1)*degre>4 AND droite-gauche<8*obstalargr
      retrecissement=-retreci-retreci
    ENDIF
    IF (droite-gauche)<RND(1)*20*obstalargr
      degre=degre*RND(1)
    ENDIF
  ENDIF
RETURN
'
PROCEDURE construire
  ADD base,retrecissement ! en cas de r‚tr‚cissement, correction de la
  ADD nouvgauche,retrecissement ! base, du bord gauche et du bord droit
  SUB nouvdroite,retrecissement
  IF nouvgauche<>gauche ! en cas de d‚placement du bord gauche, actualiser
    IF nouvgauche<gauche ! l'‚cran en cons‚quence (retrancher ou rajouter
      DEFFILL 1,1,-1 ! un segment de route le long du bord gauche)
      PBOX nouvgauche,399-speed,gauche,399
    ELSE
      DEFFILL 0,1,-1
      PBOX gauche,399-speed,nouvgauche-1,399
    ENDIF
  ENDIF
  IF nouvdroite<>droite ! mˆme chose pour le bord droit de la route
    IF nouvdroite>droite
      DEFFILL 1,1,-1
      PBOX droite,399-speed,nouvdroite,399
    ELSE
      DEFFILL 0,1,-1
      PBOX nouvdroite+1,399-speed,droite,399
    ENDIF
  ENDIF
  droite=nouvdroite ! noter les nouveaux bords (droit et gauche)
  gauche=nouvgauche
RETURN
'
PROCEDURE contresens
  IF RND(1)*degredifficulte<=degre AND obstacnt<0 ! En l'absence ‚ventuelle
    obstapos=gauche+RND(1)*(droite-gauche-obstalargr) ! d'obstacle, en proposer
    obstacnt=obstalongr ! un au traitement
  ELSE
    IF obstacnt>=0 ! en cas de pr‚sence d'un obstacle, ne pas le
      IF obstapos<gauche ! laisser sortir de la route
        obstapos=gauche !
      ENDIF
      IF obstapos+obstalargr>=droite
        obstapos=droite-obstalargr
      ENDIF
    ENDIF
  ENDIF
  '
  IF obstacnt>=0 ! s'il convient de g‚rer un obstacle,
    IF obstacnt>speed ! en dessiner la partie visible
      DEFFILL 0,1,-1
      PBOX obstapos,399-speed,obstapos+obstalargr,399
      SUB obstacnt,speed
    ELSE
      IF obstacnt>0 ! lorsque speed > reste de l'obstacle, dessiner ce reste
        DEFFILL 0,1,-1 ! et mettre compteur = 0
        PBOX obstapos,399-speed,obstapos+obstalargr,399-speed+obstacnt
        obstacnt=0
      ELSE
        DEFFILL 1,1,-1 ! lorsque compteur = 0, dessiner fin de l'obstacle
        PBOX obstapos,399-speed,obstapos+obstalargr,399
        obstacnt=-1 ! et marquer l'obstacle comme ‚tant termin‚
      ENDIF
    ENDIF
  ENDIF
RETURN
