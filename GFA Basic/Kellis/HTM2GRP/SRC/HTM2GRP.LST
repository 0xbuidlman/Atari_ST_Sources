'   HTM2GRP  v0.2
'   HOTLIST TO THING .GRP file
'   (kellis/1999)
'   kellis@leading.net
'   FREEWARE
'   --------------------------------
$m10240         ! use 10k
compiled!=BYTE{BASEPAGE+256}<>96        ! determines if code is compiled or interpreted
IF NOT compiled!        ! if code ran from editor, reserve 10k
  RESERVE 1024*10
ENDIF
DIM thing$(15)
ap_id&=APPL_INIT()      ! declares our application to the AES/GEM
IF ap_id&=-1            ! problem? -- >quit
  ~APPL_EXIT()
  END
ENDIF
program_path$=CHR$(65+GEMDOS(25))+":"+DIR$(0)+"\"    ! path of my prog once ran. (dynamic)
'        Find the $HOME and $BROWSER env variable, and set home$ & browser$ to it
~SHEL_ENVRN(a%,"HOME")
IF a%>0
  home$=CHAR{a%+1}
  inf$=home$+"\htm2grp.inf"         ! use home if found for the inf file
ELSE
  inf$=program_path$+"htm2grp.inf" ! use current path for the inf file if no home
ENDIF
~SHEL_ENVRN(a%,"BROWSER")
IF a%>0
  browser$=CHAR{a%+1}
ELSE
  browser$=program_path$+"*.*"
ENDIF
first!=0
'
IF @exist(inf$)=TRUE      ! if the inf file exits, read it
  inf&=@f_open(inf$)      ! open the inf file
  DO
    hotlist$=@f_input$(inf&)         ! read data
    group$=@f_input$(inf&)
    cab$=@f_input$(inf&)
  LOOP UNTIL @f_eof(inf&)
  IF UPPER$(cab$)<>UPPER$(browser$)  ! check env against path, to alert user
    ALERT 1,"Your BROWSER variable doesn't | match the inf file one.",1,"OK",i&
  ENDIF
  ~@f_close(inf&)
ELSE                      ! if not, create it
  hotlist$=@fileselector$("HTM2GRP(1/3): Select Hotlist...",program_path$+"*.*","*.htm",0)
  IF hotlist$<>""
    group$=@fileselector$("HTM2GRP(2/3): Select the GRP File...",program_path$+"*.*","*.grp",0)
    IF group$<>""
      cab$=@fileselector$("HTM2GRP(3/3): Select your Browser...",browser$,"*.*",0)
      IF cab$<>""
        inf&=@f_create(inf$)
        ~@f_println(inf&,hotlist$)
        ~@f_println(inf&,group$)
        ~@f_println(inf&,cab$)
        ~@f_close(inf&)
      ELSE
        @exit
      ENDIF
    ELSE
      @exit
    ENDIF
  ELSE
    @exit
  ENDIF
ENDIF
IF @exist(group$)=TRUE         ! fetch old THING setting for this grp.
  i&=0
  info$=""
  temp&=@f_open(group$)
  DO
    thing$(i&)=@f_input$(temp&)
    EXIT IF INSTR(thing$(i&),"OFIL")
    INC i&
  LOOP
  maxi&=i&
  ~@f_close(temp&)
  out&=@f_create(group$)
  FOR i&=0 TO maxi&-1
    ~@f_println(out&,thing$(i&))
  NEXT i&
ELSE
  out&=@f_create(group$)
  info$="INFO "+CHR$(34)+"WWW HOTLIST"+CHR$(34)+" 0 0 0 0 1 0"
  ~@f_println(out&,info$)
ENDIF
hand&=@f_open(hotlist$)
DO
  line$=@f_input$(hand&)
  IF INSTR(line$,"<LI><A HREF="+CHR$(34)+"h") OR INSTR(line$,"<LI><a href="+CHR$(34)+"h")
    dat$="OFIL "+@process2$(line$)+CHR$(32)+cab$+CHR$(32)+@process$(line$)
    IF LEN(dat$)<512         ! thing grp limitation
      ~@f_println(out&,dat$)
    ENDIF
  ELSE IF INSTR(line$,"<H3 ID")
    dat$="OFIL "+CHR$(34)+"---"+CHR$(34)+CHR$(32)+CHR$(34)+CHR$(34)
    IF first!=-1
      ~@f_println(out&,dat$)
    ENDIF
    first!=-1
  ELSE
    line$=""
    dat$=""
  ENDIF
LOOP UNTIL @f_eof(hand&)=TRUE
~@f_close(hand&)
~@f_close(out&)
@exit
' ------------------------------------------------
' Routines
> PROCEDURE exit                    ! quit the program cleanp
  IF NOT compiled!
    RESERVE
  ENDIF
  ~APPL_EXIT()
RETURN
> FUNCTION instr(a$,b$,i&)             ! replace the gfa one for 3 parameters
$F%
LOCAL a&
a&=INSTR(a$,b$,i&)
IF a&<i&
  a&=FALSE
ENDIF
RETURN a&
ENDFUNC
'
' GEMDOS standard file calls
> FUNCTION f_close(fh&)
$F%
RETURN GEMDOS(62,fh&)
ENDFUNC
> FUNCTION f_create(a$)
$F%
'
' OPEN "O"
'
a$=a$+CHR$(0)
'
RETURN GEMDOS(60,L:V:a$,0)
ENDFUNC
> FUNCTION f_open(a$)
$F%
'
' OPEN "I"
'
a$=a$+CHR$(0)
'
RETURN GEMDOS(61,L:V:a$,0)
ENDFUNC
> FUNCTION f_lof(fh&)
$F%
LOCAL pos%,lof%
'
' LOF(#1)
'
pos%=GEMDOS(66,L:0,fh&,1)                             ! LOC(#1)
lof%=GEMDOS(66,L:0,fh&,2)                             ! SEEK #1,LOF(#1)
'
~GEMDOS(66,L:pos%,fh&,0)                              ! SEEK #1,LOC(#1)
'
RETURN lof%
ENDFUNC
> FUNCTION f_eof(fh&)
$F%
LOCAL pos%,lof%
'
' EOF(#1)
'
pos%=GEMDOS(66,L:0,fh&,1)                             ! LOC(#1)
lof%=GEMDOS(66,L:0,fh&,2)                             ! SEEK #1,LOF(#1)
'
~GEMDOS(66,L:pos%,fh&,0)                              ! SEEK #1,LOC(#1)
'
RETURN pos%>=lof%                                     ! EOF(#1)
ENDFUNC
> FUNCTION f_println(fh&,a$)
$F%
a$=a$+CHR$(10)+CHR$(0)
RETURN GEMDOS(64,fh&,L:LEN(a$)-1,L:V:a$)
ENDFUNC
> FUNCTION f_input$(fh&)
LOCAL a|,e%,a$,b$
'
' LINE INPUT #1,a$
'
b$=CHR$(10)                ! Linefeed
'
WHILE RIGHT$(a$,1)<>b$
e%=GEMDOS(63,fh&,L:1,L:V:a|)      ! INP #1,a|
'
EXIT IF e%<>1                     ! EOF(#1)
'
a$=a$+CHR$(a|)
WEND
'
IF RIGHT$(a$,1)=b$
a$=LEFT$(a$,SUB(LEN(a$),1))       ! LF abh„ngen
ENDIF
'
RETURN a$
ENDFUNC
'
> FUNCTION process$(a$)
LOCAL i&,start&,end&,tmp&
start&=INSTR(a$,CHR$(34))
end&=@instr(a$,CHR$(34),start&+1)
ret$=MID$(a$,start&,end&-start&+1)
tmp&=INSTR(ret$,"@")
IF tmp&>0
ret$=LEFT$(ret$,tmp&)+"64"+MID$(ret$,tmp&+1)
ENDIF
RETURN ret$
ENDFUNC
> FUNCTION process2$(a$)
LOCAL start&,end&,tmp&
start&=INSTR(a$,CHR$(34)+">")
end&=@instr(a$,"</A>",start&+1)
IF end&=FALSE
end&=@instr(a$,"</a>",start&+1)    ! for lynx
IF end&=FALSE
end&=LEN(a$)
ENDIF
ENDIF
ret$=CHR$(34)+MID$(a$,start&+2,end&-start&-2)+CHR$(34)
tmp&=INSTR(ret$,"@")
IF tmp&>0
ret$=LEFT$(ret$,tmp&)+"64"+MID$(ret$,tmp&+1)
ENDIF
IF LEN(ret$)>30
ret$=LEFT$(ret$,30)+CHR$(34)
ENDIF
RETURN ret$
ENDFUNC
> FUNCTION fileselector$(title$,path$,file$,path_only!)         !replace the GFA one
LOCAL error&,button&
~WIND_UPDATE(1)
IF WORD{{GB+4}}>=320
GCONTRL(0)=91
GCONTRL(1)=0
GCONTRL(2)=2
GCONTRL(3)=3
GCONTRL(4)=0
title$=title$+CHR$(0)
path$=path$+CHR$(0)+SPACE$(256)
file$=file$+CHR$(0)+SPACE$(256)
ADDRIN(2)=V:title$
ADDRIN(0)=V:path$
ADDRIN(1)=V:file$
GEMSYS
path$=CHAR{V:path$}
file$=CHAR{V:file$}
error&=GINTOUT(0)
button&=GINTOUT(1)
ELSE
error&=FSEL_INPUT(path$,file$,button&)
ENDIF
~WIND_UPDATE(0)
IF button&=1 AND error&<>0
IF path_only!
RETURN LEFT$(path$,RINSTR(path$,"\"))
ELSE
IF file$<>""
RETURN LEFT$(path$,RINSTR(path$,"\"))+file$
ELSE
RETURN ""
ENDIF
ENDIF
ELSE
RETURN ""
ENDIF
ENDFUNC
> FUNCTION exist(p$)                                 ! replaces the exist of GFA
$F%
LOCAL r!,e&,sdta%
INLINE dta%,64
p$=p$+CHR$(FALSE)
sdta%=GEMDOS(47) !get old dta
~GEMDOS(26,L:dta%) !set new dta
e&=GEMDOS(78,L:V:p$,W:FALSE)
~GEMDOS(26,L:sdta%) !reset old dta
IF e&=FALSE
r!=TRUE
ELSE
r!=FALSE
ENDIF
RETURN r!
ENDFUNC
