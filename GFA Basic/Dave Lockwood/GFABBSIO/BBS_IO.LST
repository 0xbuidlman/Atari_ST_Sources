'
' +------------------------------------+
' |                                    |
' |      A Simple BBS I/O Library      |
' |                                    |
' |      written in GFA Basic by       |
' |           Dave Lockwood            |
' |                                    |
' | This code is placed in the  Public |
' | domain,  and  may  be  distributed |
' | freely  so long as this notice  is |
' | included in all copies unaltered.  |
' |                                    |
' | This software is given "as is" and |
' | will not be  supported by me.  Use |
' | it at your own risk.               |
' |                                    |
' +------------------------------------+
'
' This goes at the beginning of your code:
'
On Error Gosub Errhand
Hidem                        ! give mouse pointer the boot
Print Chr$(27);"e";          ! find the cursor
@Getdcd                      ! check for carrier
Loc!=Not Dcd!                ! set Local flag if no carrier
Snoop!=True                  ! turn Sysop snoop mode on
@Clrs                        ! clear the screen
'
' Use one of the following:
' @Init_forem                ! for FoReM ST
' @Init_star                 ! for STar-Net
' @Init_st                   ! for Snap-Together
' @Init_other                ! for just about anything else
'
' ------------------------------- Errhand ------------------------------------
'
' This is just a dumb error handler.  Feel free to put your own recovery
' routines in here.
'
Procedure Errhand
On Error Gosub Upshitcreek
@Outline("Uh oh...Error #"+Str$(Err))
If Fatal
@Outline("And its fatal too...I gotta exit.")
Else
'
' Put your non-fatal error recovery code here
' i.e.:
' On Error Gosub Errhand  ! Using this code could cause a forever-loop
' Resume Next
'
Endif
@Outline("Aborting...")
Close #1
Open "A",#1,"LOG"
Print #1;"Error ";Str$(Err);" - Aborting at ";Time$
Close #1
Print Chr$(27);"f";
End
Return
'
' If there's an error while in the error handler, we're...
Procedure Upshitcreek
End                  ! just exit ungracefully
Return
'
' --------------------------------- Fixcstring -------------------------------
'
Procedure Fixcstring(Qx$,Sptr%)
If Instr(Qx$,Chr$(0))<>0
Qx$=Left$(Qx$,Instr(Qx$,Chr$(0))-1)
Endif
*Sptr%=Qx$
Return
'
' --------------------------------- Init_star --------------------------------
'
' Procedure to setup game variables from STar-Net USER.TMP file
'
Procedure Init_star
Local Jnk$,Jnk2$,Loc%,Free$,Himsgread$
If Exist("USER.TMP")
Open "I",#1,"USER.TMP"
'
Jnk$=Space$(2)
Bget #1,Varptr(Jnk$),2
Level%=Asc(Right$(Jnk$,1))     ! Access level          (Level%)
'
Username$=Space$(16)
Bget #1,Varptr(Username$),16
@Fixcstring(Username$,*Username$)
@Toul(Username$,*Username$)    ! Username/handle       (Username$)
'
Realname$=Space$(18)
Bget #1,Varptr(Realname$),18
@Fixcstring(Realname$,*Realname$)
@Toul(Realname$,*Realname$)    ! Real name             (Realname$)
'
Password$=Space$(14)
Bget #1,Varptr(Password$),14   ! Password              (Password$)
@Fixcstring(Password$,*Password$)
'
Jnk$=Space$(2)
Bget #1,Varptr(Jnk$),2
Numcalls%=Cvi(Jnk$)            ! Number of calls       (Numcalls%)
'
Jnk$=Space$(2)
Bget #1,Varptr(Jnk$),2         ! Last call date        (Lastdate$) {N/U}
Lastdate$=""
'
Jnk$=Space$(2)
Bget #1,Varptr(Jnk$),2         ! Last call time        (Lasttime$) {N/U}
Lasttime$=""
'
Jnk$=Space$(2)
Bget #1,Varptr(Jnk$),2
Ncallstd%=Cvi(Jnk$)            ! Number of calls today (Ncallstd%)
'
Jnk$=Space$(2)
Bget #1,Varptr(Jnk$),2
Temp2%=Cvi(Jnk$)               ! Filler                (Temp2%)    {N/U}
'
Jnk$=Space$(2)
Bget #1,Varptr(Jnk$),2
Minleft%=Cvi(Jnk$)             ! Minutes left          (Minleft%)  {N/U}
'
Jnk$=Space$(2)
Bget #1,Varptr(Jnk$),2
Comtype%=Cvi(Jnk$)             ! Computer type         (Comtype%)
'
Jnk$=Space$(2)
Bget #1,Varptr(Jnk$),2
Col%=Cvi(Jnk$)                 ! Number of columns     (Col%)
'
Jnk$=Space$(4)
Bget #1,Varptr(Jnk$),4
Bytesent%=Cvl(Jnk$)            ! Bytes uploaded        (Bytesent%)
'
Jnk$=Space$(4)
Bget #1,Varptr(Jnk$),4
Byterec%=Cvl(Jnk$)             ! Bytes downloaded      (Byterec%)
'
Tele$=Space$(14)
Bget #1,Varptr(Tele$),14       ! User phone number     (Tele$)
@Fixcstring(Tele$,*Tele$)
'
Jnk$=Space$(4)
Bget #1,Varptr(Jnk$),4
Points%=Cvl(Jnk$)              ! Points [STar-Net only]      (Points%)
'
Jnk$=Space$(40)
Bget #1,Varptr(Jnk$),40
Himsgread$=Jnk$          ! 20 ints for high mess # read on each base
'
Jnk$=Space$(2)
Bget #1,Varptr(Jnk$),2
Loc%=Cvi(Jnk$)
If Loc%=1                      ! Local or remote flag        (Loc!)
Loc!=True
Else
Loc!=False
Endif
'
Free$=Space$(124)
Bget #1,Varptr(Free$),122
'
Close #1
Endif
Return
'
' -------------------------------- Init_forem --------------------------------
'
' Procedure to set up game variables from FoReM ST FOREM.DAT file
' Or Snap-Together BBS (environment=N, FOREM.DAT=Y)
'
Procedure Init_forem
Local Jnk$,Jnk2$,Loc%,A%
If Exist("FOREM.DAT")
Open "I",#1,"FOREM.DAT"
'
Relseek #1,3464          ! seek past config structure and record #
'
Password$=Space$(13)
Bget #1,Varptr(Password$),13   ! Password              (Password$)
@Fixcstring(Password$,*Password$)
'
Username$=Space$(31)
Bget #1,Varptr(Username$),31
@Fixcstring(Username$,*Username$)
@Toul(Username$,*Username$)    ! Username/handle       (Username$)
Realname$=Username$            ! Real name (same)      (Realname$)
'
Tele$=Space$(13)
Bget #1,Varptr(Tele$),13       ! User phone number     (Tele$)
@Fixcstring(Tele$,*Tele$)
'
Relseek #1,1 ! I don't know what this space is at all...
'
'    Jnk$=Space$(2)
'    Bget #1,Varptr(Jnk$),2
'    Age%=Cvi(Jnk$)
Relseek #1,2                   ! seek past user age (may be used later)
'
A%=Inp(#1)
Lf!=A%                         ! Linefeeds on/off      (Lf!)
Relseek #1,1                   ! linefeed lo byte
'
Jnk$=Space$(2)
Bget #1,Varptr(Jnk$),2
Comtype%=Cvi(Jnk$)             ! Computer type         (Comtype%)
'
Jnk$=Space$(2)
Bget #1,Varptr(Jnk$),2
Numcalls%=Cvi(Jnk$)            ! Number of calls       (Numcalls%)
'
Relseek #1,6                   ! Seek past first and last call dates
Lastdate$=""
'
Jnk$=Space$(2)
Bget #1,Varptr(Jnk$),2
Byterec%=Cvi(Jnk$)             ! Number of Downloads   (Byterec%)
'
Jnk$=Space$(2)
Bget #1,Varptr(Jnk$),2
Bytesent%=Cvi(Jnk$)            ! Number of uploads     (Bytesent%)
'
Relseek #1,8                   ! Seek past 4 more ints
'
Jnk$=Space$(2)
Bget #1,Varptr(Jnk$),2
Level%=Cvi(Jnk$)               ! Access level          (Level%)
' ------------
Relseek #1,313                 ! seek past rest of pass info & time limit
'
Jnk$=Space$(2)
Bget #1,Varptr(Jnk$),2
Minleft%=Cvi(Jnk$)             ! Minutes left          (Minleft%)  {N/U}
'
@Getdcd                        ! base local or remote on carrier detect
Loc!=Not Dcd!
'
Close #1
Endif
Return
'
' ---------------------------------- Getenv ----------------------------------
'
Procedure Getenv(Nam$,Ptr%)
Local Envloc%,Ofs%,E$,Fd!,Eq%
Envloc%=Lpeek(Basepage+44)
Ofs%=0
Fd!=False
Do
E$=""
If Peek(Envloc%+Ofs%)=0
Inc Ofs%
Endif
Exit If Peek(Envloc%+Ofs%)=0
While Peek(Envloc%+Ofs%)<>0
E$=E$+Chr$(Peek(Envloc%+Ofs%))
Inc Ofs%
Wend
Eq%=Instr(E$,"=")
If Eq%<>0
Var$=Left$(E$,Eq%-1)
If Var$=Nam$
*Ptr%=Right$(E$,Len(E$)-Eq%)
Fd!=True
Endif
Endif
Exit If Fd!
Loop
Return
'
' ---------------------------------- Init_st ---------------------------------
'
' Initialize variables from Snap-Together BBS.  (environment=Y, FOREM.DAT=N)
'
Procedure Init_st
Local Level$,Tty$
@Getenv("LOGNAME",*Username$)   ! get user info from Environment string
@Getenv("USERNAME",*Realname$)
@Getenv("LEVEL",*Level$)
Level%=Val(Level$)
@Getenv("TTY",*Tty$)
If Tty$="AUX:"
Loc!=False
Else
Loc!=True
Endif
Lf!=False
If Not Loc!                  ! if remote, ask about linefeeds
@Outline("Line 1")
@Outline("Line 2")
Lf!=True
@Outline("")
@Outline("If you only see Line 2, you need linefeeds")
@Outstring("Do you need linefeeds?")
@Getline(*A$)
A$=Upper$(Left$(A$,1))
If A$="N"
Lf!=False
Endif
Endif
Return
'
' -------------------------------- Init_other --------------------------------
'
' Procedure to get user info from the USER
'
Procedure Init_other
@Getdcd
Loc!=Not Dcd!
Lf!=False
If Not Loc!
@Outline("Line 1")
@Outline("Line 2")
Lf!=True
@Outline("")
@Outline("If you only see Line 2, you need linefeeds")
@Outstring("Do you need linefeeds?")
@Getline(*A$)
A$=Upper$(Left$(A$,1))
If A$="N"
Lf!=False
Endif
Endif
Tpname:
@Outstring("What name will you use?")
@Getline(*Username$)
@Toul(Username$,*Username$)
@Outline(Username$)
@Outstring("Correct?")
@Getline(*A$)
A$=Upper$(Left$(A$,1))
If A$="N"
Goto Tpname
Endif
Realname$=Username$
@Outstring("Password?")
@Getline(*Password$)
Return
'
' ----------------------------------- Toul -----------------------------------
'
' Procedure to convert uppercase to upper and lower case:
' "ANY STRING" --> "Any String"
'
Procedure Toul(S$,Sptr%)
Local Cnvt!,I%,C$
Cnvt!=False
For I%=1 To Len(S$)
C$=Mid$(S$,I%,1)
If C$>="A" And C$<="Z" And Cnvt!=True
Mid$(S$,I%,1)=Chr$(Asc(C$)+32)
Endif
If C$>="A" And C$<="Z" And Cnvt!=False
Cnvt!=True
Endif
If (C$<"A" Or C$>"Z") And (C$<"a" Or C$>"z")
Cnvt!=False
Endif
If C$>="0" And C$<="9"
Cnvt!=True
Endif
Next I%
*Sptr%=S$
Return
'
' ----------------------------------- Inchar ---------------------------------
'
' Procedure to get a character from either modem or keyboard
' sets Timeout! flag True if no carrier or after Time%*2 seconds
' If Echo! flag is set, echo char to modem
' char is returned in int pointed to by *Cptr%
'
Procedure Inchar(Time%,Echo!,Cptr%)
Local Chr%,St%,Et%
Timeout!=False
Chr%=-1                ! -1 indicates timeout
St%=Timer
Et%=St%+(Time%*100)
While Chr%=-1 And (Timer>=St% And Timer<=Et%) ! while no char or timeout
If Bios(1,1)         ! if input available from modem,
Chr%=Bios(2,1)     ! fetch it,
Else                 ! otherwise,
If Bios(1,2)       ! if input available from keyboard
Chr%=Inp(2)      ! fetch it
Endif
Endif
@Getdcd              ! check carrier
Exit If Dcd!=False   ! timeout if carrier dropped
Wend
If Chr%=-1             ! if no character retrieved
Timeout!=True        ! set timeout flag
Chr%=0               ! set char to 0 (safer for Chr$ function)
Else                   ! otherwise,
If Echo!             ! if Echo! flag set,
@Outchar(Chr%)     ! output it
Endif
Endif
*Cptr%=Chr%
Return
'
' ---------------------------------- Clrs ------------------------------------
'
Procedure Clrs
If Snoop!
@Outchar(Chr$(12))   ! send Form Feed character (clears some terminals)
Cls
Endif
Return
'
' --------------------------------- Outchar ----------------------------------
'
' Procedure to send a character to modem/screen or both (See Loc! flag)
'
Procedure Outchar(Ch%)
If Not Loc!                ! if not local
Void Bios(3,1,Ch%)       ! send char to modem
Endif
If Snoop!                  ! is Sysop is allowed to snoop
Void Bios(3,2,Ch%)       ! send char to screen
Endif
If Ch%=13                  ! if char is a carriage return
If Snoop!                ! if Sysop is allowed to snoop
Void Bios(3,2,10)      ! send linefeed to screen
Endif
If Not Loc!              ! if not local
If Lf!                 ! and user needs linefeeds (See Lf! flag)
Void Bios(3,1,10)    ! send linefeed to modem
Endif
Endif
Endif
Return
'
' --------------------------------- Getline ----------------------------------
'
' Procedure to get a line of input from modem/screen
' stores retrieved line in variable pointed to by (*Sptr%)
'
Procedure Getline(Sptr%)
Local Xql$,L%
Xql$=""
Off!=False                        ! set log off flag False
L%=0                              ! set string length to 0
Repeat
@Inchar(240,False,*Ch%)         ! wait 120 seconds for input (no echo)
If Timeout!=True And Off!=True  ! if twice timed out,
Print "Logging off..."        ! exit program
Print Chr$(27);"f";           ! turn off cursor again
End
Endif
If Timeout!=True                       ! if once timed out
@Getdcd                              ! check carrier
If Dcd!=True                         ! if still connected
@Outline("Exiting in 2 minutes!") ! warn of eminent log off
Else
@Outline("Logging off...")         ! log off if no carrier
Print Chr$(27);"f";                ! turn off cursor
End
Endif
Timeout!=False                       ! clear timeout and log off flags
Off!=True
Endif
If Ch%<>8 And Ch%<>0 And Ch%<>13       ! add all except CR/BS and NUL
Xql$=Xql$+Chr$(Ch%)
@Outchar(Ch%)                        ! output char to screen
L%=L%+1
Off!=False
Else
If Ch%=8                             ! if backspace
If L%>0                            ! and length is >0
Xql$=Left$(Xql$,Len(Xql$)-1)     ! remove last char from string
Dec L%                           ! decrement length
@Outchar(Ch%)                    ! output char
Else
Ch%=0                            ! otherwise clear char
Endif
Endif
If Ch%=13        ! if char is carriage return,
@Outchar(13)   ! send it
Endif
Endif
Until Ch%=13 Or (Timeout!=True And Off!=True) ! till CR or timeout
If Timeout!=False ! if no timeout, clear log off flag
Off!=False
Endif
*Sptr%=Xql$
Return
'
' ---------------------------------- Outline ---------------------------------
'
' Procedure to send a line to modem/screen or both
'
Procedure Outline(L$)
@Outstring(L$)        ! call Outstring to send the bulk of the string
@Outchar(13)          ! call Outchar to send carriage return
Return
'
' --------------------------------- Outstring --------------------------------
'
' Procedure to send a string to modem/screen or both with no carriage return
'
Procedure Outstring(L$)
Local I%
If L$<>""                         ! if length is not 0
For I%=1 To Len(L$)
@Outchar(Asc(Mid$(L$,I%,1)))  ! send each char in the string
Next I%
Endif
Return
'
' ----------------------------------- Getdcd ---------------------------------
'
' Procedure to read the Data Carrier Detect line of the AUX: port on the ST
'
Procedure Getdcd
Local Ioport%
Spoke &HFFFA05,0       ! set data direction register for read
Ioport%=Peek(&HFFFA01) ! get all port bits
If Ioport% And 2       ! if bit 1 is set,
Dcd!=False           ! no carrier
Else                   ! otherwise
Dcd!=True            ! True
Endif
If Loc!                ! if in local mode
Dcd!=True            ! set DCD True to avoid exiting program
Endif
Return
'
' -------------------------------- Getparams ---------------------------------
'
' Procedure to fetch command line
'
Procedure Getparams(Ptr%)
Local Cmd$,I%               ! Local variables
I%=Basepage+129             ! command line is in the upper half of basepage
While Peek(I%)<>0           ! until we find a NUL
Cmd$=Cmd$+Chr$(Peek(I%))  ! add to the command line
Inc I%                    ! bump pointer
Wend                        ! the-th-th-the-th-th-that's all folks
*Ptr%=Cmd$                  ! stuff the result where caller told us to
Return
'
' ================================= End of Code ==============================
