IF STE?=FALSE
  QUIT
ENDIF
res&=XBIOS(4)
IF res&
  CLS
  VSYNC
  ~XBIOS(5,L:-1,L:-1,0)
ENDIF
HIDEM
mem%=FRE()
RESERVE FRE()-600000
wait%=MALLOC(33000)
im1%=MALLOC(32000)
im2%=MALLOC(32000)
music%=MALLOC(15000)
ecr1%=im1%
ecr2%=im2%
horiz%=MALLOC(14080)
gpal%=MALLOC(32)
'
INLINE zik%,15000
INLINE ecran1%,32066
INLINE ecran2%,32066
INLINE font%,2132
INLINE text%,272
INLINE disk%,2034
'
dep%=LONG{BASEPAGE+8}
REPEAT
  ADD dep%,2
UNTIL CARD{dep%}=&H7008 AND CARD{ADD(dep%,2)}=&H7008
LONG{dep%}=&H48E7FFFE
my_vbl%=dep%
REPEAT
  ADD dep%,2
UNTIL CARD{dep%}=&H7009 AND CARD{ADD(dep%,2)}=&H7009
CARD{dep%}=&H4EB9
LONG{ADD(dep%,2)}=ADD(music%,8)
LONG{ADD(dep%,6)}=&H4CDF7FFF
CARD{ADD(dep%,10)}=&H4E73
VSYNC
super%=GEMDOS(&H20,L:0)
xb%=LONG{&H44E}
VSYNC
its1%=LONG{&HFFFFFA06}
its2%=LONG{&HFFFFFA12}
avbl%=LONG{&H70}
frequence|=BYTE{&HFFFF820A}
resolution|=BYTE{&HFFFF8260}
VSYNC
LONG{&HFFFFFA06}=0
LONG{&HFFFFFA12}=0
BYTE{&HFFFF820A}=2
BYTE{&HFFFF8260}=0
LONG{&H200}=xb%
LONG{&H70}=my_vbl%
BMOVE zik%,music%,15000
~1
~C:music%(1)
BMOVE &HFFFF8240,gpal%,32
play%=CARD{music%+8}
CARD{music%+8}=&H4E75
'
'
FOR x&=1 TO 319
  adr%=ADD(horiz%,MUL(x&,44))
  long&=SHL(SHR(x&,4),1)
  IF long&<2
    long&=2
  ENDIF
  ADD long&,2
  CARD{adr%}=long&
  ADD adr%,2
  posbit|=15
  FOR trace&=0 TO x&
    CARD{adr%}=OR(CARD{adr%},SHL(1,posbit|))
    IF posbit|>0
      DEC posbit|
    ELSE
      posbit|=15
      ADD adr%,2
    ENDIF
  NEXT trace&
NEXT x&
'
'
'
'
'
black
CARD{music%+8}=play%
LONG{&H200}=ecr1%
syncro
presentation
show(ecran1%)
FOR pause&=1 TO 100
  syncro
NEXT pause&
text
disk
couloir
show(ecran2%)
REPEAT
UNTIL BYTE{&HFFFFFC02}=&H39
REPEAT
UNTIL BYTE{&HFFFFFC02}=&HB9
white
fin
'
'
'
> PROCEDURE fin
  LONG{&H70}=avbl%
  VSYNC
  BYTE{&HFFFF820A}=frequence|
  BYTE{&HFFFF8260}=resolution|
  VSYNC
  LONG{&HFFFFFA06}=its1%
  LONG{&HFFFFFA12}=its2%
  VSYNC
  BMOVE gpal%,&HFFFF8240,32
  VSYNC
  LONG{&HFF8800}=&H8000000
  LONG{&HFF8800}=&H9000000
  LONG{&HFF8800}=&HA000000
  ~GEMDOS(&H20,L:super%)
  ~MFREE(wait%)
  ~MFREE(im1%)
  ~MFREE(im2%)
  ~MFREE(music%)
  ~MFREE(horiz%)
  ~MFREE(gpal%)
  ~MFREE(dec%)
  ~FRE(0)
  RESERVE mem%
  VSYNC
  ~XBIOS(5,L:-1,L:-1,res&)
  END
RETURN
> PROCEDURE show(source%)
  '~C:degas%(L:source%,L:wait%,4)
  BMOVE ADD(source%,34), wait%, 32000
  LONG{&H200}=wait%
  syncro
  pal%=MALLOC(96)
  pal1%=pal%
  pal2%=ADD(pal%,48)
  ADD source%,2
  dest%=pal2%
  FOR col&=0 TO 15
    val&=CARD{source%}
    BYTE{dest%}=SHR(val&,8)
    BYTE{SUCC(dest%)}=AND(SHR(val&,4),&HF)
    BYTE{ADD(dest%,2)}=AND(val&,&HF)
    ADD dest%,3
    ADD source%,2
  NEXT col&
  FOR adr%=pal1% TO ADD(pal1%,44) STEP 4
    LONG{adr%}=0
  NEXT adr%
  FOR nb&=0 TO 15
    s%=pal1%
    d%=pal2%
    FOR comp|=0 TO 47
      v|=BYTE{s%}
      IF v|<>BYTE{d%}
        IF v|>7
          SUB v|,7
        ELSE
          ADD v|,8
        ENDIF
        BYTE{s%}=v|
      ENDIF
      INC s%
      INC d%
    NEXT comp|
    s%=pal1%
    d%=source%
    FOR col&=0 TO 15
      CARD{d%}=SHL(BYTE{s%},8) OR SHL(BYTE{SUCC(s%)},4) OR BYTE{ADD(s%,2)}
      ADD d%,2
      ADD s%,3
    NEXT col&
    syncro
    syncro
    BMOVE source%,&HFFFF8240,32
  NEXT nb&
  ~MFREE(pal%)
RETURN
> PROCEDURE my_vbl
  ~8
  ~8
  BYTE{&H40C}=1
  BYTE{&HFFFF8205}=BYTE{&H201}
  BYTE{&HFFFF8207}=BYTE{&H202}
  BYTE{&HFFFF8209}=BYTE{&H203}
  ~9
  ~9
  ~9
  ~9
  ~9
RETURN
> PROCEDURE syncro
  BYTE{&H40C}=0
  REPEAT
  UNTIL BYTE{&H40C}
RETURN
> PROCEDURE presentation
  dec%=MALLOC(1284)
  coords%=MALLOC(216)
  adr%=dec%
  off&=0
  dec|=0
  FOR x&=0 TO 319
    CARD{adr%}=off&
    CARD{ADD(adr%,2)}=dec|
    ADD adr%,4
    IF dec|<15
      INC dec|
    ELSE
      dec|=0
      ADD off&,8
    ENDIF
  NEXT x&
  efface
  CARD{&HFF8A20}=2
  CARD{&HFF8A2E}=8
  LONG{&H200}=ecr1%
  CARD{&HFFFF8242}=&HFFF
  CARD{&HFFFF8244}=&HF00
  adr%=coords%
  FOR faces&=0 TO 10
    READ op&,px&,py&,long&,larg&
    CARD{adr%}=op&
    LONG{ADD(adr%,2)}=MUL(ADD(px&,160),256)
    LONG{ADD(adr%,6)}=MUL(ADD(py&,100),256)
    LONG{ADD(adr%,10)}=MUL(long&,256)
    LONG{ADD(adr%,14)}=MUL(larg&,256)
    ADD adr%,18
  NEXT faces&
  DATA 7,-110,-90,90,10
  DATA 7,-80,-85,10,66
  DATA 7,-60,-70,40,50
  DATA 4,-50,-60,20,30
  DATA 7,-10,-90,10,25
  DATA 7,-10,-70,40,50
  DATA 4,0,-60,20,30
  DATA 7,10,-90,70,10
  DATA 7,40,-70,40,50
  DATA 4,50,-60,20,10
  DATA 4,50,-40,35,10
  zoble&=0
  zoom
  LONG{&H200}=ecr2%
  syncro
  LONG{&HFF8A24}=ecr2%
  LONG{&HFF8A36}=&HFA00001
  CARD{&HFF8A20}=8
  CARD{&HFF8A2E}=8
  LONG{&HFF8A32}=ecr1%
  BYTE{&HFF8A3B}=3
  BYTE{&HFF8A3D}=0
  BYTE{&HFF8A3C}=&HC0
  CARD{&HFF8A20}=2
  CARD{&HFF8A2E}=8
  adr%=coords%
  FOR faces&=0 TO 10
    READ op&,px&,py&,long&,larg&
    CARD{adr%}=op&
    LONG{ADD(adr%,2)}=MUL(ADD(px&,160),256)
    LONG{ADD(adr%,6)}=MUL(ADD(py&,100),256)
    LONG{ADD(adr%,10)}=MUL(long&,256)
    LONG{ADD(adr%,14)}=MUL(larg&,256)
    ADD adr%,18
  NEXT faces&
  DATA 7,-80,10,10,60
  DATA 7,-60,10,40,60
  DATA 4,-50,20,20,10
  DATA 4,-65,40,35,20
  DATA 7,-10,10,40,60
  DATA 4,0,20,20,10
  DATA 4,-15,40,35,20
  DATA 7,40,10,40,60
  DATA 4,35,40,35,20
  DATA 4,50,20,20,10
  DATA 3,-90,80,180,10
  zoble&=2
  zoom
  syncro
  FOR nb&=0 TO 50
    syncro
  NEXT nb&
  CARD{&HFFFF8242}=&H777
  CARD{&HFFFF8244}=&H700
  FOR col&=0 TO 6
    syncro
    syncro
    syncro
    CARD{&HFFFF8240}=ADD(CARD{&HFFFF8240},&H111)
    CARD{&HFF8244}=ADD(CARD{&HFFFF8244},&H11)
  NEXT col&
  LONG{&H200}=ecr2%
  syncro
  LONG{&HFF8A24}=ecr1%
  CARD{&HFF8A36}=16000
  CARD{&HFF8A38}=1
  LONG{&HFF8A20}=&H20000
  LONG{&HFF8A28}=&HFFFFFFFF
  CARD{&HFF8A2C}=&HFFFF
  LONG{&HFF8A32}=ecr1%
  LONG{&HFF8A2E}=&H20000
  BYTE{&HFF8A3B}=0
  BYTE{&HFF8A3D}=0
  BYTE{&HFF8A3A}=2
  BYTE{&HFF8A3C}=&HC0
  LONG{&H200}=ecr1%
  FOR col&=0 TO 5
    syncro
    syncro
    CARD{&HFFFF8240}=SUB(CARD{&HFFFF8240},&H111)
  NEXT col&
  ~MFREE(coords%)
  FOR adr%=&HFFFF8240 TO &HFFFF825C STEP 4
    LONG{adr%}=0
  NEXT adr%
RETURN
> PROCEDURE zoom
  z&=1024
  REPEAT
    LONG{&H200}=ecr1%
    syncro
    LONG{&HFF8A24}=ecr2%
    LONG{&HFF8A36}=&HFA00001
    LONG{&HFF8A32}=ADD(ecr2%,zoble&)
    BYTE{&HFF8A3B}=0
    CARD{&HFF8A3C}=&HC000
    col|=SUB(15,DIV(SUB(z&,256),51))
    IF BTST(col|,0)
      col|=DIV(ADD(col|,15),2)
    ELSE
      DIV col|,2
    ENDIF
    adr%=ADD(&HFFFF8242,zoble&)
    IF zoble&
      CARD{adr%}=SHL(col|,8)
    ELSE
      CARD{adr%}=SHL(col|,8) OR SHL(col|,4) OR col|
    ENDIF
    FOR adr%=coords% TO ADD(coords%,180) STEP 18
      op&=CARD{adr%}
      x&=SUB(LONG{ADD(adr%,2)},40960)
      y&=SUB(LONG{ADD(adr%,6)},25600)
      long&=LONG{ADD(adr%,10)}
      larg&=LONG{ADD(adr%,14)}
      x&=ADD(DIV(x&,z&),160)
      y&=ADD(DIV(y&,z&),100)
      DIV long&,z&
      DIV larg&,z&
      adroff%=ADD(dec%,SHL(x&,2))
      dest%=ADD(ecr2%,ADD(MUL(y&,160),CARD{adroff%}))
      source%=ADD(horiz%,MUL(long&,44))
      long&=CARD{source%}
      LONG{&HFF8A24}=ADD(source%,2)
      CARD{&HFF8A36}=SUCC(SHR(long&,1))
      CARD{&HFF8A38}=larg&
      CARD{&HFF8A22}=-long&
      LONG{&HFF8A32}=ADD(dest%,zoble&)
      CARD{&HFF8A30}=SUB(160,SHL(long&,2))
      BYTE{&HFF8A3B}=op&
      BYTE{&HFF8A3D}=CARD{ADD(adroff%,2)}
      BYTE{&HFF8A3C}=&HC0
    NEXT adr%
    SUB z&,8
    SWAP ecr1%,ecr2%
    CARD{&HFFFF8240}=0
    CARD{&HFFFF8240}=0
  UNTIL z&<256
RETURN
> PROCEDURE efface
  syncro
  LONG{&HFF8A24}=ecr1%
  CARD{&HFF8A36}=16000
  CARD{&HFF8A38}=1
  LONG{&HFF8A20}=&H20000
  LONG{&HFF8A28}=&HFFFFFFFF
  CARD{&HFF8A2C}=&HFFFF
  LONG{&HFF8A32}=ecr1%
  LONG{&HFF8A2E}=&H20000
  BYTE{&HFF8A3B}=0
  BYTE{&HFF8A3D}=0
  BYTE{&HFF8A3A}=2
  BYTE{&HFF8A3C}=&HC0
  syncro
  LONG{&HFF8A24}=ecr2%
  CARD{&HFF8A36}=16000
  CARD{&HFF8A38}=1
  LONG{&HFF8A32}=ecr2%
  BYTE{&HFF8A3C}=&HC0
RETURN
> PROCEDURE text
  des%=MALLOC(1144)
  pos%=MALLOC(720)
  dest%=des%
  FOR source%=text% TO ADD(text%,269)
    v|=BYTE{source%}
    IF v|<>32
      SUB v|,97
      adr%=ADD(font%,MUL(v|,82))
    ELSE
      adr%=0
    ENDIF
    LONG{dest%}=adr%
    ADD dest%,4
  NEXT source%
  adr%=pos%
  pipo=PI/180
  FOR angle&=0 TO 178 STEP 2
    a=angle&*pipo
    LONG{adr%}=(160*COS(a)+130)*256
    LONG{ADD(adr%,4)}=512-256*SIN(a)
    ADD adr%,8
  NEXT angle&
  efface
  FOR nb&=0 TO 50
    syncro
  NEXT nb&
  black
  LONG{&H200}=ecr1%
  syncro
  CARD{&HFFFF8242}=&H777
  CARD{&HFFFF8244}=&H555
  CARD{&HFFFF8246}=&H777
  CARD{&HFFFF8248}=&H333
  CARD{&HFFFF824A}=&H777
  CARD{&HFFFF824C}=&H555
  CARD{&HFFFF824E}=&H777
  CARD{&HFFFF8250}=&H404
  CARD{&HFFFF8252}=&H777
  CARD{&HFFFF8254}=&H555
  CARD{&HFFFF8256}=&H777
  CARD{&HFFFF8258}=&H333
  CARD{&HFFFF825A}=&H777
  CARD{&HFFFF825C}=&H555
  CARD{&HFFFF825E}=&H777
  CARD{&HFF8A20}=2
  CARD{&HFF8A2E}=8
  fz&=352
  op1|=3
  op2|=4
  der1|=0
  der2|=15
  FOR source%=des% TO ADD(des%,1100) STEP 4
    FOR coords%=ADD(pos%,592) TO ADD(pos%,712) STEP 8
      draw_letters
      IF BYTE{&HFFFFFC02}=&H39
        source%=ADD(des%,2000)
        coords%=ADD(pos%,1000)
      ENDIF
    NEXT coords%
  NEXT source%
  black
  ~MFREE(des%)
  ~MFREE(pos%)
RETURN
> PROCEDURE draw_letters
  LONG{&H200}=ecr1%
  syncro
  LONG{&HFF8A24}=ecr2%
  LONG{&HFF8A36}=&H4100001
  LONG{&HFF8A32}=ADD(ecr2%,11840)
  BYTE{&HFF8A3B}=0
  CARD{&HFF8A3C}=&HC000
  LONG{&HFF8A36}=&H4100001
  LONG{&HFF8A32}=ADD(ecr2%,11842)
  CARD{&HFF8A3C}=&HC000
  LONG{&HFF8A36}=&H4100001
  LONG{&HFF8A32}=ADD(ecr2%,11844)
  CARD{&HFF8A3C}=&HC000
  BYTE{&HFF8A3B}=7
  adr_des%=source%
  adr_pos%=coords%
  FOR l|=0 TO 4
    px%=SUB(LONG{adr_pos%},34560)
    z&=LONG{ADD(adr_pos%,4)}
    SUB adr_pos%,128
    adr%=LONG{adr_des%}
    ADD adr_des%,4
    IF adr%>0
      nbf&=CARD{adr%}
      ADD adr%,2
      FOR f&=1 TO nbf&
        px&=ADD(DIV(ADD(LONG{adr%},px%),z&),160)
        py&=ADD(DIV(SUB(LONG{ADD(adr%,4)},6400),z&),100)
        long&=DIV(LONG{ADD(adr%,8)},z&)
        larg&=DIV(LONG{ADD(adr%,12)},z&)
        adroff%=ADD(dec%,SHL(px&,2))
        dest%=ADD(ecr2%,ADD(MUL(py&,160),CARD{adroff%}))
        s%=ADD(horiz%,MUL(long&,44))
        long&=CARD{s%}
        col&=SUB(4,MUL(DIV(SUB(512,z&),100),2))
        LONG{&HFF8A24}=ADD(s%,2)
        CARD{&HFF8A36}=SUCC(SHR(long&,1))
        CARD{&HFF8A38}=larg&
        CARD{&HFF8A22}=-long&
        LONG{&HFF8A32}=ADD(dest%,col&)
        CARD{&HFF8A30}=SUB(160,SHL(long&,2))
        BYTE{&HFF8A3D}=CARD{ADD(adroff%,2)}
        BYTE{&HFF8A3C}=&HC0
        ADD adr%,16
      NEXT f&
    ENDIF
  NEXT l|
  LONG{&HFF8A24}=ecr2%
  LONG{&HFF8A36}=&HFA00001
  LONG{&HFF8A32}=ADD(ecr2%,6)
  BYTE{&HFF8A3B}=der1|
  CARD{&HFF8A3C}=&HC000
  z&=fz&
  adroff%=ADD(dec%,SHL(SUB(160,DIV(40960,z&)),2))
  dest%=ADD(ecr2%,ADD(MUL(SUB(100,DIV(25600,z&)),160),CARD{adroff%}))
  s%=ADD(horiz%,MUL(DIV(81664,z&),44))
  long&=CARD{s%}
  LONG{&HFF8A24}=ADD(s%,2)
  CARD{&HFF8A36}=SUCC(SHR(long&,1))
  CARD{&HFF8A38}=DIV(50944,z&)
  CARD{&HFF8A22}=-long&
  LONG{&HFF8A32}=ADD(dest%,6)
  CARD{&HFF8A30}=SUB(160,SHL(long&,2))
  BYTE{&HFF8A3D}=CARD{ADD(adroff%,2)}
  BYTE{&HFF8A3B}=op1|
  BYTE{&HFF8A3C}=&HC0
  ADD z&,384
  adroff%=ADD(dec%,SHL(SUB(160,DIV(40960,z&)),2))
  dest%=ADD(ecr2%,ADD(MUL(SUB(100,DIV(25600,z&)),160),CARD{adroff%}))
  s%=ADD(horiz%,MUL(DIV(81664,z&),44))
  long&=CARD{s%}
  LONG{&HFF8A24}=ADD(s%,2)
  CARD{&HFF8A36}=SUCC(SHR(long&,1))
  CARD{&HFF8A38}=DIV(50944,z&)
  CARD{&HFF8A22}=-long&
  LONG{&HFF8A32}=ADD(dest%,6)
  CARD{&HFF8A30}=SUB(160,SHL(long&,2))
  BYTE{&HFF8A3D}=CARD{ADD(adroff%,2)}
  BYTE{&HFF8A3B}=op2|
  BYTE{&HFF8A3C}=&HC0
  IF fz&>256
    SUB fz&,8
  ELSE
    fz&=632
    SWAP der1|,der2|
    SWAP op1|,op2|
  ENDIF
  SWAP ecr1%,ecr2%
  CARD{&HFFFF8240}=0
RETURN
> PROCEDURE black
  FOR col&=0 TO 15
    syncro
    syncro
    FOR adr%=&HFFFF8240 TO &HFFFF825E STEP 2
      val&=CARD{adr%}
      r|=AND(SHR(val&,8),&HF)
      v|=AND(SHR(val&,4),&HF)
      b|=AND(val&,&HF)
      IF r|<>0
        IF r|>7
          SUB r|,8
        ELSE
          ADD r|,7
        ENDIF
      ENDIF
      IF v|<>0
        IF v|>7
          SUB v|,8
        ELSE
          ADD v|,7
        ENDIF
      ENDIF
      IF b|<>0
        IF b|>7
          SUB b|,8
        ELSE
          ADD b|,7
        ENDIF
      ENDIF
      CARD{adr%}=SHL(r|,8) OR SHL(v|,4) OR b|
    NEXT adr%
  NEXT col&
RETURN
> PROCEDURE disk
  pos%=MALLOC(288)
  der%=MALLOC(32)
  der1%=der%
  der2%=ADD(der%,16)
  adr%=pos%
  FOR angle&=0 TO 355 STEP 5
    CARD{adr%}=32*COS(angle&*PI/180)+96
    CARD{ADD(adr%,2)}=28*SIN(angle&*PI/180)+43
    ADD adr%,4
  NEXT angle&
  efface
  syncro
  CARD{&HFFFF8240}=&H0
  CARD{&HFFFF8242}=&H700
  CARD{&HFFFF8244}=&H70
  CARD{&HFFFF8246}=&H770
  CARD{&HFFFF8248}=&H7
  CARD{&HFFFF824A}=&H707
  CARD{&HFFFF824C}=&H77
  CARD{&HFFFF824E}=&H777
  CARD{&HFFFF8250}=&HFFF
  CARD{&HFFFF8252}=&HF00
  CARD{&HFFFF8254}=&HF0
  CARD{&HFFFF8256}=&HFF0
  CARD{&HFFFF8258}=&HF
  CARD{&HFFFF825A}=&HF0F
  CARD{&HFFFF825C}=&HFF
  CARD{&HFFFF825E}=&HFFF
  FOR adr%=der1% TO ADD(der1%,12) STEP 4
    LONG{adr%}=ecr1%
  NEXT adr%
  FOR adr%=der2% TO ADD(der2%,12) STEP 4
    LONG{adr%}=ecr2%
  NEXT adr%
  '
  dep_pos%=pos%
  fin_pos%=ADD(pos%,284)
  pos1%=pos%
  pos2%=ADD(pos%,72)
  pos3%=ADD(pos%,144)
  pos4%=ADD(pos%,216)
  '
  px1&=50
  py1&=23
  px2&=248
  py2&=137
  dx1&=4
  dy1&=-4
  dx2&=-4
  dy2&=4
  '
  LONG{&HFF8A28}=&HFFFFFFFF
  CARD{&HFF8A2C}=&HFFFF
  CARD{&HFF8A20}=2
  CARD{&HFF8A22}=2
  CARD{&HFF8A2E}=8
  CARD{&HFF8A30}=96
  BYTE{&HFF8A3B}=3
  BYTE{&HFF8A3A}=2
  REPEAT
    move_disk
  UNTIL BYTE{&HFFFFFC02}=&H39
  black
  ~MFREE(pos%)
  ~MFREE(der%)
  ~MFREE(sins%)
RETURN
> PROCEDURE move_disk
  LONG{&H200}=ecr1%
  syncro
  adr%=der2%
  BYTE{&HFF8A3D}=0
  LONG{&HFF8A24}=ecr2%
  BYTE{&HFF8A3B}=0
  LONG{&HFF8A36}=&H90071
  LONG{&HFF8A32}=LONG{adr%}
  BYTE{&HFF8A3C}=&HC0
  ADD adr%,4
  LONG{&HFF8A36}=&H90071
  LONG{&HFF8A32}=LONG{adr%}
  BYTE{&HFF8A3C}=&HC0
  ADD adr%,4
  LONG{&HFF8A36}=&H90071
  LONG{&HFF8A32}=LONG{adr%}
  BYTE{&HFF8A3C}=&HC0
  LONG{&HFF8A24}=ecr2%
  LONG{&HFF8A36}=&HFA00001
  LONG{&HFF8A32}=ADD(ecr2%,6)
  BYTE{&HFF8A3C}=&HC0
  BYTE{&HFF8A3B}=3
  sauve%=der2%
  posdec%=ADD(dec%,SHL(CARD{pos1%},2))
  dest%=ADD(ecr2%,ADD(MUL(CARD{ADD(pos1%,2)},160),CARD{posdec%}))
  LONG{sauve%}=dest%
  ADD sauve%,4
  LONG{&HFF8A32}=dest%
  LONG{&HFF8A24}=disk%
  LONG{&HFF8A36}=&H90071
  BYTE{&HFF8A3D}=CARD{ADD(posdec%,2)}
  BYTE{&HFF8A3C}=&HC0
  posdec%=ADD(dec%,SHL(CARD{pos2%},2))
  dest%=ADD(ecr2%,ADD(MUL(CARD{ADD(pos2%,2)},160),CARD{posdec%}))
  ADD dest%,2
  LONG{sauve%}=dest%
  ADD sauve%,4
  LONG{&HFF8A32}=dest%
  LONG{&HFF8A24}=disk%
  LONG{&HFF8A36}=&H90071
  BYTE{&HFF8A3D}=CARD{ADD(posdec%,2)}
  BYTE{&HFF8A3C}=&HC0
  posdec%=ADD(dec%,SHL(CARD{pos3%},2))
  dest%=ADD(ecr2%,ADD(MUL(CARD{ADD(pos3%,2)},160),CARD{posdec%}))
  ADD dest%,4
  LONG{sauve%}=dest%
  LONG{&HFF8A32}=dest%
  LONG{&HFF8A24}=disk%
  LONG{&HFF8A36}=&H90071
  BYTE{&HFF8A3D}=CARD{ADD(posdec%,2)}
  BYTE{&HFF8A3C}=&HC0
  IF px1&=<px2&
    x1&=px1&
    x2&=px2&
  ELSE
    x2&=px1&
    x1&=px2&
  ENDIF
  IF py1&=<py2&
    y1&=py1&
    y2&=py2&
  ELSE
    y2&=py1&
    y1&=py2&
  ENDIF
  SUB x2&,x1&
  SUB y2&,y1&
  IF x2& OR y2&
    adroff%=ADD(dec%,SHL(x1&,2))
    dest%=ADD(ecr2%,ADD(MUL(y1&,160),CARD{adroff%}))
    s%=ADD(horiz%,MUL(x2&,44))
    long&=CARD{s%}
    LONG{&HFF8A24}=ADD(s%,2)
    CARD{&HFF8A36}=SUCC(SHR(long&,1))
    CARD{&HFF8A38}=y2&
    CARD{&HFF8A22}=-long&
    LONG{&HFF8A32}=ADD(dest%,6)
    CARD{&HFF8A30}=SUB(160,SHL(long&,2))
    BYTE{&HFF8A3D}=CARD{ADD(adroff%,2)}
    BYTE{&HFF8A3C}=&HC0
    CARD{&HFF8A22}=2
    CARD{&HFF8A30}=96
  ENDIF
  posdec%=ADD(dec%,SHL(CARD{pos4%},2))
  dest%=ADD(ecr2%,ADD(MUL(CARD{ADD(pos4%,2)},160),CARD{posdec%}))
  ADD dest%,6
  LONG{&HFF8A32}=dest%
  LONG{&HFF8A24}=disk%
  LONG{&HFF8A36}=&H90071
  BYTE{&HFF8A3D}=CARD{ADD(posdec%,2)}
  BYTE{&HFF8A3B}=6
  BYTE{&HFF8A3C}=&HC0
  IF pos1%<fin_pos%
    ADD pos1%,4
  ELSE
    pos1%=dep_pos%
  ENDIF
  IF pos2%<fin_pos%
    ADD pos2%,4
  ELSE
    pos2%=dep_pos%
  ENDIF
  IF pos3%<fin_pos%
    ADD pos3%,4
  ELSE
    pos3%=dep_pos%
  ENDIF
  IF pos4%<fin_pos%
    ADD pos4%,4
  ELSE
    pos4%=dep_pos%
  ENDIF
  IF px1&<8
    dx1&=4
  ENDIF
  IF px1&>312
    dx1&=-4
  ENDIF
  IF px2&<8
    dx2&=4
  ENDIF
  IF px2&>312
    dx2&=-4
  ENDIF
  IF py1&<8
    dy1&=4
  ENDIF
  IF py1&>192
    dy1&=-4
  ENDIF
  IF py2&<8
    dy2&=4
  ENDIF
  IF py2&>192
    dy2&=-4
  ENDIF
  ADD px1&,dx1&
  ADD px2&,dx2&
  ADD py1&,dy1&
  ADD py2&,dy2&
  SWAP ecr1%,ecr2%
  SWAP der1%,der2%
  CARD{&HFFFF8240}=0
RETURN
> PROCEDURE couloir
  pos%=MALLOC(22520)
  adr%=pos%
  FOR z&=256 TO 3071
    vx&=DIV(40960,z&)
    vy&=DIV(25600,z&)
    posx&=SUB(160,vx&)
    posy&=SUB(100,vy&)
    long&=SUB(ADD(vx&,vx&),1)
    larg&=SUB(ADD(vy&,vy&),1)
    CARD{adr%}=ADD(MUL(posy&,160),SHL(SHR(posx&,4),3))
    CARD{ADD(adr%,2)}=AND(posx&,&HF)
    CARD{ADD(adr%,4)}=MUL(long&,44)
    CARD{ADD(adr%,6)}=larg&
    ADD adr%,8
  NEXT z&
  CLS
  DIM x&(3),y&(3)
  FOR nb|=0 TO 3
    READ x&(0),y&(0),x&(1),y&(1),x&(2),y&(2),x&(3),y&(3)
    POLYFILL 4,x&(),y&()
  NEXT nb|
  DATA 0,0,319,199,240,199,80,0
  DATA 160,0,160,199,80,199,240,0
  DATA 319,0,0,199,0,150,319,50
  DATA 319,100,0,100,0,50,319,150
  init
  LONG{&HFF8A24}=xb%
  LONG{&HFF8A36}=&HFA00001
  LONG{&HFF8A32}=ADD(ecr1%,2)
  BYTE{&HFF8A3B}=12
  CARD{&HFF8A3C}=&HC000
  LONG{&HFF8A24}=xb%
  LONG{&HFF8A36}=&HFA00001
  LONG{&HFF8A32}=ADD(ecr2%,2)
  CARD{&HFF8A3C}=&HC000
  efface_xb
  x&(0)=0
  y&(0)=0
  x&(1)=319
  y&(1)=199
  x&(2)=1
  y&(2)=199
  x&(3)=318
  y&(3)=0
  POLYFILL 4,x&(),y&()
  init
  LONG{&HFF8A24}=xb%
  LONG{&HFF8A36}=&HFA00001
  LONG{&HFF8A32}=ADD(ecr1%,4)
  BYTE{&HFF8A3B}=12
  CARD{&HFF8A3C}=&HC000
  LONG{&HFF8A24}=xb%
  LONG{&HFF8A36}=&HFA00001
  LONG{&HFF8A32}=ADD(ecr2%,4)
  CARD{&HFF8A3C}=&HC000
  efface_xb
  CARD{&HFF8A20}=2
  LONG{&H200}=ecr1%
  syncro
  LONG{&HFFFF8240}=&HF0F0F0F
  LONG{&HFFFF8244}=&HF0F0F0F
  LONG{&HFFFF8248}=&HF0F0F0F
  LONG{&HFFFF824C}=&HF0F0F0F
  LONG{&HFFFF8250}=&HE000F
  LONG{&HFFFF8254}=&HF000E
  LONG{&HFFFF8258}=&HFFF0EEE
  LONG{&HFFFF825C}=&HEEE0FFF
  '
  LONG{&HFF8A24}=ADD(ecr2%,6)
  LONG{&HFF8A36}=&HFA00001
  LONG{&HFF8A32}=ADD(ecr2%,6)
  BYTE{&HFF8A3B}=15
  CARD{&HFF8A3C}=&HC000
  LONG{&HFF8A24}=ADD(ecr1%,6)
  LONG{&HFF8A36}=&HFA00001
  LONG{&HFF8A32}=ADD(ecr1%,6)
  BYTE{&HFF8A3B}=15
  CARD{&HFF8A3C}=&HC000
  '
  adr%=ADD(pos%,22512)
  source%=ADD(horiz%,CARD{ADD(adr%,4)})
  long&=CARD{source%}
  LONG{&HFF8A24}=ADD(source%,2)
  CARD{&HFF8A36}=SUCC(SHR(long&,1))
  CARD{&HFF8A38}=CARD{ADD(adr%,6)}
  CARD{&HFF8A22}=-long&
  LONG{&HFF8A32}=ADD(ADD(ecr2%,CARD{adr%}),2)
  CARD{&HFF8A30}=SUB(160,SHL(long&,2))
  BYTE{&HFF8A3B}=4
  BYTE{&HFF8A3D}=CARD{ADD(adr%,2)}
  BYTE{&HFF8A3C}=&HC0
  source%=ADD(horiz%,CARD{ADD(adr%,4)})
  long&=CARD{source%}
  LONG{&HFF8A24}=ADD(source%,2)
  CARD{&HFF8A36}=SUCC(SHR(long&,1))
  CARD{&HFF8A38}=CARD{ADD(adr%,6)}
  CARD{&HFF8A22}=-long&
  LONG{&HFF8A32}=ADD(ADD(ecr2%,CARD{adr%}),4)
  CARD{&HFF8A30}=SUB(160,SHL(long&,2))
  BYTE{&HFF8A3B}=4
  BYTE{&HFF8A3D}=CARD{ADD(adr%,2)}
  BYTE{&HFF8A3C}=&HC0
  source%=ADD(horiz%,CARD{ADD(adr%,4)})
  long&=CARD{source%}
  LONG{&HFF8A24}=ADD(source%,2)
  CARD{&HFF8A36}=SUCC(SHR(long&,1))
  CARD{&HFF8A38}=CARD{ADD(adr%,6)}
  CARD{&HFF8A22}=-long&
  LONG{&HFF8A32}=ADD(ADD(ecr1%,CARD{adr%}),2)
  CARD{&HFF8A30}=SUB(160,SHL(long&,2))
  BYTE{&HFF8A3B}=4
  BYTE{&HFF8A3D}=CARD{ADD(adr%,2)}
  BYTE{&HFF8A3C}=&HC0
  source%=ADD(horiz%,CARD{ADD(adr%,4)})
  long&=CARD{source%}
  LONG{&HFF8A24}=ADD(source%,2)
  CARD{&HFF8A36}=SUCC(SHR(long&,1))
  CARD{&HFF8A38}=CARD{ADD(adr%,6)}
  CARD{&HFF8A22}=-long&
  LONG{&HFF8A32}=ADD(ADD(ecr1%,CARD{adr%}),4)
  CARD{&HFF8A30}=SUB(160,SHL(long&,2))
  BYTE{&HFF8A3B}=4
  BYTE{&HFF8A3D}=CARD{ADD(adr%,2)}
  BYTE{&HFF8A3C}=&HC0
  FOR adr%=&HFF8A00 TO ADD(&HFF8A00,28) STEP 4
    LONG{adr%}=&HAAAA5555
  NEXT adr%
  speed&=1
  fin!=FALSE
  op1|=4
  op2|=7
  eff1|=15
  eff2|=0
  posbuf%=ADD(pos%,2040)
  depbuf%=posbuf%
  finbuf%=ADD(pos%,8)
  z_ob&=3071
  ax_ob1%=0
  ax_ob2%=0
  az_ob1&=3071
  az_ob2&=3071
  x_ob%=MUL(SUB(RANDOM(240),160),256)
  posh%=-40960
  ah1%=-40960
  ah2%=-40960
  azh1&=300
  azh2&=300
  zh&=300
  REPEAT
    jeu
  UNTIL fin!
  black
  ~MFREE(pos%)
RETURN
> PROCEDURE jeu
  LONG{&H200}=ecr1%
  syncro
  LONG{&HFF8A24}=ecr2%
  LONG{&HFF8A36}=&HFA00001
  LONG{&HFF8A32}=ecr2%
  BYTE{&HFF8A3B}=eff1|
  CARD{&HFF8A3C}=&HC000
  adr%=posbuf%
  source%=ADD(horiz%,CARD{ADD(adr%,4)})
  long&=CARD{source%}
  LONG{&HFF8A24}=ADD(source%,2)
  CARD{&HFF8A36}=SUCC(SHR(long&,1))
  CARD{&HFF8A38}=CARD{ADD(adr%,6)}
  CARD{&HFF8A22}=-long&
  LONG{&HFF8A32}=ADD(ecr2%,CARD{adr%})
  CARD{&HFF8A30}=SUB(160,SHL(long&,2))
  BYTE{&HFF8A3B}=op1|
  BYTE{&HFF8A3D}=CARD{ADD(adr%,2)}
  BYTE{&HFF8A3C}=&HC0
  ADD adr%,2048
  source%=ADD(horiz%,CARD{ADD(adr%,4)})
  long&=CARD{source%}
  LONG{&HFF8A24}=ADD(source%,2)
  CARD{&HFF8A36}=SUCC(SHR(long&,1))
  CARD{&HFF8A38}=CARD{ADD(adr%,6)}
  CARD{&HFF8A22}=-long&
  LONG{&HFF8A32}=ADD(ecr2%,CARD{adr%})
  CARD{&HFF8A30}=SUB(160,SHL(long&,2))
  BYTE{&HFF8A3B}=op2|
  BYTE{&HFF8A3D}=CARD{ADD(adr%,2)}
  BYTE{&HFF8A3C}=&HC0
  ADD adr%,2048
  source%=ADD(horiz%,CARD{ADD(adr%,4)})
  long&=CARD{source%}
  LONG{&HFF8A24}=ADD(source%,2)
  CARD{&HFF8A36}=SUCC(SHR(long&,1))
  CARD{&HFF8A38}=CARD{ADD(adr%,6)}
  CARD{&HFF8A22}=-long&
  LONG{&HFF8A32}=ADD(ecr2%,CARD{adr%})
  CARD{&HFF8A30}=SUB(160,SHL(long&,2))
  BYTE{&HFF8A3B}=op1|
  BYTE{&HFF8A3D}=CARD{ADD(adr%,2)}
  BYTE{&HFF8A3C}=&HC0
  ADD adr%,2048
  source%=ADD(horiz%,CARD{ADD(adr%,4)})
  long&=CARD{source%}
  LONG{&HFF8A24}=ADD(source%,2)
  CARD{&HFF8A36}=SUCC(SHR(long&,1))
  CARD{&HFF8A38}=CARD{ADD(adr%,6)}
  CARD{&HFF8A22}=-long&
  LONG{&HFF8A32}=ADD(ecr2%,CARD{adr%})
  CARD{&HFF8A30}=SUB(160,SHL(long&,2))
  BYTE{&HFF8A3B}=op2|
  BYTE{&HFF8A3D}=CARD{ADD(adr%,2)}
  BYTE{&HFF8A3C}=&HC0
  ADD adr%,2048
  source%=ADD(horiz%,CARD{ADD(adr%,4)})
  long&=CARD{source%}
  LONG{&HFF8A24}=ADD(source%,2)
  CARD{&HFF8A36}=SUCC(SHR(long&,1))
  CARD{&HFF8A38}=CARD{ADD(adr%,6)}
  CARD{&HFF8A22}=-long&
  LONG{&HFF8A32}=ADD(ecr2%,CARD{adr%})
  CARD{&HFF8A30}=SUB(160,SHL(long&,2))
  BYTE{&HFF8A3B}=op1|
  BYTE{&HFF8A3D}=CARD{ADD(adr%,2)}
  BYTE{&HFF8A3C}=&HC0
  ADD adr%,2048
  source%=ADD(horiz%,CARD{ADD(adr%,4)})
  long&=CARD{source%}
  LONG{&HFF8A24}=ADD(source%,2)
  CARD{&HFF8A36}=SUCC(SHR(long&,1))
  CARD{&HFF8A38}=CARD{ADD(adr%,6)}
  CARD{&HFF8A22}=-long&
  LONG{&HFF8A32}=ADD(ecr2%,CARD{adr%})
  CARD{&HFF8A30}=SUB(160,SHL(long&,2))
  BYTE{&HFF8A3B}=op2|
  BYTE{&HFF8A3D}=CARD{ADD(adr%,2)}
  BYTE{&HFF8A3C}=&HC0
  ADD adr%,2048
  source%=ADD(horiz%,CARD{ADD(adr%,4)})
  long&=CARD{source%}
  LONG{&HFF8A24}=ADD(source%,2)
  CARD{&HFF8A36}=SUCC(SHR(long&,1))
  CARD{&HFF8A38}=CARD{ADD(adr%,6)}
  CARD{&HFF8A22}=-long&
  LONG{&HFF8A32}=ADD(ecr2%,CARD{adr%})
  CARD{&HFF8A30}=SUB(160,SHL(long&,2))
  BYTE{&HFF8A3B}=op1|
  BYTE{&HFF8A3D}=CARD{ADD(adr%,2)}
  BYTE{&HFF8A3C}=&HC0
  ADD adr%,2048
  source%=ADD(horiz%,CARD{ADD(adr%,4)})
  long&=CARD{source%}
  LONG{&HFF8A24}=ADD(source%,2)
  CARD{&HFF8A36}=SUCC(SHR(long&,1))
  CARD{&HFF8A38}=CARD{ADD(adr%,6)}
  CARD{&HFF8A22}=-long&
  LONG{&HFF8A32}=ADD(ecr2%,CARD{adr%})
  CARD{&HFF8A30}=SUB(160,SHL(long&,2))
  BYTE{&HFF8A3B}=op2|
  BYTE{&HFF8A3D}=CARD{ADD(adr%,2)}
  BYTE{&HFF8A3C}=&HC0
  ADD adr%,2048
  source%=ADD(horiz%,CARD{ADD(adr%,4)})
  long&=CARD{source%}
  LONG{&HFF8A24}=ADD(source%,2)
  CARD{&HFF8A36}=SUCC(SHR(long&,1))
  CARD{&HFF8A38}=CARD{ADD(adr%,6)}
  CARD{&HFF8A22}=-long&
  LONG{&HFF8A32}=ADD(ecr2%,CARD{adr%})
  CARD{&HFF8A30}=SUB(160,SHL(long&,2))
  BYTE{&HFF8A3B}=op1|
  BYTE{&HFF8A3D}=CARD{ADD(adr%,2)}
  BYTE{&HFF8A3C}=&HC0
  IF op1|=7
    ADD adr%,2048
    source%=ADD(horiz%,CARD{ADD(adr%,4)})
    long&=CARD{source%}
    LONG{&HFF8A24}=ADD(source%,2)
    CARD{&HFF8A36}=SUCC(SHR(long&,1))
    CARD{&HFF8A38}=CARD{ADD(adr%,6)}
    CARD{&HFF8A22}=-long&
    LONG{&HFF8A32}=ADD(ecr2%,CARD{adr%})
    CARD{&HFF8A30}=SUB(160,SHL(long&,2))
    BYTE{&HFF8A3B}=op2|
    BYTE{&HFF8A3D}=CARD{ADD(adr%,2)}
    BYTE{&HFF8A3C}=&HC0
  ENDIF
  IF posbuf%>finbuf%
    SUB posbuf%,SHL(speed&,3)
  ELSE
    posbuf%=depbuf%
    SWAP op1|,op2|
    SWAP eff1|,eff2|
  ENDIF
  key|=BYTE{&HFFFFFC02}
  IF key|=&H48 AND speed&<128
    INC speed&
    ADD finbuf%,8
    INC zh&
  ELSE IF key|=&H50 AND speed&>1
    DEC speed&
    SUB finbuf%,8
    DEC zh&
  ELSE IF key|=&H4B AND posh%>-40960
    SUB posh%,2048
  ELSE IF key|=&H4D AND posh%<36608
    ADD posh%,2048
  ENDIF
  posx&=ADD(DIV(ah2%,azh2&),160)
  posy&=ADD(DIV(20480,azh2&),100)
  long&=DIV(8192,azh2&)
  dest%=ADD(ecr2%,ADD(MUL(posy&,160),SHL(SHR(posx&,4),3)))
  source%=ADD(horiz%,MUL(long&,44))
  long&=CARD{source%}
  LONG{&HFF8A24}=ADD(source%,2)
  CARD{&HFF8A36}=SUCC(SHR(long&,1))
  CARD{&HFF8A38}=DIV(5120,azh2&)
  CARD{&HFF8A22}=-long&
  LONG{&HFF8A32}=ADD(dest%,6)
  CARD{&HFF8A30}=SUB(160,SHL(long&,2))
  BYTE{&HFF8A3B}=7
  BYTE{&HFF8A3D}=AND(posx&,&HF)
  BYTE{&HFF8A3C}=&HC0
  posx&=ADD(DIV(posh%,zh&),160)
  posy&=ADD(DIV(20480,zh&),100)
  long&=DIV(8192,zh&)
  dest%=ADD(ecr2%,ADD(MUL(posy&,160),SHL(SHR(posx&,4),3)))
  source%=ADD(horiz%,MUL(long&,44))
  long&=CARD{source%}
  LONG{&HFF8A24}=ADD(source%,2)
  CARD{&HFF8A36}=SUCC(SHR(long&,1))
  CARD{&HFF8A38}=DIV(5120,zh&)
  CARD{&HFF8A22}=-long&
  LONG{&HFF8A32}=ADD(dest%,6)
  CARD{&HFF8A30}=SUB(160,SHL(long&,2))
  BYTE{&HFF8A3B}=4
  BYTE{&HFF8A3D}=AND(posx&,&HF)
  BYTE{&HFF8A3C}=&HC0
  '
  posx&=ADD(DIV(ax_ob2%,az_ob2&),160)
  posy&=ADD(DIV(-25600,az_ob2&),100)
  long&=DIV(20224,az_ob2&)
  dest%=ADD(ecr2%,ADD(MUL(posy&,160),SHL(SHR(posx&,4),3)))
  source%=ADD(horiz%,MUL(long&,44))
  long&=CARD{source%}
  LONG{&HFF8A24}=ADD(source%,2)
  CARD{&HFF8A36}=SUCC(SHR(long&,1))
  CARD{&HFF8A38}=DIV(50944,az_ob2&)
  CARD{&HFF8A22}=-long&
  LONG{&HFF8A32}=ADD(dest%,6)
  CARD{&HFF8A30}=SUB(160,SHL(long&,2))
  BYTE{&HFF8A3B}=7
  BYTE{&HFF8A3D}=AND(posx&,&HF)
  BYTE{&HFF8A3C}=&HC0
  IF z_ob&>ADD(256,speed&)
    SUB z_ob&,speed&
  ELSE
    z_ob&=3071
    x_ob%=MUL(SUB(RANDOM(240),160),256)
  ENDIF
  posx&=ADD(DIV(x_ob%,z_ob&),160)
  posy&=ADD(DIV(-25600,z_ob&),100)
  long&=DIV(20224,z_ob&)
  dest%=ADD(ecr2%,ADD(MUL(posy&,160),SHL(SHR(posx&,4),3)))
  source%=ADD(horiz%,MUL(long&,44))
  long&=CARD{source%}
  LONG{&HFF8A24}=ADD(source%,2)
  CARD{&HFF8A36}=SUCC(SHR(long&,1))
  CARD{&HFF8A38}=DIV(50944,z_ob&)
  CARD{&HFF8A22}=-long&
  LONG{&HFF8A32}=ADD(dest%,6)
  CARD{&HFF8A30}=SUB(160,SHL(long&,2))
  BYTE{&HFF8A3A}=3
  BYTE{&HFF8A3B}=4
  BYTE{&HFF8A3D}=AND(posx&,&HF)
  BYTE{&HFF8A3C}=&HC0
  BYTE{&HFF8A3A}=2
  ax_ob2%=x_ob%
  az_ob2&=z_ob&
  ah2%=posh%
  azh2&=zh&
  IF az_ob1&<SUCC(zh&)
    IF ADD(posh%,8196)>ax_ob1% AND posh%<ADD(ax_ob1%,20480)
      fin!=TRUE
    ENDIF
  ENDIF
  SWAP ecr1%,ecr2%
  SWAP ax_ob1%,ax_ob2%
  SWAP az_ob1&,az_ob2&
  SWAP ah2%,ah1%
  SWAP azh1&,azh2&
RETURN
> PROCEDURE efface_xb
  CARD{&HFF8A20}=2
  CARD{&HFF8A2E}=2
  LONG{&HFF8A24}=xb%
  LONG{&HFF8A36}=&H3E800001
  LONG{&HFF8A32}=xb%
  BYTE{&HFF8A3B}=0
  CARD{&HFF8A3C}=&HC000
  CARD{&HFF8A20}=8
  CARD{&HFF8A2E}=8
RETURN
> PROCEDURE init
  CARD{&HFF8A2E}=8
  LONG{&HFF8A28}=&HFFFFFFFF
  CARD{&HFF8A2C}=&HFFFF
  BYTE{&HFF8A3A}=2
  CARD{&HFF8A20}=8
RETURN
> PROCEDURE white
  FOR col&=0 TO 15
    syncro
    syncro
    FOR adr%=&HFFFF8240 TO &HFFFF825E STEP 2
      val&=CARD{adr%}
      r|=AND(SHR(val&,8),&HF)
      v|=AND(SHR(val&,4),&HF)
      b|=AND(val&,&HF)
      IF r|<>15
        IF r|>7
          SUB r|,7
        ELSE
          ADD r|,8
        ENDIF
      ENDIF
      IF v|<>15
        IF v|>7
          SUB v|,7
        ELSE
          ADD v|,8
        ENDIF
      ENDIF
      IF b|<>15
        IF b|>7
          SUB b|,7
        ELSE
          ADD b|,8
        ENDIF
      ENDIF
      CARD{adr%}=SHL(r|,8) OR SHL(v|,4) OR b|
    NEXT adr%
  NEXT col&
RETURN
