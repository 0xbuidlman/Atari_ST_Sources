res|=XBIOS(4)
IF res|<>0
  PRINT "BASSE RESOLUTION UNIQUEMENT"
  ~INP(2)
  END
ENDIF
CLS
HIDEM
STICK 1
mem%=FRE()
RESERVE FRE()-820000
decor%=MALLOC(564480)
zik%=MALLOC(40000)
play%=zik%+8
stop%=zik%+4
efface%=MALLOC(35840)
gros%=MALLOC(33600)
cgros%=MALLOC(33600)
ecr1%=LPEEK(&H44E)
ecr2%=MALLOC(32000)
samples%=MALLOC(29120)
tabs%=MALLOC(15800)
cheat!=FALSE
wait%=MALLOC(10240)
petit%=MALLOC(3840)
cpetit%=MALLOC(3840)
tab%=MALLOC(1260)
pal%=MALLOC(32)
bulle%=MALLOC(15)
INLINE degas%,156
'
dep%=LONG{BASEPAGE+8}
FOR adr%=dep% TO ADD(dep%,40000) STEP 2
  IF CARD{adr%}=&H7005 AND CARD{ADD(adr%,2)}=&H7005
    LONG{adr%}=&H8F80007
    LONG{adr%+4}=&H8A3C4E71
    CARD{adr%+8}=&H66F6
  ENDIF
NEXT adr%
REPEAT
  ADD dep%,2
UNTIL CARD{dep%}=&H7008 AND CARD{ADD(dep%,2)}=&H7008
my_vbl%=dep%
LONG{dep%}=&H48E7FFFE
REPEAT
  ADD dep%,2
UNTIL CARD{dep%}=&H7009 AND CARD{ADD(dep%,2)}=&H7009
CARD{dep%}=&H4EB9
LONG{dep%+2}=zik%+8
LONG{dep%+6}=&H4CDF7FFF
CARD{dep%+10}=&H4E73
'
LOCATE 1,5
PRINT "VERSION ENREGISTREE A :"
PRINT
PRINT "ABCDEFGHIJKLM"
PRINT "NOPQRSTUVWXYZ"
PRINT
LOCATE 1,15
INPUT "TRAINER (y/n) ";trainer$
IF trainer$="y" OR trainer$="Y"
  cheat!=TRUE
ENDIF
'
BLOAD "A:\DATS\SAMPLES.DAT",samples%
BLOAD "A:\DATS\ZIK.DAT",zik%
BLOAD "A:\DATS\WAIT.PC1",ecr2%
BLOAD "A:\DATS\TABS.DAT",tabs%
~C:degas%(L:ecr2%,L:efface%,4)
BMOVE efface%,wait%,10240
'
VSYNC
super%=GEMDOS(&H20,L:0)
CARD{&H484}=0
~C:zik%(1)
VSYNC
BYTE{&HFFFF820A}=2
BYTE{&HFFFF8260}=0
LONG{&H200}=ecr1%
VSYNC
avbl%=LONG{&H70}
LONG{&H70}=my_vbl%
syncro
'
presentation_1
LONG{&H200}=ecr1%
LONG{&H44E}=ecr1%
syncro
DO
  presentation_2
  score%=0
  vie&=2
  FOR no_tab&=0 TO 24
    IF MOD(no_tab&,5)=0
      world&=DIV(no_tab&,5)
      prep_world
    ENDIF
    win!=FALSE
    prepare_tab
    REPEAT
      start
      joue_tab
      fin
    UNTIL win! OR vie&<0
    IF vie&<0
      no_tab&=1000
    ENDIF
  NEXT no_tab&
  IF no_tab&<1000
    victoire
  ELSE
    defaite
  ENDIF
  hiscores
LOOP
'
> PROCEDURE prep_world
  LONG{&H200}=ecr1%
  syncro
  nom$="A:\DATS\SPRITES\SPR"+STR$(world&)+".PC1"
  BLOAD nom$,ecr2%
  ~C:degas%(L:ecr2%,L:efface%,4)
  xb%=efface%
  dest%=gros%
  FOR y&=0 TO 4
    FOR x&=0 TO 9
      source%=xb%+170*160
      RC_COPY xb%,x&*32,y&*28,32,28 TO xb%,0,170
      FOR l|=0 TO 27
        BMOVE source%,dest%,24
        ADD source%,160
        ADD dest%,24
      NEXT l|
    NEXT x&
  NEXT y&
  dest%=petit%
  FOR x&=0 TO 14
    source%=xb%+170*160
    RC_COPY xb%,x&*16,140,16,16 TO xb%,0,170
    FOR l|=0 TO 15
      BMOVE source%,dest%,16
      ADD source%,160
      ADD dest%,16
    NEXT l|
  NEXT x&
  nom$="A:\DATS\FONDS\FOND"+STR$(world&)+".PC1"
  BLOAD nom$,ecr2%
  ~C:degas%(L:ecr2%,L:efface%,4)
  BMOVE efface%,ADD(efface%,32000),3840
  BMOVE ADD(ecr2%,2),pal%,32
  dest%=cgros%
  FOR source%=gros% TO ADD(gros%,33592) STEP 8
    cache%=CARD{source%} OR CARD{source%+2} OR CARD{source%+4} OR CARD{source%+6}
    CARD{dest%}=cache%
    CARD{dest%+2}=cache%
    LONG{dest%+4}=LONG{dest%}
    ADD dest%,8
  NEXT source%
  dest%=cpetit%
  FOR source%=petit% TO ADD(petit%,3832) STEP 8
    cache%=CARD{source%} OR CARD{source%+2} OR CARD{source%+4} OR CARD{source%+6}
    CARD{dest%}=cache%
    CARD{dest%+2}=cache%
    LONG{dest%+4}=LONG{dest%}
    ADD dest%,8
  NEXT source%
RETURN
> PROCEDURE my_vbl
  ~8
  ~8
  BYTE{&H40C}=1
  BYTE{&HFFFF8205}=BYTE{&H201}
  BYTE{&HFFFF8207}=BYTE{&H202}
  BYTE{&HFFFF8209}=BYTE{&H203}
  ~9
  ~9
  ~9
  ~9
  ~9
RETURN
> PROCEDURE presentation_1
  FOR col&=0 TO &H777 STEP &H111
    syncro
    syncro
    CARD{&HFF8240}=SUB(&H777,col&)
  NEXT col&
  BLOAD "A:\DATS\PRES1.PC1",ecr2%
  ~C:degas%(L:ecr2%,L:efface%,4)
  BMOVE ecr2%+2,pal%,32
  montre2
  FOR nb&=0 TO 49
    syncro
    syncro
  NEXT nb&
  BLOAD "A:\DATS\PRES2.PC1",ecr2%
  ~C:degas%(L:ecr2%,L:efface%,4)
  BMOVE ecr2%+2,pal%,32
  fade
  montre2
  FOR nb&=0 TO 49
    syncro
    syncro
    syncro
  NEXT nb&
  BLOAD "A:\DATS\PRES3.PC1",ecr2%
  ~C:degas%(L:ecr2%,L:efface%,4)
  BMOVE ecr2%+2,pal%,32
  fade
  montre1
  ~INP(2)
RETURN
> PROCEDURE montre1
  LONG{&HFF8A28}=&HFFFFFFFF
  CARD{&HFF8A2C}=&HFFFF
  CARD{&HFF8A2E}=2
  CARD{&HFF8A30}=2
  BYTE{&HFF8A3B}=3
  BYTE{&HFF8A3D}=0
  BYTE{&HFF8A3A}=2
  FOR l|=0 TO 199
    LONG{&H200}=ecr1%
    syncro
    vl|=SUB(199,l|)
    source%=ADD(efface%,MUL(vl|,160))
    CARD{&HFF8A20}=2
    CARD{&HFF8A22}=-158
    LONG{&HFF8A24}=source%
    CARD{&HFF8A36}=80
    CARD{&HFF8A38}=SUCC(vl|)
    LONG{&HFF8A32}=ecr2%
    BYTE{&HFF8A3C}=128
    ~5
    ~5
    ~5
    ~5
    ~5
    CARD{&HFF8A22}=2
    LONG{&HFF8A24}=source%
    CARD{&HFF8A36}=80
    CARD{&HFF8A38}=SUCC(l|)
    LONG{&HFF8A32}=ADD(ecr2%,MUL(vl|,160))
    BYTE{&HFF8A3C}=128
    ~5
    ~5
    ~5
    ~5
    ~5
    SWAP ecr1%,ecr2%
    '
    LONG{&HFF8240}=LONG{pal%}
    LONG{&HFF8244}=LONG{ADD(pal%,4)}
    LONG{&HFF8248}=LONG{ADD(pal%,8)}
    LONG{&HFF824C}=LONG{ADD(pal%,12)}
    LONG{&HFF8250}=LONG{ADD(pal%,16)}
    LONG{&HFF8254}=LONG{ADD(pal%,20)}
    LONG{&HFF8258}=LONG{ADD(pal%,24)}
    LONG{&HFF825C}=LONG{ADD(pal%,28)}
    '
    IF STRIG(1)
      l|=200
    ENDIF
  NEXT l|
  LONG{&H200}=ecr1%
  syncro
  CARD{&HFF8A22}=2
  LONG{&HFF8A24}=efface%
  CARD{&HFF8A36}=80
  CARD{&HFF8A38}=200
  LONG{&HFF8A32}=ecr2%
  BYTE{&HFF8A3C}=128
  ~5
  ~5
  ~5
  ~5
  ~5
  SWAP ecr1%,ecr2%
  LONG{&H200}=ecr1%
  syncro
RETURN
> PROCEDURE montre2
  LONG{&HFF8A28}=&HFFFFFFFF
  CARD{&HFF8A2C}=&HFFFF
  CARD{&HFF8A20}=2
  CARD{&HFF8A22}=2
  CARD{&HFF8A2E}=2
  CARD{&HFF8A30}=2
  BYTE{&HFF8A3D}=0
  BYTE{&HFF8A3A}=2
  BYTE{&HFF8A3B}=0
  LONG{&HFF8A24}=efface%
  CARD{&HFF8A36}=80
  CARD{&HFF8A38}=200
  LONG{&HFF8A32}=ecr2%
  BYTE{&HFF8A3C}=128
  ~5
  ~5
  ~5
  ~5
  ~5
  LONG{&HFF8A24}=efface%
  CARD{&HFF8A36}=80
  CARD{&HFF8A38}=200
  LONG{&HFF8A32}=ecr1%
  BYTE{&HFF8A3C}=128
  ~5
  ~5
  ~5
  ~5
  ~5
  BYTE{&HFF8A3B}=3
  FOR l|=0 TO 99
    LONG{&H200}=ecr1%
    syncro
    vl|=SUB(99,l|)
    LONG{&HFF8A24}=efface%
    CARD{&HFF8A36}=80
    CARD{&HFF8A38}=SUCC(l|)
    LONG{&HFF8A32}=ADD(ecr2%,MUL(vl|,160))
    BYTE{&HFF8A3C}=128
    ~5
    ~5
    ~5
    ~5
    ~5
    ADD vl|,100
    LONG{&HFF8A24}=ADD(efface%,MUL(vl|,160))
    CARD{&HFF8A36}=80
    CARD{&HFF8A38}=SUCC(l|)
    LONG{&HFF8A32}=ADD(ecr2%,16000)
    BYTE{&HFF8A3C}=128
    ~5
    ~5
    ~5
    ~5
    ~5
    SWAP ecr1%,ecr2%
    LONG{&HFF8240}=LONG{pal%}
    LONG{&HFF8244}=LONG{ADD(pal%,4)}
    LONG{&HFF8248}=LONG{ADD(pal%,8)}
    LONG{&HFF824C}=LONG{ADD(pal%,12)}
    LONG{&HFF8250}=LONG{ADD(pal%,16)}
    LONG{&HFF8254}=LONG{ADD(pal%,20)}
    LONG{&HFF8258}=LONG{ADD(pal%,24)}
    LONG{&HFF825C}=LONG{ADD(pal%,28)}
    IF STRIG(1)
      l|=200
    ENDIF
  NEXT l|
  LONG{&H200}=ecr1%
  syncro
  LONG{&HFF8A24}=efface%
  CARD{&HFF8A36}=80
  CARD{&HFF8A38}=200
  LONG{&HFF8A32}=ecr2%
  BYTE{&HFF8A3C}=128
  ~5
  ~5
  ~5
  ~5
  ~5
  SWAP ecr1%,ecr2%
  LONG{&H200}=ecr1%
  syncro
RETURN
> PROCEDURE presentation_2
  BLOAD "A:\DATS\PRES4.PC1",ecr2%
  ~C:degas%(L:ecr2%,L:efface%,4)
  BMOVE ecr2%+2,pal%,32
  fade
  montre2
  REPEAT
  UNTIL STRIG(1)
  fade
RETURN
> PROCEDURE syncro
  BYTE{&H40C}=0
  REPEAT
  UNTIL BYTE{&H40C}
RETURN
> PROCEDURE prepare_tab
  a%=ADD(tabs%,MUL(no_tab&,632))
  deptemp&=CARD{a%}
  dest%=tab%
  FOR source%=ADD(a%,2) TO ADD(a%,631)
    BYTE{dest%}=SHR(BYTE{source%},4)
    BYTE{SUCC(dest%)}=AND(BYTE{source%},&HF)
    ADD dest%,2
  NEXT source%
  '
  cool&=0
  FOR adr%=bulle% TO ADD(bulle%,12) STEP 3
    BYTE{adr%}=&HFF
  NEXT adr%
  '
  dest%=decor%
  FOR l&=0 TO 1175
    vl&=MOD(l&,200)
    source%=ADD(efface%,MUL(vl&,160))
    d%=dest%
    FOR mot&=0 TO 19
      LONG{d%}=LONG{source%}
      LONG{ADD(d%,4)}=LONG{ADD(source%,4)}
      ADD d%,8
      ADD source%,8
    NEXT mot&
    BMOVE dest%,ADD(dest%,160),160
    BMOVE dest%,ADD(dest%,320),160
    ADD dest%,480
  NEXT l&
  '
  LONG{&HFF8A28}=&HFFFFFFFF
  CARD{&HFF8A2C}=&HFFFF
  source%=tab%
  FOR y&=0 TO 41
    FOR x&=0 TO 29
      sp&=BYTE{tab%+30*y&+x&}
      INC source%
      IF sp&>0
        DEC sp&
        put_fond(x&,y&,sp&)
      ENDIF
    NEXT x&
  NEXT y&
  cool1&=0
  cool2&=0
  cool3&=0
  '
RETURN
> PROCEDURE joue_tab
  flippy|=0
  REPEAT
    LONG{&H200}=ecr1%
    syncro
    IF flippy|<20
      INC flippy|
    ELSE
      flippy|=0
    ENDIF
    IF compt&<25
      INC compt&
    ELSE
      compt&=0
      IF cheat!=FALSE
        DEC time&
        time1&=DIV(time&,100)
        time2&=DIV(MOD(time&,100),10)
        time3&=MOD(time&,10)
      ENDIF
      IF time&<10
        sample(17280,4160,1)
      ENDIF
      IF time&=0
        fin!=TRUE
        comptfin&=24
      ENDIF
    ENDIF
    gere_stick
    gere_collisions
    scroll_1
    affiche
    FOR adrb%=bulle% TO ADD(bulle%,12) STEP 3
      IF BYTE{adrb%}<>&HFF
        tempo&=BYTE{adrb%}
        DEC tempo&
        IF tempo&=0
          put_fond(BYTE{SUCC(adrb%)},BYTE{ADD(adrb%,2)},0)
          BYTE{adrb%}=&HFF
        ELSE
          BYTE{adrb%}=tempo&
        ENDIF
      ENDIF
    NEXT adrb%
    SWAP ecr1%,ecr2%
    key|=BYTE{&HFFFFFC02}
    IF key|=&H39
      pause
    ENDIF
  UNTIL fin!
  IF cool&=100
    win!=TRUE
  ELSE
    DEC vie&
  ENDIF
RETURN
> PROCEDURE put_grand(parx&,pary&,parno&)
  offsprite%=MUL(parno&,672)
  dest%=ADD(ecr2%,ADD(MUL(pary&,160),AND(SHR(parx&,1),&HFFF8)))
  d%=dest%
  dec&=AND(parx&,&HF)
  BYTE{&HFF8A3D}=dec&
  ' cache
  CARD{&HFF8A28}=SHR(&HFFFF,dec&)
  BYTE{&HFF8A3B}=4
  source%=ADD(cgros%,offsprite%)
  LONG{&HFF8A24}=source%
  LONG{&HFF8A36}=&H3001C
  LONG{&HFF8A20}=&H80008
  LONG{&HFF8A32}=dest%
  LONG{&HFF8A2E}=&H80090
  BYTE{&HFF8A3C}=&HC0
  LONG{&HFF8A24}=ADD(source%,2)
  LONG{&HFF8A32}=ADD(dest%,2)
  LONG{&HFF8A36}=&H3001C
  BYTE{&HFF8A3C}=&HC0
  LONG{&HFF8A24}=ADD(source%,4)
  LONG{&HFF8A32}=ADD(dest%,4)
  LONG{&HFF8A36}=&H3001C
  BYTE{&HFF8A3C}=&HC0
  LONG{&HFF8A24}=ADD(source%,6)
  LONG{&HFF8A32}=ADD(dest%,6)
  LONG{&HFF8A36}=&H3001C
  BYTE{&HFF8A3C}=&HC0
  ' dessin
  BYTE{&HFF8A3B}=7
  source%=ADD(gros%,offsprite%)
  LONG{&HFF8A24}=source%
  LONG{&HFF8A36}=&H3001C
  LONG{&HFF8A32}=d%
  BYTE{&HFF8A3C}=&HC0
  LONG{&HFF8A24}=ADD(source%,2)
  LONG{&HFF8A32}=ADD(d%,2)
  LONG{&HFF8A36}=&H3001C
  BYTE{&HFF8A3C}=&HC0
  LONG{&HFF8A24}=ADD(source%,4)
  LONG{&HFF8A32}=ADD(d%,4)
  LONG{&HFF8A36}=&H3001C
  BYTE{&HFF8A3C}=&HC0
  LONG{&HFF8A24}=ADD(source%,6)
  LONG{&HFF8A32}=ADD(d%,6)
  LONG{&HFF8A36}=&H3001C
  BYTE{&HFF8A3C}=&HC0
  CARD{&HFF8A28}=&HFFFF
RETURN
> PROCEDURE put_petit(parx&,pary&,parno&)
  offsprite%=MUL(parno&,256)
  dest%=ADD(ecr2%,ADD(MUL(pary&,160),AND(SHR(parx&,1),&HFFF8)))
  d%=dest%
  BYTE{&HFF8A3B}=4
  source%=ADD(cpetit%,offsprite%)
  LONG{&HFF8A24}=source%
  LONG{&HFF8A36}=&H40010
  LONG{&HFF8A20}=&H2000A
  LONG{&HFF8A32}=dest%
  LONG{&HFF8A2E}=&H2009A
  CARD{&HFF8A3C}=&HC000
  BYTE{&HFF8A3B}=7
  source%=ADD(petit%,offsprite%)
  LONG{&HFF8A24}=source%
  LONG{&HFF8A36}=&H40010
  LONG{&HFF8A32}=d%
  BYTE{&HFF8A3C}=&HC0
RETURN
> PROCEDURE put_fond(parx&,pary&,parno&)
  BYTE{ADD(tab%,ADD(MUL(pary&,30),parx&))}=SUCC(parno&)
  MUL parx&,32
  MUL pary&,28
  offsprite%=MUL(parno&,672)
  dest%=ADD(decor%,ADD(MUL(pary&,480),AND(SHR(parx&,1),&HFFF8)))
  d%=dest%
  ' cache
  BYTE{&HFF8A3B}=4
  source%=ADD(cgros%,offsprite%)
  LONG{&HFF8A24}=source%
  LONG{&HFF8A36}=&H8001C
  LONG{&HFF8A20}=&H2000A
  LONG{&HFF8A32}=dest%
  LONG{&HFF8A2E}=&H201D2
  CARD{&HFF8A3C}=&HC000
  ' dessin
  BYTE{&HFF8A3B}=7
  source%=ADD(gros%,offsprite%)
  LONG{&HFF8A24}=source%
  LONG{&HFF8A36}=&H8001C
  LONG{&HFF8A32}=d%
  BYTE{&HFF8A3C}=&HC0
RETURN
> PROCEDURE eff_fond(parx&,pary&)
  BYTE{ADD(tab%,ADD(MUL(pary&,30),parx&))}=0
  MUL parx&,32
  MUL pary&,28
  dest%=ADD(decor%,ADD(MUL(pary&,480),AND(SHR(parx&,1),&HFFF8)))
  parx&=MOD(parx&,320)
  pary&=MOD(pary&,200)
  source%=ADD(efface%,ADD(MUL(pary&,160),AND(SHR(parx&,1),&HFFF8)))
  BYTE{&HFF8A3B}=3
  LONG{&HFF8A20}=&H20092
  LONG{&HFF8A2E}=&H201D2
  LONG{&HFF8A36}=&H8001C
  LONG{&HFF8A24}=source%
  LONG{&HFF8A32}=dest%
  CARD{&HFF8A3C}=&HC000
RETURN
> PROCEDURE sample(paroff&,parlong&,freq|)
  BYTE{&HFF8901}=0
  BYTE{&HFF8921}=freq|
  paradr%=ADD(samples%,paroff&)
  LONG{&H204}=paradr%
  BYTE{&HFF8903}=BYTE{&H205}
  BYTE{&HFF8905}=BYTE{&H206}
  BYTE{&HFF8907}=BYTE{&H207}
  LONG{&H204}=ADD(paradr%,parlong&)
  BYTE{&HFF890F}=BYTE{&H205}
  BYTE{&HFF8911}=BYTE{&H206}
  BYTE{&HFF8913}=BYTE{&H207}
  BYTE{&HFF8901}=1
RETURN
> PROCEDURE affiche
  IF BTST(comptvie&,0)=0
    put_grand(SUB(xh&,xecr&),SUB(yh&,yecr&),ap&)
  ENDIF
  IF comptvie&>0
    DEC comptvie&
  ENDIF
  IF ap&<af&
    INC ap&
  ELSE
    ap&=as&
  ENDIF
  put_petit(0,2,12)
  IF vie&=<9 AND vie&>=0
    put_petit(16,2,vie&)
  ELSE IF vie&<0
    put_petit(16,2,0)
  ELSE IF vie&>9
    put_petit(16,2,9)
  ENDIF
  put_petit(0,18,10)
  IF life&>20 OR flippy|>10
    put_petit(16,18,life1&)
    put_petit(32,18,life2&)
    put_petit(48,18,life3&)
  ENDIF
  put_petit(224,2,11)
  put_petit(240,2,cool1&)
  put_petit(256,2,cool2&)
  put_petit(272,2,cool3&)
  '
  put_petit(112,2,14)
  IF time&>10 OR flippy|>10
    put_petit(128,2,time1&)
    put_petit(144,2,time2&)
    put_petit(160,2,time3&)
  ENDIF
  '
  put_petit(224,18,13)
  put_petit(240,18,score1&)
  put_petit(256,18,score2&)
  put_petit(272,18,score3&)
  put_petit(288,18,score4&)
  put_petit(304,18,score5&)
RETURN
> PROCEDURE scroll_1
  xecr&=DIV(ADD(SUB(xh&,144),xecr&),2)
  yecr&=DIV(ADD(SUB(yh&,86),yecr&),2)
  IF xecr&<0
    xecr&=0
  ENDIF
  IF xecr&>639
    xecr&=639
  ENDIF
  IF yecr&<0
    yecr&=0
  ENDIF
  IF yecr&>975
    yecr&=975
  ENDIF
  source%=ADD(decor%,ADD(MUL(yecr&,480),AND(SHR(xecr&,1),&HFFF8)))
  dec&=SUB(15,AND(xecr&,&HF))
  BYTE{&HFF8A3D}=ADD(dec&,128)
  BYTE{&HFF8A3B}=3
  LONG{&HFF8A20}=&H80140
  LONG{&HFF8A2E}=&H80008
  LONG{&HFF8A24}=source%
  LONG{&HFF8A32}=ecr2%
  LONG{&HFF8A36}=&H1400C8
  BYTE{&HFF8A3C}=128
  ~5
  ~5
  ~5
  ~5
  ~5
  LONG{&HFF8A24}=ADD(source%,2)
  LONG{&HFF8A32}=ADD(ecr2%,2)
  LONG{&HFF8A36}=&H1400C8
  BYTE{&HFF8A3C}=128
  ~5
  ~5
  ~5
  ~5
  ~5
  LONG{&HFF8A24}=ADD(source%,4)
  LONG{&HFF8A32}=ADD(ecr2%,4)
  LONG{&HFF8A36}=&H1400C8
  BYTE{&HFF8A3C}=128
  ~5
  ~5
  ~5
  ~5
  ~5
  LONG{&HFF8A24}=ADD(source%,6)
  LONG{&HFF8A32}=ADD(ecr2%,6)
  LONG{&HFF8A36}=&H1400C8
  BYTE{&HFF8A3C}=128
  ~5
  ~5
  ~5
  ~5
  ~5
RETURN
> PROCEDURE gere_stick
  pos&=STICK(1)
  feu!=STRIG(1)
  IF pos&<3
    IF saut!=FALSE
      IF dep&>0
        as&=8
        af&=8
      ELSE
        as&=9
        af&=9
      ENDIF
    ENDIF
  ELSE IF pos&>3 AND pos&<7
    dep&=-6
    as&=20
    af&=29
    ADD xh&,dep&
    IF saut!
      ADD as&,20
      ADD af&,20
    ENDIF
  ELSE IF pos&>7 AND pos&<11
    dep&=6
    as&=10
    af&=19
    ADD xh&,dep&
    IF saut!
      ADD as&,20
      ADD af&,20
    ENDIF
  ENDIF
  IF saut!
    SUB yh&,saut&
    IF saut&>-10
      DEC saut&
      IF saut&=-10
        sample(10560,2560,0)
      ENDIF
    ENDIF
    IF saut&>0
      no1&=@case(ADD(xh&,16),yh&)
    ELSE
      no1&=@case(ADD(xh&,16),ADD(yh&,28))
    ENDIF
    IF no1&>1 AND no1&<5
      sample(13120,1280,1)
      IF saut&>0
        saut&=-1
      ELSE
        saut&=0
        saut!=FALSE
        yh&=MUL(DIV(yh&,28),28)
        SUB as&,20
        SUB af&,20
      ENDIF
    ENDIF
  ELSE
    IF feu!
      sample(22720,6400,0)
      saut!=TRUE
      saut&=8
      IF pos&<3
        IF dep&>0
          as&=30
          af&=39
        ELSE
          as&=40
          af&=49
        ENDIF
      ELSE
        ADD as&,20
        ADD af&,20
      ENDIF
    ELSE
      no1&=@case(ADD(xh&,16),ADD(yh&,28))
      IF no1&<2 OR no1&>4
        saut!=TRUE
        saut&=-1
        ADD as&,20
        ADD af&,20
      ENDIF
    ENDIF
  ENDIF
  '
  no2&=@case(ADD(xh&,16),ADD(yh&,14))
  IF no2&=1
    sample(7040,3520,1)
    saut&=11
    IF saut!=FALSE
      saut!=TRUE
      ADD as&,20
      ADD af&,20
      IF pos&=0
        as&=30
        af&=39
      ENDIF
    ENDIF
    cx&=DIV(ADD(xh&,16),32)
    cy&=DIV(ADD(yh&,14),28)
    yh&=MUL(cy&,28)
    IF BYTE{ADD(bulle%,12)}<>&HFF
      put_fond(BYTE{ADD(bulle%,13)},BYTE{ADD(bulle%,14)},0)
    ENDIF
    FOR offb&=14 TO 3 STEP -1
      BYTE{ADD(bulle%,offb&)}=BYTE{ADD(bulle%,SUB(offb&,3))}
    NEXT offb&
    BYTE{bulle%}=31
    BYTE{SUCC(bulle%)}=cx&
    BYTE{ADD(bulle%,2)}=cy&
    eff_fond(cx&,cy&)
  ENDIF
  IF ap&<as& OR ap&>af&
    ap&=as&
  ENDIF
  IF xh&<0
    xh&=0
  ELSE IF xh&>928
    xh&=928
  ENDIF
  IF yh&<0
    yh&=0
  ELSE IF yh&>1147
    yh&=1147
  ENDIF
  '
RETURN
> PROCEDURE gere_collisions
  IF no2&=5
    sample(0,7040,1)
    IF comptvie&=0
      comptvie&=5
      IF cheat!=FALSE
        SUB life&,10
        life1&=DIV(life&,100)
        life2&=DIV(MOD(life&,100),10)
        life3&=MOD(life&,10)
      ENDIF
      IF life&=0
        fin!=TRUE
      ENDIF
    ENDIF
    eff_fond(DIV(ADD(xh&,16),32),DIV(ADD(yh&,14),28))
  ELSE IF no2&=6
    sample(14400,2880,1)
    ADD time&,30
    time1&=DIV(time&,100)
    time2&=DIV(MOD(time&,100),10)
    time3&=MOD(time&,10)
    INC score%
    IF MOD(score%,2000)=0
      INC vie&
    ENDIF
    INC score%
    IF MOD(score%,2000)=0
      INC vie&
    ENDIF
    INC score%
    IF MOD(score%,2000)=0
      INC vie&
    ENDIF
    INC score%
    IF MOD(score%,2000)=0
      INC vie&
    ENDIF
    INC score%
    IF MOD(score%,2000)=0
      INC vie&
    ENDIF
    score1&=DIV(score%,10000)
    score2&=DIV(MOD(score%,10000),1000)
    score3&=DIV(MOD(score%,1000),100)
    score4&=DIV(MOD(score%,100),10)
    score5&=MOD(score%,10)
    eff_fond(DIV(ADD(xh&,16),32),DIV(ADD(yh&,14),28))
  ELSE IF no2&=7
    sample(14400,2880,1)
    ADD life&,20
    life1&=DIV(life&,100)
    life2&=DIV(MOD(life&,100),10)
    life3&=MOD(life&,10)
    INC score%
    IF MOD(score%,2000)=0
      INC vie&
    ENDIF
    INC score%
    IF MOD(score%,2000)=0
      INC vie&
    ENDIF
    INC score%
    IF MOD(score%,2000)=0
      INC vie&
    ENDIF
    INC score%
    IF MOD(score%,2000)=0
      INC vie&
    ENDIF
    INC score%
    IF MOD(score%,2000)=0
      INC vie&
    ENDIF
    score1&=DIV(score%,10000)
    score2&=DIV(MOD(score%,10000),1000)
    score3&=DIV(MOD(score%,1000),100)
    score4&=DIV(MOD(score%,100),10)
    score5&=MOD(score%,10)
    eff_fond(DIV(ADD(xh&,16),32),DIV(ADD(yh&,14),28))
  ELSE IF no2&=8
    sample(21440,1280,1)
    INC cool&
    INC score%
    IF MOD(score%,2000)=0
      INC vie&
    ENDIF
    INC score%
    IF MOD(score%,2000)=0
      INC vie&
    ENDIF
    score1&=DIV(score%,10000)
    score2&=DIV(MOD(score%,10000),1000)
    score3&=DIV(MOD(score%,1000),100)
    score4&=DIV(MOD(score%,100),10)
    score5&=MOD(score%,10)
    cool1&=DIV(cool&,100)
    cool2&=DIV(MOD(cool&,100),10)
    cool3&=MOD(cool&,10)
    IF cool&=100
      fin!=TRUE
    ENDIF
    eff_fond(DIV(ADD(xh&,16),32),DIV(ADD(yh&,14),28))
  ENDIF
RETURN
> PROCEDURE fin
  flippy|=25
  FOR adr%=&HFF8A00 TO &HFF8A1C STEP 4
    LONG{adr%}=&HFFFFFFFF
  NEXT adr%
  v1%=&X1000000000000000
  v2%=&X1
  FOR nb&=0 TO 8
    CARD{ADD(&HFF8A00,SHL(nb&,1))}=0
    LONG{&H200}=ecr1%
    syncro
    gere_stick
    BYTE{&HFF8A3A}=3
    scroll_1
    BYTE{&HFF8A3A}=2
    affiche
    SWAP ecr1%,ecr2%
    FOR adr%=&HFF8A00 TO &HFF8A1E STEP 2
      CARD{adr%}=CARD{adr%} AND NOT v2%
    NEXT adr%
    LONG{&H200}=ecr1%
    syncro
    gere_stick
    BYTE{&HFF8A3A}=3
    scroll_1
    BYTE{&HFF8A3A}=2
    affiche
    SWAP ecr1%,ecr2%
    CARD{SUB(&HFF8A1E,SHL(nb&,1))}=0
    LONG{&H200}=ecr1%
    syncro
    gere_stick
    BYTE{&HFF8A3A}=3
    scroll_1
    BYTE{&HFF8A3A}=2
    affiche
    SWAP ecr1%,ecr2%
    FOR adr%=&HFF8A00 TO &HFF8A1E STEP 2
      CARD{adr%}=CARD{adr%} AND NOT v1%
    NEXT adr%
    LONG{&H200}=ecr1%
    syncro
    gere_stick
    BYTE{&HFF8A3A}=3
    scroll_1
    BYTE{&HFF8A3A}=2
    affiche
    SWAP ecr1%,ecr2%
    DIV v1%,2
    MUL v2%,2
  NEXT nb&
  xh=SUB(xh&,xecr&)
  yh=SUB(yh&,yecr&)
  long&=SQR((64-xh)^2+(144-yh)^2)/6
  IF long&=0
    INC long&
  ENDIF
  rapx=(64-xh)/long&
  rapy=(144-yh)/long&
  IF xh<64
    ap&=10
    af&=19
    as&=10
  ELSE
    ap&=20
    af&=29
    as&=20
  ENDIF
  xecr&=0
  yecr&=0
  FOR tobe&=0 TO long&
    LONG{&H200}=ecr1%
    syncro
    ADD xh,rapx
    ADD yh,rapy
    BYTE{&HFF8A3A}=3
    scroll_1
    BYTE{&HFF8A3A}=2
    xh&=xh
    yh&=yh
    xecr&=0
    yecr&=0
    affiche
    SWAP ecr1%,ecr2%
  NEXT tobe&
  xh&=64
  yh&=1120
  xecr&=SUB(xh&,144)
  yecr&=SUB(yh&,86)
  ap&=8
  as&=8
  af&=8
  IF life&>0 AND time&>0
    exito!=FALSE
    REPEAT
      LONG{&H200}=ecr1%
      syncro
      BYTE{&HFF8A3A}=3
      scroll_1
      BYTE{&HFF8A3A}=2
      sample(21440,1280,2)
      IF time&>0
        DEC time&
        INC score%
        IF MOD(score%,2000)=0
          INC vie&
        ENDIF
        INC score%
        IF MOD(score%,2000)=0
          INC vie&
        ENDIF
      ENDIF
      IF life&>0
        DEC life&
        INC score%
        IF MOD(score%,2000)=0
          INC vie&
        ENDIF
        INC score%
        IF MOD(score%,2000)=0
          INC vie&
        ENDIF
      ENDIF
      time1&=DIV(time&,100)
      time2&=DIV(MOD(time&,100),10)
      time3&=MOD(time&,10)
      life1&=DIV(life&,100)
      life2&=DIV(MOD(life&,100),10)
      life3&=MOD(life&,10)
      score1&=DIV(score%,10000)
      score2&=DIV(MOD(score%,10000),1000)
      score3&=DIV(MOD(score%,1000),100)
      score4&=DIV(MOD(score%,100),10)
      score5&=MOD(score%,10)
      affiche
      SWAP ecr1%,ecr2%
      IF life&=0 AND time&=0
        exito!=TRUE
      ENDIF
    UNTIL exito!
  ENDIF
  LONG{&H200}=ecr1%
  syncro
RETURN
> PROCEDURE start
  flippy|=25
  FOR adr%=bulle% TO ADD(bulle%,12) STEP 3
    IF BYTE{adr%}<>&HFF
      put_fond(BYTE{SUCC(adr%)},BYTE{ADD(adr%,2)},0)
    ENDIF
    BYTE{adr%}=&HFF
  NEXT adr%
  '
  marche&=0
  time&=deptemp&
  life&=100
  xh&=64
  yh&=1120
  saut!=FALSE
  saut&=0
  dep&=3
  as&=8
  af&=8
  ap&=8
  fin!=FALSE
  LONG{&HFF8A28}=&HFFFFFFFF
  CARD{&HFF8A2C}=&HFFFF
  CARD{&HFF8920}=&X1
  compt&=0
  comptvie&=0
  time1&=DIV(time&,100)
  time2&=DIV(MOD(time&,100),10)
  time3&=MOD(time&,10)
  score1&=DIV(score%,10000)
  score2&=DIV(MOD(score%,10000),1000)
  score3&=DIV(MOD(score%,1000),100)
  score4&=DIV(MOD(score%,100),10)
  score5&=MOD(score%,10)
  life1&=1
  life2&=0
  life3&=0
  xecr&=SUB(xh&,144)
  yecr&=SUB(yh&,86)
  LONG{&H200}=ecr1%
  syncro
  FOR adr%=&HFF8A00 TO &HFF8A1C STEP 4
    LONG{adr%}=0
  NEXT adr%
  BYTE{&HFF8A3A}=3
  scroll_1
  BYTE{&HFF8A3A}=2
  affiche
  RC_COPY wait%,0,0,150,41 TO ecr2%,85,50
  nt1&=DIV(SUCC(no_tab&),10)
  nt2&=MOD(SUCC(no_tab&),10)
  RC_COPY wait%,nt1&*18,44,18,20 TO ecr2%,181,50
  RC_COPY wait%,nt2&*18,44,18,20 TO ecr2%,200,50
  SWAP ecr1%,ecr2%
  LONG{&H200}=ecr1%
  syncro
  BMOVE pal%,&HFFFF8240,32
  LONG{&HFF8A28}=&HFFFFFFFF
  CARD{&HFF8A2C}=&HFFFF
  REPEAT
  UNTIL STRIG(1)
  WHILE STRIG(1)
  WEND
  v1%=&X1000000000000000
  v2%=&X1
  FOR nb&=0 TO 8
    CARD{ADD(&HFF8A00,SHL(nb&,1))}=&HFFFF
    LONG{&H200}=ecr1%
    syncro
    gere_stick
    gere_collisions
    BYTE{&HFF8A3A}=3
    scroll_1
    BYTE{&HFF8A3A}=2
    affiche
    SWAP ecr1%,ecr2%
    FOR adr%=&HFF8A00 TO &HFF8A1E STEP 2
      CARD{adr%}=CARD{adr%} OR v2%
    NEXT adr%
    LONG{&H200}=ecr1%
    syncro
    gere_stick
    gere_collisions
    BYTE{&HFF8A3A}=3
    scroll_1
    BYTE{&HFF8A3A}=2
    affiche
    SWAP ecr1%,ecr2%
    CARD{SUB(&HFF8A1E,SHL(nb&,1))}=&HFFFF
    LONG{&H200}=ecr1%
    syncro
    gere_stick
    gere_collisions
    BYTE{&HFF8A3A}=3
    scroll_1
    BYTE{&HFF8A3A}=2
    affiche
    SWAP ecr1%,ecr2%
    FOR adr%=&HFF8A00 TO &HFF8A1E STEP 2
      CARD{adr%}=CARD{adr%} OR v1%
    NEXT adr%
    LONG{&H200}=ecr1%
    syncro
    gere_stick
    gere_collisions
    BYTE{&HFF8A3A}=3
    scroll_1
    BYTE{&HFF8A3A}=2
    affiche
    SWAP ecr1%,ecr2%
    DIV v1%,2
    MUL v2%,2
  NEXT nb&
RETURN
> PROCEDURE pause
  '
  LONG{&H200}=ecr1%
  syncro
  LONG{&HFF8A24}=ecr1%
  CARD{&HFF8A36}=16000
  CARD{&HFF8A38}=1
  CARD{&HFF8A20}=2
  LONG{&HFF8A28}=&HFFFFFFFF
  CARD{&HFF8A2C}=&HFFFF
  LONG{&HFF8A32}=ecr2%
  CARD{&HFF8A2E}=2
  BYTE{&HFF8A3B}=3
  BYTE{&HFF8A3D}=0
  BYTE{&HFF8A3A}=2
  BYTE{&HFF8A3C}=128
  ~5
  ~5
  ~5
  ~5
  ~5
  SWAP ecr1%,ecr2%
  BYTE{&HFF8A3B}=0
  CARD{&HFF8A22}=2
  CARD{&HFF8A30}=2
  FOR l|=0 TO 18
    LONG{&H200}=ecr1%
    syncro
    LONG{&HFF8A24}=ecr1%
    CARD{&HFF8A36}=80
    CARD{&HFF8A38}=SUCC(ADD(l|,l|))
    LONG{&HFF8A32}=ADD(ecr2%,MUL(SUB(100,l|),160))
    BYTE{&HFF8A3C}=&H128
    ~5
    ~5
    ~5
    ~5
    ~5
    SWAP ecr1%,ecr2%
  NEXT l|
  LONG{&H200}=ecr1%
  syncro
  LONG{&HFF8A24}=ecr1%
  CARD{&HFF8A36}=16000
  CARD{&HFF8A38}=1
  LONG{&HFF8A32}=ecr2%
  BYTE{&HFF8A3B}=3
  BYTE{&HFF8A3C}=128
  ~5
  ~5
  ~5
  ~5
  ~5
  LONG{&HFF8A24}=ADD(wait%,80)
  CARD{&HFF8A36}=24
  CARD{&HFF8A38}=18
  CARD{&HFF8A22}=114
  LONG{&HFF8A32}=ADD(ecr2%,14616)
  CARD{&HFF8A30}=114
  BYTE{&HFF8A3C}=128
  ~5
  ~5
  ~5
  ~5
  ~5
  SWAP ecr1%,ecr2%
  LONG{&H200}=ecr1%
  syncro
  REPEAT
  UNTIL STRIG(1)
  WHILE STRIG(1)
  WEND
  LONG{&HFF8A28}=&HFFFFFFFF
  CARD{&HFF8A2C}=&HFFFF
RETURN
> PROCEDURE defaite
  LONG{&H200}=ecr1%
  syncro
  fade
  '
  BLOAD "A:\DATS\DEF2.PC1",efface%
  ~C:degas%(L:efface%,L:gros%,4)
  BMOVE efface%+2,pal%,32
  dest%=cgros%
  FOR source%=gros% TO ADD(gros%,31992) STEP 8
    cache%=CARD{source%} OR CARD{source%+2} OR CARD{source%+4} OR CARD{source%+6}
    CARD{dest%}=cache%
    CARD{dest%+2}=cache%
    LONG{dest%+4}=LONG{dest%}
    ADD dest%,8
  NEXT source%
  BLOAD "A:\DATS\DEF1.PC1",efface%
  ~C:degas%(L:efface%,L:ecr1%,4)
  BMOVE ecr1%,ecr2%,32000
  BMOVE ecr1%,efface%,32000
  '
  syncro
  CARD{zik%+8}=&H4E75
  syncro
  ~C:stop%()
  syncro
  its1%=LONG{&HFFFFFA06}
  its2%=LONG{&HFFFFFA12}
  syncro
  LONG{&HFFFFFA06}=0
  LONG{&HFFFFFA12}=0
  '
  '
  eff1|=0
  eff2|=15
  '
  px&=0
  py&=0
  '
  syncro
  BMOVE pal%,&HFFFF8240,32
  '
  final
  '
  LONG{&H200}=ecr1%
  syncro
  fade
  syncro
  LONG{&HFFFFFA06}=its1%
  LONG{&HFFFFFA12}=its2%
  syncro
  LONG{&HFFFFFA06}=its1%
  LONG{&HFFFFFA12}=its2%
  syncro
  CARD{&H210}=&H4E73
  avbl%=LONG{&H70}
  LONG{&H70}=&H210
  BLOAD "A:\DATS\ZIK.DAT",zik%
  ~C:zik%(1)
  LONG{&H70}=avbl%
  syncro
RETURN
> PROCEDURE final
  zogla|=0
  aoff1&=2
  aoff2&=2
  off&=0
  sx&=130
  sy&=76
  dx&=3
  dy&=3
  FOR nb&=0 TO 50
    SWAP eff1|,eff2|
    FOR zz&=512 TO 272 STEP -16
      LONG{&H200}=ecr1%
      syncro
      BYTE{&HFF8A3B}=eff1|
      BYTE{&HFF8A3A}=2
      BYTE{&HFF8A3D}=0
      LONG{&HFF8A20}=0
      CARD{&HFF8A2E}=8
      LONG{&HFF8A24}=ecr2%
      LONG{&HFF8A36}=&HFA00001
      LONG{&HFF8A28}=&HFFFFFFFF
      CARD{&HFF8A2C}=&HFFFF
      LONG{&HFF8A32}=ecr2%
      BYTE{&HFF8A3C}=&HC0
      '
      LONG{&HFF8A24}=ADD(efface%,aoff2&)
      CARD{&HFF8A36}=5
      CARD{&HFF8A38}=57
      CARD{&HFF8A20}=8
      CARD{&HFF8A22}=128
      LONG{&HFF8A32}=ADD(ecr2%,aoff2&)
      CARD{&HFF8A30}=128
      BYTE{&HFF8A3B}=3
      BYTE{&HFF8A3C}=&HC0
      '
      BYTE{&HFF8A3B}=0
      LONG{&HFF8A24}=ecr1%
      CARD{&HFF8A36}=5
      CARD{&HFF8A38}=57
      LONG{&HFF8A32}=ADD(ecr2%,ADD(aoff2&,2))
      BYTE{&HFF8A3C}=&HC0
      CARD{&HFF8A36}=5
      CARD{&HFF8A38}=57
      LONG{&HFF8A32}=ADD(ecr2%,ADD(aoff2&,4))
      BYTE{&HFF8A3C}=&HC0
      '
      '
      LONG{&HFF8A20}=0
      BYTE{&HFF8A3B}=2
      BYTE{&HFF8A3A}=0
      FOR z&=zz& TO 2560 STEP 256
        x&=DIV(40960,z&)
        y&=DIV(25600,z&)
        x1&=SUB(160,x&)
        y1&=SUB(100,y&)
        x2&=ADD(160,x&)
        y2&=ADD(100,y&)
        b1&=AND(SHR(x1&,1),&HFFF8)
        b2&=AND(SHR(x2&,1),&HFFF8)
        LONG{&HFF8A32}=ADD(ecr2%,ADD(MUL(y1&,160),b1&))
        CARD{&HFF8A28}=SHR(&HFFFF,AND(x1&,&HF))
        CARD{&HFF8A2C}=SHL(&HFFFF,SUB(15,AND(x2&,&HF)))
        CARD{&HFF8A36}=SUCC(DIV(SUB(b2&,b1&),8))
        CARD{&HFF8A38}=SUB(y2&,y1&)
        CARD{&HFF8A30}=SUB(160,SUB(b2&,b1&))
        BYTE{&HFF8A3C}=&HC0
      NEXT z&
      '
      x1&=146
      y1&=90
      x2&=174
      y2&=110
      b1&=AND(SHR(x1&,1),&HFFF8)
      b2&=AND(SHR(x2&,1),&HFFF8)
      BYTE{&HFF8A3B}=4
      LONG{&HFF8A32}=ADD(ecr2%,ADD(MUL(y1&,160),b1&))
      CARD{&HFF8A28}=SHR(&HFFFF,AND(x1&,&HF))
      CARD{&HFF8A2C}=SHL(&HFFFF,SUB(15,AND(x2&,&HF)))
      CARD{&HFF8A36}=SUCC(DIV(SUB(b2&,b1&),8))
      CARD{&HFF8A38}=SUB(y2&,y1&)
      CARD{&HFF8A30}=SUB(160,SUB(b2&,b1&))
      BYTE{&HFF8A3C}=&HC0
      '
      CARD{&HFF8A20}=8
      CARD{&HFF8A22}=128
      CARD{&HFF8A30}=128
      BYTE{&HFF8A3A}=2
      '
      spoff&=ADD(MUL(px&,32),MUL(py&,9120))
      off&=ADD(MUL(sy&,160),AND(SHR(sx&,1),&HFFF8))
      dec&=AND(sx&,&HF)
      aoff2&=ADD(off&,2)
      BYTE{&HFF8A3D}=dec&
      CARD{&HFF8A28}=SHR(&HFFFF,dec&)
      CARD{&HFF8A2C}=SHL(&HFFFF,SUB(15,dec&))
      '
      BYTE{&HFF8A3B}=4
      LONG{&HFF8A24}=ADD(cgros%,spoff&)
      CARD{&HFF8A36}=5
      CARD{&HFF8A38}=57
      LONG{&HFF8A32}=ADD(ecr2%,off&)
      BYTE{&HFF8A3C}=&HC0
      LONG{&HFF8A24}=ADD(cgros%,ADD(spoff&,2))
      CARD{&HFF8A36}=5
      CARD{&HFF8A38}=57
      LONG{&HFF8A32}=ADD(ecr2%,ADD(off&,2))
      BYTE{&HFF8A3C}=&HC0
      '
      BYTE{&HFF8A3B}=7
      LONG{&HFF8A24}=ADD(gros%,spoff&)
      CARD{&HFF8A36}=5
      CARD{&HFF8A38}=57
      LONG{&HFF8A32}=ADD(ecr2%,off&)
      BYTE{&HFF8A3C}=&HC0
      LONG{&HFF8A24}=ADD(gros%,ADD(spoff&,2))
      CARD{&HFF8A36}=5
      CARD{&HFF8A38}=57
      LONG{&HFF8A32}=ADD(ecr2%,ADD(off&,2))
      BYTE{&HFF8A3C}=&HC0
      BYTE{&HFF8A3B}=3
      LONG{&HFF8A24}=ADD(gros%,ADD(spoff&,4))
      CARD{&HFF8A36}=5
      CARD{&HFF8A38}=57
      LONG{&HFF8A32}=ADD(ecr2%,ADD(off&,4))
      BYTE{&HFF8A3C}=&HC0
      LONG{&HFF8A24}=ADD(gros%,ADD(spoff&,6))
      CARD{&HFF8A36}=5
      CARD{&HFF8A38}=57
      LONG{&HFF8A32}=ADD(ecr2%,ADD(off&,6))
      BYTE{&HFF8A3C}=&HC0
      '
      IF zogla|=2
        zogla|=0
        IF px&<4
          INC px&
        ELSE
          px&=0
          IF py&<2
            INC py&
          ELSE
            py&=0
          ENDIF
        ENDIF
      ELSE
        INC zogla|
      ENDIF
      '
      IF sx&>40 AND sx&<216
        ADD sx&,dx&
      ELSE
        dx&=-dx&
        ADD sx&,dx&
        sample(13120,1280,0)
      ENDIF
      IF sy&>25 AND sy&<118
        ADD sy&,dy&
      ELSE
        dy&=-dy&
        ADD sy&,dy&
        sample(13120,1280,0)
      ENDIF
      '
      SWAP ecr1%,ecr2%
      SWAP aoff1&,aoff2&
    NEXT zz&
  NEXT nb&
RETURN
> PROCEDURE hiscores
  fade
  BLOAD "A:\DATS\HISCORE.PC1",ecr2%
  ~C:degas%(L:ecr2%,L:decor%,4)
  BMOVE ecr2%+2,pal%,32
  '
  LONG{&H44E}=efface%
  CLS
  LONG{&HFF8A24}=decor%
  CARD{&HFF8A36}=3280
  CARD{&HFF8A38}=1
  CARD{&HFF8A20}=2
  LONG{&HFF8A28}=&HFFFFFFFF
  CARD{&HFF8A2C}=&HFFFF
  LONG{&HFF8A32}=efface%
  CARD{&HFF8A2E}=2
  BYTE{&HFF8A3B}=3
  BYTE{&HFF8A3D}=0
  BYTE{&HFF8A3A}=2
  BYTE{&HFF8A3C}=128
  ~5
  ~5
  ~5
  ~5
  ~5
  montre2
  BMOVE ecr1%,ecr2%,32000
  BLOAD "A:\DATS\SCORES.DAT",tab%
  '
  adr%=tab%
  apos&=-1
  FOR pos&=0 TO 5
    IF score%>LONG{ADD(adr%,6)}
      apos&=pos&
      pos&=10
    ENDIF
    ADD adr%,10
  NEXT pos&
  '
  IF apos&<>-1
    entre_score
  ENDIF
  show_score
RETURN
> PROCEDURE show_score
  '
  FOR nb&=0 TO 5
    RC_COPY decor%,MUL(nb&,24),114,23,23 TO ecr2%,0,ADD(MUL(nb&,24),42)
  NEXT nb&
  SWAP ecr1%,ecr2%
  LONG{&H200}=ecr1%
  syncro
  BMOVE ecr1%,ecr2%,32000
  FOR nb&=0 TO 10
    syncro
  NEXT nb&
  '
  adr%=tab%
  FOR l|=0 TO 5
    posl|=MUL(l|,24)+42
    FOR x|=0 TO 5
      val|=BYTE{adr%}
      IF val|<>32
        SUB val|,65
        posy&=ADD(MUL(DIV(val|,13),24),42)
        posx&=MUL(MOD(val|,13),24)
      ELSE
        posx&=240
        posy&=90
      ENDIF
      RC_COPY decor%,posx&,posy&,23,23 TO ecr2%,MUL(x|,24)+28,posl|
      INC adr%
    NEXT x|
    RC_COPY decor%,264,90,23,23 TO ecr2%,172,posl|
    SWAP ecr1%,ecr2%
    LONG{&H200}=ecr1%
    syncro
    BMOVE ecr1%,ecr2%,32000
    FOR nb&=0 TO 5
      syncro
    NEXT nb&
    val%=LONG{adr%}
    ADD adr%,4
    v1&=DIV(val%,10000)
    v2&=DIV(MOD(val%,10000),1000)
    v3&=DIV(MOD(val%,1000),100)
    v4&=DIV(MOD(val%,100),10)
    v5&=MOD(val%,10)
    RC_COPY decor%,MUL(v1&,24),90,23,23 TO ecr2%,200,posl|
    RC_COPY decor%,MUL(v2&,24),90,23,23 TO ecr2%,224,posl|
    RC_COPY decor%,MUL(v3&,24),90,23,23 TO ecr2%,248,posl|
    RC_COPY decor%,MUL(v4&,24),90,23,23 TO ecr2%,272,posl|
    RC_COPY decor%,MUL(v5&,24),90,23,23 TO ecr2%,296,posl|
    SWAP ecr1%,ecr2%
    LONG{&H200}=ecr1%
    syncro
    BMOVE ecr1%,ecr2%,32000
    FOR nb&=0 TO 5
      syncro
    NEXT nb&
  NEXT l|
  REPEAT
  UNTIL STRIG(1)
  WHILE STRIG(1)
  WEND
  fade
RETURN
> PROCEDURE entre_score
  adr%=ADD(tab%,MUL(apos&,10))
  BMOVE adr%,ADD(adr%,10),60
  LONG{adr%}=&H20202020
  CARD{adr%+4}=&H2020
  LONG{adr%+6}=score%
  '
  RC_COPY decor%,0,66,23,23 TO ecr2%,52,66
  RC_COPY decor%,96,42,23,23 TO ecr2%,76,66
  RC_COPY decor%,216,66,23,23 TO ecr2%,100,66
  '
  RC_COPY decor%,120,66,23,23 TO ecr2%,148,66
  RC_COPY decor%,48,42,23,23 TO ecr2%,172,66
  RC_COPY decor%,24,66,23,23 TO ecr2%,196,66
  RC_COPY decor%,96,66,23,23 TO ecr2%,220,66
  RC_COPY decor%,96,42,23,23 TO ecr2%,244,66
  '
  RC_COPY decor%,apos&*24,114,23,23 TO ecr2%,0,114
  RC_COPY decor%,264,90,23,23 TO ecr2%,24,114
  v1&=DIV(score%,10000)
  v2&=DIV(MOD(score%,10000),1000)
  v3&=DIV(MOD(score%,1000),100)
  v4&=DIV(MOD(score%,100),10)
  v5&=MOD(score%,10)
  RC_COPY decor%,MUL(v1&,24),90,23,23 TO ecr2%,200,114
  RC_COPY decor%,MUL(v2&,24),90,23,23 TO ecr2%,224,114
  RC_COPY decor%,MUL(v3&,24),90,23,23 TO ecr2%,248,114
  RC_COPY decor%,MUL(v4&,24),90,23,23 TO ecr2%,272,114
  RC_COPY decor%,MUL(v5&,24),90,23,23 TO ecr2%,296,114
  '
  FOR nb&=0 TO 5
    RC_COPY decor%,240,90,23,23 TO ecr2%,nb&*24+48,114
  NEXT nb&
  SWAP ecr1%,ecr2%
  LONG{&H200}=ecr1%
  syncro
  BMOVE ecr1%,ecr2%,32000
  '
  adrp%=adr%
  REPEAT
    val|=INP(2)
    IF val|>64 AND val|<91
      BYTE{adrp%}=val|
      IF adrp%<ADD(adr%,5)
        INC adrp%
      ENDIF
    ELSE IF val|>96 AND val|<123
      SUB val|,32
      BYTE{adrp%}=val|
      IF adrp%<ADD(adr%,5)
        INC adrp%
      ENDIF
    ELSE IF val|=32
      BYTE{adrp%}=val|
      IF adrp%<ADD(adr%,5)
        INC adrp%
      ENDIF
    ELSE IF val|=8
      IF adrp%>adr%
        BYTE{adrp%}=32
        DEC adrp%
        BYTE{adrp%}=32
      ENDIF
    ENDIF
    adr1%=adr%
    FOR nb&=0 TO 5
      v|=BYTE{adr1%}
      INC adr1%
      IF v|<>32
        SUB v|,65
        posy&=ADD(MUL(DIV(v|,13),24),42)
        posx&=MUL(MOD(v|,13),24)
      ELSE
        posx&=240
        posy&=90
      ENDIF
      RC_COPY decor%,posx&,posy&,23,23 TO ecr2%,nb&*24+48,114
    NEXT nb&
    SWAP ecr1%,ecr2%
    LONG{&H200}=ecr1%
    syncro
    BMOVE ecr1%,ecr2%,32000
  UNTIL val|=13
  BSAVE "A:\DATS\SCORES.DAT",tab%,60
  LONG{&H44E}=efface%
  CLS
  BMOVE decor%,efface%,6560
  BMOVE decor%,cgros%,32000
  fade
  montre2
  BMOVE cgros%,decor%,32000
RETURN
> PROCEDURE fade
  LONG{&HFF8A24}=decor%
  CARD{&HFF8A36}=80
  CARD{&HFF8A38}=3528
  LONG{&HFF8A20}=&H20002
  LONG{&HFF8A28}=&HFFFFFFFF
  CARD{&HFF8A2C}=&HFFFF
  LONG{&HFF8A32}=decor%
  LONG{&HFF8A2E}=&H20002
  BYTE{&HFF8A3B}=0
  BYTE{&HFF8A3D}=0
  BYTE{&HFF8A3A}=2
  BYTE{&HFF8A3C}=128
  ~5
  ~5
  ~5
  ~5
  ~5
  '
  LONG{&HFF8A24}=ecr1%
  CARD{&HFF8A36}=80
  CARD{&HFF8A38}=200
  CARD{&HFF8A20}=2
  CARD{&HFF8A22}=2
  LONG{&HFF8A32}=ADD(decor%,160)
  CARD{&HFF8A2E}=2
  CARD{&HFF8A30}=322
  BYTE{&HFF8A3B}=3
  BYTE{&HFF8A3C}=128
  ~5
  ~5
  ~5
  ~5
  ~5
  CARD{&HFF8A20}=8
  CARD{&HFF8A22}=800
  CARD{&HFF8A2E}=8
  CARD{&HFF8A30}=168
  nb&=0
  dep&=1
  REPEAT
    LONG{&H200}=ecr1%
    syncro
    x&=ADD(nb&,320)
    source%=ADD(decor%,AND(SHR(x&,1),&HFFF8))
    dec&=SUB(15,AND(x&,&HF))
    BYTE{&HFF8A3D}=ADD(dec&,128)
    LONG{&HFF8A24}=source%
    LONG{&HFF8A32}=ecr2%
    LONG{&HFF8A36}=&H140064
    BYTE{&HFF8A3C}=128
    ~5
    ~5
    ~5
    ~5
    ~5
    LONG{&HFF8A24}=ADD(source%,2)
    LONG{&HFF8A32}=ADD(ecr2%,2)
    LONG{&HFF8A36}=&H140064
    BYTE{&HFF8A3C}=128
    ~5
    ~5
    ~5
    ~5
    ~5
    LONG{&HFF8A24}=ADD(source%,4)
    LONG{&HFF8A32}=ADD(ecr2%,4)
    LONG{&HFF8A36}=&H140064
    BYTE{&HFF8A3C}=128
    ~5
    ~5
    ~5
    ~5
    ~5
    LONG{&HFF8A24}=ADD(source%,6)
    LONG{&HFF8A32}=ADD(ecr2%,6)
    LONG{&HFF8A36}=&H140064
    BYTE{&HFF8A3C}=128
    ~5
    ~5
    ~5
    ~5
    ~5
    x&=SUB(320,nb&)
    source%=ADD(ADD(decor%,AND(SHR(x&,1),&HFFF8)),480)
    dec&=SUB(15,AND(x&,&HF))
    BYTE{&HFF8A3D}=ADD(dec&,128)
    LONG{&HFF8A24}=source%
    LONG{&HFF8A32}=ADD(ecr2%,160)
    LONG{&HFF8A36}=&H140064
    BYTE{&HFF8A3C}=128
    ~5
    ~5
    ~5
    ~5
    ~5
    LONG{&HFF8A24}=ADD(source%,2)
    LONG{&HFF8A32}=ADD(ecr2%,162)
    LONG{&HFF8A36}=&H140064
    BYTE{&HFF8A3C}=128
    ~5
    ~5
    ~5
    ~5
    ~5
    LONG{&HFF8A24}=ADD(source%,4)
    LONG{&HFF8A32}=ADD(ecr2%,164)
    LONG{&HFF8A36}=&H140064
    BYTE{&HFF8A3C}=128
    ~5
    ~5
    ~5
    ~5
    ~5
    LONG{&HFF8A24}=ADD(source%,6)
    LONG{&HFF8A32}=ADD(ecr2%,166)
    LONG{&HFF8A36}=&H140064
    BYTE{&HFF8A3C}=128
    ~5
    ~5
    ~5
    ~5
    ~5
    SWAP ecr1%,ecr2%
    ADD nb&,dep&
    ADD dep&,2
  UNTIL nb&>320
  LONG{&H200}=ecr1%
  syncro
  FOR adr%=&HFFFF8240 TO &HFFFF825C STEP 4
    LONG{adr%}=0
  NEXT adr%
  LONG{&HFF8A24}=decor%
  CARD{&HFF8A36}=80
  CARD{&HFF8A38}=3528
  LONG{&HFF8A20}=&H20002
  LONG{&HFF8A28}=&HFFFFFFFF
  CARD{&HFF8A2C}=&HFFFF
  LONG{&HFF8A32}=decor%
  LONG{&HFF8A2E}=&H20002
  BYTE{&HFF8A3B}=0
  BYTE{&HFF8A3D}=0
  BYTE{&HFF8A3A}=2
  BYTE{&HFF8A3C}=128
  ~5
  ~5
  ~5
  ~5
  ~5
RETURN
FUNCTION case(parx&,pary&)
  DIV parx&,32
  DIV pary&,28
  MUL pary&,30
  ADD pary&,parx&
  RETURN BYTE{ADD(tab%,pary&)}
ENDFUNC
'
> PROCEDURE victoire
  LONG{&H200}=ecr1%
  syncro
  fade
  BLOAD "A:\DATS\VICT.PC1",ecr2%
  ~C:degas%(L:ecr2%,L:gros%,4)
  BMOVE ecr2%+2,pal%,32
  LONG{&H44E}=efface%
  CLS
  RC_COPY gros%,0,0,160,103 TO efface%,80,0
  montre2
  BLOAD "A:\DATS\VICT.DAT",efface%
  adr%=decor%
  x&=0
  LONG{&H44E}=adr%
  FOR source%=efface% TO ADD(efface%,2299)
    val|=BYTE{source%}
    IF val|=13
      INC source%
      ADD adr%,2560
      LONG{&H44E}=adr%
      x&=0
    ELSE IF val|=32
      ADD x&,16
    ELSE
      SUB val|,65
      posy&=DIV(val|,20)*16+110
      posx&=MOD(val|,20)*16
      RC_COPY gros%,posx&,posy&,16,16 TO adr%,x&,0
      ADD x&,16
    ENDIF
  NEXT source%
  syncro
  BMOVE pal%,&HFFFF8240,32
  FOR l&=0 TO 2720
    LONG{&H200}=ecr1%
    syncro
    syncro
    RC_COPY ADD(decor%,MUL(l&,160)),0,0,320,200 TO ecr2%,0,0
    RC_COPY gros%,0,0,160,103 TO ecr2%,80,0
    SWAP ecr1%,ecr2%
  NEXT l&
  LONG{&H200}=ecr1%
  syncro
  fade
RETURN
