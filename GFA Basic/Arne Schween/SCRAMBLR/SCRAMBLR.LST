' SCRAMBLER 1.0 vom 11.2.1993 (C) Arne Schween
'   dieses Programm lÑd einen GFA 3.6 Interpreter nach und patcht ihn so,
'   daû er auch auf einer Grafik-Karte kÑuft die mit 4 oder 8 Bit pro Pixel ar-
'   beitet und startet ihn dann. Ist die Anzahl der Bit-Ebenen der aktuellen
'   Auflîsung ungleich 4/8, wird nichts gepatcht.
'   Die Bits mÅssen dabei "aufeinanderfolgend" im Video-Ram angelegt
'   sein. Auûerdem muû die Karte den Zugriff des Prozessors auf's VRam zu-
'   lassen.
'
' Der Interpreter wird im aktuellen Verzeichnis als GFABASIC.PRG gesucht. Ist
' das erfolglos wird die ENV-Variable GFAINT verwendet (voller Programmname).
'
' Ich Åbernehme keinerlei GewÑhr fÅr Funktion, Betriebsicherheit etc..
' Fehler- und Erfolgsberichte bitte an
'
'      Arne Schween
'      Heidenreichstr. 10
' 8ooo MÅnchen 83
'      Fax.: 089/6892083
'      Email: arne_schween@m.maus.de
'             arne_schween@confusion.fido.de
'
' evtl. Spenden - ;^) - bitte auf Postgiro MÅnchen, BLZ 70010080, 343172-802
'
RESERVE 5120
'
' Hier stehen dir Farbindizes fÅr die Darstellung. Die Voreinstellung ist ganz
'   gut fÅr Graustufen-Darstellung. Ich weiû gar nicht wie das in Farbe aussieht.
'   Also eventuell Ñndern. Der Cursor wird durch ein logisches NOT auf den Index
'   dargestellt.
normalerhintergrund|=0
normalertext|=1
markierterhintergrund|=10
markiertertext|=1
'
DIM calcaddr$(1),cursorklein$(1),cursornormal$(1),textout$(1)
'
'
' GFA-ScreenAdresse in Adresse innerhalb der 4 Bit/Pixel-Plane umrechnen:
'  move.w   a0,d3
'  asr.w    #1,d3
'  bcc      addrEven
'  addq.l   #3,a0       ; bei ungerader Spalte auf nÑchste 4 Wort-Gruppe
' addrEven:
'  rts
calcaddr$(0)="3608E243640256884E75"
'
'
' Kopf der CursorInvertierRoutine fÅr 16 Farben, kleiner Text:
'  movem.l  d3/d4,-(a7)
'  subq.l   #6,a0       ; Auf Anfang einer 4-Wort-Gruppe
'  jsr      calcAddr
'  moveq    #7,d4       ; 8 Scanlines bearbeiten
'  bra      cursorLoop  ; cursor16klein und -normal stehen hintereinander
cursorklein$(0)="48E718005D884EB9ADDRESSE78076010"
'
' CursorInvertierRoutine fÅr 16 Farben, normaler Text:
'  movem.l  d3/d4,-(a7)
'  subq.l   #6,a0
'  jsr      calcAddr
'  move.w   #15,d4      ; 16 Scanlines bearbeiten
' cursorLoop:
'  not.l    (a0)        ; 8 Pixel invertieren.
'  adda.w   d1,a0       ; auf nÑchste Scanline, d1 kommt vom Interpreter
'  dbra     d4,cursorLoop
'  movem.l  (a7)+,d3/d4
'  movea.l  d7,a0
'  rts
cursornormal$(0)="48E718005D884EB9ADDRESSE383C000F4690D0C151CCFFFA4CDF001820474E75"
'
'
' TextAusgabeRoutine fÅr 4 Bit/Pixel:
'  (Dieser Routine folgt unmittelbar die Tabelle der Codierung
'   8-Bit s/w-Wert nach 32 Bit 16Farb-Wert. Sie wird auch, allerdings mit
'   einer anderen Tabelle, fÅr die Ausgabe selektierter Text benutzt.)
'  move.l   d3,-(a7)
'  jsr      calcAddr
' loop:
'  moveq    #0,d3                ; "Saubermachen"
'  move.b   (a1)+,d3             ; Bitmuster laden (a1 liefert GFA)
'  asl.w    #2,d3                ; Langwort-Index (leider nur 68000er)
'  move.l   tab(pc,d3.w),(a0)    ; Farbcode schreiben.
'  adda.w   d1,a0                ; nÑchste Scanline
'  dbra     d2,loop
'  move.l   (a7)+,d3
'  rts
textout$(0)="2F034EB9ADDRESSE76001619E54320BB300CD0C151CAFFF2261F4E75"
'
'
' So jetzt der ganze Kram nochmal fÅr 8-Bit Pixel:
'
' GFA-ScreenAdresse in Adresse innerhalb der 8 Bit/Pixel-Plane umrechnen:
'  move.l   a0,d3
'  sub.l    #ScreenStart,d3
'  divu     d1,d3             ; durch Bytes per Scanline teilen
'  swap     d3                ; Rest anschauen
'  suba.w   d3,a0             ; a0 zeigt jetzt auf erstes Byte einer Spalte
'  asr.w    #1,d3
'  bcc      addrEven
'  addq.l   #8,a0             ; zwei Langworte (=breite eines chrs) weiter
' addrEven:
'  asl.w #2,d3                ; Spaltenummer mal zwei Langworte
'  adda.w   d3,a0
'  subq.w   #8,d1             ; Korrektur fÅr zwei move.l   ..,(a0)+
'  rts
calcaddr$(1)="260896BCADDRESSE86C1484390C3E24364025088E543D0C351414E75"
'
'
' Kopf der CursorInvertierRoutine fÅr 256 Farben, kleiner Text:
' 48E7 1800                   movem.l  d3/d4,-(a7)
' 5D88                        subq.l   #6,a0
' 4EB9 calcAddr               jsr      calcAddr
' 7807                        moveq #7,d4
' 6010                        bra      curLoop
cursorklein$(1)="48E718005D884EB9ADDRESSE78076010"
'
' CursorInvertierRoutine fÅr 16 Farben, normaler Text:
' 48E7 1800                   movem.l  d3/d4,-(a7)
' 5D88                        subq.l   #6,a0
' 4EB9 calcAddr               jsr      calcAddr
' 383C 000F                   move.w   #15,d4
'                     curLoop:
' 4698                        not.l (a0)+
' 4698                        not.l (a0)+
' D0C1                        adda.w   d1,a0
' 51CC FFF8                   dbra  d4,curLoop
' 4CDF 0018                   movem.l  (a7)+,d3/d4
' 2047                        movea.l  d7,a0
' 4E75                        rts
cursornormal$(1)="48E718005D884EB9ADDRESSE383C000F46984698D0C151CCFFF84CDF001820474E75"
'
'
' TextAusgabeRoutine fÅr 8 Bit/Pixel:
'  (Dieser Routine folgt unmittelbar die Tabelle der Codierung
'   8-Bit s/w-Wert nach 64 Bit 256Farb-Wert. Sie wird auch, allerdings mit
'   einer anderen Tabelle, fÅr die Ausgabe selektierter Text benutzt.)
' 48E7 1020                   movem.l  d3/a2,-(a7)
' 4EB9 calcAddr               jsr      calcAddr
'                          loop:
' 7600                        moveq #0,d3
' 1619                        move.b   (a1)+,d3
' E743                        asl.w #3,d3
' 45FB 30 12                  lea.l tab(pc,d3.w),a2
' 20DA                        move.l   (a2)+,(a0)+
' 20DA                        move.l   (a2)+,(a0)+
' D0C1                        adda.w   d1,a0
' 51CA FFEE                   dbra  d2,loop
' 4CDF 0408                   movem.l  (a7)+,d3/a2
' 4E75                        rts
textout$(1)="48E710204EB9ADDRESSE76001619E74345FB301220DA20DAD0C151CAFFEE4CDF04084E75"
'
index&=-1
INTIN(0)=1
VDISYS 102,0,1 ! vq_extnd
SELECT INTOUT(4) ! Anzahl planes
CASE 4
  index&=0
CASE 8
  index&=1
ENDSELECT
' 5 KB, das reicht auf jeden Fall!
INLINE thepatch%,5120
'
IF index&<>-1
  calcaddr%=thepatch%
  storecode(FN makecode$(calcaddr$(index&),XBIOS(2)))
  textout%=thepatch%
  storecode(FN makecode$(textout$(index&),calcaddr%))
  storecode(FN maketab$(index&,normalerhintergund|,normalertext|))
  markout%=thepatch%
  storecode(FN makecode$(textout$(index&),calcaddr%))
  storecode(FN maketab$(index&,markierterhintergrund|,markiertertext|))
  cursorklein%=thepatch%
  storecode(FN makecode$(cursorklein$(index&),calcaddr%))
  cursornormal%=thepatch%
  storecode(FN makecode$(cursornormal$(index&),calcaddr%))
  '
ENDIF
'
INLINE cmd%,128
BMOVE BASEPAGE+128,cmd%,128 ! verrÅckt, aber der zweite EXIST
gfa$="GFABASIC.PRG"         ! mach sonst den cmd-String nieder...8^(
IF NOT EXIST(gfa$)
  gfa$=FN getenv$("GFAINT")
  IF NOT EXIST(gfa$)
    PRINT "Interpreter nicht gefunden! [Taste..]"
    ~INP(2)
    QUIT 1
  ENDIF
ENDIF
'
gfabp%=EXEC(3,"\sprachen\gfa\gfabcom.35e\36zeug\gfabasic.prg","","")
LONG{gfabp%+44}=LONG{BASEPAGE+44}
BMOVE cmd%,gfabp%+128,128
gfacode%=LONG{gfabp%+8}
'
IF index&<>-1
  patchjsr(FN search(gfacode%+129*512,"740F323AFD90")+8,textout%,8)
  patchjsr(FN search(gfacode%+129*512,"740F323AFD62")+10,markout%,8)
  cursorkram%=FN search(gfacode%+129*512,"323AFE1A2E08")+6
  patchjmp(cursorkram%,cursornormal%)
  patchjmp(cursorkram%+32,cursorklein%)
ENDIF
'
~GEMDOS(&H4B,4,L:0,L:gfabp%,L:0)
'
'
'
> FUNCTION makecode$(code$,addr%)
LOCAL i&,x$,erg$,p%
'
erg$=STRING$(LEN(code$) DIV 2,0)
'
REPEAT
  x$="$"+MID$(code$,i&+1,4)
  IF x$="$ADDR"
    LONG{V:erg$+i& DIV 2}=addr%
    ADD i&,4
  ELSE
    WORD{V:erg$+i& DIV 2}=VAL(x$)
  ENDIF
  ADD i&,4
UNTIL i&=LEN(code$)
RETURN erg$
ENDFUNC
> PROCEDURE storecode(code$)
BMOVE V:code$,thepatch%,LEN(code$)
ADD thepatch%,LEN(code$)
RETURN
'
> FUNCTION maketab$(index&,p|,s|)
LOCAL tab$,byte&,bit&,p%
'
tab$=STRING$(1024*(index&+1),0)
p%=V:tab$
'
FOR byte&=0 TO 255
IF index&
  FOR bit&=7 DOWNTO 0
    IF BTST(byte&,bit&)
      BYTE{p%}=s|
    ELSE
      BYTE{p%}=p|
    ENDIF
    INC p%
  NEXT bit&
ELSE
  FOR bit&=7 TO 0 STEP -2
    IF BTST(byte&,bit&)
      BYTE{p%}=SHL(s|,4)
    ELSE
      BYTE{p%}=SHL(p|,4)
    ENDIF
    IF BTST(byte&,bit&-1)
      BYTE{p%}=BYTE{p%}+s|
    ELSE
      BYTE{p%}=BYTE{p%}+p|
    ENDIF
    INC p%
  NEXT bit&
ENDIF
NEXT byte&
'
RETURN tab$
ENDFUNC
'
> FUNCTION search(start%,pattern$)
$F%
LOCAL p%,x&,i&,buffer$
'
pattern$=FN makecode$(pattern$,0)
'
buffer$=STRING$(2048,0)
BMOVE start%,V:buffer$,LEN(buffer$)
RETURN start%+INSTR(buffer$,pattern$)-1
ENDFUNC
> PROCEDURE patchjsr(dst%,src%,nopcount%)
WORD{dst%}=&H4EB9
LONG{dst%+2}=src%
ADD dst%,6
WHILE nopcount%
WORD{dst%}=&H4E71
ADD dst%,2
DEC nopcount%
WEND
RETURN
> PROCEDURE patchjmp(dst%,src%)
WORD{dst%}=&H4EF9
LONG{dst%+2}=src%
RETURN
'
' Environment Var suchen
> FUNCTION getenv$(var$)
LOCAL adr%,env$
'
adr%=LPEEK(BASEPAGE+44)
DO
env$=CHAR{adr%}
EXIT IF LEN(env$)=0
EXIT IF LEFT$(env$,LEN(var$))=var$ AND MID$(env$,LEN(var$)+1,1)="="
ADD adr%,LEN(env$)+1
LOOP
RETURN MID$(env$,LEN(var$)+2)
ENDFUNC
