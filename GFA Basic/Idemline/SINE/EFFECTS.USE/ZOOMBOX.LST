' +---------------------------------------+
' | programme de ZOOM avec des boites..   |
' | possibilitee d'optimiser affichage    |
' | en utilisant un programme a fonctions |
' | recursives....div2div2div2...pour aff |
' | creation des blocs largeur/hauteur    |
' | optimum...        Sine/IDEMLINE       |
' +---------------------------------------+
'
blit!=TRUE
'
@init
@box_main(100,319,199,7,2)
@re_init
'
> PROCEDURE init
  CLS
  old%=XBIOS(3)
  res%=XBIOS(4)
  '
  savg%=GEMDOS(32,L:0)
  '
  DIM e|(32512)
  e%=256*SUCC(DIV(V:e|(0),256))
  ~XBIOS(5,L:e%,L:-1,-1)
  x3%=XBIOS(3)
  x2%=XBIOS(2)
RETURN
> PROCEDURE re_init
  CLS
  ~XBIOS(5,L:old%,L:old%,res%)
  ERASE e|()
  '
  ~GEMDOS(32,L:savg%)
  '
  CLS
RETURN
'
> PROCEDURE box_main(num&,la&,ha&,amode&,color&)
  DIM box$(num&),c(1080),buf|(32000)
  buf%=V:buf|(0)
  '
  @box_init(num&,la&,ha&,color&)
  @box_play(num&-16,la&,ha&,amode&)
  '
  ERASE c(),box$()
RETURN
> PROCEDURE box_init(num&,la&,ha&,color&)
  DEFFILL color&,2,8
  FOR i&=16 TO num&
    CLS
    PBOX 0,0,i&,i&
    GET 0,0,MIN(la&,i&-1),MIN(ha&,i&-1),box$(i&)
  NEXT i&
  '
  FOR h&=0 TO 1080
    c(h&)=ADD(16,(num&-16)*(0.5-0.5*COSQ(h&)))
  NEXT h&
RETURN
> PROCEDURE box_build(d&,la&,ha&,amode&,offx&,offy&)
  CLS
  a$=box$(d&)
  y&=0
  d1&=2*d&
  dx&=ADD(la&,offx&) DIV d1&
  '
  x&=offx&
  WHILE x&+d1&>0
    SUB x&,d1&
  WEND
  WHILE x&<la&
    PUT x&,0,a$
    ADD x&,d1&
  WEND
  x&=d&+offx&
  WHILE x&+d1&>0
    SUB x&,d1&
  WEND
  WHILE x&<la&
    PUT x&,d&,a$
    ADD x&,d1&
  WEND
  '
  dx&=(ha& DIV d1&)
  GET 0,0,la&,MIN(ha&,d1&),a$
  CLS
  '
  x&=offy&
  WHILE x&+d1&>0
    SUB x&,d1&
  WEND
  REPEAT
    PUT 0,x&,a$,amode&
    ADD x&,d1&
  UNTIL x&>ha&
RETURN
'
> PROCEDURE box_screen_store ! on sauve seulement 3 plans,decales de 2
  IF blit!=FALSE
    s%=x2%
    d%=buf%
    FOR h&=1 TO 4000
      LONG{d%}=LONG{s%}
      ADD d%,4
      ADD s%,4
      CARD{d%}=CARD{s%}
      ADD d%,4
      ADD s%,4
    NEXT h&
  ELSE
    @bli_p(x2%,buf%,4,2)
  ENDIF
RETURN
> PROCEDURE box_screen_put   ! et on ne remet que les 3 plans utiles.....
  IF blit!=FALSE
    s%=buf%
    d%=x3%+2
    FOR h&=1 TO 4000
      LONG{d%}=LONG{s%}
      ADD d%,4
      ADD s%,4
      CARD{d%}=CARD{s%}
      ADD d%,4
      ADD s%,4
    NEXT h&
  ELSE
    @bli_p(buf%,x3%+2,1,8)
    @bli_p(buf%+2,x3%+4,1,8)
    @bli_p(buf%+4,x3%+6,1,8)
  ENDIF
RETURN
> PROCEDURE bli_p(img%,x%,plan&,pas&)
  xb%=x%
  CARD{&H8A00}=&X1111111111111111   ! ram 1/2 teinte 0
  CARD{&H8A02}=&X1111111111111111   !                1
  CARD{&H8A04}=&X1111111111111111   !                2
  CARD{&H8A06}=&X1111111111111111   !                3
  CARD{&H8A08}=&X1111111111111111   !                4
  CARD{&H8A0A}=&X1111111111111111   !                5
  CARD{&H8A0C}=&X1111111111111111   !                6
  CARD{&H8A0E}=&X1111111111111111   !                7
  CARD{&H8A10}=&X1111111111111111   !                8
  CARD{&H8A12}=&X1111111111111111   !                9
  CARD{&H8A14}=&X1111111111111111   !               10
  CARD{&H8A16}=&X1111111111111111   !               11
  CARD{&H8A18}=&X1111111111111111   !               12
  CARD{&H8A1A}=&X1111111111111111   !               13
  CARD{&H8A1C}=&X1111111111111111   !               14
  CARD{&H8A1E}=&X1111111111111111   !               15
  '
  CARD{&HFFFF8A20}=pas&                       ! inc x source
  CARD{&HFFFF8A22}=0                       ! inc y source
  LONG{&HFFFF8A24}=img%                    ! poids fort adresse source
  SELECT plan&
  CASE 1 !1PLAN
    CARD{&HFFFF8A28}=&X1111111111111111    ! masque final 1
    CARD{&HFFFF8A2A}=&X1111111111111111    ! masque final 2
    CARD{&HFFFF8A2C}=&X1111111111111111    ! masque final 3
    CARD{&HFFFF8A2E}=8                     ! inc x dest.
    CARD{&HFFFF8A30}=0                     ! inc y dest.
    LONG{&HFFFF8A32}=xb%                   ! poids fort adresse dest.
    CARD{&HFFFF8A36}=21                    ! largeur en mots longs
  CASE 4 !4PLANS
    CARD{&HFFFF8A28}=&HFFFF                ! masque final 1
    CARD{&HFFFF8A2A}=&HFFFF                ! masque final 2
    CARD{&HFFFF8A2C}=&HFFFF                ! masque final 3
    CARD{&HFFFF8A2E}=2                     ! inc x dest.
    CARD{&HFFFF8A30}=0                     ! inc y dest.
    LONG{&HFFFF8A32}=xb%                   ! poids fort adresse dest.
    CARD{&HFFFF8A36}=81                    ! largeur en mots longs
  ENDSELECT
  '
  CARD{&HFFFF8A38}=200                     ! hauteur en pixels
  CARD{&HFFFF8A3A}=&H203                   ! comb. source/ram & op. logique
  CARD{&HFFFF8A3C}=&HC000                  ! c=blitter  8=partage
RETURN
'
> PROCEDURE box_play(num&,la&,ha&,amode&)
  CLS
  @box_pal(&H754,&H421,&H210,&H100)
  REPEAT
    IF k& MOD 360=0
      offx&=ADD(160,c(k&)*2*INT(0.5*(RAND(20)-10)))
      offy&=ADD(100,c(k&)*2*INT(0.5*(RAND(12)-6)))
    ENDIF
    '
    @box_build(c(k&),la&,ha&,amode&,offx&,offy&)
    @box_screen_put
    SWAP x3%,x2%
    ~XBIOS(5,L:x3%,L:x2%,-1)
    VSYNC
    k&=MOD(ADD(k&,6),360)
    @box_screen_store
    '
    ' BMOVE x2%,ADD(x3%,2),31998
    ' x%=x3%+o&
    ' FOR h&=0 TO 3999
    ' CARD{x%}=0
    ' ADD x%,8
    ' NEXT h&
    '
  UNTIL PEEK(&HFFFC02)=57
RETURN
> PROCEDURE box_pal(a0&,a1&,a2&,a3&)
  SETCOLOR 0,0
  '
  SETCOLOR 1,a0&
  SETCOLOR 3,a0&
  SETCOLOR 5,a0&
  SETCOLOR 7,a0&
  SETCOLOR 9,a0&
  SETCOLOR 11,a0&
  SETCOLOR 13,a0&
  SETCOLOR 15,a0&
  '
  SETCOLOR 2,a1&
  SETCOLOR 6,a1&
  SETCOLOR 10,a1&
  SETCOLOR 14,a1&
  '
  SETCOLOR 4,a2&
  SETCOLOR 12,a2&
  '
  SETCOLOR 8,a3&
RETURN
