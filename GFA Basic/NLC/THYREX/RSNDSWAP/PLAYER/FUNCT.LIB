;	opt se_period&2

pt_dosetfinetune
	bsr	pt_SetFineTune
	bsr	pt_SetPeriod ;; non defini.
	rts

pt_ChkTonePorta
	bsr	pt_SetTonePorta
	moveq	#0,d0
	move.b	cmd(a4),d0
	jmp	([pt_check_effects_table.l,d0*4])	;effets 3 5


pt_dosampleoffset
	bsr	pt_sampleoffset
	bsr	pt_setperiod				;effet 9
	set_wave_ctrl
	rts
	
pt_initperiod
	bsr	pt_setperiod
	moveq	#0,d0
	move.b	cmd(a4),d0
	cmp.b	#28,d0
	beq	pt_notedelay
	set_wave_ctrl
	jmp	([pt_read_pattern_table2.l,d0*4])
	rts


pt_setperiod
	lea	pt_periodtable(pc),a0
	move	i_period(a4),d0
	moveq	#0,d3
	move.b	n_finetune(a4),d3
	beq.s	.set_direcper
	se_period	a0,d0,d2,d1
	mulu	#37,D3
	add.w	d3,d2
	move	-2(a0,d2*2),n_period(a4)
	rts
.set_direcper
	move	d0,n_period(a4)
	rts

pt_Arpeggio
	moveq	#0,d1
	move	counter(a6),d0
	divs	#3,d0
	swap	d0
	subq	#1,d0
	beq.s	.set_direct_period	
	bmi.s	.pt_arpegio1
.pt_arpegio2
	move.b	val_cmd+1(a4),d1	
	bra.s	.next_arp
.pt_arpegio1
	move.b	val_cmd(a4),d1	
.next_arp
	moveq	#0,d0
	move.b	n_finetune(a4),d0
	mulu	#37*2,d0
	lea	pt_periodtable(pc),a0
	add.l	d0,a0
	move	n_period(a4),d0
	se_period2	a0,d0,d2
.arpegio_set	
	move	(a0,d1*2),s_period(a5)
	rts
.set_direct_period
	rts


pt_settoneporta	
	move	i_period(a4),d2
	moveq	#0,d0
	move.b	n_finetune(a4),d0
	beq.s	.set_direcper
	mulu	#37*2,d0
	lea	(pt_periodtable.l,d0),a0
	se_period2	a0,d2,d0
	move	(a0),d2
.set_direcper
	move	d2,n_wantedperiod(a4)	
	sf	n_toneportdirec(a4)
	cmp	n_period(a4),d2
	beq.s	.pt_cleartoneporta	
	bge.s	.return
	st	n_toneportdirec(a4)
.return
	rts
.pt_cleartoneporta
	clr.w	n_wantedperiod(a4)
	rts


pt_TonePortamento
	move	val_cmd(a4),d0
	beq.s	pt_TonePortNoChange
	clr.w	val_cmd(a4)
	move	d0,n_toneportspeed(a4)
pt_TonePortNoChange
	move.w	n_wantedperiod(a4),d0
	beq.s	.return
	move	n_period(a4),d2
	move	n_toneportspeed(a4),d1
	tst.b	n_toneportdirec(a4)
	bne.s	.pt_toneportaup
.pt_toneportadown
	add	d1,d2
	cmp	d2,d0
	bgt.s	.pt_toneportasetper
	bra.s	.set_reg
.pt_toneportaup
	sub	d1,d2
	cmp	d2,d0
	blt.s	.pt_toneportasetper
.set_reg
	move	d0,d2
	clr.w	n_wantedperiod(a4)
.pt_toneportasetper
	move	d2,n_period(a4)
	tst.b	n_glissfunk+1(a4)
	beq	.pt_glissskip
	moveq	#0,d0
	move.b	n_finetune(a4),d0
	mulu	#37*2,d0
	lea	(pt_periodtable.l,d0),a0
	se_period2	a0,d2,d0
	move	(a0),d2
.pt_glissskip
	move	d2,s_period(a5)
	rts
.return
	rts


pt_Vibrato
	move	val_cmd(a4),d0
	beq.s	pt_vibrato2
	tst.b	d0
	beq.s	.pt_vibskip	
	move.b	d0,n_vibratocmd+1(a4)
.pt_vibskip	
	lsr.w	#8,d0
	tst.b	d0
	beq.s	pt_vibrato2	
	move.b	d0,n_vibratocmd(a4)
pt_Vibrato2
	move.b	n_vibratopos(a4),d0
	lea	pt_vibratotable,a1
	lsr	#2,d0
	and	#$1f,d0
	moveq	#0,d2
	move.b	n_wavecontrol+1(a4),d2
	and.b	#$3,d2
	beq.s	.pt_vib_sine
	lsl.b	#3,d0
	cmp.b	#1,d2
	beq.s	.pt_vib_rampdown
	st	d2
	bra.s	.pt_vib_set
.pt_vib_rampdown
	move.b	d0,d2
	tst.b	n_vibratopos(a4)
	bpl.s	.pt_vib_set
	st	d2
	sub.b	d0,d2
	bra.s	.pt_vib_set
.pt_vib_sine
	move.b	(a1,d0.w),d2
.pt_vib_set
	
	move.b	n_vibratocmd+1(a4),d0	
	mulu	d0,d2
	lsr.w	#7,d2
	
	move	n_period(a4),d1
	tst.b	n_vibratopos(a4)
	bpl.s	.pt_vibratopos
	neg	d2
.pt_vibratopos
	add	d2,d1
	move	d1,s_period(a5)
	
	move.b	n_vibratocmd(a4),d1
	lsl.b	#4,d1
	or.b	d0,d1
	lsr.w	#2,d1
	and	#$3c,d1
	add.b	d1,n_vibratopos(a4)

	rts

pt_TonePlusVolSlide	
	bsr	pt_TonePortNoChange
	bra	pt_volumeslide

pt_VibratoPlusVolSlide
	bsr	pt_vibrato2
	bra	pt_volumeslide





pt_Tremolo
	move	val_cmd(a4),d0
	beq.s	pt_tremolo2
	tst.b	d0
	beq.s	.pt_treskip	
	move.b	d0,n_tremolocmd+1(a4)
.pt_treskip	
	lsr.w	#8,d0
	tst.b	d0
	beq.s	pt_tremolo2	
	move.b	d0,n_tremolocmd(a4)
pt_tremolo2
	move.b	n_tremolopos(a4),d0
	lea	pt_vibratotable,a1
	lsr	#2,d0
	and	#$1f,d0
	moveq	#0,d2
	move.b	n_wavecontrol(a4),d2
	and.b	#$3,d2
	beq.s	.pt_tre_sine
	lsl.b	#3,d0
	cmp.b	#1,d2
	beq.s	.pt_tre_rampdown
	st	d2
	bra.s	.pt_tre_set
.pt_tre_rampdown
	move.b	d0,d2
	tst.b	n_tremolopos(a4)
	bpl.s	.pt_tre_set
	st	d2
	sub.b	d0,d2
	bra.s	.pt_tre_set
.pt_tre_sine
	move.b	(a1,d0.w),d2
.pt_tre_set
	move.b	n_tremolocmd+1(a4),d0	
	mulu	d0,d2
	lsl	#2,d2
	move	n_volume(a4),d0
	
	tst.b	n_tremolopos(a4)
	bpl.s	.pt_vibratopos
	neg	d2
.pt_vibratopos
	add	d2,d0
	bpl.s	.no_negv
	moveq	#0,d0
.no_negv
	cmp	#$4000,d0
	ble.s	.nohiv
	move	#$4000,d0
.nohiv
	move	d0,volume(a5)
	move.b	n_tremolocmd(a4),d1
	lsl.b	#4,d1
	or.b	n_tremolocmd+1(a4),d1
	lsr.b	#2,d1
	and	#$3c,d1
	add.b	d1,n_tremolopos(a4)
;	ne plus fixer le volume.
	rts





pt_sampleoffset	
	moveq	#0,d0
	move.w	val_cmd(A4),D0
	beq.s	pt_sononew
	move.w	d0,n_sampleoffset(A4)
pt_sononew
	move.w	n_sampleoffset(A4),D0
	cmp.l	n_lengt(A4),D0
	bge.s	pt_sofskip
	sub.l	d0,n_lengt(A4)
	add.l	d0,n_start(A4)
	rts
pt_sofskip
	move.l	#1,n_lengt(A4)		;plus de sample?
	rts


pt_VolumeSlide
	move.w	val_cmd(a4),D0
vol_slide_return
	move	n_volume(a4),d1
	add	d0,d1
	bge.s	.vol_noneg
	clr	d1
.vol_noneg
	cmp	#$4000,d1
	ble.s	.vol_nohi
	move	#$4000,d1
.vol_nohi
	move	d1,n_volume(a4)
	move	n_volume(a4),volume(a5)
	rts


pt_PositionJump	
	moveq	#0,d0
	move.w	val_cmd(A4),D0
	sub	#1,d0
	move	d0,sound_pos(a6)		
pt_pj2	
	st 	pt_posbreak(a6)
	rts


pt_volumechange
	move	val_cmd(a4),n_volume(a4)
	rts



pt_PatternBreak
	moveq	#0,d0
	move.w	val_cmd(a4),pt_pbreakposition(a6)	;position suivante.
	st 	pt_posbreak(a6)			
	rts

pt_FilterOnOff	
	;	synchro ..
	rts





pt_SetSpeed	
	move	val_cmd(a4),d0
	beq.s	.speed_nul
	clr.w	counter(a6)
	move.l	ptr_module(a6),a0	;test si ciaa-mode (BPM)	
	btst	#1,info_mus(a0)
	beq.s	.no_ciaamode
	cmp.b	#$20,d0
	bhs.s	set_tempo
.no_ciaamode
	move	d0,speed(a6)
.speed_nul
	rts
set_tempo
	and.w	#$ff,d0
	move.w	(table_vi.l,d0.w*2),d0
	move.b	d0,divise_cpt(a6)
	move.b	d0,divise_base(a6)
	lsr	#8,d0
	clr.b $fffffa19.w
	move.b d0,$fffffa1f.w
	move.b #$7,$fffffa19.w
	rts


pt_FinePortaUp	
pt_PortaUp
	move	n_period(a4),d0
	sub	val_cmd(a4),d0
	cmp	#$71,d0
	bge.s	.no_lower_per
	move	#$71,d0
.no_lower_per
	move	d0,n_period(a4)
	move	d0,s_period(a5)
	rts


pt_FinePortaDown	
pt_PortaDown
	move	n_period(a4),d0
	add	val_cmd(a4),d0
	cmp	#$358,d0
	bmi.s	.no_lower_per
	move	#$358,d0
.no_lower_per
	move	d0,n_period(a4)
	move	d0,s_period(a5)
	rts


pt_SetGlissControl	
	move.b	val_cmd+1(a4),n_glissfunk+1(a4)	
	rts


pt_SetVibratoControl	
	move.b	val_cmd+1(a4),n_wavecontrol+1(a4)	
	rts

pt_setfinetune	
	move.b	val_cmd+1(a4),n_finetune(a4)
	rts

pt_JumpLoop	
	move	val_cmd(a4),d0
	beq.s	pt_setloop
	tst.w	n_loopcount(A4)
	beq.s	pt_jumpcnt
	subq	#1,n_loopcount(A4)
	beq.s	return_pt
pt_jmploop
	move.w	n_pattpos(a4),pt_PBreakPosition(a6)
	st	pt_pbreakflag(a6)
	rts
pt_jumpcnt
	move.w	d0,n_loopcount(A4)
	move.w	n_pattpos(a4),pt_PBreakPosition(a6)
	st	pt_pbreakflag(a6)
	rts
pt_setloop
	move	pt_patternposition(a6),n_pattpos(a4)
return_pt
	rts


pt_SetTremoloControl	
	move.b	val_cmd+1(a4),n_wavecontrol(a4)
	rts

pt_KarplusStrong	
	move.l	n_loopstart(a4),a0
	move.l	a0,a1
	btst	#0,n_sinfo(a4)
	bne.s	.sample_16bits
	move.l	n_replen(a4),d0
	move.b	(a0),d1
.pt_karplop
	ext	d1
	move.b	1(a0),d2
	ext	d2
	add	d2,d1
	asr	d1
	move.b	d1,(a0)+
	exg	d2,d1
	subq.l	#1,d0
	bne.s	.pt_karplop
	move.b	(a1),d2
	ext	d2
	add	d1,d2
	asr	d2
	move.b	d2,(a0)
	rts

.sample_16bits
	move	n_replen(a4),d0
	lsr	d0
	move.w	(a0),d1
.pt_karplop2
	ext.l	d1
	move.w	2(a0),d2
	ext.l	d2
	add.l	d2,d1
	asr.l	d1
	move.w	d1,(a0)+
	exg	d2,d1
	subq.l	#1,d0
	bne.s	.pt_karplop2
	move.w	(a1),d2
	ext.l	d2
	add.l	d1,d2
	asr.l	d2
	move.w	d2,(a0)
	rts

pt_RetrigNote		;??
	move.w	val_cmd(A4),D0
	beq.s	pt_rtnend
	move.w	Counter(a6),D1
	bne.s	pt_rtnskp
	tst.w	i_period(A4)
	bne.s	pt_rtnend
	move.w	Counter(a6),D1
pt_rtnskp
	divu	D0,D1
	swap	d1
	tst	d1
	bne.s	pt_rtnend
pt_DoRetrg
	MOVE.L	n_start(A4),s_start(A5)	;Set sampledata pointer
	MOVE.l	n_lengt(A4),s_lengt(A5)	;Set length
	MOVE.w	n_period(A4),s_period(A5)
	MOVE.L	n_loopstart(A4),s_loopstart(A5)
	MOVE.L	n_replen(A4),s_looplengt(A5)
	move.b	#$fe,s_flag_info(a5)	;s_ptr_sample(a5)=s_loopstart(a5)	
pt_rtnend
	rts


pt_VolumeFineUp	
pt_VolumeFineDown	
	move.w	val_cmd(a4),D0
	bra	vol_slide_return
	rts


pt_NoteCut	
	move.w	val_cmd(a4),D0
	cmp.w	Counter(a6),D0
	bne.s	.Return
	clr.w	n_volume(A4)
.return
	rts


pt_NoteDelay	
	move.w	val_cmd(a4),d0
	cmp.w	Counter(a6),D0
	bne.s	.return
	move	n_period(a4),d0
	beq.s	.return
	move.b	#$fe,s_flag_info(a5)	;s_ptr_sample(a5)=s_loopstart(a5)	
	move.L	n_start(A4),s_start(A5)	;Set sampledata pointer
	move.l	n_lengt(A4),s_lengt(A5)	;Set length
	move.w	d0,s_period(A5)
	move.L	n_loopstart(A4),s_loopstart(A5)
	move.L	n_replen(A4),s_looplengt(A5)
.return
	rts



pt_PatternDelay	
	move.w	val_cmd(A4),D0
	tst.w	pt_PattDelayTime2(a6)
	bne.s	.return
	addq.w	#1,d0
	move	d0,pt_PattDelayTime(a6)
.return
	rts


pt_FunkIt	
	move.b	val_cmd(a4),d0
	move.b	d0,n_glissfunk(a4)
	tst.w	n_glissfunk(a4)
	beq.s	pt_funkend
pt_UpdateFunk
	MOVE.B	n_glissfunk(A4),D0
	beq.s	pt_funkend
	lea	pt_FunkTable(PC),A0
	move.b	(a0,d0.w),d0
	add.b	d0,n_funkoffset(A4)
	btst	#7,n_funkoffset(A4)
	beq.s	pt_funkend
	clr.b	n_funkoffset(A4)
	move.l	n_loopstart(A4),D0
	move.l	n_replen(A4),D1
	add.l	d1,d0
	add.l	d1,d0
	move.l	n_wavestart(A4),A0
	addq.l	#1,a0
	cmp.l	d0,a0
	blo.s	.pt_funkok
	move.l	n_loopstart(A4),A0
.pt_funkok
	move.l	a0,n_wavestart(A4)	;sert a quoi?
	not.b	(a0)
pt_funkend
	rts

