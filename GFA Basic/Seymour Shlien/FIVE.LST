' five.gfa                      13 June 1992
' programmed by Seymour Shlien in GFA Basic 3.5
' 624 Courtenay Avenue
' Ottawa, Canada, K2A 3B5
' The program implements the game of five in a row or gomuku.
' The computer keeps the state of the game in the arrays game%(100)
' linu%(192) and linc%(192).
DIM mlines%(192,5)
DIM postoline%(100,20),pos%(100)
DIM game%(100)
DIM linu%(192),linc%(192)
DIM move_memory%(100)
DIM tie%(30)
xleft%=10
ytop%=10
size%=12
iwin%=0
uwin%=0
DEFFILL 0
PBOX 0,0,319,199
DEFFILL 1
DEFMOUSE 0
@initialize_mlines
@initialize_postoline
TEXT 220,18,"undo"
TEXT 220,33,"restart"
TEXT 220,48,"quit"
BOX 215,10,280,20
BOX 215,25,280,35
BOX 215,40,280,50
@run_game
> PROCEDURE documentation
  ' All the 192 possible lines where you may win are compiled in mlines.
  ' mlines(i,j), j= 0 to 4 lists all the squares on line number i.
  ' postoline(n%,j) j=0 to pos%(n%)-1 lists all the j% lines which pass
  ' through square n%
  ' game(n%) stores the board. Your pieces are 2, the computer pieces are 1
  ' and empty is 0.
  ' who%=1 is the computer. who%=2 is you
  ' The arrays linc% and linu% store the number of computer tokens and
  ' user tokens on each of the 192 lines on the board.
RETURN
> PROCEDURE print_instructions
  LOCATE 1,17
  PRINT "The game is similar to tic tac toe."
  PRINT "The object is to get five in a row"
  PRINT "before the computer does. The computer"
  PRINT "is not impossible to beat but provides"
  PRINT "a challenge to beginners. The program"
  PRINT "and sources are public domain so you"
  PRINT "are welcome to improve it. Click on"
  PRINT "square using mouse."
RETURN
> FUNCTION ijtoindex(i%,j%)
RETURN (j%*10+i%)
ENDFUNC
> PROCEDURE initialize_mlines
LOCAL i%,j%,k%,index%
index%=0
FOR j%=0 TO 9
  FOR i%=0 TO 5
    INC index%
    FOR k%=0 TO 4
      mlines%(index%,k%)=@ijtoindex(i%+k%,j%)
    NEXT k%
  NEXT i%
NEXT j%
FOR i%=0 TO 9
  FOR j%=0 TO 5
    INC index%
    FOR k%=0 TO 4
      mlines%(index%,k%)=@ijtoindex(i%,j%+k%)
    NEXT k%
  NEXT j%
NEXT i%
FOR i%=0 TO 5
  FOR j%=0 TO 5
    INC index%
    FOR k%=0 TO 4
      mlines%(index%,k%)=@ijtoindex(i%+k%,j%+k%)
    NEXT k%
  NEXT j%
NEXT i%
FOR i%=4 TO 9
  FOR j%=0 TO 5
    INC index%
    FOR k%=0 TO 4
      mlines%(index%,k%)=@ijtoindex(i%-k%,j%+k%)
    NEXT k%
  NEXT j%
NEXT i%
RETURN
> PROCEDURE initialize_postoline
LOCAL i%,j%,unit%
FOR i%=0 TO 100
  pos%(i%)=0
NEXT i%
FOR i%=1 TO 192
  FOR j%=0 TO 4
    unit%=mlines%(i%,j%)
    postoline%(unit%,pos%(unit%))=i%
    pos%(unit%)=pos%(unit%)+1
  NEXT j%
NEXT i%
RETURN
> PROCEDURE dump_postoline(unit%)
FOR i%=0 TO pos%(unit%)-1
  PRINT postoline%(unit%,i%);" ";
NEXT i%
RETURN
> PROCEDURE dump_mline(index%)
LOCAL i%
FOR i%=0 TO 4
  PRINT mlines%(index%,i%);" ";
NEXT i%
PRINT
RETURN
> PROCEDURE initialize_game
LOCAL i%
FOR i%=0 TO 100
  game%(i%)=0
NEXT i%
FOR i%=1 TO 192
  linu%(i%)=0
  linc%(i%)=0
NEXT i%
RETURN
> PROCEDURE draw_piece(nm%)
LOCAL x1%,y1%
x1%=xleft%+(nm% MOD 10)*size%
y1%=ytop%+(nm% DIV 10)*size%
SELECT game%(nm%)
CASE 0
  PBOX x1%+1,y1%-1,x1%+size%-1,y1%-size%+1
CASE 1
  TEXT x1%+2,y1%-3,"O"
CASE 2
  TEXT x1%+2,y1%-3,"*"
ENDSELECT
RETURN
> PROCEDURE draw_underlined_piece(nm%)
LOCAL x1%,y1%
DEFTEXT 1,8
x1%=xleft%+(nm% MOD 10)*size%
y1%=ytop%+(nm% DIV 10)*size%
SELECT game%(nm%)
CASE 0
  PBOX x1%+1,y1%-1,x1%+size%-1,y1%-size%+1
CASE 1
  TEXT x1%+2,y1%-3,"O"
CASE 2
  TEXT x1%+2,y1%-3,"*"
ENDSELECT
DEFTEXT 1,0
RETURN
> PROCEDURE draw_board
LOCAL i%
FOR i%=0 TO 99
  draw_piece(i%)
NEXT i%
RETURN
> FUNCTION get_your_move
LOCAL x%,y%,n%
LOCATE 1,21
INPUT "move";x%,y%
n%=@ijtoindex(x%,y%)
RETURN n%
ENDFUNC
> FUNCTION mget_your_move
LOCAL x%,y%,n%,t%,b_status%,status%,nm%
t%=TIMER
b_status%=0
DO
IF move%>0
status%=((TIMER-t%) DIV 100) MOD 2
IF status%<>b_status%
  b_status%=status%
  nm%=move_memory%(move%-1)
  IF status%=0
    @draw_piece(nm%)
  ELSE
    @draw_underlined_piece(nm%)
  ENDIF
  SHOWM
ENDIF
ENDIF
LOOP UNTIL MOUSEK<>0
draw_piece(nm%)
x%=(MOUSEX-xleft%) DIV size%
y%=(MOUSEY-ytop%+9) DIV size%
IF MOUSEX>215 AND MOUSEY<280
IF MOUSEY>10 AND MOUSEY<20
RETURN -2
ENDIF
IF MOUSEY>25 AND MOUSEY<35
RETURN -3
ENDIF
IF MOUSEY>40 AND MOUSEY<50
RETURN -4
ENDIF
ENDIF
IF x%>9 OR x%<0
RETURN -1
ENDIF
IF y%>9 OR y%<0
RETURN -1
ENDIF
n%=@ijtoindex(x%,y%)
RETURN n%
ENDFUNC
> PROCEDURE update_lin_status(move%,who%,dir%)
' dir%=1 for making a move
' dir%=-1 to take back a move
LOCAL i%,p%,at%
at%=-1
FOR i%=0 TO pos%(move%)-1
p%=postoline%(move%,i%)
IF who%=1
linc%(p%)=linc%(p%)+dir%
IF linc%(p%)=5
  win%=1
  at%=p%
  INC iwin%
ENDIF
ELSE IF who%=2
linu%(p%)=linu%(p%)+dir%
IF linu%(p%)=5
  win%=2
  INC uwin%
ENDIF
ENDIF
NEXT i%
IF at%<>-1
FOR i%=0 TO 4
p%=mlines%(at%,i%)
@draw_underlined_piece(p%)
NEXT i%
ENDIF
RETURN
> FUNCTION find_next_row(who%,limit%,from%)
LOCAL i%
i%=from%-1
IF who%=1
DO
INC i%
EXIT IF i%>192
LOOP UNTIL linu%(i%)=0 AND linc%(i%)=limit%
RETURN i%
ELSE IF who%=2
DO
INC i%
EXIT IF i%>192
'      LOCATE 1,22
'     PRINT i%;" ";linc%(i%);" ";linu%(i%);
LOOP UNTIL linc%(i%)=0 AND linu%(i%)=limit%
RETURN i%
ENDIF
RETURN 0
ENDFUNC
> FUNCTION threatening_three(who%)
' a threatening 3 is three enemy pieces in a row not blocked at either side
' In some cases, we find two or more threatening 3's. We then pick the square
' which produces another threatening 3 if any.
LOCAL row%,sq%,nty%
start%=0
nty%=0
DO
row%=@find_next_row(who%,3,start%)
EXIT IF row%=193
sq%=@best_free_square_in(row%,who%,3)
' if maxrows% is 1 or less, the row is not threatening. Look for
' another one.
IF maxrows%>1
tie%(nty%)=sq%
INC nty%
ENDIF
start%=row%+1
LOOP UNTIL row%=193
best_sq%=-1
maxrows%=0
IF nty%>1
FOR i%=0 TO nty%-1
k%=@count_rows_in_square(who%,2,tie%(i%))
IF k%>maxrows%
best_sq%=tie%(i%)
maxrows%=k%
ENDIF
NEXT i%
RETURN best_sq%
ENDIF
IF nty%>0
RETURN tie%(0)
ELSE
RETURN -1
ENDIF
ENDFUNC
> FUNCTION best_free_square_in(row%,who%,size%)
' given a row it examines all squares and returns
' the square with the maximum number of rows with
' size% pieces belonging to who%. Note maxrow% is
' treated as a global
LOCAL i%,sq%,best_sq%,k%
best_sqr%=-1
maxrows%=0
FOR i%=0 TO 4
sq%=mlines%(row%,i%)
IF game%(sq%)=0
k%=@count_rows_in_square(who%,size%,sq%)
IF k%>maxrows%
maxrows%=k%
best_sqr%=sq%
ENDIF
ENDIF
NEXT i%
RETURN best_sqr%
ENDFUNC
> FUNCTION defensive_square
LOCAL row4%,row3%,m%
' is there a row of 4 that needs to be blocked?
row4%=@find_next_row(2,4,0)
IF row4%>0 AND row4%<193
m%=@best_free_square_in(row4%,2,4)
RETURN m%
ENDIF
m%=@threatening_three(2)
RETURN m%
ENDFUNC
> FUNCTION can_i_win
LOCAL row4%
row4%=@find_next_row(1,4,0)
IF row4%>0 AND row4%<193
m%=@best_free_square_in(row4%,1,4)
RETURN m%
ENDIF
RETURN -1
ENDFUNC
> FUNCTION count_rows_in_square(who%,size%,square%)
' counts number of rows passing in square with size% or
' more pieces.
LOCAL i%,n%,row%
n%=0
IF game%(square%)<>0
RETURN 0
ENDIF
FOR i%=0 TO pos%(square%)-1
row%=postoline%(square%,i%)
IF who%=1
IF linc%(row%)>=size% AND linu%(row%)=0
INC n%
ENDIF
ELSE
IF linu%(row%)>=size% AND linc%(row%)=0
INC n%
ENDIF
ENDIF
NEXT i%
RETURN n%
ENDFUNC
> FUNCTION make_three(who%)
' The function searches all lines that have 2 pieces. For each
' square in the line it counts the number of lines passing through
' the square having 2 or more pieces. It returns the square with
' the maximum number of lines with two pieces. Placing a piece
' here will generate a threatening 3. When there is a choice of
' several places, then we also pick the square which creates a line
' of two so that it can eventually become a threatening 3.
LOCAL start%,row2%,m%,best_sqr%,i%,sq%,k%,nty%
tie%(0)=-1
maxrows%=0
nty%=0
DO
row2%=@find_next_row(1,2,start%)
IF row2%<193
FOR i%=0 TO 4
sq%=mlines%(row2%,i%)
k%=@count_rows_in_square(who%,2,sq%)
IF k%=maxrows%
tie%(nty%)=sq%
INC nty%
ENDIF
IF k%>maxrows%
maxrows%=k%
tie%(0)=sq%
nty%=1
ENDIF
NEXT i%
ENDIF
start%=row2%+1
LOOP UNTIL row2%>192
maxrows%=0
IF nty%>1
FOR i%=0 TO nty%-1
k%=@count_rows_in_square(who%,1,tie%(i%))
IF k%>maxrows%
best_sq%=tie%(i%)
maxrows%=k%
ENDIF
NEXT i%
IF game%(best_sq%)<>0
STOP
ENDIF
RETURN best_sq%
ENDIF
IF nty%>0
RETURN tie%(0)
ENDIF
RETURN -1
ENDFUNC
> FUNCTION offensive_square
LOCAL row3%
m%=@threatening_three(1)
IF m%>=0
RETURN m%
ENDIF
m%=@make_three(1)
IF m%>=0
RETURN m%
ENDIF
RETURN -1
ENDFUNC
> FUNCTION random_move(size%,loc%)
LOCAL try%
LOCAL m%,r%,size_sq%,size_hf%
size_sq%=size%*size%
size_hf%=size% DIV 2
DO
r%=RANDOM(size_sq%)
m%=loc%+(r% DIV size%-size_hf%)*10+r% MOD size%-size_hf%
INC try%
IF m%<0
m%=0
ENDIF
IF m%>99
m%=99
ENDIF
LOOP UNTIL game%(m%)=0 OR try%>size_sq%
IF try%<size_sq%
RETURN m%
ELSE
RETURN -1
ENDIF
ENDFUNC
> PROCEDURE undo_move
LOCAL m%
DEC move%
m%=move_memory%(move%)
game%(m%)=0
@draw_piece(m%)
update_lin_status(m%,1,-1)
PAUSE 10
DEC move%
m%=move_memory%(move%)
game%(m%)=0
@draw_piece(m%)
PAUSE 20
update_lin_status(m%,2,-1)
RETURN
> FUNCTION play_game
LOCAL m%,row4%,r%,i%,debug%
win%=0
move%=0
DO WHILE win%=0 AND move%<100
DO
DO
m%=@mget_your_move
' erase instructions if starting for first time
INC klick%
IF klick%=1
DEFFILL 0
PBOX 0,120,319,199
DEFFILL 1
ENDIF
IF m%=-2
@undo_move
ENDIF
IF m%<-2
RETURN m%
ENDIF
LOOP UNTIL m%>=0 AND m%<100
LOOP UNTIL game%(m%)=0
game%(m%)=2
draw_piece(m%)
update_lin_status(m%,2,1)
move_memory%(move%)=m%
INC move%
debug%=0
' The computer moves now
DO
m%=@can_i_win
debug%=1
EXIT IF m%>=0
m%=@defensive_square
debug%=2
EXIT IF m%>=0
m%=@offensive_square
debug%=3
EXIT IF m%>=0
' make a place a piece in the neighbourhood of one of the pieces
' on the board.
FOR i%=0 TO move%
m%=@random_move(3,move_memory%(i%))
EXIT IF m%>=0
NEXT i%
debug%=4
EXIT IF m%>=0
DO
m%=RANDOM(100)
LOOP UNTIL game%(m%)=0
debug%=5
LOOP UNTIL TRUE
IF game%(m%)<>0
' something is wrong: The computer is trying to cheat.
STOP
ENDIF
game%(m%)=1
@draw_piece(m%)
@update_lin_status(m%,1,1)
move_memory%(move%)=m%
INC move%
LOOP
LOCATE 20,5
IF win%=1
PRINT "I win";
ENDIF
IF win%=2
PRINT "You win";
ENDIF
IF move%>98
PRINT "a draw";
ENDIF
IF iwin%>0
LOCATE 1,16
PRINT "I won ";iwin%;" games";
ENDIF
IF uwin%>0
LOCATE 20,16
PRINT "You won ";uwin%;" games";
ENDIF
PAUSE 10
DO
LOOP UNTIL INKEY$<>"" OR MOUSEK<>0
LOCATE 20,5
PRINT SPACE$(7)
RETURN 0
ENDFUNC
> PROCEDURE run_game
LOCAL ret%
@print_instructions
klick%=0
DO
@initialize_game
@draw_board
ret%=@play_game
LOOP UNTIL ret%=-4
RETURN
