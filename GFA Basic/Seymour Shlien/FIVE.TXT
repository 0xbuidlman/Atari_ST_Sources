				FIVE.TXT


The object of the game like gomuku is to be the first to place five of your
pieces in a row either horizontally, vertically or diagonally. The board is
10 by 10 and has 100 spots where you or the computer can place a piece. In
this version of the game you take turns against the computer.

The file describes the strategy used by the computer in playing this game.
The squares on the board are indexed 0 to 99 starting with the top left
hand corner of the board. The array game%(100) stores the status of every
square. A value of 0 for the variable game%(n) means that square n is
unoccupied. A value of 1 means the computer has a piece on square n, and
a value of 2 means that you the opponent has a piece on square n. The
horizontal and vertical coordinates of the square are obtained from the
remainder and quotient when dividing n by 10.

There are 192 lines or rows where one can win. 60 of these lines are
horizontal. If one indexes these lines by the starting square of the
line which goes left to right, then these starting squares make a rectangle
6 squares across and 10 squares down in the left hand portion of the
board. Note that these lines are overlaping, so the squares in line
one are 0,1,2,3,4 the squares in line two are 1,2,3,4,5 and etc.
Similarly there are 60 vertical winning lines. If the lines go top down,
then their starting squares form a rectangle 10 across and 6 down in the
top half of the board. The starting squares of the diagonal lines (assuming
they are going down) form two 6 by 6 squares at the two top corners of
the board. Thus there are 60 + 60 + 36 + 36 = 192 winning lines.

The squares of each of the winning lines are stored in an orgainized fashion
in the two dimensional array mlines%(192)(5). The numbers mlines%(i)(0),
mlines%(i)(1), ... mlines%(i)(4) refer to the squares on the board which
belong to winning line i. A piece can be on many different winning lines;
in fact a piece near the center of the board can lie on as many as 20
winning lines while a piece at any of the 4 corners of the board can only
lie on 3 winning lines (horizontal, vertical and diagonal).

The computer uses two other arrays postoline%(100)(20) and pos%(100) to
get the list of winning lines associated with any particular square on
the board. For square n, there are pos%(n) winning lines and they are
given by postoline%(n)(0), postoline%(n)(1), ... postoline(n)(pos%(n)-1).

The three arrays, mlines, pos% and postoline% are initialized at the
beginning of the program. See the functions initialize_mlines and
initialize_postoline. (The procedures dump_postoline and dump_mlines
were used mainly for debugging during the development of this program.)

The status of each of the winning lines is stored and updated in the
arrays linu%(192) and linc%(192). These arrays store the number of
pieces that you and the computer has in each of the winning lines.
Thus the numbers range from 0 to 5. The game starts with all of
these variables set to zero and ends when a number five occurs anywhere
in these two lines. When linc%(i) = 2 it means that the computer now
has two pieces on winning line i. This line is now blocked for you;
however, if you place a piece in any of the remaining free squares
of the winning line i, then you block this line and (others as well)
for the computer. The function update_lin_status is used by you and
the computer (specified by the variable who%) to update the linu%
and linc% arrays in each move. The function can also be used to take
back a move.

There is one more array, move_memory%(100) which is merely used for
taking back moves (undo feature).

The computer uses simple heuristics in playing against its opponent.
It does not use tree searches (though that can certainly improve its
strategy) but merely picks the square which provides the largest
advantage. The heuristics is described in general terms below.

The player always starts first.  Initially, when the board is almost
empty, the computer picks a random square in the vicinity of one
of the occupied squares. As more pieces appear on the board, the
computer starts to makes moves which either block threatening
positions of its opponent (defensive moves) or if none are found then
tries to generate an attacking position.

First the computer checks whether it can win in the next move. If none
are found then the computer checks whether you can win in your next move
and tries to find the square that prevents this. The computer scans the
array linc% and linu% for a 4. If linu%(i)=4 but linc%(i)=0 then you
are able to win the game in line i on your next move. The winning
square is found by scanning the mlines(i) list for a square which
is unoccuppied (games()=0) on the board. If it is the computer's turn
it takes that winning square, making linc%(i)=1 and blocking this line.
Similarly linc%(i)=4 can mean a possible win for the computer when
linu%(i)=0.

If no one has a threatening win, the computer now repeats the search
for lines of three pieces. The logic is more complicated as there are
more possible configurations as will be illustrated with the following
examples.

Usually, a three occurs in several lines at the same time. If the
pieces are distributed as
 |   | * |   |   | * | * |   |   |   |   |
   0   1   2   3   4   5   6   7   8   9
then there is only one line starting at square 1 which has three pieces.
However if the pieces are distributed as
 |   |   | * | * | * |   |   |   |   |   |
   0   1   2   3   4   5   6   7   8   9
then there are three lines with three pieces. These lines are (0-4),
(1-5) and (2-6).  Placing a piece on 1 or 5 is more effective than
placing a piece on 0 or 6 as the former makes two lines into rows
of fours while the other only makes one line a row of 4. If you
have a row of 4 unblocked in both sides, this guarantees a win
in your next turn as the computer can block only one side (one line)
in its next turn.

The situation is actually more complicated as the board is two dimensional
and a piece affects the vertical and diagonal lines passing through the
square.

The next goal of the computer is to prevent you from making a line of
4 which can expand in either side. If you do not pose such a threat, then
the computer tries to makes its own line of 4. Even if the line of 4
is blocked in one side, it may still be a useful move as it restricts
your choice to only one move. Perhaps a sequence of such forced moves
may lead to an eventual win. (The computer takes this greedy approach
in this version of the game.)

If the computer is not successful in the last goal, then it tries to
make a line of 3. It picks the square which makes as many lines of 3
as possible.  When two or more squares are equal in terms of creating
lines of 3's then the computer chooses the square which also generates
a line of 2 as the next move would convert this line of 2 into a line
of 3. This is basically an overview of the computer's strategy without
going into the programming details.


The function count_rows_in_square(who%,size%,square%) counts the number
of lines of size% pieces which pass through square% If who%=1 it counts
the lines which are to the computer's advantage. If who%=2, it counts
the lines which are to its opponent's advantage. This is the basic
evaluation function as the program could be designed to search the
entire board using this function; however it is faster to restrict the
search to certain squares using the function best_free_square().

The function find_next_row(who%,limit%,from%) searches linu% or linc%
(depending upon who%) for an unblocked line having limit% pieces. The
function returns the first line it finds starting its search from index
from% or else returns the number 193 signifying that it was unsuccessful.

The function threatening_three is used both defensively or offensively and
returns the square which makes a row of 4 pieces.


Seymour Shlien, 624 Courtenay Avenue, Ottawa, Canada, K2A 3B5, June 14 1992
