' deliver          may 24 1992
' Programmed by Seymour Shlien in GFA Basic 3.5
' 624 Courtenay Avenue
' Ottawa, Ontario
' Canada K2A 3B5
'
'
rez%=XBIOS(4)
IF rez%<>0
  ALERT 3," Please switch   to | low  resolution! ",1,"Oops",b%
  STOP
ENDIF
DEFMOUSE 0
DIM deskcolors%(16)
DIM full_maze%(350)
DIM okdir!(8)
DIM difficulty$(4)
DIM xbs_files$(30)
DIM help$(10)
@get_deskcolors
VSETCOLOR 0,12,12,12
VSETCOLOR 1,0,0,0
VSETCOLOR 2,15,0,0
VSETCOLOR 3,0,15,0
VSETCOLOR 4,0,0,15
VSETCOLOR 5,0,15,15
VSETCOLOR 6,12,12,0
VSETCOLOR 7,12,0,12
VSETCOLOR 8,7,11,7
VSETCOLOR 9,8,8,0
VSETCOLOR 10,8,8,8
VSETCOLOR 11,7,7,7
x_window%=48
x_window_width%=80
y_window%=48
y_window_width%=80
width%=10
height%=8
matches%=5
my_matches%=1
block_size%=16
difficulty%=1
difficulty$(1)="easy"
difficulty$(2)="harder"
help$(1)="Hit mouse button for instructions"
help$(2)="Width of the board"
help$(3)="Height of the board"
help$(4)="Number of matches you must make"
help$(5)="With or without barriers"
help$(6)="The next board number to do"
help$(7)="The controller "
help$(8)="Lets go."
help$(9)="I am fed up."
'
joystick!=TRUE
DIM cellpat$(24),treasures$(4)
@read_cellpat
DIM patterns%(250)
quit%=0
'
maze_number%=1
@dir_xbs_files
@read_sound
@select_parameters
REPEAT
  IF quit%=0
    DEFFILL 0
    PBOX 0,0,319,199
    i_explorer%=0
    j_explorer%=0
    v_explorer%=0
    cell_num%=maze_number% MOD 15
    RANDOMIZE (maze_number%+100000)
    @make_maze
    @drop_treasures
    @draw_full_level
    @draw_explorer
    @run_maze
    ' Clr Home signals exit%=2 to restart problem
    IF exit%<>2
      INC maze_number%
      IF my_matches%<>matches%
        @select_parameters
      ENDIF
    ENDIF
  ENDIF
UNTIL quit%=1
@restore_deskcolors
SPOKE &H484,BSET(PEEK(&H484),0)
> PROCEDURE get_deskcolors
  LOCAL i%
  FOR i%=0 TO 15
    deskcolors%(i%)=XBIOS(7,i%,-1)
  NEXT i%
RETURN
> PROCEDURE restore_deskcolors
  LOCAL i%
  FOR i%=0 TO 15
    SETCOLOR i%,deskcolors%(i%)
  NEXT i%
RETURN
> PROCEDURE show_parameter(num%)
  GRAPHMODE 2
  SELECT num%
  CASE 1
    TEXT 25,20,"Instructions"
  CASE 2
    TEXT 25,30,"Width"
    PBOX 100,22,150,30
    TEXT 100,30,STR$(width%)
  CASE 3
    TEXT 25,40,"Height"
    PBOX 100,32,150,40
    TEXT 100,40,STR$(height%)
  CASE 4
    TEXT 25,50,"Matches"
    PBOX 100,42,150,50
    TEXT 100,50,STR$(matches%)
  CASE 5
    TEXT 25,60,"Difficulty"
    PBOX 115,52,161,61
    TEXT 115,60,difficulty$(difficulty%)
  CASE 6
    TEXT 25,70,"Board no."
    PBOX 120,62,150,70
    TEXT 120,70,STR$(maze_number%)
  CASE 7
    PBOX 25,72,120,82
    IF joystick!=FALSE
      TEXT 25,80,"Arrow keys"
    ELSE
      TEXT 25,80,"Joystick "
    ENDIF
  CASE 8
    TEXT 25,90,"OK"
  CASE 9
    TEXT 25,100,"Quit"
  ENDSELECT
  GRAPHMODE 1
RETURN
> PROCEDURE show_all_parameters
  LOCAL i%
  DEFTEXT 4,0,0,6
  COLOR 12
  BOX 200,100,230,120
  BOX 230,110,240,120
  BOX 204,120,209,123
  BOX 234,120,239,123
  DEFFILL 1
  PRBOX 10,10,162,120
  FOR i%=1 TO 9
    @show_parameter(i%)
  NEXT i%
  TEXT 10,180,"Undo button to abort."
RETURN
> PROCEDURE select_parameters
  LOCAL choice%,highlight%
  DEFFILL 0
  DEFTEXT 1,0,0,6
  PBOX 0,0,319,199
  highlight%=0
  @show_all_parameters
  SETMOUSE 10,185,0
  REPEAT
    REPEAT
      SHOWM
      choice%=(MOUSEY-10)/10+1
      IF highlight%<>choice%
        DEFTEXT 4,0
        show_parameter(highlight%)
        DEFTEXT 5,0
        show_parameter(choice%)
        highlight%=choice%
        show_help(choice%)
      ENDIF
      IF MOUSEK=0
        tim%=TIMER
      ENDIF
    UNTIL MOUSEK<>0
    IF MOUSEK=1
      modify_parameter(choice%,1)
    ENDIF
    IF MOUSEK=2
      modify_parameter(choice%,-1)
    ENDIF
    show_parameter(choice%)
    PAUSE 20
    IF choice%=1
      @instructions
    ENDIF
  UNTIL choice%=8 OR choice%=9
  DEFTEXT 1,0
RETURN
> PROCEDURE modify_parameter(num%,dir%)
  SELECT num%
  CASE 2
    width%=width%+dir%
    IF width%>14
      width%=14
    ENDIF
    IF width%<7
      width%=7
    ENDIF
  CASE 3
    height%=height%+dir%
    IF height%>10
      height%=10
    ENDIF
    IF height%<7
      height%=7
    ENDIF
  CASE 4
    matches%=matches%+dir%
    IF matches%>20
      matches%=20
    ENDIF
    IF matches%<2
      matches%=2
    ENDIF
  CASE 5
    difficulty%=difficulty%+dir%
    IF difficulty%>2
      difficulty%=2
    ENDIF
    IF difficulty%<1
      difficulty%=1
    ENDIF
  CASE 6
    IF (TIMER-tim%)>1000
      maze_number%=maze_number%+dir%*5
    ELSE
      maze_number%=maze_number%+dir%
    ENDIF
    IF maze_number%<0
      maze_number%=0
    ENDIF
  CASE 7
    joystick!=-1-joystick!
  CASE 9
    quit%=1
  ENDSELECT
RETURN
> PROCEDURE show_help(num%)
  DEFFILL 1
  PBOX 10,160,310,190
  GRAPHMODE 2
  IF num%>0 AND num%<10
    TEXT 10,170,help$(num%)
  ENDIF
  TEXT 10,180,"Click left or right button."
  GRAPHMODE 1
RETURN
> PROCEDURE instructions
  DEFFILL 0
  PBOX 0,0,319,199
  LOCATE 15,1
  PRINT "Match Letters"
  PRINT
  PRINT "The object of this puzzle is"
  PRINT "to move the blue letters over"
  PRINT "the matching red letters."
  PRINT "The explorer picks up and carries"
  PRINT "one of the blue letters whenever"
  PRINT "it passes over the letter. It will"
  PRINT "automatically drop it over the"
  PRINT "corresponding red letter when it"
  PRINT "passes over it. The matching letters"
  PRINT "either disappear in easy mode or."
  PRINT "turn cyan and become a barrier in"
  PRINT "hard mode."
  PRINT
  PRINT "The difficulty of the puzzle increases"
  PRINT "as the work area becomes smaller (lower"
  PRINT "width and height) and the number of"
  PRINT "letters increases (matches)."
  PRINT
  PRINT "Use the Clr Home to restart"
  PRINT "Use the Undo button to abort."
  PRINT
  PRINT "...hit space bar to continue"
  REPEAT
  UNTIL INKEY$<>""
  PBOX 0,0,319,199
  @show_all_parameters
RETURN
'
> PROCEDURE make_maze
  LOCAL i%,j%
  size%=width%*height%
  FOR i%=0 TO size%
    full_maze%(i%)=0
  NEXT i%
  FOR i%=0 TO height%/3
    FOR j%=0 TO width%-1
      full_maze%(i%*width%*3+j%)=1
    NEXT j%
  NEXT i%
  FOR i%=0 TO width%/3
    FOR j%=0 TO height%-1
      full_maze%(j%*width%+i%*3)=1
    NEXT j%
  NEXT i%
RETURN
> PROCEDURE drop_treasures
  ' we drop treasures at random putting proportionally fewer treasures
  ' for larger mazes.
  LOCAL i%,r%,try%,x1%,x2%,y1%,y2%
  my_matches%=0
  try%=0
  complexity%=0
  DO
    DO
      r%=RANDOM(size%)
    LOOP UNTIL full_maze%(r%)=1 OR try%>1000
    full_maze%(r%)=10+i%
    x1%=r% MOD width%
    y1%=r% DIV width%
    DO
      r%=RANDOM(size%)
    LOOP UNTIL full_maze%(r%)=1 OR try%>1000
    full_maze%(r%)=30+i%
    x2%=r% MOD width%
    y2%=r% DIV width%
    INC i%
    complexity%=complexity%+ABS(x2%-x1%)+ABS(y2%-y1%)
  LOOP UNTIL i%>matches%-1 OR try%>1000
  matches%=i%
RETURN
'
> PROCEDURE draw_block(i%,j%,code|,index%)
  x%=block_size%*i%+10
  y%=block_size%*j%+10
  SELECT code|
  CASE 0
    DEFFILL 0
    PUT x%,y%,cellpat$(cell_num%)
    GOTO draw_block_exit
  CASE 1,5
    DEFFILL 1,1
  CASE 2
    DEFFILL 1,3,4
  CASE 3
    DEFFILL 1,3,5
  CASE 4
    DEFFILL 1,3,12
  ENDSELECT
  DEFFILL 1
  PBOX x%,y%,x%+block_size%-1,y%+block_size%-1
  ' cyan
  IF code|>49
    DEFTEXT 5,0,0,6
    GRAPHMODE 2
    TEXT x%+4,y%+10,CHR$(code|+15)
    GRAPHMODE 1
  ENDIF
  ' blue
  IF code|>29 AND code|<50
    DEFTEXT 4,0,0,6
    GRAPHMODE 2
    TEXT x%+4,y%+10,CHR$(code|+35)
    GRAPHMODE 1
  ENDIF
  ' red
  IF code|>9 AND code|<30
    DEFTEXT 2,0,0,6
    GRAPHMODE 2
    TEXT x%+4,y%+10,CHR$(code|+55)
    GRAPHMODE 1
  ENDIF
  '    PBOX x%+2,y%+2,x%+block_size%-3,y%+block_size%-3
draw_block_exit:
RETURN
> PROCEDURE draw_full_level
  LOCAL i%,ix%,iy%
  DEFFILL 10
  PBOX 0,0,width%*block_size%+20,height%*block_size%+20
  FOR i%=0 TO size%-1
    ix%=i% MOD width%
    iy%=i% DIV width%
    draw_block(ix%,iy%,full_maze%(i%),i%)
  NEXT i%
  LOCATE 1,24
  PRINT "Undo button to abort";
  LOCATE 32,1
  PRINT "maze ";maze_number%;
  @dosound
  LOCATE 32,3
  PRINT complexity%;" cmplx";
RETURN
'
> PROCEDURE run_maze
  LOCAL i%,x%
  HIDEM
  SETMOUSE 319,199
  exit%=0
  x%=12*ntreasures%
  IF x%>319
    x%=319
  ENDIF
  step%=0
  REPEAT
    IF joystick!=FALSE
      t$=INKEY$
      IF t$<>""
        scancode%=CVI(t$)
        @shift_explorer(scancode%)
        LOCATE 32,2
        PRINT SPACE$(7);
        LOCATE 32,2
        PRINT step%;" steps";
      ENDIF
    ELSE
      scancode%=@stick_handler
      IF scancode%<>0
        ' dont use pause or else problems with joystick handler
        @shift_explorer(scancode%)
        LOCATE 32,2
        PRINT SPACE$(7);
        LOCATE 32,2
        PRINT step%;" steps";
        DELAY 0.2
      ENDIF
      STICK 0
    ENDIF
  UNTIL exit%>0 OR (my_matches%=matches%)
  GRAPHMODE 0
  PAUSE 30
RETURN
> PROCEDURE draw_explorer
  x%=block_size%*i_explorer%+10
  y%=block_size%*j_explorer%+10
  COLOR 4
  BOX x%+1,y%+1,x%+block_size%-2,y%+block_size%-2
  IF v_explorer%>0
    DEFTEXT 4,0,0,6
    GRAPHMODE 2
    TEXT x%+4,y%+10,CHR$(v_explorer%+35)
    GRAPHMODE 1
  ENDIF
RETURN
> FUNCTION ij_to_index(i%,j%)
RETURN j%*width%+i%
ENDFUNC
> FUNCTION stick_handler
LOCAL i%
move%=STICK(1)
SELECT move%
CASE 1
RETURN 72
CASE 2
RETURN 80
CASE 4
RETURN 75
CASE 8
RETURN 77
DEFAULT
FOR i%=0 TO 20
  '      IF STRIG(1)=TRUE
  '     RETURN 71
  '  ENDIF
  t$=INKEY$
  IF t$<>""
    scancode%=CVI(t$)
    RETURN scancode%
  ENDIF
NEXT i%
ENDSELECT
RETURN 0
ENDFUNC
> PROCEDURE shift_explorer(scancode%)
LOCAL i%,j%,k%,m%,index%,last_index%,code|,temp%
i%=i_explorer%
j%=j_explorer%
last_index%=@ij_to_index(i%,j%)
'  PRINT scancode%;" ";
SELECT scancode%
CASE 71
exit%=2
CASE 72
DEC j%
CASE 75
DEC i%
CASE 77
INC i%
CASE 80
INC j%
CASE 97
exit%=1
DEFAULT
LOCATE 1,20
PRINT scancode%;
ENDSELECT
IF j%>=0 AND j%<height%
IF i%>=0 AND i%<width%
  index%=@ij_to_index(i%,j%)
  IF full_maze%(last_index%)>4
    DEFFILL 1
    code|=full_maze%(last_index%)
    '
    ' if passing blue letter exhange it with the one being carried.
    IF full_maze%(last_index%)>29 AND full_maze%(last_index%)<50
      temp%=full_maze%(last_index%)
      IF v_explorer%=0
        full_maze%(last_index%)=1
      ELSE
        full_maze%(last_index%)=v_explorer%
      ENDIF
      v_explorer%=temp%
    ENDIF
    '
    ' if passing red letter and carrying equivalent blue letter
    IF full_maze%(last_index%)>9 AND full_maze%(last_index%)<30
      IF full_maze%(last_index%)-20=v_explorer%-40
        IF difficulty%=2
          full_maze%(last_index%)=v_explorer%+20
        ELSE
          full_maze%(last_index%)=1
        ENDIF
        v_explorer%=0
        INC my_matches%
      ENDIF
    ENDIF
    '        full_maze%(last_index%)=1
    INC treasures_found%
  ENDIF
  IF full_maze%(index%)>0
    IF difficulty%<2 OR full_maze%(index%)<50
      draw_block(i_explorer%,j_explorer%,full_maze%(last_index%),last_index%)
      i_explorer%=i%
      j_explorer%=j%
      @draw_explorer
      INC step%
    ENDIF
  ENDIF
ENDIF
ENDIF
shift_exit:
RETURN
> PROCEDURE read_cellpat
' the wall textures are read from data statements and put
' into the strings for cellpat$ so that they can be painted
' on the screen using PUT.
LOCAL num%,i%,j%
numcells%=15
FOR j%=0 TO numcells%-1
cellpat$(j%)=""
FOR i%=1 TO 102
  READ num%
  cellpat$(j%)=cellpat$(j%)+CHR$(num%)
NEXT i%
NEXT j%
' grating
DATA 0,11,0,11,0,4,10,6,14,4,10,14,10,4,21,6,31,8,21,6,17,6,42,136,59
DATA 138,46,140,32,140,85,78,117,206,95,78,68,76,174,162,238,224,187,174,138,46,95,90,223,126
DATA 113,208,17,28,175,172,239,186,184,234,136,140,87,92,119,118,93,218,69,28,42,164,58,234,47
DATA 172,34,46,21,70,29,198,23,70,16,76,10,138,15,128,10,140,8,138,5,6,7,14,5,10
DATA 5,10
' checkers
DATA 0,11,0,11,0,4,255,246,252,4,255,254,252,4,143,246,140,8,142,22,140,6,143,56,140
DATA 10,142,28,140,12,143,62,140,14,142,30,140,12,255,242,252,0,254,30,252,14,255,250,252,14
DATA 255,240,252,12,255,252,3,250,255,250,3,252,255,252,3,246,135,250,3,252,207,20,3,26,135
DATA 28,3,30,207,22,3,22,135,22,3,28,255,26,3,16,135,28,3,26,255,246,3,254,255,250
DATA 3,250
' cheese
DATA 0,11,0,11,0,4,0,0,207,240,253,240,0,0,0,0,255,240,127,208,0,0,0,0,198
DATA 48,255,240,0,0,0,0,230,48,255,240,0,0,0,0,255,48,191,208,0,0,0,0,63,224
DATA 251,240,0,0,0,0,127,96,255,240,0,0,0,0,231,48,255,240,0,0,0,0,231,240,191
DATA 240,0,0,0,0,255,240,253,208,0,0,0,0,254,112,247,240,0,0,0,0,206,80,127,224
DATA 0,0
' spiral
DATA 0,11,0,11,0,4,255,240,255,240,255,240,0,0,255,240,255,240,255,240,255,224,255,240,255
DATA 240,255,240,128,32,255,240,255,240,255,240,191,160,255,240,255,240,255,240,160,160,255,240,255,240
DATA 255,240,174,160,255,240,255,240,255,240,174,160,255,240,255,240,255,240,168,160,255,240,255,240,255
DATA 240,175,160,255,240,255,240,255,240,160,32,255,240,255,240,255,240,191,224,255,240,255,240,255,240
DATA 128,0
' stripes
DATA 0,11,0,11,0,4,135,224,25,128,225,240,1,128,15,192,51,0,195,240,3,0,31,128,102
DATA 16,135,224,6,0,63,0,204,48,15,192,12,0,126,16,152,96,31,128,24,0,252,48,48,192
DATA 63,0,48,0,248,112,97,144,126,16,96,16,240,240,195,48,252,48,192,48,225,240,134,96,248
DATA 112,128,96,195,240,12,192,240,240,0,192,135,224,25,128,225,240,1,128,15,192,51,0,195,240
DATA 3,0
' grass
DATA 0,11,0,11,0,4,0,0,49,0,0,0,0,0,0,0,38,128,0,0,0,0,0,0,32
DATA 128,4,0,0,0,0,0,96,224,3,0,0,0,0,0,16,144,13,0,0,0,0,0,20,0
DATA 1,0,0,0,0,0,70,32,0,128,0,0,0,0,2,32,28,128,0,0,0,0,2,144,32
DATA 64,0,0,0,0,81,0,8,0,0,0,0,0,96,192,8,0,0,0,0,0,16,64,0,0
DATA 0,0
' rocks
DATA 0,11,0,11,0,4,0,0,0,0,0,8,0,6,0,6,63,140,63,134,0,0,0,8,127
DATA 200,127,204,0,0,0,12,127,232,127,230,0,2,0,0,125,232,127,224,0,8,0,0,122,104
DATA 127,230,0,12,0,6,119,108,127,224,0,6,0,8,121,230,127,224,0,8,0,8,123,236,127
DATA 224,0,12,0,4,63,232,63,230,0,2,0,0,31,200,31,192,0,8,0,0,0,8,0,6
DATA 0,12
' dots
DATA 0,11,0,11,0,4,255,248,255,248,255,244,255,248,221,222,221,216,255,254,221,216,136,132,170
DATA 168,255,254,136,136,221,222,221,218,255,250,221,208,255,242,255,252,255,246,255,252,221,214,221,216
DATA 255,252,221,222,136,142,170,174,255,254,136,140,221,220,221,212,255,248,221,212,255,252,255,252,255
DATA 244,255,252,221,212,221,216,255,244,221,220,136,140,170,172,255,254,136,136,221,216,221,212,255,248
DATA 221,218
' blanket
DATA 0,11,0,11,0,4,60,8,3,200,192,52,0,8,60,14,3,200,192,62,0,8,60,4,3
DATA 200,192,62,0,8,60,14,3,202,192,58,0,0,3,194,192,60,60,6,0,12,3,198,192,56
DATA 60,12,0,14,3,206,192,62,60,14,0,12,3,204,192,52,60,8,0,4,192,60,60,12,3
DATA 196,0,12,192,52,60,8,3,196,0,12,192,60,60,12,3,206,0,8,192,56,60,4,3,200
DATA 0,10
' floor 1
DATA 0,11,0,11,0,4,255,240,255,248,0,8,0,12,255,240,255,252,127,232,127,230,255,242,255
DATA 240,64,40,64,32,255,248,255,240,95,168,95,166,255,252,255,246,80,172,80,160,249,246,249,248
DATA 80,166,80,160,249,248,249,248,80,172,80,160,255,252,255,244,80,168,80,166,255,242,255,240,95
DATA 168,95,160,255,248,255,240,64,40,64,38,255,252,255,246,127,236,127,224,255,246,255,248,0,6
DATA 0,10
' L
DATA 0,11,0,11,0,4,255,248,255,246,255,250,0,0,207,252,255,252,207,252,0,12,207,244,255
DATA 248,207,246,0,12,207,246,255,250,207,240,0,12,207,254,255,252,207,252,0,12,207,252,255,244
DATA 207,248,0,10,207,244,255,246,207,252,0,6,207,248,255,248,207,248,0,2,192,48,255,246,192
DATA 50,0,6,192,54,255,242,192,52,0,6,255,248,255,246,255,250,0,10,255,250,255,244,255,252
DATA 0,12
' oblate
DATA 0,11,0,11,0,4,255,240,255,240,255,240,1,240,255,240,255,240,255,240,1,240,255,240,255
DATA 240,255,240,1,240,255,240,240,16,255,240,0,16,255,240,240,16,255,240,0,16,255,240,240,240
DATA 255,16,0,16,255,240,240,240,255,16,240,16,255,240,240,240,255,16,240,16,255,240,255,240,240
DATA 16,240,16,255,240,255,240,240,16,240,16,255,240,255,240,240,16,240,16,255,240,255,240,255,240
DATA 255,240
' fence
DATA 0,11,0,11,0,4,32,72,160,86,224,124,32,70,16,140,80,160,240,246,16,136,137,22,169
DATA 80,249,248,137,24,70,44,86,160,127,236,70,32,32,72,41,70,63,194,32,64,16,136,22,128
DATA 31,136,16,128,16,136,22,134,31,140,16,134,32,76,41,64,63,198,32,72,70,38,86,170,127
DATA 224,70,44,137,28,169,92,249,252,137,20,16,136,80,166,240,252,16,134,32,74,160,80,224,124
DATA 32,78
' moon
DATA 0,11,0,11,0,4,255,240,255,240,255,240,0,0,227,240,255,240,224,240,0,0,207,240,255
DATA 240,192,112,0,0,159,240,255,240,128,48,0,0,159,240,255,240,128,16,0,0,159,240,255,240
DATA 128,16,0,0,159,240,255,240,128,16,0,0,159,240,255,240,128,16,0,0,223,240,255,240,192
DATA 48,0,0,207,240,255,240,192,112,0,0,247,240,255,240,240,240,0,0,255,240,255,240,255,240
DATA 0,0
' chicken wire fence
DATA 0,11,0,11,0,4,0,0,14,70,31,194,0,6,0,6,96,18,248,84,0,6,0,8,1
DATA 166,137,234,0,10,0,10,2,4,70,44,0,12,0,0,24,10,124,40,0,14,0,10,16,12
DATA 50,50,0,14,0,6,192,6,242,16,0,8,0,0,128,8,145,16,0,8,0,0,128,104,145
DATA 112,0,10,0,8,1,14,9,138,0,12,0,2,6,14,14,134,0,6,0,0,4,12,12,134
DATA 0,4
' wall paper
DATA 0,11,0,11,0,4,3,132,32,6,0,8,0,6,2,10,96,10,0,10,0,4,2,28,224
DATA 12,0,0,0,10,3,56,0,14,0,10,0,12,3,226,0,14,0,6,0,6,1,192,0,8
DATA 0,0,0,8,0,0,0,8,0,0,0,8,0,0,1,250,0,8,0,14,0,10,1,252,0
DATA 2,0,14,224,6,1,150,0,0,0,12,96,6,1,196,0,4,0,4,32,4,0,202,0,0
DATA 0,8
RETURN
> PROCEDURE random_set
LOCAL i%,j%,r%
FOR i%=0 TO numcells%
cell_used!(i%)=FALSE
NEXT i%
FOR j%=0 TO depth%-1
DO
  r%=RAND(numcells%)
LOOP UNTIL cell_used!(r%)=FALSE
cell_set%(j%)=r%
cell_used!(r%)=TRUE
NEXT j%
RETURN
'
> PROCEDURE dosound
LOCAL i%
SPOKE &H484,PEEK(&H484) AND NOT 1
IF number_of_xbs_files%>0
addr%=V:music_data&(0)
~XBIOS(32,L:addr%)
ENDIF
RETURN
> PROCEDURE dir_xbs_files
number_of_xbs_files%=0
~FSETDTA(BASEPAGE+128)
e%=FSFIRST("\XBS\*.XBS",-1)
DO UNTIL e%
xbs_files$(number_of_xbs_files%)=CHAR{BASEPAGE+158}
e%=FSNEXT()
INC number_of_xbs_files%
LOOP
RETURN
> PROCEDURE read_sound
LOCAL a%,i%
LOCAL name$
IF number_of_xbs_files%>0
i%=RANDOM(number_of_xbs_files%)
name$="\xbs\"+xbs_files$(i%)
OPEN "i",#1,name$
a%=LOF(#1)
DIM music_data&(a%/2)
BLOAD name$,VARPTR(music_data&(0))
CLOSE #1
ENDIF
RETURN
> PROCEDURE tracer
LOCATE 1,1
PRINT TRACE$
INPUT a$
RETURN
