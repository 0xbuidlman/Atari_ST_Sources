' ============================================================
'    Ti_SHOOT
'
'    sehr frei nach: Astro  uit  STart 06 (NL)
'               und: Space Shot  by  Iban van der Wal (NL)
' D:
'    Dieses Listing darf ausschlieûlich privat benutzt werden.
'    Wenn Sie mehr wollen, wenden Sie sich an den Autor.
'    Wenn Sie das Programm verÑndern, schicken Sie dem Autor
'    bitte ein Belegexemplar.
' NL:
'    De listing mag alleen strikt privÇ gebruikt worden.
'    Wilt u meer neem dan kontakt op met de auteur.
'    Ook wanneer u voor eigen gebruik veranderingen aanbrengt
'    wordt hij graag op de hoogte gehouden.            GfA gg.
'
'        +++  17 INLINEs  in 'eingang'  +++
' D:
'    Wenn das LST-File mit MERGE geladen wird,
'    mÅssen die INLINEs mit HELP nachgeladen werden!
' NL:
'    Als de LST-file (met Merge) geladen wordt,
'    moeten de INLINE's met HELP apart geladen worden.
' ============================================================
'         Label und VormenÅ zur Wahl der Sprache:
1.wahl:
DATA
DATA "T i _ S H O O T"
DATA
DATA " V.:  3.1 / O6.12.91 "
DATA "(public domain)"
DATA "Ω"
DATA "Rudolf Tiemann"
DATA "Tel.: O6733-62O5"
DATA "Donnersbergstr.14"
DATA "65O9 Gau-Odernheim"
DATA "(West Germany)"
DATA
DATA *
DATA "",""
DATA "Deutsch","032"
DATA "  Nederlands  ","049"
DATA "",""
DATA "Escape","001"
DATA "",""
DATA *,""
'
prg_daten:
DATA "Ti_SHOOT.PRG"
DATA "=45584 Bytes ΩTi"
' D:
'    ->^^^^^^<- hier drÅber muû nach dem 1.Compilieren
'    linksbÅndig die genaue Grîûe eingetragen werden,
'    dann folgt das endgÅltige 2.Compilieren.
'    (wichtig fÅr den Linkvirentest)
' NL:
'    ->^^^^^^<- hierboven moet na de eerste keer compileren
'    links-aangeschoven de exacte grootte aangegeven worden.
'    Pas daarna kan definitief gecompileerd worden.
'    (i.v.m. Linkvirustest)
'
'   > Compiler-Anweisungen:
$S&  !2-Byte-Select-Parameter
$S<  !Select optimieren auf LÑnge
$P>  !Procedures: als GFA-Routinen
$%3  !IntDiv immer als Integer
$*%  !LongMul nicht mit MULS
$B+  !Meldung statt Bomben
$E$  !Fehler-Texte (fÅr Routine 'shit')
$C+  !bei C:-Aufrufen Register auf Stack retten und restaurieren
$I+  !Interrupt zulassen  (hier wegen Sound!)
' $U+  !hinter jedem Befehl C&S&A, EVERY, AFTER prÅfen
' ============================================================
'
@pre.set
neu_start:
ON ERROR GOSUB shit
DO
  @1.wahl
LOOP
END
'
' ============================================================
'
PROCEDURE pre.set
  MENU KILL
  old_484|=PEEK(&H484)  !Einstellung retten
  SPOKE &H484,BCLR(PEEK(&H484),0)  !T-Klick aus
  SPOKE &H484,BSET(PEEK(&H484),1)  !Key-rep ein
  SPOKE &H484,BCLR(PEEK(&H484),2)  !Klingel aus
  pfad$=CHR$(GEMDOS(25)+65)+":"+DIR$(0)
  IF RIGHT$(pfad$,1)<>"\"
    pfad$=pfad$+"\"
  ENDIF
  alf&=XBIOS(4)
  hf&=2+(alf&<1)
  vf&=2+(alf&<2)
  h_max&=WORK_OUT(0)
  v_max&=WORK_OUT(1)
  CLIP 0,0 TO h_max&,v_max&
  CLS
  h_br&=h_max&+1
  v_ho&=v_max&+1
  h_mid&=h_br&\2
  v_mid&=v_ho&\2
  awy&=0
  dummy&=0
  neu!=TRUE
  @set.1.wahl
  @set.wahl.x
RETURN
PROCEDURE set.1.wahl
  RESTORE 1.wahl                                   !READ-Pointer setzen
  @test.wahl(ti_1&,pw_1&)                          !zÑhlen
  DIM ti_1$(ti_1&),pw_1$(pw_1&),pk_1$(pw_1&)       !dimensionieren
  RESTORE 1.wahl                                   !READ-Pointer zurÅcksetzen
  @read.wahl(ti_1&,pw_1&,ti_1$(),pw_1$(),pk_1$())  !Arrays fÅllen
RETURN
PROCEDURE set.wahl.x
  '  fÅr wechselnde Verwendung
  RESTORE wahl_x
  @test.wahl(ti_x&,pw_x&)
  DIM ti_x$(ti_x&),pw_x$(pw_x&),pk_x$(pw_x&)
  RESTORE wahl_x
  @read.wahl(ti_x&,pw_x&,ti_x$(),pw_x$(),pk_x$())
  '
  wahl_x:
  DATA ,,,,,,,,*
  DATA "",""
  DATA " DUMMY ","001 028 114 057"
  DATA "",""
  DATA *,""
  DEFMOUSE 0
RETURN
'
PROCEDURE 1.wahl
  SHOWM
  @pop.wahl(0,awy&,TRUE,TRUE,ti_1&,pw_1&,ti_1$(),pw_1$(),pk_1$(),wahl&)
  SELECT wahl&
  CASE 2,3
    @aktion
  CASE 5
    IF neu!
      @ausgang
    ELSE
      @frag.ob.aus
    ENDIF
  ENDSELECT
RETURN
PROCEDURE frag.ob.aus                       !~NL~D~
  IF taal$="NL"
    ti_f$(2)="    Uitgeknalt ?    "
  ELSE
    ti_f$(2)="  Genug geballert?  "
  ENDIF
  @pop.wahl(0,awy&,TRUE,TRUE,ti_f&,pw_f&,ti_f$(),pw_f$(),pk_f$(),antw&)
  IF antw&=2
    @nach.spiel
    @ausgang
  ELSE
    @also.weiter
  ENDIF
RETURN
PROCEDURE also.weiter                       !~NL~D~
  IF taal$="NL"
    RESTORE also_weiter_nl
  ELSE
    RESTORE also_weiter_d
  ENDIF
  @pop.info(0,awy&,TRUE,TRUE,30)
  '
  also_weiter_nl:
  DATA
  DATA "  Als je weet,  "
  DATA "wat je wilt,"
  DATA "kunnen we"
  DATA "doorgaan !"
  DATA
  DATA *
  '
  also_weiter_d:
  DATA
  DATA "  Wenn Du weiût,  "
  DATA "was Du willst,"
  DATA "kînnen wir"
  DATA "weiter machen!"
  DATA
  DATA *
RETURN
PROCEDURE aktion
  IF wahl&=3
    taal$="NL"
  ELSE
    taal$="D"
  ENDIF
  IF neu!
    '  nur beim ersten Durchgang
    '  alleen de eerste keer
    @test.virus    !=> short.exit ?
    IF alf&=0
      @geht.nicht  !=> short.exit !
    ENDIF
    @eingang
    neu!=FALSE
  ENDIF
  '
  @set.wahl.frage
  @set.wahl.level
  @set.wahl.bonus
  @set.wahl.neu
  @set.wahl.aktion
  '
  IF taal$="NL"
    vr_t$="SCHOTEN:"
    tr_t$="TREFFERS:"
    sc_t$="SCORE:"
    bn_t$="B O N U S - R O N D E"
    of_t$="van"
  ELSE
    vr_t$="SCHUSS:"
    tr_t$="TREFFER:"
    sc_t$="SCORE:"
    bn_t$="B O N U S - R U N D E"
    of_t$="von"
  ENDIF
  DEFTEXT 1,0,0,7*vf&-1
  vr_x&=66-(LEN(vr_t$)+5)*4
  tr_len&=LEN(tr_t$)+3
  tr_x&=h_mid&-(LEN(tr_t$)+3)*4
  sc_x&=h_max&-66-(LEN(sc_t$)+8)*4
  COLOR 3
  BOX 0,y_line&,h_max&,v_max&
  @set.show.boxes(TRUE)
  @show.vorrat
  @show.treffer
  @show.score
  DEFMOUSE pfeil_ms$
  '
  REPEAT
    @pop.wahl(0,awy&,TRUE,TRUE,ti_a&,pw_a&,ti_a$(),pw_a$(),pk_a$(),wahl&)
    SELECT wahl&
    CASE 2
      @neues.spiel
      @spiel
    CASE 4
      @show.hilfe
    CASE 6
      @show.info
    CASE 8
      @show.top
    ENDSELECT
  UNTIL wahl&=11
RETURN
PROCEDURE set.show.boxes(alle!)
  DEFFILL 1,0,0
  GRAPHMODE 1
  COLOR 3
  IF alle!
    PBOX 3,y_line&+3,130,v_max&-3
    PBOX h_max&-130,y_line&+3,h_max&-3,v_max&-3
  ENDIF
  PBOX h_mid&-60,y_line&+3,h_mid&+60,v_max&-3
  COLOR 1
RETURN
'
PROCEDURE test.virus
  LOCAL prg$,pln$,al$,prg_len%,d_l%
  RESTORE prg_daten
  READ prg$,pln$
  prg$=pfad$+prg$
  prg_len%=VAL(MID$(pln$,2))
  IF EXIST(prg$)
    OPEN "I",#1,prg$
    d_l%=LOF(#1)
    CLOSE #1
    IF d_l%<prg_len%
      al$="[3][ | | ???  ERROR  ???     | ][  EXIT  ]"
      @show.alert(1,al$,dummy&)
      @short.exit
    ELSE IF d_l%>prg_len%
      al$="[3][ | |  !!!  LINKVIRUS  !!!      | ][  KILL  |EXIT]"
      @show.alert(1,al$,antw&)
      IF antw&=1
        @kill.virus
      ENDIF
      @short.exit
    ENDIF
  ELSE
    @zeig.warnung
  ENDIF
RETURN
PROCEDURE kill.virus
  LOCAL prg_adr%,frei%
  al$="[3][ | MALLOC-ERROR!      | ][  shit  ]"
  frei%=(prg_len%+255) AND &HFFFF00  !durch 256 teilbar
  RESERVE -frei%
  prg_adr%=MALLOC(frei%)
  IF prg_adr%
    OPEN "I",#1,prg$
    BGET #1,prg_adr%,prg_len%
    CLOSE #1
    '  Null ans Ende schreiben, kînnte gelîscht sein
    POKE prg_adr%+prg_len%-1,0
    BSAVE prg$,prg_adr%,prg_len%
    prg_adr%=MFREE(prg_adr%)
    IF prg_adr%
      @show.alert(1,al$,dummy&)
    ENDIF
  ELSE
    @show.alert(1,al$,dummy&)
  ENDIF
  RESERVE  !wie vorher
RETURN
PROCEDURE zeig.warnung                      !~NL~D~
  IF taal$="NL"
    al$="[3][ |  De test op een Link-virus |  kon niet (!)|"
    al$=al$+"  uitgevoerd worden. | ][  zeer verdacht !  ]"
  ELSE
    al$="[3][ |  Der Linkvirentest       |   konnte nicht(!)|"
    al$=al$+" durchgefÅhrt werden| ][  sehr verdÑchtig!  ]"
  ENDIF
  @show.alert(1,al$,dummy&)
RETURN
PROCEDURE show.alert(bn&,VAR al$,ret&)
  @no.but
  @no.key
  DEFMOUSE 0
  SHOWM
  ret&=FORM_ALERT(bn&,al$)
  @no.but
  @no.key
RETURN
PROCEDURE geht.nicht                        !~NL~D~
  IF taal$="NL"
    RESTORE geht_nicht_nl
  ELSE
    RESTORE geht_nicht_d
  ENDIF
  ti_x&=6
  FOR ni&=2 TO 5
    READ ti_x$(ni&)
  NEXT ni&
  READ pw_x$(2)
  DEFMOUSE 0
  SHOWM
  @pop.wahl(0,0,TRUE,TRUE,ti_x&,pw_x&,ti_x$(),pw_x$(),pk_x$(),wahl&)
  @ausgang
  '
  geht_nicht_nl:
  DATA " Dit programma loopt "
  DATA "alleen in"
  DATA "MIDDEN en HOGE"
  DATA "resolutie !"
  DATA "  dat is vervelend  "
  '
  geht_nicht_d:
  DATA " Dieses Programm lÑuft "
  DATA "leider nur in"
  DATA "mittlerer oder hoher"
  DATA "Auflîsung!"
  DATA "  das ist lÑstig  "
RETURN
'
PROCEDURE ausgang
  ON ERROR  !aus
  SOUND 1,0,0,0,0  !Gib AIDA
  WAVE 0,0         !keine Chance
  ~XBIOS(6,L:V:top_pal$)  !alte Palette
  @set.grafik.normal
  @short.exit
RETURN
PROCEDURE short.exit
  SPOKE &H484,old_484|  !alte Einstellung
  CLS
  @no.but
  DEFMOUSE 0
  SHOWM
  EDIT
RETURN
PROCEDURE shit
  ON ERROR  !aus
  ~FORM_ALERT(1,ERR$(ERR))
  RESUME neu_start
RETURN
'
PROCEDURE test.wahl(VAR ti&,pw&)
  LOCAL test$,dummy$
  ti&=-1  !Info-Zeilen zÑhlen
  REPEAT
    INC ti&
    READ test$
  UNTIL test$="*"
  pw&=-1  !Wahl-Zeilen zÑhlen
  REPEAT
    INC pw&
    READ test$,dummy$
  UNTIL test$="*"
RETURN
PROCEDURE read.wahl(VAR ti&,pw&,pt$(),pw$(),pk$())
  LOCAL dummy$
  ni&=0
  WHILE ni&<ti&
    INC ni&
    READ pt$(ni&)
  WEND
  READ dummy$  !*=Info-Ende
  ni&=0
  WHILE ni&<pw&
    INC ni&
    READ pw$(ni&),pk$(ni&)
  WEND
RETURN
'
PROCEDURE pop.wahl(li&,ob&,hoz!,vez!,VAR ti&,az&,ti$(),aw$(),cd$(),pw&)
  '  li&=links  ob&=oben
  '  hoz!=horizontal zentriert (relativ zur Position)
  '  vez!=vertikal zentriert
  '  ti&/ti$()=Textinformationen   az&/aw$()=Auswahlzeilen
  '  cd$()=Scancodes  pw&=gewÑhlt
  LOCAL ai&,aw&,re&,un&,th&,tb&,td&,tl&,ax&,ay&,aw$,mi&,ik$,bx$
  th&=8*vf&  !Texthîhe
  td&=9*vf&  !Textdistanz
  tb&=8      !Textbreite
  HIDEM
  SGET bx$   !Hintergrund retten
  @search.max.len(re&,az&,aw$())
  tl&=re&*4+4  !merken
  @search.max.len(re&,ti&,ti$())
  @pop.center
  @pop.box
  mi&=(li&+re&)\2
  li&=mi&-tl&-1
  re&=mi&+tl&
  ay&=ob&-td&\2+vf&
  ni&=0
  WHILE ni&<ti&
    ADD ay&,td&
    INC ni&
    tl&=LEN(ti$(ni&))
    ax&=mi&-tl&*4  !zentriert
    TEXT ax&,ay&,ti$(ni&)
  WEND
  IF ni&  !wenn Infozeilen
    ADD ay&,td&\2            !1/2 Zeile frei
    DRAW li&-tb&-1,ay&-1 TO re&+tb&,ay&-1  !Trennlinie
  ELSE
    ADD ay&,td&\4            !1/4 Zeile frei
  ENDIF
  ob&=ay&+td&\2-2*vf&  !Auswahl oben merken
  ni&=0
  WHILE ni&<az&
    INC ni&
    ADD ay&,td&
    tl&=LEN(aw$(ni&))
    IF tl&
      IF LEN(cd$(ni&))  !Auswahl
        DEFTEXT ,VAL(LEFT$(cd$(ni&),1))  !0=normal/2=hell
      ELSE  !Kommentar
        DEFTEXT ,4  !kursiv ist besser als heller Matsch
      ENDIF
      ax&=mi&-tl&*4  !zentriert
      TEXT ax&,ay&,aw$(ni&)
    ENDIF
  WEND
  un&=ay&+td&\2-2*vf&  !Auswahl unten merken
  GRAPHMODE 3  !XOR
  DEFFILL 1,1  !voll
  pw&=0  !gewÑhlt
  ay&=0  !alt
  @no.but
  @no.key
  SHOWM
  REPEAT
    @get.tom
    IF scan|
      ik$=RIGHT$("00"+STR$(scan|),3)
    ENDIF
    IF mx&>li& AND mx&<re& AND my&>ob& AND my&<un&  !innerhalb
      aw&=(my&-ob&)\td&+1
      IF mk&=1 AND LEN(aw$(aw&))>0 AND LEN(cd$(aw&))>1
        pw&=aw&
      ENDIF
      my&=aw&*td&+ob&-td&
      IF my&<>ay&  !neu
        IF ay&     !da war noch was
          PBOX li&,ay&,re&,ay&+th&  !alt weg
          ay&=0
        ENDIF
        IF LEN(aw$(aw&))>0 AND LEN(cd$(aw&))>1  !wÑhlbar
          PBOX li&,my&,re&,my&+th&  !neu hin
          ay&=my&  !und merken
        ENDIF
        SHOWM
      ENDIF
    ELSE  !auûerhalb
      IF ay&  !da war was
        PBOX li&,ay&,re&,ay&+th&  !weg
      ENDIF
      ay&=0
    ENDIF
    IF LEN(ik$)  !Taste
      ai&=1
      REPEAT     !suchen
        IF LEN(aw$(ai&))>0 AND INSTR(cd$(ai&),ik$)>0
          pw&=ai&
        ENDIF
        INC ai&
      UNTIL ai&>az& OR pw&
    ENDIF
  UNTIL pw&  !Wahl?
  IF mk&=0  !Tastenwahl zeigen
    IF ay&  !da war was
      PBOX li&,ay&,re&,ay&+th&  !alt weg
    ENDIF
    my&=pw&*td&+ob&-td&
    PBOX li&,my&,re&,my&+th&  !neu hin
    PAUSE 10  !kurz warten
  ELSE
    @no.but
  ENDIF
  @set.grafik.normal
  SPUT bx$
RETURN
PROCEDURE search.max.len(VAR sl&,sz&,st$())
  ni&=0
  WHILE ni&<sz&
    INC ni&
    sl&=MAX(sl&,LEN(st$(ni&)))
  WEND
RETURN
'
PROCEDURE pop.info(li&,ob&,hoz!,vez!,sec%)
  LOCAL ti&,az&,ai&,re&,un&,td&,tb&,tl&,ax&,ay&,mi&,az$,bx$
  HIDEM
  SGET bx$
  td&=9*vf&  !Textdistanz
  tb&=8      !Textbreite
  DIM az$(22)
  REPEAT
    INC az&
    READ az$(az&)
    tl&=LEN(az$(az&))
    re&=MAX(re&,tl&)  !lÑngsten Eintrag finden
  UNTIL az$(az&)="*"
  @pop.center
  DEC az&
  @pop.box
  mi&=(li&+re&)\2
  ay&=ob&
  FOR ai&=1 TO az&
    az$=az$(ai&)
    tl&=LEN(az$)
    ax&=mi&-tl&*4
    ADD ay&,td&
    TEXT ax&,ay&,az$
  NEXT ai&
  SPRITE ratte$,re&-10,un&-8
  ERASE az$()  !kann weg
  @wart.mal(sec%*200)
  SPRITE ratte$
  SPUT bx$
RETURN
PROCEDURE wart.mal(t%)                                    !PhvR
  LOCAL ax&,ay&
  @no.key
  @no.but
  IF t%<0
    t%=12000  !Default max. 1 min warten
  ENDIF
  ADD t%,TIMER
  ax&=MOUSEX
  ay&=MOUSEY
  REPEAT      !Beamtenmikado
    @get.tom                                     !PhvR                  !PhvR
  UNTIL mk& OR scan| OR TIMER>t% OR ABS(mx&-ax&)>30*hf& OR ABS(my&-ay&)>30*vf&
  @no.but
RETURN
PROCEDURE pop.center
  MUL re&,tb&
  ADD re&,4
  un&=(ti&+az&)*td&
  '  Wenn hoz! (vez!) =TRUE, gibt li& (ob&)
  '  die relative Abweichung von der Mitte an,
  '  andernfalls die absolute Position
  '  der linken oberen Ecke.
  '  re& und un& wird berechnet und hÑngt
  '  von der Textbreite bzw. Zeilenzahl ab.
  '  Die Umrahmung (s. 'pop.box') geht jeweils
  '  um 7*hf& bzw. 7*vf& Åber diese Ecken hinaus.
  IF hoz!
    ADD li&,(h_br&-re&)\2
  ENDIF
  IF vez!
    ADD ob&,(v_ho&-un&)\2
  ENDIF
  ADD un&,ob&
  ADD re&,li&
RETURN
PROCEDURE pop.box
  @set.grafik.normal
  DEC li&
  PBOX li&-7*hf&,ob&-7*vf&,re&+7*hf&,un&+7*vf&
  BOX li&-5*hf&,ob&-5*vf&,re&+5*hf&,un&+5*vf&
  INC li&
  BOUNDARY FALSE
RETURN
PROCEDURE set.grafik.normal
  GRAPHMODE 1
  BOUNDARY TRUE
  COLOR 1
  DEFFILL 1,0,0
  DEFLINE 1,1,0,0
  DEFTEXT 1,0,0,7*vf&-1
RETURN
PROCEDURE get.tom
  '  Taste oder Maustaste abliefern (nicht warten)
  MOUSE mx&,my&,mk&
  KEYTEST key%
  IF key%
    scan|=AND(key%,&HFF0000)\&HFFFF
    @no.key
    mk&=0
  ELSE
    scan|=0
  ENDIF
RETURN
PROCEDURE no.key
  '  Tastaturpuffer lîschen
  LPOKE XBIOS(14,1)+6,0
RETURN
PROCEDURE no.but
  WHILE MOUSEK  !fÑngt ÅberschÅssige Mausklicks ab (meistens, Sch... GEM)
    REPEAT
      ~EVNT_BUTTON(0,0,0)
      MOUSE mx&,my&,mk&
    UNTIL mk&=0
  WEND
RETURN
'
'
PROCEDURE eingang  !+++  17 INLINEs  +++
  LOCAL xi&,yi&,fetz_0%,fetz_1%,fetz_2%,fetz_3%,h_gun%,h_ship%,m_gun%,m_ship%
  LOCAL pfeil_ms%,planet%,plop_0%,plop_1%,plop_2%,plop_3%,rat_spr%
  '
  INLINE fetz_0%,74
  INLINE fetz_1%,74
  INLINE fetz_2%,74
  INLINE fetz_3%,74
  INLINE h_gun%,74
  INLINE h_ship%,74
  INLINE m_gun%,74
  INLINE m_ship%,74
  INLINE pfeil_ms%,74
  INLINE planet%,74
  INLINE plop_0%,74
  INLINE plop_1%,74
  INLINE plop_2%,74
  INLINE plop_3%,74
  INLINE rat_spr%,74
  INLINE shoot_sound%,30
  INLINE treff_sound%,30
  '
  HIDEM
  @get.palette(top_pal$)
  @set.farben
  COLOR 1
  CLS
  links&=8
  oben&=8
  rechts&=h_max&-8
  y_line&=v_max&-10*vf&-9
  unten&=y_line&-8
  y_shoot&=unten&-10
  awy&=(y_line&-v_max&)\2
  sc_x&=h_max&-134
  vr_li&=16
  az_y&=v_ho&-2*vf&-6
  sl_di&=8*vf&  !SchuûlÑnge
  aus&=9999
  '  TOP FIVE laden
  DIM punkte%(6),spieler$(6)
  datei$=pfad$+"Ti_SHOOT.TOP"
  IF EXIST(datei$)
    OPEN "I",#1,datei$
    FOR ni&=0 TO 5
      INPUT #1,punkte%(ni&)
      INPUT #1,spieler$(ni&)
    NEXT ni&
    CLOSE
  ENDIF
  '  Maus, Sprites und Sound vorbereiten
  pfeil_ms$=SPACE$(74)
  BMOVE pfeil_ms%,V:pfeil_ms$,74
  ratte$=SPACE$(74)
  BMOVE rat_spr%,V:ratte$,74
  gun_rest&=0
  gun_max&=4
  DIM gun$(gun_max&),gun_x&(gun_max&),gun_y&(gun_max&)
  gun$=SPACE$(74)
  ship$=SPACE$(74)
  IF alf&=2
    BMOVE h_gun%,V:gun$,74
    BMOVE h_ship%,V:ship$,74
  ELSE
    BMOVE m_gun%,V:gun$,74
    BMOVE m_ship%,V:ship$,74
  ENDIF
  gun_li&=141
  gun_ob&=(v_max&+y_line&)\2-8
  FOR ni&=1 TO gun_max&
    gun$(ni&)=gun$
    gun_x&(ni&)=gun_li&-16+28*ni&
    gun_y&(ni&)=gun_ob&+9
  NEXT ni&
  gun_re&=gun_x&(gun_max&)+8
  gun_un&=gun_ob&+16
  level_max&=50
  DIM planet$(level_max&),plx&(level_max&),ply&(level_max&)
  FOR ni&=1 TO level_max&
    planet$(ni&)=SPACE$(74)
    BMOVE planet%,V:planet$(ni&),74
  NEXT ni&
  DIM plop$(3),fetz$(3),xf&(3),yf&(3),xd&(3),yd&(3),fetz!(3)
  FOR ni&=0 TO 3
    plop$(ni&)=SPACE$(74)
    fetz$(ni&)=SPACE$(74)
  NEXT ni&
  BMOVE fetz_0%,V:fetz$(0),74
  BMOVE fetz_1%,V:fetz$(1),74
  BMOVE fetz_2%,V:fetz$(2),74
  BMOVE fetz_3%,V:fetz$(3),74
  BMOVE plop_0%,V:plop$(0),74
  BMOVE plop_1%,V:plop$(1),74
  BMOVE plop_2%,V:plop$(2),74
  BMOVE plop_3%,V:plop$(3),74
  '  Bild gestalten
  FOR ni&=1 TO 200
    IF RANDOM(10)>0
      PLOT RANDOM(h_br&),RANDOM(y_line&)
    ELSE
      xi&=RANDOM(h_max&)
      yi&=RANDOM(y_line&)
      BOX xi&,yi&,xi&+1,yi&+1
    ENDIF
  NEXT ni&
  @set.show.boxes(TRUE)
  GET 0,0,h_max&,y_line&-1,bild$
  start_vorrat&=200  !Munition
  vorrat&=start_vorrat&
  @set.guns(gun_max&\2)
  tempo_min&=5
  tempo_dif#=0.02
  treff_max&=10
  shoot_max&=20
  bonus%=0
RETURN
PROCEDURE get.palette(VAR pal$)
  pal$=""
  FOR ni&=0 TO 15
    pal$=pal$+MKI$(XBIOS(7,ni&,-1))
  NEXT ni&
RETURN
PROCEDURE set.farben
  LOCAL rt&,gn&,bl&
  RESTORE set_farben
  FOR ni&=0 TO 3
    READ rt&,gn&,bl&
    VSETCOLOR ni&,rt&,gn&,bl&
  NEXT ni&
  set_farben:
  '  0 schwarz
  DATA 0,0,0
  '  1 weiû
  DATA 7,7,7
  '  2 rot
  DATA 7,0,0
  '  3 dunkelgrÅn
  DATA 0,4,0
RETURN
PROCEDURE set.guns(soll&)
  WHILE gun_rest&>soll&
    SPRITE gun$(gun_rest&)
    DEC gun_rest&
  WEND
  WHILE gun_rest&<soll&
    ~XBIOS(32,L:shoot_sound%)
    INC gun_rest&
    SPRITE gun$(gun_rest&),gun_x&(gun_rest&),gun_y&(gun_rest&)
    PAUSE 15
  WEND
RETURN
PROCEDURE show.vorrat
  TEXT vr_x&,az_y&,vr_t$+RIGHT$("    "+STR$(vorrat&),5)
RETURN
PROCEDURE show.treffer
  TEXT tr_x&,az_y&,tr_t$+RIGHT$("  "+STR$(treffer&),3)
RETURN
PROCEDURE show.score
  TEXT sc_x&,az_y&,sc_t$+RIGHT$("       "+STR$(score%),8)
RETURN
'
PROCEDURE set.wahl.frage                    !~NL~D~
  @sel.frage
  @test.wahl(ti_f&,pw_f&)
  ERASE ti_f$(),pw_f$(),pk_f$()
  DIM ti_f$(ti_f&),pw_f$(pw_f&),pk_f$(pw_f&)
  @sel.frage
  @read.wahl(ti_f&,pw_f&,ti_f$(),pw_f$(),pk_f$())
  '
  wahl_frage_nl:
  DATA
  DATA "  Genoeg geknalt ?  "
  DATA
  DATA *
  DATA "",""
  DATA "     Ja     ","036"
  DATA "",""
  DATA "Nee","049"
  DATA "",""
  DATA *,""
  '
  wahl_frage_d:
  DATA
  DATA "  Genug geballert?  "
  DATA
  DATA *
  DATA "",""
  DATA "ja","036"
  DATA "",""
  DATA "    nein    ","049"
  DATA "",""
  DATA *,""
RETURN
PROCEDURE sel.frage
  IF taal$="NL"
    RESTORE wahl_frage_nl
  ELSE
    RESTORE wahl_frage_d
  ENDIF
RETURN
PROCEDURE set.wahl.level                    !~NL~D~
  @sel.level
  @test.wahl(ti_l&,pw_l&)
  ERASE ti_l$(),pw_l$(),pk_l$()
  DIM ti_l$(ti_l&),pw_l$(pw_l&),pk_l$(pw_l&)
  @sel.level
  @read.wahl(ti_l&,pw_l&,ti_l$(),pw_l$(),pk_l$())
  '
  wahl_level_nl:
  DATA ""
  DATA ""
  DATA ""
  DATA *
  DATA "",""
  DATA "Start","031 028 114 057"
  DATA "",""
  DATA "  Escape  ","001"
  DATA "",""
  DATA *,""
  '
  wahl_level_d:
  DATA ""
  DATA ""
  DATA ""
  DATA *
  DATA "",""
  DATA "SPIELEN","031 028 114 057"
  DATA "",""
  DATA "  Escape  ","001"
  DATA "",""
  DATA *,""
RETURN
PROCEDURE sel.level
  IF taal$="NL"
    RESTORE wahl_level_nl
  ELSE
    RESTORE wahl_level_d
  ENDIF
RETURN
PROCEDURE set.wahl.bonus
  RESTORE wahl_bonus
  @test.wahl(ti_b&,pw_b&)
  ERASE ti_b$(),pw_b$(),pk_b$()
  DIM ti_b$(ti_b&),pw_b$(pw_b&),pk_b$(pw_b&)
  RESTORE wahl_bonus
  @read.wahl(ti_b&,pw_b&,ti_b$(),pw_b$(),pk_b$())
  wahl_bonus:
  DATA ""
  DATA ""
  DATA ""
  DATA *
  DATA "",""
  DATA "","025 057"
  DATA "",""
  DATA "","0"
  DATA "",""
  DATA "","0"
  DATA "",""
  DATA *,""
RETURN
PROCEDURE set.wahl.neu                      !~NL~D~
  @sel.neu
  @test.wahl(ti_n&,pw_n&)
  ERASE ti_n$(),pw_n$(),pk_n$()
  DIM ti_n$(ti_n&),pw_n$(pw_n&),pk_n$(pw_n&)
  @sel.neu
  @read.wahl(ti_n&,pw_n&,ti_n$(),pw_n$(),pk_n$())
  '
  wahl_neu_nl:
  DATA ""
  DATA ""
  DATA " dat is helaas niet genoeg "
  DATA "voor de 'Top Five'"
  DATA ""
  DATA "Opnieuw beginnen ?"
  DATA ""
  DATA *
  DATA "",""
  DATA "   Ja   ","036"
  DATA "",""
  DATA "Nee","049"
  DATA "",""
  DATA *,""
  '
  wahl_neu_d:
  DATA ""
  DATA ""
  DATA " reichen leider nicht "
  DATA "fÅr die 'Top Five'"
  DATA ""
  DATA "Neues Spiel?"
  DATA ""
  DATA *
  DATA "",""
  DATA "ja","036"
  DATA "",""
  DATA "  nein  ","049"
  DATA "",""
  DATA *,""
RETURN
PROCEDURE sel.neu
  IF taal$="NL"
    RESTORE wahl_neu_nl
  ELSE
    RESTORE wahl_neu_d
  ENDIF
RETURN
PROCEDURE set.wahl.aktion                   !~NL~D~
  @sel.aktion
  @test.wahl(ti_a&,pw_a&)
  ERASE ti_a$(),pw_a$(),pk_a$()
  DIM ti_a$(ti_a&),pw_a$(pw_a&),pk_a$(pw_a&)
  @sel.aktion
  @read.wahl(ti_a&,pw_a&,ti_a$(),pw_a$(),pk_a$())
  '
  wahl_aktion_nl:
  DATA
  DATA "  T i _ S H O O T  "
  DATA
  DATA *
  DATA "",""
  DATA "S  =  START","031 028 114"
  DATA "",""
  DATA "H  =  HULP ","035"
  DATA "",""
  DATA "I  =  INFO ","023"
  DATA "",""
  DATA "T  =  TOP 5","020"
  DATA "",""
  DATA "--------------- ",""
  DATA "Escape","001"
  DATA "",""
  DATA *,""
  '
  wahl_aktion_d:
  DATA
  DATA "  T i _ S H O O T  "
  DATA
  DATA *
  DATA "",""
  DATA "S  =  START","031 028 114"
  DATA "",""
  DATA "H  =  HILFE","035"
  DATA "",""
  DATA "I  =  INFO ","023"
  DATA "",""
  DATA "T  =  TOP 5","020"
  DATA "",""
  DATA "--------------- ",""
  DATA "Escape","001"
  DATA "",""
  DATA *,""
RETURN
PROCEDURE sel.aktion
  IF taal$="NL"
    RESTORE wahl_aktion_nl
  ELSE
    RESTORE wahl_aktion_d
  ENDIF
RETURN
PROCEDURE show.hilfe                        !~NL~D~
  IF taal$="NL"
    RESTORE hilfe_nl
  ELSE
    RESTORE hilfe_d
  ENDIF
  @pop.info(0,awy&,TRUE,TRUE,60)
  '
  hilfe_nl:
  DATA
  DATA "T i _ S H O O T"
  DATA
  DATA "is een schietspelletje."
  DATA "Wat anders ?!"
  DATA
  DATA "De linker muisknop"
  DATA "knalt,"
  DATA "   de rechter onderbreekt  "
  DATA "het spel."
  DATA
  DATA "De rest zie je wel."
  DATA "Gesnapt ?"
  DATA "Knallen maar !"
  DATA *
  hilfe_d:
  DATA
  DATA "T i _ S H O O T"
  DATA
  DATA "ist ein Ballerspiel."
  DATA "Was denn sonst ?!"
  DATA
  DATA "Die linke Maustaste"
  DATA "ballert,"
  DATA "   die rechte unterbricht   "
  DATA "das Spiel."
  DATA
  DATA "Den Rest sieht man."
  DATA "Alles klar?"
  DATA "Fang an!"
  DATA *
RETURN
PROCEDURE show.info                         !~NL~D~
  RESTORE info_nl_d
  @pop.info(0,awy&,TRUE,TRUE,30)
  '
  info_nl_d:
  DATA
  DATA "  De nederlandse vertaling  "
  DATA "is van"
  DATA "Philip van Rijthoven"
  DATA "Paul Krugerstraat 58"
  DATA "NL  6543  MX Nijmegen"
  DATA
  DATA "(Danke!)"
  DATA *
RETURN
PROCEDURE show.top
  HIDEM
  @show.top.five(0)
  GRAPHMODE 2
  SPRITE ratte$,432,gun_ob&+2*vf&
  GRAPHMODE 1
  @wart.mal(TRUE)
  SPRITE ratte$
  PUT 0,0,bild$
RETURN
'
'
PROCEDURE neues.spiel
  HIDEM
  GRAPHMODE 1
  PUT 0,0,bild$
  @level.down(level&)
  @get.planet.pos
  @next.level(TRUE)
  @set.guns(gun_max&\2)
  treffer&=0
  score%=0
  vorrat&=start_vorrat&
  @set.show.boxes(TRUE)
  DEFTEXT 1,0,0,7*vf&-1
  @show.vorrat
  @show.treffer
  @show.score
  @neues.schiff
  tempo#=INT(tempo_min&+level&\2)
  @neues.tempo
RETURN
PROCEDURE level.down(soll&)
  WHILE soll&
    ~XBIOS(32,L:treff_sound%)
    SPRITE planet$(level&)
    @lets.plop(plx&(level&),ply&(level&))
    DEC level&
    DEC soll&
    PAUSE 2+level&\10
  WEND
  PAUSE 20
RETURN
PROCEDURE get.planet.pos
  LOCAL br&,ho&
  br&=h_max&-30*hf&
  ho&=y_line&-50*vf&
  FOR ni&=1 TO level_max&
    plx&(ni&)=RANDOM(br&)+15*hf&
    ply&(ni&)=RANDOM(ho&)+15*vf&
  NEXT ni&
RETURN
PROCEDURE next.level(up!)
  LOCAL br&,ho&
  br&=h_max&-60
  ho&=y_line&-100
  IF up!
    INC level&
    SPRITE planet$(level&),plx&(level&),ply&(level&)
    ~XBIOS(32,L:shoot_sound%)
    PAUSE 15
  ELSE IF level&>1
    @level.down(1)
  ENDIF
  GET 0,0,h_max&,y_line&-1,bild$
  tempo_max&=MIN(30,15+level&\2)
RETURN
PROCEDURE neues.schiff
  shp_x&=RANDOM(h_max&-31)+links&
  shp_y&=RANDOM(v_mid&)+oben&
  rechts!=(RANDOM(2)>0)
  auf!=(RANDOM(2)>0)
  schuss!=FALSE
  bum_x&=aus&
  bum_y&=aus&
RETURN
PROCEDURE neues.tempo
  ADD tempo#,tempo_dif#
  hm_di&=INT(tempo#)
  vm_di&=hm_di&*vf&\4
  sm_di&=hm_di&*vf&\2+sl_di&
  bm_di&=hm_di&-3
RETURN
'
PROCEDURE spiel
  abbruch!=FALSE
  REPEAT
    HIDEM
    REPEAT
      VSYNC  !Bewegung
      SPRITE ship$,shp_x&,shp_y&
      SPRITE gun$,MOUSEX,unten&
      vgl&=RANDOM(level&)
      IF rechts!
        ADD shp_x&,hm_di&
        IF shp_x&=>rechts&
          IF vgl&>30
            shp_x&=links&
          ELSE
            shp_x&=rechts&
            rechts!=FALSE
            IF vgl&>20
              auf!=NOT auf!
            ENDIF
          ENDIF
        ENDIF
      ELSE
        SUB shp_x&,hm_di&
        IF shp_x&<=links&
          IF vgl&>30
            shp_x&=rechts&
          ELSE
            shp_x&=links&
            rechts!=TRUE
            IF vgl&>20
              auf!=NOT auf!
            ENDIF
          ENDIF
        ENDIF
      ENDIF
      IF auf!
        SUB shp_y&,vm_di&
        IF shp_y&<=oben&
          shp_y&=oben&
          auf!=FALSE
          IF vgl&>10
            rechts!=NOT rechts!
          ENDIF
        ENDIF
      ELSE
        ADD shp_y&,vm_di&
        IF shp_y&=>unten&
          IF vgl&>30
            shp_y&=oben&
          ELSE
            shp_y&=unten&
            auf!=TRUE
          ENDIF
        ENDIF
      ENDIF
      ' kontrolle
      IF ABS(bum_x&-shp_x&)<16 AND ABS(bum_y&-sl_di&-shp_y&)<16
        hit&=1
        INC treffer&
        ADD score%,(v_max&-shp_y&)*bm_di&\10
        @show.treffer
        @show.score
        @treffer
      ELSE IF ABS(MOUSEX-shp_x&)<16 AND ABS(unten&-shp_y&)<16
        hit&=2
        @kollision
      ENDIF
      IF MOUSEK=1 AND NOT schuss!
        ~XBIOS(32,L:shoot_sound%)
        schuss!=TRUE
        bum_x&=MOUSEX
        bum_y&=y_shoot&
        LINE bum_x&,bum_y&,bum_x&,bum_y&-sl_di&
        IF vorrat&>0
          DEC vorrat&
          @show.vorrat
        ELSE
          @kein.schuss.mehr
        ENDIF
      ENDIF
      IF schuss!
        COLOR 0
        LINE bum_x&,bum_y&,bum_x&,bum_y&-sl_di&
        SUB bum_y&,sm_di&
        COLOR 1
        LINE bum_x&,bum_y&,bum_x&,bum_y&-sl_di&
        IF bum_y&<0
          schuss!=FALSE
          bum_x&=aus&
          bum_y&=aus&
        ENDIF
      ENDIF
      IF MOUSEK=2
        @frag.ob.abbruch
      ENDIF
    UNTIL hit& OR abbruch!
    IF NOT abbruch!
      @next.round
    ENDIF
  UNTIL abbruch!
RETURN
'
PROCEDURE frag.ob.abbruch                   !~NL~D~
  ti_l$(2)="   LEVEL: "+RIGHT$(" "+STR$(level&),2)+"   "
  @pop.wahl(0,awy&,TRUE,TRUE,ti_l&,pw_l&,ti_l$(),pw_l$(),pk_l$(),antw&)
  abbruch!=(antw&>2)
  IF abbruch!
    @test.platz
    IF platz&
      IF taal$="NL"
        ti_f$(2)="  Punten opschrijven ?  "
      ELSE
        ti_f$(2)="  Punkte eintragen?  "
      ENDIF
      @pop.wahl(0,awy&,TRUE,TRUE,ti_f&,pw_f&,ti_f$(),pw_f$(),pk_f$(),antw&)
      IF antw&=2
        @eintragen
      ENDIF
    ENDIF
  ENDIF
  HIDEM
RETURN
PROCEDURE treffer
  ~XBIOS(32,L:treff_sound%)
  SETCOLOR 0,&H777
  PAUSE 3
  SETCOLOR 0,0
  SPRITE ship$
  IF ABS(bum_x&-shp_x&)<12 AND ABS(bum_y&-sl_di&-shp_y&)<12
    @lets.plop(shp_x&,shp_y&)
  ELSE
    @lets.fetz
  ENDIF
  PUT 0,0,bild$
RETURN
PROCEDURE lets.plop(xi&,yi&)
  FOR ni&=0 TO 3
    SPRITE plop$(ni&),xi&,yi&
    PAUSE 8
    SPRITE plop$(ni&)
  NEXT ni&
RETURN
PROCEDURE lets.fetz
  LOCAL fetzen&
  fetzen&=4
  IF rechts!
    xd&(0)=-(RANDOM(4))
    xd&(1)=RANDOM(3)+1
    xd&(2)=-(RANDOM(4))
    xd&(3)=RANDOM(3)+1
  ELSE
    xd&(0)=-(RANDOM(3)+1)
    xd&(1)=RANDOM(4)
    xd&(2)=-(RANDOM(3)+1)
    xd&(3)=RANDOM(4)
  ENDIF
  yd&(0)=-(RANDOM(3)+1)
  yd&(1)=-(RANDOM(3)+1)
  yd&(2)=RANDOM(2)+1
  yd&(3)=RANDOM(2)+1
  ARRAYFILL xf&(),shp_x&
  ARRAYFILL yf&(),shp_y&
  ARRAYFILL fetz!(),TRUE
  REPEAT
    FOR ni&=0 TO 3
      IF fetz!(ni&)
        ADD xf&(ni&),xd&(ni&)
        ADD yf&(ni&),yd&(ni&)
        IF xf&(ni&)<links& OR xf&(ni&)>rechts& OR yf&(ni&)<oben& OR yf&(ni&)>unten&
          SPRITE fetz$(ni&)
          fetz!(ni&)=FALSE
          DEC fetzen&
        ELSE IF ABS(unten&-yf&(ni&))<16 AND ABS(MOUSEX-xf&(ni&))<16
          hit&=2
          @kollision
          fetzen&=0
        ENDIF
      ENDIF
    NEXT ni&
    IF fetzen&
      VSYNC
      FOR ni&=0 TO 3
        IF fetz!(ni&)
          SPRITE fetz$(ni&),xf&(ni&),yf&(ni&)
        ENDIF
      NEXT ni&
      SPRITE gun$,MOUSEX,unten&
    ENDIF
  UNTIL fetzen&=0
RETURN
PROCEDURE kein.schuss.mehr
  hit&=3
  WHILE gun_rest&
    SPRITE gun$(gun_rest&)
    shp_x&=gun_x&(gun_rest&)
    shp_y&=gun_y&(gun_rest&)
    @treffer
    PAUSE 40
    DEC gun_rest&
  WEND
  @kollision
RETURN
PROCEDURE kollision                         !~NL~D~
  shp_x&=MOUSEX
  shp_y&=unten&
  ~XBIOS(32,L:treff_sound%)
  SETCOLOR 0,&H777
  PAUSE 3
  SETCOLOR 0,0
  SPRITE ship$
  SPRITE gun$
  PUT 0,0,bild$
  @lets.plop(shp_x&,shp_y&)
  @no.but
  ti&=3
  IF gun_rest&
    SPRITE gun$(gun_rest&)
    DEC gun_rest&
    @next.gun.info
    @show.treffer
  ELSE
    IF hit&=3
      @no.gun.info
    ENDIF
    top!=FALSE
    IF score%>0
      @test.platz
      IF platz&
        @eintragen
      ENDIF
    ENDIF
    IF score%=0 OR top!
      abbruch!=TRUE
    ELSE
      IF taal$="NL"
        ti_n$(2)=STR$(score%)+" Punten"
      ELSE
        ti_n$(2)=STR$(score%)+" Punkte"
      ENDIF
      @pop.wahl(0,awy&,TRUE,TRUE,ti_n&,pw_n&,ti_n$(),pw_n$(),pk_n$(),antw&)
      IF antw&=2
        @neues.spiel
      ELSE
        abbruch!=TRUE
      ENDIF
    ENDIF
  ENDIF
RETURN
PROCEDURE next.gun.info                     !~NL~D~
  IF taal$="NL"
    IF gun_rest&
      IF gun_rest&>1
        ti_x$(2)="  volgende kanon  "
      ELSE
        ti_x$(2)="  nog maar 2 kanonnen  "
      ENDIF
      pw_x$(2)=" let op ! "
    ELSE
      ti_x$(2)="  laatste kanon  "
      pw_x$(2)=" Veel Geluk ! "
    ENDIF
  ELSE
    IF gun_rest&
      IF gun_rest&>1
        ti_x$(2)="  nÑchste Kanone  "
      ELSE
        ti_x$(2)="  vorletzte Kanone  "
      ENDIF
      pw_x$(2)=" paû auf! "
    ELSE
      ti_x$(2)="  letzte Kanone  "
      pw_x$(2)=" Viel GlÅck! "
    ENDIF
  ENDIF
  ti_x$(3)=""
  ti_x&=3
  @pop.wahl(0,awy&,TRUE,TRUE,ti_x&,pw_x&,ti_x$(),pw_x$(),pk_x$(),dummy&)
  HIDEM
RETURN
PROCEDURE no.gun.info                       !~NL~D~
  IF taal$="NL"
    ti_x$(2)="  Alles opgeknalt  "
    ti_x$(3)="geen schoten meer !"
    pw_x$(2)=" Stront ! "
  ELSE
    ti_x$(2)="  Alles verballert  "
    ti_x$(3)="kein Schuû mehr!"
    pw_x$(2)=" Mist! "
  ENDIF
  ti_x&=4
  @pop.wahl(0,awy&,TRUE,TRUE,ti_x&,pw_x&,ti_x$(),pw_x$(),pk_x$(),dummy&)
  HIDEM
RETURN
PROCEDURE next.round
  @neues.schiff
  IF hit&=1 AND tempo#<tempo_max&
    @neues.tempo
  ENDIF
  IF treffer&=treff_max&
    treffer&=0
    IF vorrat&>0
      @vor.bonus
      @bonus.runde
      IF NOT abbruch!
        IF level&<level_max& AND bonus%>=gut%*2
          @next.level(TRUE)
        ELSE IF level&>1 AND bonus%<gut%
          @next.level(FALSE)
        ENDIF
        @frag.ob.abbruch
        @show.treffer
      ENDIF
    ENDIF
  ENDIF
  hit&=0
  PUT 0,0,bild$
  @show.score
RETURN
'
PROCEDURE vor.bonus
  LOCAL li&,ob&,re&,un&
  PUT 0,0,bild$
  @set.show.boxes(FALSE)
  @show.score
  li&=h_mid&-LEN(bn_t$)*8-16
  re&=h_max&-li&
  ob&=v_mid&-23
  un&=v_max&-ob&
  @set.grafik.normal
  PBOX li&-8,ob&-8,re&+8,un&+8
  PBOX li&-7,ob&-7,re&+7,un&+7
  PBOX li&,ob&,re&,un&
  DEFTEXT 1,0,0,32
  TEXT h_mid&-1-LEN(bn_t$)*8,v_mid&+11,bn_t$
  DEFFILL 0,1
  GRAPHMODE 3
  SOUND 1,15,1,6,0
  SOUND 2,15,5,6,0
  SOUND 3,15,8,6,0
  WAVE 7,7,14,800,5
  FOR ni&=1 TO 10
    PBOX li&,ob&,re&,un&
    PAUSE 5
    PBOX li&,ob&,re&,un&
    PAUSE 5
  NEXT ni&
  PBOX li&,ob&,re&,un&
  SOUND 1,0,0,0,0
  WAVE 0,0,0,0,0
  GRAPHMODE 1
  PAUSE 50
  DEFTEXT 1,0,0,7*vf&-1
RETURN
PROCEDURE bonus.runde
  LOCAL shp_h&,teil&,alle&,fertig!
  bonus%=0
  shp_x&=h_max&
  shp_h&=MAX(oben&,y_line&\2-level&*vf&)
  PUT 0,0,bild$
  REPEAT
    ADD shp_x&,bm_di&
    IF shp_x&>h_max& OR shp_x&<0
      PUT 0,0,bild$
      IF level&>1 AND RANDOM(2)=0
        shp_x&=h_max&
        bm_di&=-ABS(bm_di&)
        rechts!=FALSE
      ELSE
        shp_x&=0
        bm_di&=ABS(bm_di&)
        rechts!=TRUE
      ENDIF
      shp_y&=MIN(unten&-20,shp_h&+RANDOM(level&*vf&))
      INC alle&
      IF alle&>shoot_max&
        fertig!=TRUE
        DEC alle&
      ENDIF
      @show.bonus.treffer
    ENDIF
    VSYNC
    SPRITE ship$,shp_x&,shp_y&
    SPRITE gun$,MOUSEX,unten&
    IF MOUSEK=1 AND NOT schuss!
      ~XBIOS(32,L:shoot_sound%)
      schuss!=TRUE
      bum_x&=MOUSEX
      bum_y&=y_shoot&
      LINE bum_x&,bum_y&,bum_x&,bum_y&-sl_di&
      IF vorrat&>0
        DEC vorrat&
        @show.vorrat
      ELSE
        fertig!=TRUE
      ENDIF
    ENDIF
    IF schuss!
      COLOR 0
      LINE bum_x&,bum_y&,bum_x&,bum_y&-sl_di&
      SUB bum_y&,sm_di&
      COLOR 1
      LINE bum_x&,bum_y&,bum_x&,bum_y&-sl_di&
      IF bum_y&<0
        schuss!=FALSE
        bum_x&=aus&
        bum_y&=aus&
      ENDIF
    ENDIF
    IF ABS(bum_x&-shp_x&)<16 AND ABS(bum_y&-sl_di&-shp_y&)<16
      INC teil&
      @show.bonus.treffer
      @treffer
      IF teil&=treff_max&
        fertig!=TRUE
      ENDIF
      schuss!=FALSE
      bum_x&=aus&
      bum_y&=aus&
      shp_x&=aus&
    ENDIF
    IF MOUSEK=2
      @frag.ob.abbruch
    ENDIF
  UNTIL fertig! OR abbruch!
  PUT 0,0,bild$
  gut%=500*level&  !25%
  IF alle&
    bonus%=INT(100*teil&/alle&)*20*level&
  ENDIF
  IF NOT abbruch!
    @wahl.bonus
  ENDIF
  schuss!=FALSE
  bum_x&=aus&
  bum_y&=aus&
  shp_x&=h_max&
  bm_di&=ABS(bm_di&)
RETURN
PROCEDURE wahl.bonus                        !~NL~D~
  LOCAL bw&,schuss&
  bw&=3
  IF taal$="NL"
    pw_b$(2)=" + "+STR$(bonus%)+" Punten "
  ELSE
    pw_b$(2)=" + "+STR$(bonus%)+" Punkte "
  ENDIF
  IF teil&=0
    ti_b$(2)="    S H I T    "
  ELSE IF teil&<treff_max& OR alle&>treff_max&+level&
    IF taal$="NL"
      ti_b$(2)="  Je hebt geen keus !  "
    ELSE
      ti_b$(2)="  Du hast keine Wahl!  "
    ENDIF
  ELSE
    schuss&=40+10*level&
    IF taal$="NL"
      ti_b$(2)="   Je kunt kiezen :   "
      pw_b$(4)=" + "+STR$(schuss&)+" schoten "
      pk_b$(4)="031"  !S
    ELSE
      ti_b$(2)="   Du hast die Wahl:   "
      pw_b$(4)=" + "+STR$(schuss&)+" Schuû "
      pk_b$(4)="031"  !S
    ENDIF
    bw&=5
    IF teil&=treff_max& AND gun_rest&<gun_max&
      IF taal$="NL"
        pw_b$(6)=" + 1 kanon "
        pk_b$(6)="037"  !K
      ELSE
        pw_b$(6)=" + 1 Kanone "
        pk_b$(6)="037"  !K
      ENDIF
      bw&=pw_b&
    ENDIF
  ENDIF
  @pop.wahl(0,awy&,TRUE,TRUE,ti_b&,bw&,ti_b$(),pw_b$(),pk_b$(),antw&)
  SELECT antw&
  CASE 2
    ADD score%,bonus%
    @show.score
  CASE 4
    ADD vorrat&,schuss&
    @show.vorrat
  CASE 6
    @set.guns(gun_rest&+1)
  ENDSELECT
  TEXT tr_x&,az_y&,SPACE$(tr_len&)
RETURN
PROCEDURE show.bonus.treffer
  bt$=STR$(teil&)+"  "+of_t$+"  "+STR$(alle&)
  TEXT h_mid&-LEN(bt$)*4,az_y&,bt$
RETURN
PROCEDURE test.platz
  platz&=0
  FOR ni&=5 DOWNTO 1
    IF score%>punkte%(ni&)
      platz&=ni&
    ENDIF
  NEXT ni&
RETURN
PROCEDURE eintragen                                       ! PhvR
  LOCAL zl&,sp_name$
  ni&=platz&
  IF platz&                               ! Aha, entlich mal ein Verfehlen
    FOR ni&=5 DOWNTO PRED(platz&)         ! zum rÅgen !
      spieler$(SUCC(ni&))=spieler$(ni&)
      punkte%(SUCC(ni&))=punkte%(ni&)
    NEXT ni&
  ENDIF
  ' While Ni&>1                            ! Man soll die Knalleistungen
  '  Spieler$(Ni&+1)=Spieler$(Ni&)         ! nicht zu schnell wegschmeissen !
  '  Punkte%(Ni&+1)=Punkte%(Ni&)
  '  Dec Ni&
  ' Wend
  top!=TRUE
  spieler$(platz&)=""
  punkte%(platz&)=score%
  @show.top.five(platz&)
  zl&=2*platz&+8
  PRINT AT(35,zl&);
  FORM INPUT 25,sp_name$
  sp_name$=TRIM$(sp_name$)
  IF LEN(sp_name$)
    spieler$(platz&)=sp_name$
  ELSE
    spieler$(platz&)="nobody"
  ENDIF
  PUT 0,0,bild$
  @save.top.five
RETURN
PROCEDURE show.top.five(nr&)                !~NL~D~
  LOCAL ob&,un&,ti$
  GRAPHMODE 1
  DEFFILL 1,1
  ob&=34*vf&
  un&=156*vf&
  PBOX 130,ob&,510,un&
  ADD ob&,2
  SUB un&,2
  BOX 132,ob&,508,un&
  DEFFILL 0,1
  ob&=65*vf&
  SUB un&,5*vf&
  PBOX 140,ob&,500,un&
  IF alf&=2
    DEFTEXT 0,16,0,32
  ELSE
    DEFTEXT 2,16,0,13
  ENDIF
  GRAPHMODE 2
  TEXT h_mid&-vf&*32,53*vf&,"Top Five"
  IF nr&
    IF taal$="NL"
      ti$="Typ je naam in en <Return>"
    ELSE
      ti$="Gib deinen Namen ein und <Return>"
    ENDIF
    DEFTEXT 0,0,0,2*vf&+2  !4/6
    TEXT h_mid&-(vf&+2)*LEN(ti$),63*vf&,ti$
  ENDIF
  GRAPHMODE 1
  FOR ni&=1 TO 5
    zl&=2*ni&+8
    PRINT AT(21,zl&);STR$(ni&);":  ";
    PRINT USING "########  ",punkte%(ni&);
    IF LEN(spieler$(ni&))
      PRINT spieler$(ni&);
    ELSE IF ni&<>nr&
      PRINT STRING$(25,"_");
    ENDIF
  NEXT ni&
  DEFTEXT 1,0,0,7*vf&-1
RETURN
PROCEDURE save.top.five                     !~NL~D~
  IF taal$="NL"
    ti_f$(2)="  TOP FIVE saven ?  "
  ELSE
    ti_f$(2)="  TOP FIVE speichern?  "
  ENDIF
  @pop.wahl(0,awy&,TRUE,TRUE,ti_f&,pw_f&,ti_f$(),pw_f$(),pk_f$(),antw&)
  IF antw&=2
    DEFMOUSE 2
    SHOWM
    punkte%(0)=0
    spieler$(0)=CHR$(7)
    $U
    OPEN "O",#2,datei$
    $U
    FOR ni&=0 TO 5
      PRINT #2,punkte%(ni&)
      PRINT #2,spieler$(ni&)
    NEXT ni&
    CLOSE
    DEFMOUSE pfeil_ms$
  ENDIF
RETURN
'
PROCEDURE nach.spiel
  HIDEM
  PUT 0,0,bild$
  @level.down(level&)
  GRAPHMODE 1
  COLOR 1
  li&=0
  ob&=0
  re&=h_max&
  un&=v_max&
  REPEAT
    BOX li&,ob&,re&,un&
    INC li&
    INC ob&
    DEC re&
    DEC un&
  UNTIL un&<v_mid&
RETURN
'
' === Ti ===
