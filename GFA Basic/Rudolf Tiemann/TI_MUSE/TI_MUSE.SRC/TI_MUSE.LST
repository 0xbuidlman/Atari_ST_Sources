'   ===  7 INLINEs in pre_set  ===
prg_label:
DATA "           T i _ M é U S E"
DATA "             alias RATTE"
DATA "          ( public domain )"
DATA
DATA "   V: 1.3   Ω    Rudolf Tiemann"
DATA "                Tel.: O6733-62O5"
DATA "               Donnersbergstr. 14"
DATA "  O6.12.91   W-D 65O9 Gau-Odernheim"
DATA
DATA "Gestatten Sie mir einige Anmerkungen"
DATA "zu dem Public-Domain-Programm RATTE:"
DATA "   Dieses schîne Spiel lÑuft leider"
DATA "nicht auf dem Schwarz-Weiû-Monitor und"
DATA "mit dem 1.4er TOS und bringt auûerdem"
DATA "stolze 333 Kilo auf die Waage."
DATA
DATA "   Deshalb gibt es nun die 'Ti_MéUSE'."
DATA "Die sind nicht nur leichter, sondern"
DATA "tummeln sich auch in 'low' und 'high'"
DATA "und allen Betriebssystemen und haben"
DATA "auûerdem noch etwas gegen Linkviren."
DATA "( Falls sich da mal was anhÑngt,"
DATA "  wird es gleich wieder abgenagt. )"
DATA
DATA "   Das Programm ist in GfA-BASIC 3.0"
DATA "geschrieben und compiliert und darf"
DATA "und soll weitergegeben werden - aber"
DATA "natÅrlich ausschlieûlich kostenlos!"
DATA
DATA "   Und damit es auch kostenlos bleibt,"
DATA "schicken Sie dem Autor bitte keine(!)"
DATA "MÑuse."
DATA "              Viel Spaû!"
DATA
DATA *
m_auswahl:
DATA 4,"  "
DATA 3,"  -Info                  "
DATA 2," "
DATA 3,1
DATA 3,2
DATA 3,3
DATA 3,4
DATA 3,5
DATA 3,6
DATA 4,
DATA 4,Ti_MéUSE
DATA 3,  Spielregeln
DATA 2," "
DATA 3,  Handicap
DATA 2," "
DATA 3,  spielen
DATA 2," "
DATA 3," == AUSGANG == "
DATA 4,
DATA 4,*
spl_label:
DATA "Eine MÑuseplage droht - deshalb mÅssen"
DATA "die lieben kleinen Nager in die Falle!"
DATA
DATA "Das geht ganz einfach ( denkt man )."
DATA "Zuerst macht man zwei, drei oder vier"
DATA "Felder frei. -"
DATA "   Dann lÑût man die MÑuse tanzen."
DATA "Wie weit eine Maus springen kann und"
DATA "muû(!), steht jeweils vor der Zeile."
DATA "Die Richtung, ob horizontal, vertikal"
DATA "oder diagonal, kann man selbst wÑhlen,"
DATA "soweit Platz ist."
DATA "   Nach dem Sprung sitzt die Maus fest,"
DATA "aber hoffentlich nicht im Weg. Denn,"
DATA "erst wenn alle MÑuse gefangen sind,"
DATA "ist die MÑuseplage gebannt."
DATA "        Hilfen gibt es nicht."
DATA "DafÅr kann man aber, wenn man sich mal"
DATA "'verhopst' hat, beliebig viele Hopser"
DATA "zurÅck oder auch wieder weiter gehen."
DATA "   Die Bedienung erfolgt natÅrlich mit"
DATA "der Maus und ist ganz einfach:"
DATA "   Die linke Taste greift einen Nager"
DATA "und setzt ihn auch wieder ab."
DATA "   Landet er auf einem erlaubten Ziel,"
DATA "schnappt die Falle zu. Andernfalls"
DATA "kehrt er an seinen alten Platz zurÅck."
DATA "   Die rechte Taste lÑût einen gerade"
DATA "'ergriffenen' Nager ebenfalls an den"
DATA "alten Platz zurÅckspringen."
DATA "                 ---"
DATA *
'
$%3,$*%,$S%,$S<,$E#,$B+,$P>,$C+
'
@pre_set
@set_menu
DEFMOUSE 0
@check(1)
'
neu_start:
ON ERROR GOSUB shit
@menu_ein
DO
  ON MENU 500
LOOP
END
'
PROCEDURE pre_set  !INLINE: 6 Nager + Musik
  LOCAL hig1%,hig2%,hig3%,low1%,low2%,low3%,rat.len&,frei%,al$
  '
  INLINE hig1%,446
  INLINE hig2%,446
  INLINE hig3%,446
  INLINE low1%,454
  INLINE low2%,454
  INLINE low3%,454
  INLINE musik%,60
  '
  MENU KILL
  CLS
  SPOKE &H484,BCLR(PEEK(&H484),0)  !T-Klick aus
  SPOKE &H484,BCLR(PEEK(&H484),2)  !Klingel aus
  @test_linkvirus
  h.max&=WORK_OUT(0)
  v.max&=WORK_OUT(1)
  IF h.max&=639 AND v.max&=399
    alf&=2
    rat.len&=446
  ELSE IF h.max&=319 AND v.max&=199
    alf&=0
    rat.len&=454
  ELSE
    al$="Dieses Programm lÑuft nur |  in niedriger oder hoher"
    al$=al$+"|         Auflîsung| "
    @melde(al$)
    END
  ENDIF
  DEFMOUSE 2
  SHOWM
  @get_palette(top.pal$)  !Farbpalette des Desktop retten
  CLIP 0,0,h.max&+1,v.max&+1  !Clipping richtig setzen
  rat.1$=SPACE$(rat.len&)
  rat.2$=SPACE$(rat.len&)
  rat.3$=SPACE$(rat.len&)
  IF alf&=2
    BMOVE hig1%,V:rat.1$,rat.len&
    BMOVE hig2%,V:rat.2$,rat.len&
    BMOVE hig3%,V:rat.3$,rat.len&
    VSETCOLOR 0,7,7,7  !weiû
  ELSE
    BMOVE low1%,V:rat.1$,rat.len&
    BMOVE low2%,V:rat.2$,rat.len&
    BMOVE low3%,V:rat.3$,rat.len&
    VSETCOLOR 0,6,6,6  !dunkelweiû
    VSETCOLOR 1,0,0,0  !schwarz
    VSETCOLOR 2,7,0,0  !rot
    VSETCOLOR 3,3,4,5  !blaugrau
    VSETCOLOR 4,7,7,7  !weiû
    VSETCOLOR 6,4,4,4  !grau
  ENDIF
  hf&=2+(alf&<1)  !1 2 2 Horizontalfaktor
  vf&=2+(alf&<2)  !1 1 2 Vertikalfaktor
  h.mid&=(h.max&+1)\2
  kz.y&=7*vf&        !y Kopfzeile
  kl.y&=kz.y&+vf&+2  !y Kopflinie
  zl.h&=8*vf&+2      !Zeilenhîhe
  zl.max&=(v.max&+1)\zl.h&-2
  sp.max&=(h.max&+1)\8  !Textspalten
  zl.ofs&=12*vf&-1   !Zeilenoffset
  BOUNDARY 1
  COLOR 1
  DEFLINE 1,1,0,0
  DEFFILL 1,0
  DEFTEXT 1,0,0,7*vf&-1  !6/13
  '  nun der Fusselkram
  sp.z&=6            !Spaltenzahl
  zl.z&=6            !Zeilenzahl
  tl.z&=sp.z&*zl.z&  !Teilezahl
  rat.br&=30*hf&
  rat.ho&=27*vf&
  rat.b2&=rat.br&\2  !dto. halb
  rat.h2&=rat.ho&\2
  git.br&=10*hf&
  h.di&=2*hf&
  v.di&=2*vf&
  tl.br&=rat.br&+h.di&*2
  tl.ho&=rat.ho&+v.di&*2
  f.br&=tl.br&*sp.z&-h.di&
  f.ho&=tl.ho&*zl.z&-v.di&
  f.li&=rat.br&
  f.re&=f.li&+f.br&
  f.ob&=(v.max&-kl.y&-f.ho&+1)\2+kl.y&+vf&
  f.un&=f.ob&+f.ho&
  f.xof&=f.li&-tl.br&
  f.yof&=f.ob&-tl.ho&
  b.li&=f.re&+6*hf&
  b.re&=h.max&-6*hf&
  b.br&=b.re&-b.li&
  b.ho&=rat.ho&-2*v.di&
  DIM feld&(tl.z&),x&(tl.z&),y&(tl.z&),von&(tl.z&),nach&(tl.z&)
  DIM weite&(zl.z&)
  DIM b.ob&(6),b.un&(6)  !Buttons
  pos&=1
  zl&=0
  yf&=f.ob&-tl.ho&
  FOR pos&=1 TO tl.z&
    IF pos& MOD sp.z&=1  !nÑchste Zeile
      INC zl&
      xf&=f.li&
      ADD yf&,tl.ho&
      b.ob&(zl&)=yf&+v.di&
      b.un&(zl&)=yf&+b.ho&
    ELSE                 !nÑchste Spalte
      ADD xf&,tl.br&
    ENDIF
    x&(pos&)=xf&
    y&(pos&)=yf&
  NEXT pos&
  weite&(1)=1
  weite&(2)=4
  weite&(3)=2
  weite&(4)=1
  weite&(5)=3
  weite&(6)=1
  handicap&=4
  leer&=0  !liest sich besser
  besetzt&=1
  gefangen&=2
  frei%=FRE(0)
  IF frei%>100000
    RESERVE 100000
  ENDIF
RETURN
PROCEDURE test_linkvirus
  LOCAL ur.pfad$,prg$,al$,d.l%,prg.len%
  prg.len%=36770
  ur.pfad$=CHR$(GEMDOS(25)+65)+":"+DIR$(0)+"\"
  prg$=ur.pfad$+"TI_MéUSE.PRG"
  IF EXIST(prg$)
    OPEN "I",#1,prg$
    d.l%=LOF(#1)
    CLOSE #1
    IF d.l%<>prg.len%
      al$=" |  Linkvirus      |  killen !?|"
      ALERT 3,al$,1,"ja| nein ",antw&
      IF antw&=2
        END
      ELSE
        @virus_killen
      ENDIF
    ENDIF
  ENDIF
RETURN
PROCEDURE virus_killen
  LOCAL prg.adr%
  DEFMOUSE 2
  SHOWM
  prg.adr%=MALLOC(prg.len%)
  IF prg.adr%
    OPEN "I",#1,prg$
    BGET #1,prg.adr%,prg.len%
    CLOSE #1
    BSAVE prg$,prg.adr%,prg.len%
    @mem_free(prg.adr%)
  ELSE
    @melde("Speicher-Fehler!")
  ENDIF
RETURN
PROCEDURE mem_free(VAR adr%)
  ON ERROR  !aus
  IF adr%>0
    adr%=MFREE(adr%)
  ENDIF
  IF adr%
    @melde("Speicher-Fehler!")
  ENDIF
  ON ERROR GOSUB shit
RETURN
PROCEDURE get_palette(VAR pal$)
  pal$=""
  FOR ni&=0 TO 15
    pal$=pal$+MKI$(XBIOS(7,ni&,-1))
  NEXT ni&
RETURN
PROCEDURE ausgang
  ON ERROR  !damit's ein Ende hat
  WAVE 0,0  !Ruhe
  SPOKE &H484,BSET(PEEK(&H484),2)  !Klingel ein
  ~XBIOS(6,L:V:top.pal$)  !Palette des Desktop restaurieren
  RESERVE
  @no.but
  CLS
  EDIT
RETURN
PROCEDURE no.but
  WHILE MOUSEK  !fÑngt ÅberschÅssige Mausklicks ab (meistens, Sch... GEM)
    REPEAT
      ~EVNT_BUTTON(0,0,0)
      MOUSE mx&,my&,mk&
    UNTIL mk&=0
  WEND
RETURN
PROCEDURE set_menu
  men.max&=18
  DIM men$(men.max&+2)
  DIM abel&(men.max&+2)
  RESTORE m_auswahl
  ni&=-1
  REPEAT
    INC ni&
    READ abel&(ni&),men$(ni&)
  UNTIL men$(ni&)="*"
  men$(ni&)=""
RETURN
PROCEDURE shit
  ON ERROR  !aus
  SELECT ERR
  CASE 8
    ERASE z$()
    @melde("Der Speicher ist in der   | Hose - und die ist voll")
  CASE 102 TO 109
    ON ERROR  !aus
    @melde("  "+STR$(ERR-100)+" Bîmbchen        |   - wie nett")
    @ausgang
  DEFAULT
    @melde(" Leider ist ein Fehler       |  (Nr. "+STR$(ERR)+") aufgetreten")
  ENDSELECT
  RESUME neu_start
RETURN
'
PROCEDURE menu_ein
  @clean
  MENU men$()
  MENU 2,2
  FOR ni&=11 TO men.max&
    MENU ni&,abel&(ni&)
  NEXT ni&
  DEFMOUSE 0
  ON MENU GOSUB men
RETURN
PROCEDURE clean
  ~FORM_DIAL(3,0,0,0,0,0,0,WORK_OUT(0),WORK_OUT(1))
RETURN
PROCEDURE men
  @check(MENU(0))
  @menu_ein
RETURN
PROCEDURE check(mnr&)
  MENU OFF
  MENU KILL
  SELECT mnr&
  CASE 1
    @prg_info
  CASE 11
    @spielregeln
  CASE 13
    @handicap
  CASE 15
    @spielen
  CASE 17
    @ausgang
  ENDSELECT
RETURN
PROCEDURE prg_info
  LOCAL h$
  h$="-Info"
  RESTORE prg_label
  @zeig_info
  @clean
RETURN
PROCEDURE zeig_info
  LOCAL zl.zahl&,zl.rest&
  DIM z$(50)
  REPEAT
    INC zl.zahl&
    READ z$(zl.zahl&)
  UNTIL z$(zl.zahl&)="*"
  INSERT z$(0)=""
  @text_edit(h$,zl.zahl&,z$())
  ERASE z$()
RETURN
PROCEDURE text_edit(VAR tit$,ed.max&,ed$())
  LOCAL x0r&,x3l&,x3r&,x5l&,x5r&,xtl&,xtr&,pl&,pr&,po&,pu&
  LOCAL zl.ofs&,ed.ofs&,ed.pg&,ed.dn&,ed.x&,y.di&,y.ol&,y.ul&,l&
  LOCAL leer$,part$
  @ed_set
  REPEAT
    @get_tom
    IF mk&
      @ed_maus
    ELSE
      @ed_taste
    ENDIF
  UNTIL esc!
RETURN
PROCEDURE ed_set
  ed.pg&=MIN(zl.max&,ed.max&)
  ed.dn&=ed.max&-ed.pg&
  ed.x&=h.mid&-152
  pl&=ed.x&-8*hf&
  leer$=SPACE$(38)
  zl.ofs&=(v.max&-kl.y&-zl.max&*zl.h&)\2+kl.y&-vf&-1
  y.ol&=zl.ofs&
  pr&=h.max&-pl&
  po&=zl.ofs&+vf&+1
  pu&=po&+ed.pg&*zl.h&-1
  y.ul&=pu&+2*vf&+1
  y.di&=zl.h&-vf&-1
  @set_titel(tit$)
  GRAPHMODE 4
  TEXT 1,kz.y&,SPACE$(3+2*hf&)
  GRAPHMODE 3
  TEXT 8*hf&+1,kz.y&,"ESC"
  GRAPHMODE 1
  l&=LEN(tit$)
  xal&=56+8*hf&
  x0r&=26+16*hf&
  x3l&=50*hf&*hf&
  x3r&=x3l&+16+16*hf&
  xtl&=h.mid&-l&*4-8
  xtr&=h.max&-xtl&
  x5l&=h.max&-x3r&
  x5r&=h.max&-x3l&
  IF ed.max&>ed.pg&
    @set_buttons
  ENDIF
  @clean
  @ed_seite
  esc!=FALSE
RETURN
PROCEDURE set_titel(h$)
  LOCAL l&,p&
  @white_box(-1,kl.y&)
  l&=LEN(h$)
  p&=h.mid&-l&*4
  GRAPHMODE 4
  TEXT p&-8,kz.y&,SPACE$(l&+2)
  GRAPHMODE 3
  TEXT p&,kz.y&,h$
  GRAPHMODE 1
RETURN
PROCEDURE white_box(o&,u&)
  DEFFILL 1,0
  PBOX -1,o&,h.max&+1,u&
RETURN
PROCEDURE set_buttons
  GRAPHMODE 4
  TEXT x3l&,kz.y&,SPACE$(2+2*hf&)
  TEXT x5l&,kz.y&,SPACE$(2+2*hf&)
  GRAPHMODE 3
  TEXT x3l&+4+8*hf&,kz.y&,""
  TEXT x5l&+4+8*hf&,kz.y&,""
  GRAPHMODE 1
RETURN
PROCEDURE get_tom
  REPEAT
    MOUSE mx&,my&,mk&
    KEYTEST key%
  UNTIL mk& OR key%
  IF key%
    shift!=BTST(key%,24) OR BTST(key%,25)
    scan|=AND(key%,&HFF0000)\&HFFFF
    mk&=0
  ELSE
    scan|=0
  ENDIF
RETURN
PROCEDURE ed_maus
  IF my&<kl.y&
    @ed_button
  ENDIF
RETURN
PROCEDURE ed_button
  IF mx&<x0r&
    SETMOUSE mx&,12*vf&
    esc!=TRUE
  ELSE IF mx&>x3l& AND mx&<x3r&
    @ed_up(mk&>1)
  ELSE IF mx&>xtl& AND mx&<xtr&
    @melde("Das sehen Sie vor sich")
  ELSE IF mx&>x5l& AND mx&<x5r&
    @ed_down(mk&>1)
  ENDIF
RETURN
PROCEDURE ed_taste
  SELECT scan|
  CASE 1
    esc!=TRUE
  CASE 71
    @ed_home
  CASE 72
    @ed_up(shift!)
  CASE 80
    @ed_down(shift!)
  ENDSELECT
  @no.key
RETURN
PROCEDURE ed_home
  IF shift!
    IF ed.ofs&<ed.dn&
      ed.ofs&=ed.dn&
      @ed_seite
    ENDIF
  ELSE
    IF ed.ofs&>0
      ed.ofs&=0
      @ed_seite
    ENDIF
  ENDIF
RETURN
PROCEDURE ed_up(seite!)
  IF ed.ofs&>0
    IF seite!
      di&=MIN(ed.pg&-1,ed.ofs&)
      SUB ed.ofs&,di&
      @ed_seite
    ELSE
      DEC ed.ofs&
      GET pl&,po&,pr&,pu&-zl.h&,part$
      PUT pl&,po&+zl.h&,part$
      yi&=zl.ofs&+zl.h&
      TEXT ed.x&,yi&,leer$
      TEXT ed.x&,yi&,ed$(ed.ofs&+1)
      SHOWM
    ENDIF
  ENDIF
  @no.key
RETURN
PROCEDURE ed_down(seite!)
  IF ed.ofs&<ed.dn&
    IF seite!
      di&=MIN(ed.pg&-1,ed.dn&-ed.ofs&)
      ADD ed.ofs&,di&
      @ed_seite
    ELSE
      INC ed.ofs&
      GET pl&,po&+zl.h&,pr&,pu&,part$
      PUT pl&,po&,part$
      yi&=ed.pg&*zl.h&+zl.ofs&
      TEXT ed.x&,yi&,leer$
      TEXT ed.x&,yi&,ed$(ed.ofs&+ed.pg&)
      SHOWM
    ENDIF
  ENDIF
  @no.key
RETURN
PROCEDURE ed_seite
  LOCAL zl&
  PBOX pl&-1,y.ol&,pr&+1,y.ul&
  yi&=zl.ofs&
  ni&=ed.ofs&
  FOR zl&=1 TO ed.pg&
    ADD yi&,zl.h&
    INC ni&
    TEXT ed.x&,yi&,ed$(ni&)
  NEXT zl&
  SHOWM
RETURN
PROCEDURE no.key
  LPOKE XBIOS(14,1)+6,0
RETURN
PROCEDURE melde(melde$)
  DEFMOUSE 0
  @no.but
  ALERT 0," | "+melde$+"   | ",1,"  Aha!  ",dummy&
RETURN
'
PROCEDURE spielregeln
  LOCAL h$
  h$="Spielregeln"
  RESTORE spl_label
  @zeig_info
  @clean
RETURN
PROCEDURE handicap
  LOCAL al$
  @set_titel("Handicap")
  SHOWM
  al$=" | Wieviele freie Felder   |    sollen es sein?| "
  @no.but
  DEC handicap&
  ALERT 0,al$,handicap&," 2 |3|4",handicap&
  INC handicap&
RETURN
PROCEDURE spielen
  @spiel_vorbereiten
  @felder_freimachen
  @set_titel("fang die MÑuse")
  SHOWM
  @no.but
  DO UNTIL genug!
    REPEAT
      MOUSE mx&,my&,mk&
    UNTIL mk&
    @get_position
    IF button&
      IF button&=1
        @frag_ob_genug
      ELSE IF button&=3
        @geh_zurueck
      ELSE IF button&=5
        @geh_weiter
      ENDIF
      button&=0
    ELSE IF mk&=1 AND position!
      @nehmen
    ENDIF
    IF genug!
      @danksagung
    ENDIF
  LOOP
RETURN
PROCEDURE frag_ob_genug
  @no.but
  ALERT 0," |       Aus?         | ",1,"ja| nein ",antw&
  IF antw&=1
    genug!=TRUE
  ENDIF
  @no.key
  @no.but
RETURN
'
PROCEDURE spiel_vorbereiten
  hops&=0
  zuege&=0
  rest&=tl.z&
  ARRAYFILL feld&(),besetzt&
  ARRAYFILL von&(),0
  ARRAYFILL nach&(),0
  genug!=FALSE
  IF LEN(bild$)
    SPUT bild$
  ELSE
    @set_bild
  ENDIF
RETURN
PROCEDURE set_bild
  IF alf&=2
    DEFFILL 1,2,4
  ELSE
    DEFFILL 3,1
  ENDIF
  PBOX 0,0,h.max&,v.max&
  DEFFILL 1,1
  FOR ni&=1 TO tl.z&
    l&=x&(ni&)-hf&
    o&=y&(ni&)-vf&
    r&=l&+rat.br&+h.di&
    u&=o&+rat.ho&+v.di&
    PBOX l&,o&,r&,u&
  NEXT ni&
  BOUNDARY 0
  DEFFILL 0,1
  FOR ni&=1 TO tl.z&
    PBOX x&(ni&),y&(ni&),x&(ni&)+rat.br&,y&(ni&)+rat.ho&
  NEXT ni&
  GET x&(1),y&(1),x&(1)+rat.br&,y&(1)+rat.ho&,rat.0$
  BOUNDARY 1
  DEFFILL 1,0
  FOR ni&=1 TO tl.z&
    PUT x&(ni&),y&(ni&),rat.1$
  NEXT ni&
  x&=3*h.di&
  b&=x&(1)-2*x&-hf&
  @t_box(x&,b.ob&(1),b&,b.ho&,STR$(weite&(1)))
  @t_box(x&,b.ob&(2),b&,b.ho&,STR$(weite&(2)))
  @t_box(x&,b.ob&(3),b&,b.ho&,STR$(weite&(3)))
  @t_box(x&,b.ob&(4),b&,b.ho&,STR$(weite&(4)))
  @t_box(x&,b.ob&(5),b&,b.ho&,STR$(weite&(5)))
  @t_box(x&,b.ob&(6),b&,b.ho&,STR$(weite&(6)))
  @t_box(b.li&,b.ob&(1),b.br&,b.ho&,"A U S")
  @t_box(b.li&,b.ob&(3),b.br&,b.ho&,"zurÅck")
  @t_box(b.li&,b.ob&(5),b.br&,b.ho&,"weiter")
  @zeig_stand
  SGET bild$
RETURN
PROCEDURE t_box(xb&,yb&,br&,ho&,t$)
  LOCAL xt&,yt&
  xt&=xb&+br&\2-LEN(t$)*4+1
  yt&=yb&+ho&\2+2*vf&+2
  PBOX xb&,yb&,xb&+br&,yb&+ho&
  PBOX xb&+hf&+1,yb&+vf&+1,xb&+br&-hf&-1,yb&+ho&-vf&-1
  TEXT xt&,yt&,t$
RETURN
PROCEDURE felder_freimachen
  ni&=handicap&
  DEFMOUSE 4
  @zeig_felder
  REPEAT
    SHOWM
    @no.but
    REPEAT
      MOUSE mx&,my&,mk&
    UNTIL mk&
    @get_position
    IF position!
      PUT x&(pos&),y&(pos&),rat.0$
      feld&(pos&)=leer&
      DEC ni&
      DEC rest&
      @t_box(b.li&,b.ob&(6),b.br&,b.ho&,STR$(rest&)+" frei")
      @zeig_felder
      @no.but
    ELSE IF button&=1
      genug!=TRUE
    ENDIF
  UNTIL ni&=0 OR genug!
  DEFMOUSE 0
RETURN
PROCEDURE zeig_felder
  IF ni&
    IF ni&=1
      @set_titel("noch 1 Feld frei machen")
    ELSE
      @set_titel(STR$(ni&)+" Felder frei machen")
    ENDIF
  ENDIF
RETURN
PROCEDURE get_position
  position!=FALSE
  button&=0
  IF mx&>f.li& AND mx&<f.re& AND my&>f.ob& AND my&<f.un&  !Feld
    sp&=(mx&-f.xof&)\tl.br&
    zl&=(my&-f.yof&)\tl.ho&
    pos&=(zl&-1)*sp.z&+sp&
    IF mx&<x&(pos&)+rat.br& AND my&<y&(pos&)+rat.ho&  !Rand gilt nicht
      position!=TRUE
    ENDIF
  ELSE IF mx&>b.li& AND mx&<b.re&  !Buttons
    IF my&>b.ob&(1) AND my&<b.un&(1)
      button&=1
    ELSE IF my&>b.ob&(3) AND my&<b.un&(3) AND select&=leer&
      button&=3
    ELSE IF my&>b.ob&(5) AND my&<b.un&(5) AND select&=leer&
      button&=5
    ENDIF
  ENDIF
RETURN
PROCEDURE nehmen
  IF feld&(pos&)=besetzt&
    SWAP select&,feld&(pos&)
    PUT x&(pos&),y&(pos&),rat.0$  !Feld leeren
    alt.pos&=pos&  !Position merken
    alt.zl&=zl&
    alt.sp&=sp&
    von&(hops&)=pos&
    @setzen
  ENDIF
RETURN
PROCEDURE geh_zurueck
  IF hops&>0
    DEC hops&
    v&=von&(hops&)
    n&=nach&(hops&)
    @flick_flack(n&,2)
    PUT x&(n&),y&(n&),rat.0$
    @flick_flack(v&,2)
    PUT x&(v&),y&(v&),rat.1$
    feld&(v&)=besetzt&
    feld&(n&)=leer&
    INC rest&
    @zeig_stand
    SHOWM
  ENDIF
RETURN
PROCEDURE geh_weiter
  IF hops&<zuege&
    v&=von&(hops&)
    n&=nach&(hops&)
    @flick_flack(v&,2)
    PUT x&(v&),y&(v&),rat.0$
    @flick_flack(n&,2)
    PUT x&(n&),y&(n&),rat.4$
    feld&(v&)=leer&
    feld&(n&)=besetzt&
    INC hops&
    DEC rest&
    @zeig_stand
    SHOWM
  ENDIF
RETURN
PROCEDURE zeig_stand
  t$=RIGHT$("0"+STR$(hops&),2)+" | "+RIGHT$("0"+STR$(zuege&),2)
  @t_box(b.li&,b.ob&(4),b.br&,b.ho&,t$)
  @t_box(b.li&,b.ob&(6),b.br&,b.ho&,STR$(rest&)+" frei")
RETURN
PROCEDURE setzen
  HIDEM
  PUT mx&-rat.b2&,my&-rat.h2&,rat.2$,6  !zeigen
  ax&=mx&
  ay&=my&
  @no.but
  WHILE select&
    MOUSE mx&,my&,mk&
    IF mk&=2
      @set_back
    ELSE IF mk&=1
      @ablegen
    ELSE IF mx&<>ax& OR my&<>ay&
      PUT ax&-rat.b2&,ay&-rat.h2&,rat.2$,6  !alt lîschen
      PUT mx&-rat.b2&,my&-rat.h2&,rat.2$,6  !neu zeigen
      ax&=mx&
      ay&=my&
    ENDIF
  WEND
  SHOWM
RETURN
PROCEDURE ablegen
  @get_position
  IF position! AND feld&(pos&)=leer&
    @test_position
    IF position!
      @falle_zu
    ELSE
      @set_back
    ENDIF
  ENDIF
RETURN
PROCEDURE test_position
  position!=FALSE
  dist&=weite&(alt.zl&)
  sp.di&=ABS(sp&-alt.sp&)
  zl.di&=ABS(zl&-alt.zl&)
  IF zl&=alt.zl& AND sp.di&=dist&
    position!=TRUE
  ELSE IF sp&=alt.sp& AND zl.di&=dist&
    position!=TRUE
  ELSE IF sp.di&=zl.di& AND zl.di&=dist&
    position!=TRUE
  ENDIF
RETURN
PROCEDURE falle_zu
  LOCAL d&
  PUT ax&-rat.b2&,ay&-rat.h2&,rat.2$,6  !alt lîschen
  @flick_flack(pos&,4)
  PUT x&(pos&),y&(pos&),rat.1$,3  !setzen
  nach&(hops&)=pos&
  INC hops&
  x3&=x&(pos&)+rat.b2&-hf&
  x4&=x&(pos&)+rat.b2&+hf&
  x1&=x3&-git.br&
  x2&=x4&-git.br&
  x5&=x3&+git.br&
  x6&=x4&+git.br&
  yo&=y&(pos&)
  un&=yo&+rat.ho&
  yu&=yo&
  WAVE 2569,1,15,800
  REPEAT  !Gitter zu
    ADD d&,vf&
    ADD yu&,d&
    yu&=MIN(yu&,un&)
    PBOX x1&,yo&,x2&,yu&
    PBOX x3&,yo&,x4&,yu&
    PBOX x5&,yo&,x6&,yu&
    PAUSE 1
  UNTIL yu&=un&
  WAVE 0,0
  IF rat.4$=""
    GET x&(pos&),y&(pos&),x&(pos&)+rat.br&,y&(pos&)+rat.ho&,rat.4$
  ENDIF
  feld&(pos&)=gefangen&
  select&=leer&
  DEC rest&
  INC zuege&
  IF zuege&>hops&
    zuege&=hops&
  ENDIF
  IF rest&=0
    genug!=TRUE
  ENDIF
  @zeig_stand
  SHOWM
  @no.but
RETURN
PROCEDURE flick_flack(p&,z&)
  FOR ni&=1 TO z&
    PUT x&(p&),y&(p&),rat.3$,3
    PAUSE 3
    PUT x&(p&),y&(p&),rat.2$,3
    PAUSE 3
  NEXT ni&
RETURN
PROCEDURE set_back
  PUT ax&-rat.b2&,ay&-rat.h2&,rat.2$,6  !alt lîschen
  @flick_flack(alt.pos&,2)
  PUT x&(alt.pos&),y&(alt.pos&),rat.1$,3  !und zurÅck
  SWAP select&,feld&(alt.pos&)
  @no.but
RETURN
PROCEDURE danksagung
  LOCAL h$,alle&
  h$="Danksagung"
  alle&=tl.z&-handicap&
  SELECT rest&
  CASE 0
    @mach_musik
    RESTORE rest_0
  CASE 1
    RESTORE rest_1
  CASE 2 TO 4
    RESTORE rest_wenige
  CASE 5 TO 10
    RESTORE rest_etliche
  CASE alle&
    RESTORE rest_alle
  DEFAULT
    RESTORE rest_viele
  ENDSELECT
  @zeig_info
  @clean
RETURN
PROCEDURE mach_musik
  ~XBIOS(32,L:musik%)
  PAUSE 110
  SOUND 1,0
RETURN
rest_0:
DATA
DATA "    Vielen Dank lieber MÑusejÑger!"
DATA
DATA
DATA "Durch Deinen unermÅdlichen Einsatz"
DATA "hast Du uns endgÅltig von einer sehr"
DATA "groûen Plage befreit."
DATA
DATA "Aber, was machen wir jetzt mit all den"
DATA "MÑusen?"
DATA
DATA "Wie ich die Biester kenne, nagen die"
DATA "doch schon lÑngst an ihren KÑfigen."
DATA
DATA
DATA
DATA "   Und Du sitzt da und tust nichts!"
DATA
DATA
DATA *
rest_1:
DATA
DATA "    Vielen Dank lieber MÑusejÑger!"
DATA
DATA
DATA "Du hast uns von einer gewaltigen Plage"
DATA "befreit. - Wunderbar!"
DATA
DATA
DATA "      Aber halt! - Was seh ich?"
DATA
DATA "   Da ist ja noch ein MÑuschen frei."
DATA
DATA "Und das ist ausgerechnet auch noch ein"
DATA "trÑchtiges Weibchen!"
DATA
DATA "Na dann kann ja die ganze Jagd gleich"
DATA "wieder von vorne beginnen."
DATA
DATA
DATA *
rest_wenige:
DATA
DATA "    Vielen Dank lieber MÑusejÑger!"
DATA
DATA
DATA "  Du hast uns wirklich sehr geholfen."
DATA
DATA
DATA "Schade, daû da noch ein paar MÑuschen"
DATA "frei herumlaufen."
DATA
DATA "Wie ich die Viecher kenne, werden sie"
DATA "schon bald wieder ihre ursprÅngliche"
DATA "Zahl erreicht haben."
DATA
DATA
DATA "Willst Du nicht noch ein Biûchen bei"
DATA "der Jagd helfen?!"
DATA
DATA
DATA *
rest_etliche:
DATA
DATA "    Vielen Dank lieber MÑusejÑger!"
DATA
DATA
DATA "   Du hast uns ganz schîn geholfen."
DATA
DATA
DATA "Aber da laufen doch noch etliche MÑuse"
DATA "frei herum."
DATA
DATA "Wenn das so bleibt, sehe ich dÅsteren"
DATA "Zeiten entgegen."
DATA
DATA "          Also! - Wie wÑrs?"
DATA
DATA "Willst Du nicht noch ein Biûchen auf"
DATA "die MÑusejagd gehen?!"
DATA
DATA
DATA *
rest_viele:
DATA
DATA "    Vielen Dank lieber MÑusejÑger!"
DATA
DATA
DATA "Leider waren Deine BemÅhungen nicht so"
DATA "sehr erfolgreich."
DATA
DATA
DATA "Da laufen einfach noch zu viele von"
DATA "den lieben kleinen Nagern frei herum."
DATA
DATA "Ich fÅrchte, im Augenblick bist Du fÅr"
DATA "Hameln noch nicht fit genug."
DATA
DATA "Aber was nicht ist, das kann ja noch"
DATA "werden, und inzwischen kannst Du die"
DATA "MÑusejagd erst mal weiter Åben."
DATA
DATA
DATA *
rest_alle:
DATA
DATA "  Vielen Dank lieber MÑusejÑger!???"
DATA
DATA
DATA "Du hast wohl gar keine Lust, Dich mit"
DATA "diesen lÑstigen Nagern abzugeben?"
DATA
DATA
DATA "               Schade!"
DATA
DATA
DATA "         Aber wie Du willst."
DATA
DATA
DATA
DATA "Du wirst es schon merken, wenn sie Dir"
DATA "die Haare vom Kopf fressen."
DATA
DATA
DATA *
'
' ** Ti **
