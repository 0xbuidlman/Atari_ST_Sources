' ============================================================
'
'    Ti_ISOLA
'
' D:
'    Dieses Listing darf ausschlieûlich privat benutzt werden.
'    Wenn Sie mehr wollen, wenden Sie sich an den Autor.
'    Wenn Sie das Programm verÑndern, schicken Sie dem Autor
'    bitte ein Belegexemplar.
' NL:
'    De listing mag alleen strikt privÇ gebruikt worden.
'    Wilt u meer neem dan kontakt op met de auteur.
'    Ook wanneer u voor eigen gebruik veranderingen aanbrengt
'    wordt hij graag op de hoogte gehouden.            GfA gg.
'
'        +++  8 INLINEs  in 'pre.set.special'  +++
' D:
'    Wenn das LST-File mit Merge geladen wird,
'    mÅssen die INLINEs mit HELP nachgeladen werden!
' NL:
'    Als de LST-file (met Merge) geladen wordt,
'    moeten de INLINE's met HELP apart geladen worden.
'
' ============================================================
'       Label und VormenÅ zur Wahl der Sprache:
1.wahl:
DATA
DATA "  V.:  3.O / O6.12.91  "
DATA "(public domain)"
DATA "Ω"
DATA "Rudolf Tiemann"
DATA "Tel.: O6733-62O5"
DATA "Donnersbergstr.14"
DATA "65O9 Gau-Odernheim"
DATA "(West Germany)"
DATA
DATA *
DATA "",""
DATA "Deutsch","032"
DATA "Nederlands","049"
DATA "",""
DATA "    Escape    ","001"
DATA "",""
DATA *,""
'
prg_daten:
DATA "Ti_ISOLA.PRG"
DATA "=42051 Bytes ΩTi"
' D:
'    ->^^^^^^<- hier drÅber muû nach dem 1.Compilieren
'    linksbÅndig die genaue Grîûe eingetragen werden,
'    dann folgt das endgÅltige 2.Compilieren
'    (wichtig fÅr den Linkvirentest)
' NL:
'    ->^^^^^^<- hierboven moet na de eerste keer compileren
'    links-aangeschoven de exacte grootte aangegeven worden.
'    Pas daarna kan definitief gecompileerd worden.
'    (i.v.m. Linkvirustest)
'
'   > Compiler-Anweisungen:
$S&  !2-Byte-Select-Parameter
$S<  !Select optimieren auf LÑnge
$P>  !Procedures: als GFA-Routinen
$%3  !IntDiv immer als Integer
$*%  !LongMul nicht mit MULS
$B+  !Meldung statt Bomben
$E$  !Fehler-Texte  (fÅr Routine 'shit')
$C+  !bei C:-Aufrufen Register auf Stack retten und restaurieren
$I+  !Interrupt zulassen
' $U+  !hinter jedem Befehl C&S&A, EVERY, AFTER prÅfen
'
' ===========================================================
'
@pre.set
'
neu_start:
ON ERROR GOSUB shit
DO
  @1.wahl
LOOP
END
'
' ===========================================================
'
PROCEDURE pre.set
  '  Die Positionen werden gewîhnlich so angegeben,
  '  daû sie fÅr die niedrige Auflîsung stimmen.
  '  Sie werden vom Programm mittels der Faktoren
  '  hf& und vf& an die aktuelle Auflîsung angepaût.
  '
  '  Variablen mit zwei oder drei Zeichen+Suffix sind
  '  LOCAL deklariert oder haben nur lokale Bedeutung
  '  z.B. Laufvariable  ni&  etc.
  '   Ausnahmen:  Adreû-Variablen mit Suffix % (local)
  '  Globale Variablen haben mindestens vier Zeichen.
  '   Ausnahmen:  alf&, hf&, vf&, mx&, my&, mk&
  '   und die Arrays: xf&(), yf&(), xp&(), yp&()
  '
  MENU KILL
  DEFMOUSE 2
  SHOWM
  old_484|=PEEK(&H484)             !Einstellung retten
  SPOKE &H484,BCLR(PEEK(&H484),0)  !T-Klick aus
  SPOKE &H484,BSET(PEEK(&H484),1)  !Key-rep ein
  SPOKE &H484,BCLR(PEEK(&H484),2)  !Klingel aus
  alf&=XBIOS(4)   !0 1 2
  hf&=2+(alf&<1)  !1 2 2 Horizontalfaktor
  vf&=2+(alf&<2)  !1 1 2 Vertikalfaktor
  h_max&=WORK_OUT(0)
  v_max&=WORK_OUT(1)
  CLIP 0,0 TO h_max&,v_max&  !Clipping richtig(!) setzen
  CLS
  y_kzl&=7*vf&         !y Kopfzeile
  y_kln&=y_kzl&+2+vf&  !y Kopflinie
  h_br&=h_max&+1       !horizontal Breite
  v_ho&=v_max&+1       !vertikal Hîhe
  h_mid&=h_br&\2       !h-
  v_mid&=v_ho&\2       !v-Mitte
  y_rel&=4*vf&
  top_pal$=""          !Farbpalette des Desktop
  @get.palette(top_pal$)  !retten
  check!=TRUE          !fÅr Linvirentest
  '  programmspezifisch:
  @pre.set.special
  @set.farben
  @set.grafik.normal
  @set.1.wahl
  DEFMOUSE 0
RETURN
PROCEDURE pre.set.special  !+++  10 INLINEs  +++
  LOCAL kn1_spr%,kn2_spr%,maus_1%,maus_2%,maus_3%,maus_4%,rat_spr%
  LOCAL sp&,zl&,ym&,hh&,hb&
  '
  INLINE kn1_spr%,74
  INLINE kn2_spr%,74
  INLINE maus_1%,74
  INLINE maus_2%,74
  INLINE maus_3%,74
  INLINE maus_4%,74
  INLINE peng_sd%,30
  INLINE rat_spr%,74
  '  Ratte als Sprite (funktioniert in allen Auflîsungen)
  '
  knop_1$=SPACE$(74)
  knop_2$=SPACE$(74)
  BMOVE kn1_spr%,V:knop_1$,74
  BMOVE kn2_spr%,V:knop_2$,74
  DIM maus$(4)
  FOR ni&=1 TO 4
    maus$(ni&)=SPACE$(74)
  NEXT ni&
  BMOVE maus_1%,V:maus$(1),74
  BMOVE maus_2%,V:maus$(2),74
  BMOVE maus_3%,V:maus$(3),74
  BMOVE maus_4%,V:maus$(4),74
  ratte$=SPACE$(74)
  BMOVE rat_spr%,V:ratte$,74
  '  Spielfeld:
  sp_z&=8                !Spaltenzahl
  zl_z&=6                !Zeilenzahl
  '
  fd_br&=21*hf&
  fd_ho&=21*vf&
  fd_xd&=25*hf&
  fd_yd&=25*vf&
  br&=fd_xd&*(sp_z&-1)+fd_br&
  ho&=fd_yd&*(zl_z&-1)+fd_ho&
  ym&=v_mid&+y_kln&\2+1
  fd_li&=h_mid&-br&\2-1
  fd_re&=h_mid&+br&\2-1
  fd_ob&=ym&-ho&\2-1
  fd_un&=ym&+ho&\2-1
  x_ofs&=fd_li&-fd_xd&   !X-
  y_ofs&=fd_ob&-fd_yd&   !Y-Offset
  '
  bn_l&=4+2*hf&          !ButtonlÑnge
  x_esc&=bn_l&*8+1       !ESC
  x_hlp&=h_max&-x_esc&   !HELP
  y_std&=23*vf&+2
  '
  DIM xf&(sp_z&+1),yf&(zl_z&+1)  !Feldpositionen
  DIM sieg&(2)
  DIM feld!(sp_z&+1,zl_z&+1)  !incl. Rand
  DIM xp&(2),yp&(2)
  DIM b_m&(9,9,9)
  DIM c_m&(8)
  DIM stein$(2)
  '
  FOR sp&=1 TO sp_z&
    xf&(sp&)=x_ofs&+fd_xd&*sp&
  NEXT sp&
  FOR zl&=1 TO zl_z&
    yf&(zl&)=y_ofs&+fd_yd&*zl&
  NEXT zl&
  '
  leer!=FALSE  !das liest
  voll!=TRUE   !sich besser
  '  Defaults & Offsets:
  mitspieler&=2
  mitspieler_ofs&=2
  level&=1
  level_ofs&=6
  '  Auswahl-Strings fÅr Siegerehrung
  '  enthÑlt jeweils zweistellig die Nummer der Antwort
  '  fÅr zufÑllige Auswahl und Umsortierung
  ' **  muû mit der Anzahl der DATAs Åbereinstimmen!  **
  sp_g$="010203040506070809101112131415161718"
  sp_v$="01020304050607080910"
RETURN
'
PROCEDURE get.palette(VAR pal$)
  pal$=""
  FOR ni&=0 TO 15
    pal$=pal$+MKI$(XBIOS(7,ni&,-1))
  NEXT ni&
RETURN
PROCEDURE set.farben
  IF alf&=2
    VSETCOLOR 0,7,7,7  !weiû
  ELSE
    VSETCOLOR 0,6,6,6  !dunkelweiû
    VSETCOLOR 1,0,0,0  !schwarz
    VSETCOLOR 2,7,0,0  !rot
    VSETCOLOR 3,3,4,5  !stahlblau
  ENDIF
RETURN
'
PROCEDURE test.virus
  LOCAL pad$,prg$,pln$,it$,prg_len%,dat_len%,bnr&
  pad$=CHR$(GEMDOS(25)+65)+":"+DIR$(0)
  IF RIGHT$(pad$,1)<>"\"
    pad$=pad$+"\"
  ENDIF
  RESTORE prg_daten
  READ prg$,pln$
  prg$=pad$+prg$
  prg_len%=VAL(MID$(pln$,2))
  IF EXIST(prg$)
    OPEN "I",#1,prg$
    dat_len%=LOF(#1)
    CLOSE #1
    IF dat_len%<prg_len%
      it$="[3][ | | ???  ERROR  ???     | ][  EXIT  ]"
      @show.alert(1,it$,bnr&)
      @short.exit
    ELSE IF dat_len%>prg_len%
      it$="[3][ | |  !!!  LINKVIRUS  !!!      | ][  KILL  |EXIT]"
      @show.alert(1,it$,bnr&)
      IF bnr&=1
        @kill.virus
      ENDIF
      @short.exit
    ENDIF
  ELSE
    @zeig.warnung
  ENDIF
RETURN
PROCEDURE kill.virus
  LOCAL prg_adr%,m_frei%
  it$="[3][ | MALLOC-ERROR!      | ][  shit  ]"
  m_frei%=(prg_len%+255) AND &HFFFF00  !durch 256 teilbar
  RESERVE -m_frei%
  prg_adr%=MALLOC(m_frei%)
  IF prg_adr%
    OPEN "I",#1,prg$
    BGET #1,prg_adr%,prg_len%
    CLOSE #1
    '  Null ans Ende schreiben, kînnte gelîscht sein
    POKE prg_adr%+prg_len%-1,0
    BSAVE prg$,prg_adr%,prg_len%
    prg_adr%=MFREE(prg_adr%)
    IF prg_adr%
      @show.alert(1,it$,bnr&)
    ENDIF
  ELSE
    @show.alert(1,it$,bnr&)
  ENDIF
  RESERVE  !wie vorher
RETURN
PROCEDURE zeig.warnung
  IF taal$="NL"
    it$="[3][ |  De test op een Link-virus |  kon niet (!)|"
    it$=it$+"  uitgevoerd worden. | ][  zeer verdacht !  ]"
  ELSE  !D
    it$="[3][ |  Der Linkvirentest       |   konnte nicht(!)|"
    it$=it$+" durchgefÅhrt werden| ][  sehr verdÑchtig!  ]"
  ENDIF
  @show.alert(1,it$,bnr&)
RETURN
PROCEDURE show.alert(bn&,VAR al$,ret&)
  @no.but
  @no.key
  DEFMOUSE 0
  SHOWM
  ret&=FORM_ALERT(bn&,al$)
  @no.but
  @no.key
RETURN
'
PROCEDURE ausgang
  ON ERROR                !damit's ein Ende hat
  SOUND 1,0,0,0,0         !Gib AIDA
  WAVE 0,0                !keine Chance
  ~XBIOS(6,L:V:top_pal$)  !alte Palette
  @set.grafik.normal
  @short.exit
RETURN
PROCEDURE short.exit
  SPOKE &H484,old_484|    !alte Einstellung
  CLS
  @no.but
  DEFMOUSE 0
  SHOWM
  EDIT
RETURN
'
PROCEDURE white.box(li&,ob&,re&,un&)
  @set.grafik.normal
  PBOX li&,ob&,re&,un&
RETURN
PROCEDURE clean
  '  fÅllt den Bildschirm (ohne Kopfzeile) mit "Hintergrund"
  ~FORM_DIAL(3,0,0,0,0,0,0,WORK_OUT(0),WORK_OUT(1))
RETURN
PROCEDURE zent(yit&,it$)
  '  zentriert den Text an der gewÅnschten y-Position
  TEXT h_mid&-LEN(it$)*4,yit&,it$
RETURN
PROCEDURE set.titel(it$)
  LOCAL lit&,xit&
  @white.box(-1,-1,h_br&,y_kln&)
  lit&=LEN(it$)
  IF lit&
    xit&=h_mid&-lit&*4
    GRAPHMODE 4
    TEXT xit&-8,y_kzl&,SPACE$(lit&+2)  !mit Rand
    GRAPHMODE 3
    TEXT xit&,y_kzl&,it$
    GRAPHMODE 1
  ENDIF
RETURN
PROCEDURE shit
  LOCAL it$,lit&,bnr&
  ON ERROR  !aus
  it$=ERR$(ERR)  !Original Fehlermeldung
  lit&=RINSTR(it$,"[")
  '  "CONT"  und  "STOP"  statt  "Return"  schont den Reset-Knopf
  it$=LEFT$(it$,lit&)+"  CONT  |STOP]"
  @show.alert(2,it$,bnr&)
  IF bnr&=1
    RESUME neu_start
  ELSE
    @ausgang
  ENDIF
RETURN
'
PROCEDURE test.wahl(VAR pt_&,pw_&)
  LOCAL test$,dummy$
  pt_&=-1  !Info-Zeilen zÑhlen
  REPEAT
    INC pt_&
    READ test$
  UNTIL test$="*"
  pw_&=-1  !Wahl-Zeilen zÑhlen
  REPEAT
    INC pw_&
    READ test$,dummy$
  UNTIL test$="*"
RETURN
PROCEDURE read.wahl(VAR pt_&,pw_&,pt_$(),pw_$(),pk_$())
  LOCAL dummy$
  ni&=0
  WHILE ni&<pt_&
    INC ni&
    READ pt_$(ni&)
  WEND
  READ dummy$  !*=Info-Ende
  ni&=0
  WHILE ni&<pw_&
    INC ni&
    READ pw_$(ni&),pk_$(ni&)
  WEND
RETURN
'
PROCEDURE pop.wahl(li&,ob&,hoz!,vez!,mk2&,VAR pt_&,az_&,pt_$(),aw_$(),cd_$(),pw_&)
  '  li& / ob&   = links/oben
  '  hoz!/vez!   = horizontal/vertikal zentriert (relativ zur Position)
  '  pt_&/pt_$() = Infotext
  '  az_&/aw_$() = Auswahlzeilen
  '  lcd&/cd_$() = LÑnge/Scancodes (bzw. Textart)
  '         mk2& = Default fÅr rechten Mausknopf
  '         pw_& = gewÑhlt (RÅckmeldung)
  '
  LOCAL ai&,aw&,re&,un&,th&,tb&,td&,lzl&,lcd&,ax&,ay&,aw$,mi&,cd$,pop_pic$
  '
  th&=8*vf&                          !Texthîhe
  td&=9*vf&                          !Textdistanz (vertikal)
  tb&=8                              !Textbreite
  HIDEM
  SGET pop_pic$                      !Hintergrund retten
  @search.max.len(re&,az_&,aw_$())
  lzl&=re&*4+4                       !Info-LÑnge merken
  @search.max.len(re&,pt_&,pt_$())
  @pop.center
  @pop.box
  mi&=(li&+re&)\2
  li&=mi&-lzl&-1
  re&=mi&+lzl&
  ay&=ob&-td&\2+vf&
  ni&=0
  WHILE ni&<pt_&                     !Infozeilen
    ADD ay&,td&
    INC ni&
    lzl&=LEN(pt_$(ni&))
    IF lzl&
      ax&=mi&-lzl&*4                 !zentriert
      TEXT ax&,ay&,pt_$(ni&)
    ENDIF
  WEND
  IF ni&                             !wenn Infozeilen:
    ADD ay&,td&\2                    !1/2 Zeile frei
    DRAW li&-tb&,ay& TO re&+tb&,ay&  !Trennlinie
  ELSE                               !sonst:
    ADD ay&,td&\4                    !1/4 Zeile frei
  ENDIF
  ob&=ay&+td&\2-2*vf&                !Auswahl oben merken
  ni&=0
  WHILE ni&<az_&                     !Auswahlzeilen
    INC ni&
    ADD ay&,td&
    lcd&=LEN(cd_$(ni&))
    IF lcd&
      IF lcd&>2                      !Auswahl:
        DEFTEXT ,0                   !normal
      ELSE IF lcd&>0                 !Kommentar:
        DEFTEXT ,VAL(cd_$(ni&))      !~Textstil
      ELSE                           !Default:
        DEFTEXT ,4                   !kursiv
      ENDIF
      ax&=mi&-LEN(aw_$(ni&))*4       !zentrieren
      TEXT ax&,ay&,aw_$(ni&)
    ENDIF
  WEND
  un&=ay&+td&\2-2*vf&                !Auswahl unten merken
  GRAPHMODE 3                        !XOR
  DEFFILL 1,1                        !voll
  pw_&=0                             !gewÑhlt
  ay&=0                              !alt
  @no.but
  @no.key
  SHOWM
  REPEAT
    @get.tom
    IF scan|                         !Taste
      cd$=RIGHT$("00"+STR$(scan|),3)
    ELSE IF mk&=2                    !MK2
      pw_&=mk2&                      !Default-Wahl
      mk&=0                          !fÅr Anzeige
    ENDIF
    '                                !innerhalb
    IF mx&>li& AND mx&<re& AND my&>ob& AND my&<un&
      aw&=(my&-ob&)\td&+1
      IF mk&=1 AND LEN(cd_$(aw&))>2  !wÑhlbar   ( mk&=1 nur innerhalb! )
        pw_&=aw&                     !gewÑhlt
      ENDIF
      my&=aw&*td&+ob&-td&
      IF my&<>ay&                    !neu
        IF ay&                       !da war noch was
          PBOX li&,ay&,re&,ay&+th&   !alt weg
          ay&=0
        ENDIF
        IF LEN(cd_$(aw&))>2          !wÑhlbar
          PBOX li&,my&,re&,my&+th&   !neu hin
          ay&=my&                    !und merken
        ENDIF
        SHOWM
      ENDIF
    ELSE                             !auûerhalb
      IF ay&                         !da war was
        PBOX li&,ay&,re&,ay&+th&     !weg
      ENDIF
      ay&=0
    ENDIF
    IF scan|                         !Taste
      ai&=1
      REPEAT                         !suchen
        IF LEN(cd_$(ai&))>2          !wÑhlbar
          IF INSTR(cd_$(ai&),cd$)    !gefunden
            pw_&=ai&                 !gewÑhlt
          ENDIF
        ENDIF
        INC ai&
      UNTIL ai&>az_& OR pw_&
    ENDIF
  UNTIL pw_&                         !bis was gewÑhlt ist!
  IF mk&=0                           !Tastenwahl zeigen
    IF ay&                           !da war noch was
      PBOX li&,ay&,re&,ay&+th&       !alt weg
    ENDIF
    my&=pw_&*td&+ob&-td&
    PBOX li&,my&,re&,my&+th&         !neu hin
    PAUSE 10                         !kurz warten
  ENDIF
  @set.grafik.normal
  SPUT pop_pic$
  @no.but
RETURN
PROCEDURE search.max.len(VAR sl&,sz&,st$())
  ni&=0
  WHILE ni&<sz&
    INC ni&
    sl&=MAX(sl&,LEN(st$(ni&)))
  WEND
RETURN
'
PROCEDURE pop.info(li&,ob&,hoz!,vez!,sec%)
  LOCAL pt_&,az_&,ai&,re&,un&,td&,tb&,lzl&,ax&,ay&,mi&,az$,pop_pic$
  HIDEM
  SGET pop_pic$
  td&=9*vf&                          !Textdistanz (vertikal)
  tb&=8                              !Textbreite
  DIM az_$(22)                       !local array
  '  "pop.info" liest die Zeilen selbst ein.
  '  Der DATA-Pointer muû deshalb vorher von
  '  der aufrufenden Routine gestellt sein.
  REPEAT
    INC az_&
    READ az_$(az_&)
    lzl&=LEN(az_$(az_&))
    re&=MAX(re&,lzl&)                !lÑngsten Eintrag finden
  UNTIL az_$(az_&)="*"
  @pop.center
  DEC az_&
  @pop.box
  mi&=(li&+re&)\2
  ay&=ob&
  FOR ai&=1 TO az_&
    az$=az_$(ai&)
    lzl&=LEN(az$)
    ax&=mi&-lzl&*4
    ADD ay&,td&
    TEXT ax&,ay&,az$
  NEXT ai&
  ERASE az_$()                       !kann weg
  SPRITE ratte$,re&-10,un&-8
  @wart.mal(sec%*200)                !Beamtenmikado
  @set.grafik.normal
  SPRITE ratte$
  SPUT pop_pic$
  SHOWM
RETURN
PROCEDURE wart.mal(wt%)                      !PhvR
  LOCAL ax&,ay&
  @no.key
  @no.but
  IF wt%<0
    wt%=12000   !Default max. 1 min warten
  ENDIF
  ADD wt%,TIMER
  ax&=MOUSEX
  ay&=MOUSEY
  REPEAT        !Beamtenmikado
    @get.tom                                      !PhvR                  !PhvR
  UNTIL mk& OR scan| OR TIMER>wt% OR ABS(mx&-ax&)>30*hf& OR ABS(my&-ay&)>30*vf&
  @no.but
RETURN
PROCEDURE pop.center
  MUL re&,tb&
  ADD re&,4
  un&=(pt_&+az_&)*td&
  '  Wenn hoz! (vez!) = TRUE, gibt li& (ob&)
  '  die relative Abweichung von der Mitte an,
  '  andernfalls die absolute Position
  '  der linken oberen Ecke.
  '  re& und un& wird berechnet und hÑngt
  '  von der Textbreite bzw. Zeilenzahl ab.
  '  Die Umrahmung (s. 'pop.box') geht jeweils
  '  um 7*hf& bzw. 7*vf& Åber diese Ecken hinaus.
  IF hoz!
    ADD li&,(h_br&-re&)\2
  ENDIF
  IF vez!
    ADD ob&,(v_ho&-un&)\2
  ENDIF
  ADD un&,ob&
  ADD re&,li&
RETURN
PROCEDURE pop.box
  @set.grafik.normal
  DEC li&
  PBOX li&-7*hf&,ob&-7*vf&,re&+7*hf&,un&+7*vf&
  BOX li&-5*hf&,ob&-5*vf&,re&+5*hf&,un&+5*vf&
  INC li&
  BOUNDARY FALSE
RETURN
PROCEDURE set.grafik.normal
  GRAPHMODE 1
  BOUNDARY TRUE
  COLOR 1
  DEFFILL 1,0,0
  DEFLINE 1,1,0,0
  DEFTEXT 1,0,0,7*vf&-1  !6/13
RETURN
PROCEDURE get.tom
  '  Taste oder Maustaste abliefern (nicht warten)
  MOUSE mx&,my&,mk&
  KEYTEST key%
  IF key%
    scan|=AND(key%,&HFF0000)\&HFFFF
    @no.key
    mk&=0
  ELSE
    scan|=0
  ENDIF
RETURN
PROCEDURE no.key
  '  Tastaturpuffer lîschen
  LPOKE XBIOS(14,1)+6,0
RETURN
PROCEDURE no.but
  WHILE MOUSEK  !fÑngt ÅberschÅssige Mausklicks ab (meistens, Sch... GEM)
    REPEAT
      ~EVNT_BUTTON(0,0,0)
      MOUSE mx&,my&,mk&
    UNTIL mk&=0
  WEND
RETURN
'
'  ===  hier beginnt das eigentliche Programm  ===
'
PROCEDURE set.1.wahl
  RESTORE 1.wahl                              !DATA-Pointer setzen
  @test.wahl(pt_1&,pw_1&)                       !zÑhlen
  DIM pt_1$(pt_1&),pw_1$(pw_1&),pk_1$(pw_1&)        !dimesionieren
  RESTORE 1.wahl                              !DATA-Pointer neu setzen
  @read.wahl(pt_1&,pw_1&,pt_1$(),pw_1$(),pk_1$())  !Arrays fÅllen
RETURN
'
PROCEDURE set.wahl.main
  @da.is.main
  @test.wahl(pt_m&,pw_m&)
  ERASE pt_m$(),pw_m$(),pk_m$()  !wegen Sprachwechsel
  DIM pt_m$(pt_m&),pw_m$(pw_m&),pk_m$(pw_m&)
  @da.is.main
  @read.wahl(pt_m&,pw_m&,pt_m$(),pw_m$(),pk_m$())
  '  separat abhaken, damit die Wahl auch nach
  '  einem Wechsel der Sprache beachtet wird
  @abhaken.mitspieler(mitspieler&)
  @abhaken.level(level&)
RETURN
PROCEDURE da.is.main                             !~NL~D~
  IF taal$="NL"
    RESTORE wahl_main_nl
  ELSE
    RESTORE wahl_main_d
  ENDIF
  '  ohne Infozeilen
  wahl_main_nl:
  DATA *
  DATA "INFO","023"
  DATA "Regels","019"
  DATA "Tegenstander :","1"
  DATA "  Mens    ","050"
  DATA "  Computer","046"
  DATA "Speelsterkte :","1"
  DATA "  1  ","002 109"
  DATA "  2  ","003 110"
  DATA "  3  ","004 111"
  DATA "Speelstand :","1"
  DATA "Op nul zetten","011 024 049 112"
  DATA "",""
  DATA "Start","031"
  DATA "----------------","2"
  DATA "      Escape      ","001"
  DATA *,""
  '
  wahl_main_d:
  DATA *
  DATA "INFO","023"
  DATA "Regeln","019"
  DATA "Mitspieler:","1"
  DATA "  Mensch  ","050"
  DATA "  Computer","046"
  DATA "SpielstÑrke:","1"
  DATA "  1  ","002 109"
  DATA "  2  ","003 110"
  DATA "  3  ","004 111"
  DATA "Spielstand:","1"
  DATA "zurÅcksetzen","021"
  DATA "",""
  DATA "Spielen","031"
  DATA "----------------","2"
  DATA "      Escape      ","001"
  DATA *,""
RETURN
PROCEDURE abhaken.mitspieler(nr&)
  IF nr&<>mitspieler&
    @stand.reset
    MID$(pw_m$(mitspieler&+mitspieler_ofs&),1)=" "
  ENDIF
  mitspieler&=nr&
  MID$(pw_m$(mitspieler&+mitspieler_ofs&),1)=""
  computer!=(mitspieler&=3)
RETURN
PROCEDURE abhaken.level(nr&)
  IF nr&<>level&
    MID$(pw_m$(level&+level_ofs&),1)=" "
  ENDIF
  level&=nr&
  MID$(pw_m$(level&+level_ofs&),1)=""
RETURN
PROCEDURE stand.reset
  ARRAYFILL sieg&(),0
RETURN
'
PROCEDURE set.wahl.genug
  @da.is.genug
  @test.wahl(pt_g&,pw_g&)
  ERASE pt_g$(),pw_g$(),pk_g$()  !wegen Sprachwechsel
  DIM pt_g$(pt_g&),pw_g$(pw_g&),pk_g$(pw_g&)
  @da.is.genug
  @read.wahl(pt_g&,pw_g&,pt_g$(),pw_g$(),pk_g$())
RETURN
PROCEDURE da.is.genug                            !~NL~D~
  IF taal$="NL"
    RESTORE wahl_genug_nl
  ELSE
    RESTORE wahl_genug_d
  ENDIF
  '
  wahl_genug_nl:
  DATA " Genoeg ? "
  DATA *
  DATA "",""
  DATA "  Ja  ","001 036 028 114"
  DATA "",""
  DATA "Nee","049 057"
  DATA "",""
  DATA *,""
  '
  wahl_genug_d:
  DATA "  Genug?  "
  DATA *
  DATA "",""
  DATA "ja","001 036 028 114"
  DATA "",""
  DATA " nein ","049 057"
  DATA "",""
  DATA *,""
RETURN
'
PROCEDURE 1.wahl
  @set.titel(" T i _ I S O L A ")
  @clean
  @pop.wahl(0,y_rel&,TRUE,TRUE,0,pt_1&,pw_1&,pt_1$(),pw_1$(),pk_1$(),wahl&)
  SELECT wahl&
  CASE 2,3
    @set.sprache(wahl&-1)
    IF check!
      '      @test.virus  ! < fÅrs fertige Programm <
      check!=FALSE
    ENDIF
    @wahl.main
  CASE 5
    @last.info
    @ausgang
  ENDSELECT
RETURN
PROCEDURE set.sprache(nr&)
  IF nr&=2
    taal$="NL"
  ELSE
    taal$="D"
  ENDIF
  @set.wahl.main
  @set.wahl.genug
RETURN
PROCEDURE last.info                              !~NL~D~
  IF taal$="NL"
    RESTORE last_info_nl
  ELSE
    RESTORE last_info_d
  ENDIF
  @pop.info(0,0,TRUE,TRUE,1)
  last_info_nl:
  DATA " tot uw dienst "
  DATA *
  last_info_d:
  DATA " servus "
  DATA *
RETURN
'
PROCEDURE wahl.main
  REPEAT
    @set.titel(" T i _ I S O L A ")
    @clean
    @pop.wahl(0,y_rel&,TRUE,TRUE,15,pt_m&,pw_m&,pt_m$(),pw_m$(),pk_m$(),wahl&)
    SELECT wahl&
    CASE 1
      @prg.info
    CASE 2
      @spiel.regeln
    CASE 4,5
      @abhaken.mitspieler(wahl&-mitspieler_ofs&)  !2=Mensch/3=Computer
    CASE 7 TO 9
      @abhaken.level(wahl&-level_ofs&)
    CASE 11
      @stand.reset
    CASE 13
      @spielen
    ENDSELECT
  UNTIL wahl&=15
RETURN
PROCEDURE prg.info                               !~NL~D~
  IF taal$="NL"
    RESTORE prg_info_nl
  ELSE
    RESTORE prg_info_d
  ENDIF
  @set.titel(" I N F O ")
  @pop.info(0,4*vf&,TRUE,TRUE,60)
  '    >Textbreite ------- 36 ------ maximal<
  prg_info_nl:
  DATA "Ti_ISOLA"
  DATA "is 'public domain',"
  DATA "loopt in alle 3 ST-resoluties en"
  DATA "'heeft iets' tegen Linkvirussen."
  DATA "Het programma is in GFA-BASIC 3.O"
  DATA "geschreven en gecompileerd en mag,"
  DATA "nee, m¢Çt doorgegeven worden -"
  DATA "maar natuurlijk uitsluitend"
  DATA "kosteloos en in zijn geheel !"
  DATA "Veel plezier !"
  DATA "De nederlandse vertaling is van"
  DATA "Philip van Rijthoven"
  DATA "Paul Krugerstraat 58"
  DATA "NL 6543 MX Nijmegen"
  DATA "Tel.: O8O-782457"
  DATA "(Danke!)"
  DATA *
  '
  prg_info_d:
  DATA
  DATA "Ti_ISOLA"
  DATA "ist  'public domain',"
  DATA "lÑuft in allen 3 ST-Auflîsungen"
  DATA "und hat 'was gegen Linkviren."
  DATA
  DATA "Das Programm ist in GFA-BASIC 3.O"
  DATA "geschrieben und compiliert und darf"
  DATA "und soll weitergegeben werden -"
  DATA "aber natÅrlich ausschlieûlich"
  DATA "kostenlos und vollstÑndig!"
  DATA
  DATA "Viel Spaû!"
  DATA *
RETURN
PROCEDURE spiel.regeln
  LOCAL it$
  IF taal$="NL"
    it$="Spelregels"
    RESTORE spiel_regeln_nl
  ELSE
    it$="Spielregeln"
    RESTORE spiel_regeln_d
  ENDIF
  @set.titel(it$)
  @pop.info(0,4*vf&,TRUE,TRUE,60)
  '
  spiel_regeln_nl:
  DATA
  DATA "De speler die"
  DATA "aan de beurt is"
  DATA "verplaatst zijn pion"
  DATA "ään stap"
  DATA " in willekeurige richting, "
  DATA "diagonaal mag ook."
  DATA
  DATA "DaarnÖ blokkeert hij"
  DATA "een veld naar keuze"
  DATA "voor zijn tegenstander."
  DATA "Maar let op :"
  DATA "op dat veld kun je zelf"
  DATA "ook niet meer komen."
  DATA
  DATA "Wie helemaal vast zit,"
  DATA "heeft verloren."
  DATA *
  spiel_regeln_d:
  DATA
  DATA "Jeder Spieler bewegt"
  DATA " abwechselnd seinen Stein "
  DATA "in beliebiger Richtung"
  DATA "(auch diagonal)"
  DATA "um einen Schritt weiter."
  DATA
  DATA "Anschlieûend nimmt er"
  DATA "dem Gegner"
  DATA "an beliebiger Stelle"
  DATA "ein Feld weg,"
  DATA "das er aber selbst"
  DATA "auch nicht mehr"
  DATA "betreten kann."
  DATA
  DATA "Wer festsitzt,"
  DATA "hat verloren."
  DATA *
RETURN
'
'  ===  hier beginnt das Spiel  ===
'
PROCEDURE spielen
  LOCAL abbruch!,ok!
  @zeig.spielfeld
  @spiel.vorbereiten
  @zeig.spielstand
  '
  REPEAT
    IF spieler&=1
      @spielerspiel
    ELSE IF computer!
      @computerspiel
    ELSE  !2.Spieler
      @spielerspiel
    ENDIF
  UNTIL rest&=0 OR abbruch!
  '  das Spiel ist aus!  /  het spel is uit !
  IF NOT abbruch!  !(~rest&=0)
    @nach.spiel
    IF computer!
      IF spieler&=1
        @dreiklang.rauf
      ELSE  !Computer hat gewonnen
        @sirene(3)
      ENDIF
      @sieger.ehrung
    ELSE
      @dreiklang.rauf
    ENDIF
    REPEAT
      @get.tom
      IF mk& OR scan|
        @pup
      ENDIF
    UNTIL my&<y_kln&
  ENDIF
RETURN
PROCEDURE zeig.spielfeld
  IF spielfeld$=""
    @gen.spielfeld
  ENDIF
  SPUT spielfeld$
RETURN
PROCEDURE gen.spielfeld
  LOCAL rl&,rr&,ro&,ru&,xd&,yd&
  @clean
  '  Rahmen auûen:
  ' rl&=15*hf&+1
  ' ro&=15*vf&+1
  ' rr&=15*hf&+1
  ' ru&=15*vf&+1
  rl&=19*hf&-4
  ro&=19*vf&-4
  rr&=19*hf&-4
  ru&=19*vf&-4
  DEFFILL 1,0
  PBOX fd_li&-rl&,fd_ob&-ro&,fd_re&+rr&,fd_un&+ru&
  '  Rahmen innen:
  rl&=3*hf&+1
  ro&=3*vf&+1
  rr&=3*hf&+1
  ru&=3*vf&+1
  IF vf&=2
    DEFFILL 1,2,4
  ELSE
    DEFFILL 3,1
  ENDIF
  PBOX fd_li&-rl&,fd_ob&-ro&,fd_re&+rr&,fd_un&+ru&
  DEFFILL 1,0
  BOX fd_li&-rl&,fd_ob&-ro&,fd_re&+rr&,fd_un&+ru&
  '  Felder:
  FOR sp&=1 TO sp_z&
    FOR zl&=1 TO zl_z&
      PBOX xf&(sp&),yf&(zl&),xf&(sp&)+fd_br&,yf&(zl&)+fd_ho&
    NEXT zl&
  NEXT sp&
  IF alf&=0
    @set.titel("Ti_ISOLA")
    xd&=4
    yd&=4
  ELSE
    @set.titel(" T i _ I S O L A ")
    IF alf&=1
      xd&=15
      yd&=4
    ELSE
      xd&=15
      yd&=15
    ENDIF
  ENDIF
  GRAPHMODE 4
  TEXT 1,y_kzl&,SPACE$(bn_l&)
  TEXT x_hlp&+1,y_kzl&,SPACE$(bn_l&)
  GRAPHMODE 3
  TEXT 8*hf&+5,y_kzl&,"ESC"
  TEXT x_hlp&+8*hf&+1,y_kzl&,"HELP"
  GRAPHMODE 1
  SPRITE knop_1$,xf&(1)+xd&,yf&(3)+yd&
  SPRITE knop_2$,xf&(8)+xd&,yf&(4)+yd&
  HIDEM
  SGET spielfeld$
  GET xf&(1),yf&(1),xf&(1)+fd_br&,yf&(1)+fd_ho&,leer$
  GET xf&(1),yf&(3),xf&(1)+fd_br&,yf&(3)+fd_ho&,stein$(1)
  GET xf&(8),yf&(4),xf&(8)+fd_br&,yf&(4)+fd_ho&,stein$(2)
  SPRITE knop_1$
  SPRITE knop_2$  !erledigt
  SHOWM
RETURN
PROCEDURE spiel.vorbereiten
  ARRAYFILL feld!(),voll!  !fÅr Rand
  FOR sp&=1 TO sp_z&
    FOR zl&=1 TO zl_z&
      feld!(sp&,zl&)=leer!
    NEXT zl&
  NEXT sp&
  feld!(1,3)=voll!
  feld!(8,4)=voll!
  xp&(1)=1
  yp&(1)=3
  xp&(2)=8
  yp&(2)=4
  spieler&=1
  gegner&=2
RETURN
PROCEDURE zeig.spielstand
  LOCAL stand$
  stand$=RIGHT$("   "+STR$(sieg&(1)),4)+"  :  "+LEFT$(STR$(sieg&(2))+"   ",4)
  @zent(y_std&,stand$)
  SHOWM
RETURN
PROCEDURE nach.spiel
  LOCAL xit&,lit&,it$
  '
  INC sieg&(spieler&)
  @zeig.sperre(xp&(gegner&),yp&(gegner&),1)
  '
  it$=" "+STR$(sieg&(spieler&))+" "
  lit&=LEN(it$)
  IF spieler&=1
    xit&=h_mid&-12-lit&*8
  ELSE
    xit&=h_mid&+12
  ENDIF
  GRAPHMODE 4
  TEXT xit&,y_std&,SPACE$(lit&)
  GRAPHMODE 3
  TEXT xit&,y_std&,it$
  @pup
  PAUSE 20
  FOR ni&=1 TO 5
    GRAPHMODE 1
    TEXT xit&,y_std&,it$
    @peng
    PAUSE 20
    GRAPHMODE 4
    TEXT xit&,y_std&,SPACE$(lit&)
    GRAPHMODE 3
    TEXT xit&,y_std&,it$
    @peng
    PAUSE 20
  NEXT ni&
  SHOWM
RETURN
'
PROCEDURE spielerspiel
  zug!=TRUE
  REPEAT
    @get.position
    IF ok!
      @test.position
    ENDIF
  UNTIL ok! OR abbruch!
  IF ok!
    @move.spieler
    zug!=FALSE
    REPEAT
      @get.position
    UNTIL ok! OR abbruch!
    IF ok!
      @feld.sperren
    ENDIF
  ENDIF
  @no.but
  DEFMOUSE 0
RETURN
PROCEDURE get.position
  GRAPHMODE 1
  maus&=spieler&*2+zug!
  DEFMOUSE maus$(maus&)
  SHOWM
  REPEAT
    ok!=FALSE
    nsp&=0
    nzl&=0
    @get.tom
    IF scan|
      IF scan|=1
        @wahl.genug
      ELSE IF scan|=98
        @show.help
      ELSE
        @pup
        @no.key
      ENDIF
    ELSE IF my&<y_kln&
      IF mx&<x_esc&
        @wahl.genug
      ELSE IF mx&>x_hlp&
        @show.help
      ENDIF
    ELSE IF mk&=1 AND mx&>fd_li& AND mx&<fd_re& AND my&>fd_ob& AND my&<fd_un&
      sp&=(mx&-x_ofs&)\fd_xd&
      zl&=(my&-y_ofs&)\fd_yd&
      IF sp&>0 AND sp&<=sp_z& AND zl&>0 AND zl&<=zl_z&
        IF mx&<xf&(sp&)+fd_br& AND my&<yf&(zl&)+fd_ho&
          nsp&=sp&
          nzl&=zl&
          ok!=(feld!(nsp&,nzl&)=leer!)
        ENDIF
      ENDIF
      IF NOT ok!
        @pup
      ENDIF
    ENDIF
  UNTIL ok! OR abbruch!
  @no.but
RETURN
PROCEDURE test.position
  dx&=ABS(xp&(spieler&)-nsp&)
  dy&=ABS(yp&(spieler&)-nzl&)
  IF feld!(nsp&,nzl&)=voll! OR dx&>1 OR dy&>1 OR (dx&=0 AND dy&=0)
    ok!=FALSE
    @pup
  ENDIF
RETURN
PROCEDURE move.spieler
  LOCAL ax&,ay&
  ax&=xp&(spieler&)
  ay&=yp&(spieler&)
  feld!(ax&,ay&)=leer!                      !altes Feld freigeben
  PUT xf&(ax&),yf&(ay&),leer$               !Stein wegnehmen und
  PUT xf&(nsp&),yf&(nzl&),stein$(spieler&)  !auf neue Position setzen
  xp&(spieler&)=nsp&                        !neue Position
  yp&(spieler&)=nzl&                        !merken
  feld!(nsp&,nzl&)=voll!                    !neues Feld besetzen
RETURN
PROCEDURE wahl.genug
  DEFMOUSE 0
  @pop.wahl(12*hf&,20*vf&,FALSE,FALSE,4,pt_g&,pw_g&,pt_g$(),pw_g$(),pk_g$(),wahl&)
  IF wahl&=2
    abbruch!=TRUE
  ELSE
    DEFMOUSE maus$(maus&)
  ENDIF
RETURN
PROCEDURE show.help
  LOCAL hx&,hy&,br&,ho&
  DEFMOUSE 2
  SHOWM
  IF zug!
    @best.move(spieler&)  !Zug fÅr Spielstein suchen
  ELSE
    @best.move(gegner&)   !Platz fÅr Sperre suchen
  ENDIF
  hx&=xf&(nsp&)
  hy&=yf&(nzl&)
  IF zug!
    PUT hx&,hy&,stein$(spieler&)
  ELSE
    br&=fd_br&\4
    ho&=fd_ho&\4
    DEFFILL 1,1
    PBOX hx&+br&,hy&+ho&,hx&+fd_br&-br&,hy&+fd_ho&-ho&
    DEFFILL 1,0
  ENDIF
  @flip
  @flip
  REPEAT  !3* oder mehr
    @flip
    @get.tom
  UNTIL scan|<>98 AND (my&>y_kln& OR mx&<x_hlp&)
  PUT hx&,hy&,leer$
  ok!=FALSE
  DEFMOUSE maus$(maus&)
  SHOWM
RETURN
PROCEDURE flip
  VSYNC
  PUT hx&,hy&,leer$,10  !NOT Z
  PAUSE 10
RETURN
'
PROCEDURE computerspiel
  HIDEM
  @best.move(spieler&)  !Zug fÅr Spielstein suchen
  @move.spieler
  @best.move(gegner&)   !Platz fÅr Sperre suchen
  @feld.sperren
  SHOWM
RETURN
PROCEDURE best.move(nr&)  !noch nicht fehlerfrei!
  '  Der Name tÑuscht, meist geht es besser.
  LOCAL xbm&,ybm&,cbm&,jbm&,kbm&,nbm&,x1&,y1&
  xbm&=xp&(nr&)
  ybm&=yp&(nr&)
  ARRAYFILL c_m&(),0
  nbm&=0
  FOR hbm&=-1 TO 1
    FOR vbm&=-1 TO 1
      IF hbm&<>0 OR vbm&<>0  !nur Nachbarfelder
        IF feld!(xbm&+hbm&,ybm&+vbm&)=leer!
          INC nbm&
          b_m&(nbm&,0,0)=(xbm&+hbm&)*10+ybm&+vbm&
        ENDIF
      ENDIF
    NEXT vbm&
  NEXT hbm&
  b_m&(0,0,0)=nbm&
  c_m&(0)=nbm&
  FOR ibm&=1 TO c_m&(0)
    nbm&=0
    x1&=b_m&(ibm&,0,0)\10
    y1&=b_m&(ibm&,0,0) MOD 10
    FOR hbm&=-1 TO 1
      FOR vbm&=-1 TO 1
        IF hbm&<>0 OR vbm&<>0
          IF feld!(x1&+hbm&,y1&+vbm&)=leer!
            IF x1&+hbm&<>xbm& OR y1&+vbm&<>ybm&
              INC nbm&
              b_m&(ibm&,nbm&,0)=(x1&+hbm&)*10+y1&+vbm&
            ENDIF
          ENDIF
        ENDIF
      NEXT vbm&
    NEXT hbm&
    b_m&(0,ibm&,0)=nbm&
    c_m&(ibm&)=nbm&+1
  NEXT ibm&
  IF level&>1
    FOR ibm&=1 TO c_m&(0)
      FOR jbm&=1 TO b_m&(0,ibm&,0)
        nbm&=0
        x1&=b_m&(ibm&,jbm&,0)\10
        y1&=b_m&(ibm&,jbm&,0) MOD 10
        FOR hbm&=-1 TO 1
          FOR vbm&=-1 TO 1
            IF hbm&<>0 OR vbm&<>0
              IF feld!(x1&+hbm&,y1&+vbm&)=leer!
                IF x1&+hbm&<>xbm& OR y1&+vbm&<>ybm&
                  INC c_m&(ibm&)
                  INC nbm&
                  b_m&(ibm&,jbm&,nbm&)=(x1&+hbm&)*10+y1&+vbm&
                ENDIF
              ENDIF
            ENDIF
          NEXT vbm&
        NEXT hbm&
        b_m&(0,ibm&,jbm&)=nbm&
      NEXT jbm&
    NEXT ibm&
  ENDIF
  IF level&>2
    FOR ibm&=1 TO c_m&(0)
      FOR jbm&=1 TO b_m&(0,ibm&,0)
        FOR kbm&=1 TO b_m&(0,ibm&,jbm&)
          nbm&=0
          x1&=b_m&(ibm&,jbm&,kbm&)\10
          y1&=b_m&(ibm&,jbm&,kbm&) MOD 10
          FOR hbm&=-1 TO 1
            FOR vbm&=-1 TO 1
              IF hbm&<>0 OR vbm&<>0
                IF feld!(x1&+hbm&,y1&+vbm&)=leer!
                  IF x1&+hbm&<>xbm& OR y1&+vbm&<>ybm&
                    INC c_m&(ibm&)
                  ENDIF
                ENDIF
              ENDIF
            NEXT vbm&
          NEXT hbm&
        NEXT kbm&
      NEXT jbm&
    NEXT ibm&
  ENDIF
  nbm&=c_m&(1)
  cbm&=1
  FOR ibm&=2 TO c_m&(0)
    IF c_m&(ibm&)>=nbm&
      nbm&=c_m&(ibm&)
      cbm&=ibm&
    ENDIF
  NEXT ibm&
  nsp&=b_m&(cbm&,0,0)\10
  nzl&=b_m&(cbm&,0,0) MOD 10
RETURN
'
PROCEDURE feld.sperren
  LOCAL sd&,zd&
  @zeig.sperre(nsp&,nzl&,0)
  feld!(nsp&,nzl&)=voll!
  rest&=0  !Kontrolle, ob Spiel aus
  FOR sd&=-1 TO 1
    FOR zd&=-1 TO 1
      IF feld!(xp&(gegner&)+sd&,yp&(gegner&)+zd&)=leer!
        INC rest&
      ENDIF
    NEXT zd&
  NEXT sd&
  IF rest&>0  !nÑchster Spieler
    SWAP spieler&,gegner&
  ENDIF
RETURN
PROCEDURE zeig.sperre(sp&,zl&,art&)
  LOCAL xd%,yd%,xi%,yi%,xs%,ys%,bis%
  xd%=fd_br&\2
  yd%=fd_ho&\2
  xi%=xd%+xf&(sp&)
  yi%=yd%+yf&(zl&)
  xs%=hf&/2
  ys%=vf&/2
  IF art&=1
    bis%=yd%*(4-vf&)/4
  ENDIF
  GRAPHMODE 1
  REPEAT
    BOX xi%-xd%,yi%-yd%,xi%+xd%,yi%+yd%
    SOUND 1,xd%\2+3,1,1
    PAUSE 1
    ' SUB xd%,xs%
    ' SUB yd%,ys%
    DEC xd%
    DEC yd%
  UNTIL yd%<bis%
  SOUND 1,0,0,0,0  !a Ruh is
RETURN
'
PROCEDURE peng
  ~XBIOS(32,L:peng_sd%)
RETURN
PROCEDURE pup
  LOCAL per%,dif%
  per%=2400
  dif%=60
  PAUSE 2
  REPEAT
    SOUND 1,15,#per%,0
    ADD per%,dif%
    DEC dif%
  UNTIL per%>4000
  SOUND 1,0,0,0,0  !a Ruh is
RETURN
PROCEDURE dreiklang.rauf
  LOCAL level%
  SOUND 1,15,1,4,4
  SOUND 1,15,5,4,4
  SOUND 1,15,8,4,4
  FOR level%=15 DOWNTO 0
    SOUND 1,level%,8,5,5
  NEXT level%
  SOUND 1,0,0,0,0
RETURN
PROCEDURE sirene(nz&)
  LOCAL ni&,sd&
  ni&=nz&
  WHILE ni&>0
    FOR sd&=1 TO 8
      SOUND 1,15,sd&,4,1
    NEXT sd&
    PAUSE 5
    DEC ni&
  WEND
  SOUND 1,0,0,0,0
RETURN
'
PROCEDURE sieger.ehrung
  LOCAL fertig!
  IF spieler&=1
    IF taal$="NL"
      RESTORE spiel_gewonnen_nl
    ELSE
      RESTORE spiel_gewonnen_d
    ENDIF
    @get.kommentar(6,sp_g$)
  ELSE
    IF taal$="NL"
      RESTORE spiel_verloren_nl
    ELSE
      RESTORE spiel_verloren_d
    ENDIF
    @get.kommentar(3,sp_v$)
  ENDIF
  '
  spiel_gewonnen_nl:
  DATA 1,
  DATA " Jij hebt gewonnen."
  DATA "Proficiat !",,*
  DATA 2,
  DATA "Wat had je weer"
  DATA " een hoop geluk ! ",,*
  DATA 3,
  DATA " Ik heb zeker ään momentje "
  DATA "niet goed opgelet ...",,*
  DATA 4,
  DATA " Neem me niet kwalijk "
  DATA "dat ik verloren heb.",,*
  DATA 5,
  DATA " Bah! Jij speelt volgens mij "
  DATA "alleen om te winnen !",,*
  DATA 6,
  DATA "Waarom laat je mij"
  DATA " ook niet een keer winnen ? ",,*
  DATA 7,
  DATA " Dat vind ik niet eerlijk ! "
  DATA "Jij wint gewoon.",,*
  DATA 8,
  DATA "Ja, met veel geluk"
  DATA " kan iederään winnen ! ",,*
  DATA 9,
  DATA "Maar eigenlijk had ik"
  DATA " toch bijna gewonnen ... ",,*
  DATA 10,
  DATA "Moet je weer"
  DATA " per se winnen ? ",,*
  DATA 11,
  DATA "Ik heb verloren !"
  DATA " Jij was gewoon beter. ",,*
  DATA 12,
  DATA " Ja, op deze manier is er "
  DATA "geen lol meer aan !",,*
  DATA 13,
  DATA "Ik weet niet zeker, of ik"
  DATA " zï nog wel verder wil spelen. ",,*
  DATA 14,
  DATA " Ik begin te denken, dat je mij "
  DATA "gewoon niet wilt laten winnen.",,*
  DATA 15,
  DATA "Okay, jij mag ook"
  DATA " wel een keertje winnen. ",,*
  DATA 16,
  DATA "Ik was bang, dat je zou gaan"
  DATA " huilen, als je niet zou winnen. ",,*
  DATA 17,
  DATA " Als jij gespeeld had zoals ik, "
  DATA "dan had je ook verloren.",,*
  DATA 18,
  DATA "Je hebt geluk, dat ik"
  DATA " vandaag niet zo in vorm ben ! ",,*
  '
  spiel_gewonnen_d:
  DATA 1,
  DATA "Du hast"
  DATA "(leider)"
  DATA " gewonnen! ",,*
  DATA 2,
  DATA "Da hast Du aber"
  DATA " viel GlÅck gehabt ",,*
  DATA 3,
  DATA " Ich hab wohl einen Moment "
  DATA "nicht richtig aufgepaût",,*
  DATA 4,
  DATA "Entschuldige bitte,"
  DATA " daû ich verloren habe. ",,*
  DATA 5,
  DATA "Pfui!"
  DATA "Du spielst ja"
  DATA " um zu gewinnen. ",,*
  DATA 6,
  DATA "Warum lÑût Du mich"
  DATA " nicht mal gewinnen? ",,*
  DATA 7,
  DATA " Das find ich aber unfair! "
  DATA "Du gewinnst ja einfach.",,*
  DATA 8,
  DATA "Na mit viel GlÅck"
  DATA " kann ja jeder gewinnen! ",,*
  DATA 9,
  DATA " Eigentlich hÑtte ich ja "
  DATA "fast gewonnen.",,*
  DATA 10,
  DATA " Muût Du unbedingt "
  DATA "gewinnen?",,*
  DATA 11,
  DATA " Du verlierst wohl "
  DATA "nicht gern?",,*
  DATA 12,
  DATA " Du verdirbst einem "
  DATA "ja jeden Spaû!",,*
  DATA 13,
  DATA "Ich frage mich,"
  DATA "ob ich mit Dir"
  DATA " noch spielen soll. ",,*
  DATA 14,
  DATA " Ich glaube, Du willst mich "
  DATA "nicht gewinnen lassen.",,*
  DATA 15,
  DATA " Na gut, Du muût ja "
  DATA "auch mal gewinnen.",,*
  DATA 16,
  DATA "Ich konnte Dir"
  DATA " einfach nicht wehtun. ",,*
  DATA 17,
  DATA " HÑttest Du wie ich gespielt, "
  DATA "hÑttest Du auch verloren.",,*
  DATA 18,
  DATA " Du hast GlÅck, daû es mir "
  DATA "heut' nicht so gut geht.",,*
  '
  spiel_verloren_nl:
  DATA 1,
  DATA "Hoera !"
  DATA " Jij hebt verloren ! ",,*
  DATA 2,
  DATA " Dat wist ik van te voren al "
  DATA "dat jij zou verliezen.",,*
  DATA 3,
  DATA "Had jij soms gedacht"
  DATA " dat je kon winnen ?!? ",,*
  DATA 4,
  DATA "Sorry,"
  DATA " volgende beter. ",,*
  DATA 5,
  DATA " Dacht je soms ... ? "
  DATA "Mooi niet !",,*
  DATA 6,
  DATA "Volhouden,"
  DATA " jij wint ook nog wel een keer ! ",,*
  DATA 7,
  DATA "Zo, daar heb je wel"
  DATA " je buik van vol hä !? ",,*
  DATA 8,
  DATA " Ja, als je zï speelt,"
  DATA " win ik natuurlijk.",,*
  DATA 9,
  DATA " Je doet toch nog wel mee ? ",,*
  DATA 10,
  DATA " Volgende keer verlies ik, "
  DATA "misschien ...",,*
  '
  spiel_verloren_d:
  DATA 1,
  DATA "Hurra!"
  DATA " Du hast verloren! ",,*
  DATA 2,
  DATA " Das war mir klar, "
  DATA "daû Du verlierst.",,*
  DATA 3,
  DATA "Hast Du etwas"
  DATA " anderes erwartet? ",,*
  DATA 4,
  DATA "War doch klar,"
  DATA " daû ich gewinne. ",,*
  DATA 5,
  DATA " Du hast wohl gedacht..? "
  DATA "War aber nicht!",,*
  DATA 6,
  DATA " Wolltest Du etwa "
  DATA "gewinnen ???",,*
  DATA 7,
  DATA " Na, das ging wohl "
  DATA "in die Hose!?",,*
  DATA 8,
  DATA " Ja, wenn Du so spielst, "
  DATA "gewinne ich natÅrlich.",,*
  DATA 9,
  DATA "Hat da einer von uns"
  DATA " etwa nicht aufgepaût? ",,*
  DATA 10,
  DATA " Du muût mich auch mal "
  DATA "verlieren lassen.",,*
RETURN
PROCEDURE get.kommentar(rz&,VAR km$)
  ' ( rz& ist nur etwa ein Drittel der Zahl der zugehîrigen Kommentare )
  LOCAL zp&,zz&,kr&,test$
  '  Zufallsposition zp& aus rz&...
  zp&=RANDOM(rz&)*2+1
  '  und Teil rechts davon ermitteln
  kr&=LEN(km$)-zp&-1
  '  entsprechende Zahl lesen
  zz&=VAL(MID$(km$,zp&,2))
  '  und ans Ende schieben, um schnelle Wiederholung zu vermeiden
  km$=LEFT$(km$,zp&-1)+RIGHT$(km$,kr&)+MID$(km$,zp&,2)
  '  READ-Pointer fÅr pop.info stellen
  REPEAT
    READ test$
  UNTIL VAL(test$)=zz&
  '  ... bis die Zahl gefunden ist
  @pop.info(0,0,TRUE,TRUE,60)
RETURN
'
' === Ti ===
