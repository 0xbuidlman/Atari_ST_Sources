' ============================================================
'    Ti_XPLOD
' D:
'    Dieses Listing darf ausschlieûlich privat benutzt werden.
'    Wenn Sie mehr wollen, wenden Sie sich an den Autor.
'    Wenn Sie das Programm verÑndern, schicken Sie dem Autor
'    bitte ein Belegexemplar.
' NL:
'    De listing mag alleen strikt privÇ gebruikt worden.
'    Wilt u meer neem dan kontakt op met de auteur.
'    Ook wanneer u voor eigen gebruik veranderingen aanbrengt
'    wordt hij graag op de hoogte gehouden.            GfA gg.
'
INLINE peng_sd%,30
INLINE rat_spr%,74
' D:
'    Wenn das LST-File mit MERGE geladen wird,
'    mÅssen die INLINEs mit HELP nachgeladen werden!
' NL:
'    Als de LST-file (met Merge) geladen wordt,
'    moeten de INLINE's met HELP apart geladen worden.
'
' ============================================================
'       Label und VormenÅ zur Wahl der Sprache:
1.wahl:
DATA
DATA "  V.:  3.O / O6.12.91  "
DATA "(public domain)"
DATA "Ω"
DATA "Rudolf Tiemann"
DATA "Tel.: O6733-62O5"
DATA "Donnersbergstr.14"
DATA "65O9 Gau-Odernheim"
DATA "(West Germany)"
DATA
DATA *
DATA "",""
DATA "Deutsch","032"
DATA "Nederlands","049"
DATA "",""
DATA "    Escape    ","001"
DATA "",""
DATA *,""
'
prg_daten:
DATA "Ti_XPLOD.PRG"
DATA "=38969 Bytes ΩTi"
' D:
'    ->^^^^^^<- hier drÅber muû nach dem 1.Compilieren
'    linksbÅndig die genaue Grîûe eingetragen werden,
'    dann folgt das endgÅltige 2.Compilieren
'    (wichtig fÅr den Linkvirentest)
' NL:
'    ->^^^^^^<- hierboven moet na de eerste keer compileren
'    links-aangeschoven de exacte grootte aangegeven worden.
'    Pas daarna kan definitief gecompileerd worden.
'    (i.v.m. Linkvirustest)
'
'   > Compiler-Anweisungen:
$S&  !2-Byte-Select-Parameter
$S<  !Select optimieren auf LÑnge
$P>  !Procedures: als GFA-Routinen
$%3  !IntDiv immer als Integer
$*%  !LongMul nicht mit MULS
$B+  !Meldung statt Bomben
$E$  !Fehler-Texte  (fÅr Routine 'shit')
$C+  !bei C:-Aufrufen Register auf Stack retten und restaurieren
$I+  !Interrupt zulassen  (hier wegen Sound!)
' $U+  !hinter jedem Befehl C&S&A, EVERY, AFTER prÅfen
'
' ===========================================================
'
@pre.set
'
neu_start:
ON ERROR GOSUB shit
DO
  @1.wahl
LOOP
END
'
'
' ===========================================================
'
PROCEDURE pre.set
  MENU KILL
  DEFMOUSE 2
  SHOWM
  old_484|=PEEK(&H484)  !Einstellung retten
  SPOKE &H484,BCLR(PEEK(&H484),0)  !T-Klick aus
  SPOKE &H484,BSET(PEEK(&H484),1)  !Key-rep ein
  SPOKE &H484,BCLR(PEEK(&H484),2)  !Klingel aus
  alf&=XBIOS(4)   !0 1 2
  hf&=2+(alf&<1)  !1 2 2 Horizontalfaktor
  vf&=2+(alf&<2)  !1 1 2 Vertikalfaktor
  '  Die Positionen werden gewîhnlich so angegeben,
  '  daû sie fÅr die niedrige Auflîsung stimmen.
  '  Sie werden vom Programm mittels der Faktoren
  '  hf& und vf& an die aktuelle Auflîsung angepaût.
  h_max&=WORK_OUT(0)
  v_max&=WORK_OUT(1)
  CLIP 0,0 TO h_max&,v_max&  !Clipping richtig(!) setzen
  CLS
  y_kzl&=7*vf&    !Y-Kopfzeile
  y_kln&=8*vf&+2  !Y-Kopflinie
  h_br&=h_max&+1
  v_ho&=v_max&+1
  h_mid&=h_br&\2
  v_mid&=v_ho&\2
  h_rd&=2*hf&
  v_rd&=2*vf&
  '
  ratte$=SPACE$(74)
  BMOVE rat_spr%,V:ratte$,74
  '  Ratte als Sprite (funktioniert in allen Auflîsungen)
  top_pal$=""
  @get.palette(top_pal$)  !Farbpalette des Desktop retten
  check!=TRUE  !fÅr Linkvirentest
  '  programmspezifisch:
  @pre.set.special
  @set.farben
  @set.grafik.normal
  @set.1.wahl
  DEFMOUSE 0
RETURN
PROCEDURE get.palette(VAR pal$)
  pal$=""
  FOR ni&=0 TO 15
    pal$=pal$+MKI$(XBIOS(7,ni&,-1))
  NEXT ni&
RETURN
PROCEDURE pre.set.special
  LOCAL br&,ho&,ym&
  '  Spielfeld:
  sp_z&=6
  zl_z&=6
  DIM xf&(sp_z&),yf&(zl_z&)
  DIM bl&(sp_z&,zl_z&),rt&(sp_z&,zl_z&),besitzer&(sp_z&,zl_z&)
  DIM bl$(6),rt$(6)
  DIM sieg&(2)
  '
  fd_br&=24*hf&
  fd_ho&=24*vf&
  fd_xd&=26*hf&  !30
  fd_yd&=26*vf&
  br&=fd_xd&*(sp_z&-1)+fd_br&
  ho&=fd_yd&*(zl_z&-1)+fd_ho&
  ym&=v_mid&+y_kln&\2+1
  fd_li&=h_mid&-br&\2-1
  fd_re&=h_mid&+br&\2-1
  fd_ob&=ym&-ho&\2-1
  fd_un&=ym&+ho&\2-1
  x_ofs&=fd_li&-fd_xd&   !X-
  y_ofs&=fd_ob&-fd_yd&   !Y-Offset
  bn_l&=4+2*hf&          !ButtonlÑnge
  x_esc&=bn_l&*8+1       !ESC
  FOR sp&=1 TO sp_z&
    xf&(sp&)=x_ofs&+fd_xd&*sp&
  NEXT sp&
  FOR zl&=1 TO zl_z&
    yf&(zl&)=y_ofs&+fd_yd&*zl&
  NEXT zl&
  '                      Rand
  x_sp1&=(fd_li&-fd_br&-16*hf&)\2-3*hf&
  x_sp2&=h_max&-x_sp1&-fd_br&-6*hf&
  y_spi&=ym&-fd_ho&\2-3*vf&
  y_std&=21*vf&
RETURN
PROCEDURE set.farben
  SELECT alf&
  CASE 0
    VSETCOLOR 0,6,6,6  !dunkelweiss
    VSETCOLOR 1,0,0,0  !schwarz
    VSETCOLOR 2,7,0,0  !rot
    VSETCOLOR 3,3,4,5  !stahlblau
    VSETCOLOR 4,0,0,7  !blau
    VSETCOLOR 5,7,7,0  !gelb
  CASE 1
    VSETCOLOR 0,6,6,6  !dunkelweiss
    VSETCOLOR 1,0,0,0  !schwarz
    VSETCOLOR 2,7,0,0  !rot
    VSETCOLOR 3,0,0,7  !blau
  DEFAULT
    ' Vsetcolor 0,1  !schwarz auf weiû
  ENDSELECT
RETURN
'
PROCEDURE test.virus
  LOCAL pad$,prg$,pln$,it$,prg_len%,dat_len%,dummy&
  pad$=CHR$(GEMDOS(25)+65)+":"+DIR$(0)
  IF RIGHT$(pad$,1)<>"\"
    pad$=pad$+"\"
  ENDIF
  RESTORE prg_daten
  READ prg$,pln$
  prg$=pad$+prg$
  prg_len%=VAL(MID$(pln$,2))
  IF EXIST(prg$)
    OPEN "I",#1,prg$
    dat_len%=LOF(#1)
    CLOSE #1
    IF dat_len%<prg_len%
      @set.color(3,7,0,0)
      it$="[3][ | | ???  ERROR  ???     | ][  EXIT  ]"
      @show.alert(1,it$,dummy&)
      @short.exit
    ELSE IF dat_len%>prg_len%
      @set.color(3,7,0,0)
      it$="[3][ | |  !!!  LINKVIRUS  !!!      | ][  KILL  |EXIT]"
      @show.alert(1,it$,antw&)
      IF antw&=1
        @kill.virus
      ENDIF
      @short.exit
    ENDIF
  ELSE
    @set.color(3,7,0,0)
    @zeig.warnung
  ENDIF
RETURN
PROCEDURE kill.virus
  LOCAL prg_adr%,m_frei%
  it$="[3][ | MALLOC-ERROR!      | ][  shit  ]"
  m_frei%=(prg_len%+255) AND &HFFFF00  !durch 256 teilbar
  RESERVE -m_frei%
  prg_adr%=MALLOC(m_frei%)
  IF prg_adr%
    OPEN "I",#1,prg$
    BGET #1,prg_adr%,prg_len%
    CLOSE #1
    '  Null ans Ende schreiben, kînnte gelîscht sein
    POKE prg_adr%+prg_len%-1,0
    BSAVE prg$,prg_adr%,prg_len%
    prg_adr%=MFREE(prg_adr%)
    IF prg_adr%
      @show.alert(1,it$,dummy&)
    ENDIF
  ELSE
    @show.alert(1,it$,dummy&)
  ENDIF
  RESERVE  !wie vorher
RETURN
PROCEDURE zeig.warnung
  IF taal$="NL"
    it$="[3][ |  De test op een Link-virus |  kon niet (!)|"
    it$=it$+"  uitgevoerd worden. | ][  zeer verdacht !  ]"
  ELSE
    it$="[3][ |  Der Linkvirentest       |   konnte nicht(!)|"
    it$=it$+" durchgefÅhrt werden| ][  hîchst verdÑchtig!  ]"
  ENDIF
  @show.alert(1,it$,dummy&)
RETURN
PROCEDURE show.alert(bn&,VAR al$,ret&)
  @no.but
  @no.key
  DEFMOUSE 0
  SHOWM
  ret&=FORM_ALERT(bn&,al$)
  @no.but
  @no.key
RETURN
'
PROCEDURE ausgang
  ON ERROR                !damit's ein Ende hat
  SOUND 1,0,0,0,0         !Gib AIDA
  WAVE 0,0                !keine Chance
  ~XBIOS(6,L:V:top_pal$)  !alte Palette
  @set.grafik.normal
  @short.exit
RETURN
PROCEDURE short.exit
  SPOKE &H484,old_484|    !alte Einstellung
  CLS
  @no.but
  DEFMOUSE 0
  SHOWM
  EDIT
RETURN
'
PROCEDURE set.color(nr&,rt&,gn&,bl&)
  IF alf&<2  !nur bei Farbe
    IF alf&<1 OR nr&<4
      VSETCOLOR nr&,rt&,gn&,bl&
    ENDIF
  ENDIF
RETURN
PROCEDURE white.box(li&,ob&,re&,un&)
  @set.grafik.normal
  PBOX li&,ob&,re&,un&
RETURN
PROCEDURE clean
  '  fÅllt den Bildschirm (ohne Kopfzeile) mit "Hintergrund"
  ~FORM_DIAL(3,0,0,0,0,0,0,WORK_OUT(0),WORK_OUT(1))
RETURN
PROCEDURE zent(yit&,it$)
  '  zentriert den Text an der gewÅnschten y-Position
  TEXT h_mid&-LEN(it$)*4,yit&,it$
RETURN
PROCEDURE set.titel(it$)
  LOCAL lit&,xit&
  @white.box(-1,-1,h_br&,y_kln&)
  lit&=LEN(it$)
  IF lit&
    xit&=h_mid&-lit&*4
    GRAPHMODE 4
    TEXT xit&-8,y_kzl&,SPACE$(lit&+2)
    GRAPHMODE 3
    TEXT xit&,y_kzl&,it$
    GRAPHMODE 1
  ENDIF
RETURN
PROCEDURE shit
  LOCAL it$,lit&,bnr&
  ON ERROR  !aus
  it$=ERR$(ERR)  !Original Fehlermeldung
  lit&=RINSTR(it$,"[")
  '  "CONT"  und  "STOP"  statt  "Return"  schont den Reset-Knopf
  it$=LEFT$(it$,lit&)+"  CONT  |STOP]"
  @show.alert(2,it$,bnr&)
  IF bnr&=1
    RESUME neu_start
  ELSE
    @ausgang
  ENDIF
RETURN
'
PROCEDURE test.wahl(VAR it_&,pw_&)
  LOCAL test$,dummy$
  it_&=-1  !Info-Zeilen zÑhlen
  REPEAT
    INC it_&
    READ test$
  UNTIL test$="*"
  pw_&=-1  !Wahl-Zeilen zÑhlen
  REPEAT
    INC pw_&
    READ test$,dummy$
  UNTIL test$="*"
RETURN
PROCEDURE read.wahl(VAR it_&,pw_&,pt_$(),pw_$(),pk_$())
  LOCAL dummy$
  ni&=0
  WHILE ni&<it_&
    INC ni&
    READ pt_$(ni&)
  WEND
  READ dummy$  !*=Info-Ende
  ni&=0
  WHILE ni&<pw_&
    INC ni&
    READ pw_$(ni&),pk_$(ni&)
  WEND
RETURN
'
PROCEDURE pop.wahl(li&,ob&,hoz!,vez!,mk2&,VAR pt_&,az_&,pt_$(),aw_$(),cd_$(),pw_&)
  '  li& / ob&   = links/oben
  '  hoz!/vez!   = horizontal/vertikal zentriert (relativ zur Position)
  '  pt_&/pt_$() = Infotext
  '  az_&/aw_$() = Auswahlzeilen
  '  lcd&/cd_$() = LÑnge/Scancodes (bzw. Textart)
  '         mk2& = Default fÅr rechten Mausknopf
  '         pw_& = gewÑhlt (RÅckmeldung)
  '
  LOCAL ai&,aw&,re&,un&,th&,tb&,td&,lzl&,lcd&,ax&,ay&,aw$,mi&,cd$,pop_pic$
  '
  th&=8*vf&                          !Texthîhe
  td&=9*vf&                          !Textdistanz (vertikal)
  tb&=8                              !Textbreite
  HIDEM
  SGET pop_pic$                      !Hintergrund retten
  @search.max.len(re&,az_&,aw_$())
  lzl&=re&*4+4                       !Info-LÑnge merken
  @search.max.len(re&,pt_&,pt_$())
  @pop.center
  @pop.box
  mi&=(li&+re&)\2
  li&=mi&-lzl&-1
  re&=mi&+lzl&
  ay&=ob&-td&\2+vf&
  ni&=0
  WHILE ni&<pt_&                     !Infozeilen
    ADD ay&,td&
    INC ni&
    lzl&=LEN(pt_$(ni&))
    IF lzl&
      ax&=mi&-lzl&*4                 !zentriert
      TEXT ax&,ay&,pt_$(ni&)
    ENDIF
  WEND
  IF ni&                             !wenn Infozeilen:
    ADD ay&,td&\2                    !1/2 Zeile frei
    DRAW li&-tb&,ay& TO re&+tb&,ay&  !Trennlinie
  ELSE                               !sonst:
    ADD ay&,td&\4                    !1/4 Zeile frei
  ENDIF
  ob&=ay&+td&\2-2*vf&                !Auswahl oben merken
  ni&=0
  WHILE ni&<az_&                     !Auswahlzeilen
    INC ni&
    ADD ay&,td&
    lcd&=LEN(cd_$(ni&))
    IF lcd&
      IF lcd&>2                      !Auswahl:
        DEFTEXT ,0                   !normal
      ELSE IF lcd&>0                 !Kommentar:
        DEFTEXT ,VAL(cd_$(ni&))      !~Textstil
      ELSE                           !Default:
        DEFTEXT ,4                   !kursiv
      ENDIF
      ax&=mi&-LEN(aw_$(ni&))*4       !zentrieren
      TEXT ax&,ay&,aw_$(ni&)
    ENDIF
  WEND
  un&=ay&+td&\2-2*vf&                !Auswahl unten merken
  GRAPHMODE 3                        !XOR
  DEFFILL 1,1                        !voll
  pw_&=0                             !gewÑhlt
  ay&=0                              !alt
  @no.but
  @no.key
  SHOWM
  REPEAT
    @get.tom
    IF scan|                         !Taste
      cd$=RIGHT$("00"+STR$(scan|),3)
    ELSE IF mk&=2                    !MK2
      pw_&=mk2&                      !Default-Wahl
      mk&=0                          !fÅr Anzeige
    ENDIF
    '                                !innerhalb
    IF mx&>li& AND mx&<re& AND my&>ob& AND my&<un&
      aw&=(my&-ob&)\td&+1
      IF mk&=1 AND LEN(cd_$(aw&))>2  !wÑhlbar   ( mk&=1 nur innerhalb! )
        pw_&=aw&                     !gewÑhlt
      ENDIF
      my&=aw&*td&+ob&-td&
      IF my&<>ay&                    !neu
        IF ay&                       !da war noch was
          PBOX li&,ay&,re&,ay&+th&   !alt weg
          ay&=0
        ENDIF
        IF LEN(cd_$(aw&))>2          !wÑhlbar
          PBOX li&,my&,re&,my&+th&   !neu hin
          ay&=my&                    !und merken
        ENDIF
        SHOWM
      ENDIF
    ELSE                             !auûerhalb
      IF ay&                         !da war was
        PBOX li&,ay&,re&,ay&+th&     !weg
      ENDIF
      ay&=0
    ENDIF
    IF scan|                         !Taste
      ai&=1
      REPEAT                         !suchen
        IF LEN(cd_$(ai&))>2          !wÑhlbar
          IF INSTR(cd_$(ai&),cd$)    !gefunden
            pw_&=ai&                 !gewÑhlt
          ENDIF
        ENDIF
        INC ai&
      UNTIL ai&>az_& OR pw_&
    ENDIF
  UNTIL pw_&                         !bis was gewÑhlt ist!
  IF mk&=0                           !Tastenwahl zeigen
    IF ay&                           !da war noch was
      PBOX li&,ay&,re&,ay&+th&       !alt weg
    ENDIF
    my&=pw_&*td&+ob&-td&
    PBOX li&,my&,re&,my&+th&         !neu hin
    PAUSE 10                         !kurz warten
  ENDIF
  @set.grafik.normal
  SPUT pop_pic$
  @no.but
RETURN
PROCEDURE search.max.len(VAR sl&,sz&,st$())
  ni&=0
  WHILE ni&<sz&
    INC ni&
    sl&=MAX(sl&,LEN(st$(ni&)))
  WEND
RETURN
'
PROCEDURE pop.info(li&,ob&,hoz!,vez!,sec%)
  LOCAL pt_&,az_&,ai&,re&,un&,td&,tb&,lzl&,ax&,ay&,mi&,az$,pop_pic$
  HIDEM
  SGET pop_pic$
  td&=9*vf&                          !Textdistanz (vertikal)
  tb&=8                              !Textbreite
  DIM az_$(22)                       !local array
  '  "pop.info" liest die Zeilen selbst ein.
  '  Der DATA-Pointer muû deshalb vorher von
  '  der aufrufenden Routine gestellt sein.
  REPEAT
    INC az_&
    READ az_$(az_&)
    lzl&=LEN(az_$(az_&))
    re&=MAX(re&,lzl&)                !lÑngsten Eintrag finden
  UNTIL az_$(az_&)="*"
  @pop.center
  DEC az_&
  @pop.box
  mi&=(li&+re&)\2
  ay&=ob&
  FOR ai&=1 TO az_&
    az$=az_$(ai&)
    lzl&=LEN(az$)
    ax&=mi&-lzl&*4
    ADD ay&,td&
    TEXT ax&,ay&,az$
  NEXT ai&
  ERASE az_$()                       !kann weg
  SPRITE ratte$,re&-10,un&-8
  @wart.mal(sec%*200)                !Beamtenmikado
  @set.grafik.normal
  SPRITE ratte$
  SPUT pop_pic$
  SHOWM
RETURN
PROCEDURE wart.mal(wt%)                         !PhvR
  LOCAL ax&,ay&
  @no.key
  @no.but
  IF wt%<0
    wt%=12000   !Default max. 1 min warten
  ENDIF
  ADD wt%,TIMER
  ax&=MOUSEX
  ay&=MOUSEY
  REPEAT        !Beamtenmikado
    @get.tom                                      !PhvR                  PhvR
  UNTIL mk& OR scan| OR TIMER>wt% OR ABS(mx&-ax&)>30*hf& OR ABS(my&-ay&)>30*vf&
  @no.but
RETURN
PROCEDURE pop.center
  MUL re&,tb&
  ADD re&,4
  un&=(pt_&+az_&)*td&
  '  Wenn hoz! (vez!) = TRUE, gibt li& (ob&)
  '  die relative Abweichung von der Mitte an,
  '  andernfalls die absolute Position
  '  der linken oberen Ecke.
  '  re& und un& wird berechnet und hÑngt
  '  von der Textbreite bzw. Zeilenzahl ab.
  '  Die Umrahmung (s. 'pop.box') geht jeweils
  '  um 7*hf& bzw. 7*vf& Åber diese Ecken hinaus.
  IF hoz!
    ADD li&,(h_br&-re&)\2
  ENDIF
  IF vez!
    ADD ob&,(v_ho&-un&)\2
  ENDIF
  ADD un&,ob&
  ADD re&,li&
RETURN
PROCEDURE pop.box
  @set.grafik.normal
  DEC li&
  PBOX li&-7*hf&,ob&-7*vf&,re&+7*hf&,un&+7*vf&
  BOX li&-5*hf&,ob&-5*vf&,re&+5*hf&,un&+5*vf&
  INC li&
  BOUNDARY FALSE
RETURN
PROCEDURE set.grafik.normal
  GRAPHMODE 1
  BOUNDARY TRUE
  COLOR 1
  DEFFILL 1,0,0
  DEFLINE 1,1,0,0
  DEFTEXT 1,0,0,7*vf&-1  !6/13
RETURN
PROCEDURE get.tom
  '  Taste oder Maustaste abliefern (nicht warten)
  MOUSE mx&,my&,mk&
  KEYTEST key%
  IF key%
    scan|=AND(key%,&HFF0000)\&HFFFF
    @no.key
    mk&=0
  ELSE
    scan|=0
  ENDIF
RETURN
PROCEDURE no.key
  '  Tastaturpuffer lîschen
  LPOKE XBIOS(14,1)+6,0
RETURN
PROCEDURE no.but
  WHILE MOUSEK  !fÑngt ÅberschÅssige Mausklicks ab (meistens, Sch... GEM)
    REPEAT
      ~EVNT_BUTTON(0,0,0)
      MOUSE mx&,my&,mk&
    UNTIL mk&=0
  WEND
RETURN
'
'  ===  hier beginnt das eigentliche Programm  ===
'
PROCEDURE set.1.wahl
  RESTORE 1.wahl                                   !DATA-Pointer setzen
  @test.wahl(pt_1&,pw_1&)                          !zÑhlen
  DIM pt_1$(pt_1&),pw_1$(pw_1&),pk_1$(pw_1&)       !dimesionieren
  RESTORE 1.wahl                                   !DATA-Pointer neu setzen
  @read.wahl(pt_1&,pw_1&,pt_1$(),pw_1$(),pk_1$())  !Arrays fÅllen
RETURN
'
PROCEDURE set.wahl.main
  @da.is.main
  @test.wahl(pt_m&,pw_m&)
  ERASE pt_m$(),pw_m$(),pk_m$()  !wegen Sprachwechsel
  DIM pt_m$(pt_m&),pw_m$(pw_m&),pk_m$(pw_m&)
  @da.is.main
  @read.wahl(pt_m&,pw_m&,pt_m$(),pw_m$(),pk_m$())
RETURN
PROCEDURE da.is.main                             !~NL~D~
  IF taal$="NL"
    RESTORE wahl_main_nl
  ELSE
    RESTORE wahl_main_d
  ENDIF
  '  ohne Infozeilen
  wahl_main_nl:
  DATA *
  DATA "",""
  DATA "INFO","023"
  DATA "",""
  DATA "Regels","019"
  DATA "",""
  DATA "Speelstand :","1"
  DATA "Op nul zetten","011 024 049 112"
  DATA "",""
  DATA "Start","031"
  DATA "----------------","2"
  DATA "      Escape      ","001"
  DATA "",""
  DATA *,""
  '
  wahl_main_d:
  DATA *
  DATA "",""
  DATA "INFO","023"
  DATA "",""
  DATA "Regeln","019"
  DATA "",""
  DATA "Spielstand:","1"
  DATA "zurÅcksetzen","021"
  DATA "",""
  DATA "Spielen","031"
  DATA "----------------","2"
  DATA "      Escape      ","001"
  DATA "",""
  DATA *,""
RETURN
PROCEDURE stand.reset
  ARRAYFILL sieg&(),0
RETURN
'
PROCEDURE set.wahl.genug
  @da.is.genug
  @test.wahl(pt_g&,pw_g&)
  ERASE pt_g$(),pw_g$(),pk_g$()  !wegen Sprachwechsel
  DIM pt_g$(pt_g&),pw_g$(pw_g&),pk_g$(pw_g&)
  @da.is.genug
  @read.wahl(pt_g&,pw_g&,pt_g$(),pw_g$(),pk_g$())
RETURN
PROCEDURE da.is.genug                            !~NL~D~
  IF taal$="NL"
    RESTORE wahl_genug_nl
  ELSE
    RESTORE wahl_genug_d
  ENDIF
  '
  wahl_genug_nl:
  DATA " Genoeg ? "
  DATA *
  DATA "",""
  DATA "Ja","001 036 028 114"
  DATA "",""
  DATA " Nee ","049 057"
  DATA "",""
  DATA *,""
  '
  wahl_genug_d:
  DATA "  Genug?  "
  DATA *
  DATA "",""
  DATA "ja","001 036 028 114"
  DATA "",""
  DATA " nein ","049 057"
  DATA "",""
  DATA *,""
RETURN
'
PROCEDURE 1.wahl
  @set.color(3,3,4,5)  !graublau
  @set.titel(" T i _ X P L O D ")
  @clean
  @pop.wahl(0,0,TRUE,TRUE,0,pt_1&,pw_1&,pt_1$(),pw_1$(),pk_1$(),wahl&)
  SELECT wahl&
  CASE 2,3
    @set.sprache(wahl&-1)
    IF check!
      '      @test.virus  ! < fÅrs fertige Programm <
      check!=FALSE
    ENDIF
    @wahl.main
  CASE 5
    @last.info
    @ausgang
  ENDSELECT
RETURN
PROCEDURE set.sprache(nr&)
  IF nr&=2
    taal$="NL"
  ELSE
    taal$="D"
  ENDIF
  @set.wahl.main
  @set.wahl.genug
RETURN
PROCEDURE last.info                              !~NL~D~
  IF taal$="NL"
    RESTORE last_info_nl
  ELSE
    RESTORE last_info_d
  ENDIF
  @pop.info(0,0,TRUE,TRUE,1)
  last_info_nl:
  DATA " tot uw dienst "
  DATA *
  last_info_d:
  DATA " servus "
  DATA *
RETURN
'
PROCEDURE wahl.main
  REPEAT
    @set.color(3,3,4,5)  !graublau
    @set.titel(" T i _ X P L O D ")
    @clean
    @pop.wahl(0,0,TRUE,TRUE,11,pt_m&,pw_m&,pt_m$(),pw_m$(),pk_m$(),wahl&)
    SELECT wahl&
    CASE 2
      @prg.info
    CASE 4
      @spiel.regeln
    CASE 7
      @stand.reset
    CASE 9
      @spielen
    ENDSELECT
  UNTIL wahl&=11
RETURN
'
PROCEDURE prg.info
  IF taal$="NL"
    RESTORE prg_info_nl
  ELSE
    RESTORE prg_info_d
  ENDIF
  @set.titel(" I N F O ")
  @pop.info(0,4*vf&,TRUE,TRUE,60)
  '
  prg_info_nl:
  DATA "Ti_XPLOD is 'public domain',"
  DATA "loopt in alle 3 ST-resoluties en"
  DATA "'heeft iets' tegen Linkvirussen."
  DATA "Het programma is in GFA-BASIC 3.0"
  DATA "geschreven en gecompileerd en mag,"
  DATA "nee, m¢Çt doorgegeven worden -"
  DATA "maar natuurlijk uitsluitend"
  DATA "kosteloos en in zijn geheel !"
  DATA "Veel plezier !"
  DATA "De nederlandse vertaling is van"
  DATA "Philip van Rijthoven"
  DATA "Paul Krugerstraat 58"
  DATA "NL 6543 MX Nijmegen"
  DATA "Tel.: O8O-782457"
  DATA "(Danke!)"
  DATA *
  '
  prg_info_d:
  DATA
  DATA "Ti_XPLOD ist 'public domain',"
  DATA "lÑuft in allen 3 ST-Auflîsungen"
  DATA "und hat 'was gegen Linkviren."
  DATA "Das Programm ist in GFA-BASIC 3.0"
  DATA "geschrieben und compiliert und darf"
  DATA "und soll weitergegeben werden - aber"
  DATA "natÅrlich ausschlieûlich kostenlos!"
  DATA "Und damit es auch kostenlos bleibt,"
  DATA "schicken Sie dem Autor bitte"
  DATA "kein (!) Geld."
  DATA
  DATA "Viel Spaû!"
  DATA *
RETURN
PROCEDURE spiel.regeln !PhvR
  LOCAL it$
  IF taal$="NL"
    it$="Spelregels"
    RESTORE spiel_regeln_nl
  ELSE
    it$="Spielregeln"
    RESTORE spiel_regeln_d
  ENDIF
  @set.titel(it$)
  @pop.info(0,4*vf&,TRUE,TRUE,60)
  '
  spiel_regeln_nl:
  DATA
  DATA "Ti_XPLOD is een spel voor twee"
  DATA "personen. De spelers mogen"
  DATA "om beurten een knop zetten op"
  DATA "een veld dat niet door de"
  DATA "tegenstander bezet of omsingeld is."
  '                        ist oder war !!!
  ' Trotzdem glaube ich das es so richtig (eben richtiger ?) ist :
  ' "ein Feld dat nicht durch den Gegner besetzt oder eingekreist ist." PhvR
  DATA "Hoekvelden kunnen maar ään knop"
  DATA "verdragen, randvelden twee, en de"
  DATA "andere velden kunnen er drie hebben."
  DATA "Zodra een veld meer knoppen"
  DATA "krijgt dan aangegeven,"
  DATA "explodeert het."
  DATA "Daardoor worden de aangrenzende"
  DATA "velden veroverd - ongeacht,"
  DATA "wie ze daarvïïr in bezit had."
  DATA "Wie al zijn knoppen kwijt is,"
  DATA "heeft verloren."
  DATA *
  spiel_regeln_d:
  DATA
  DATA "Ti_XPLOD ist ein Spiel fÅr zwei"
  DATA "Personen. Jeder Spieler darf"
  DATA "abwechselnd ein Feld besetzen,"
  DATA "das nicht im Besitz des Gegners"
  DATA "ist oder war."
  DATA "Eckfelder fassen nur einen Knopf,"
  DATA "Randfelder fassen zwei Knîpfe"
  DATA "und die anderen fassen drei."
  DATA "Sobald in ein Feld mehr Knîpfe"
  DATA "gelangen als dieses faût,"
  DATA "explodiert es."
  DATA "Dadurch werden die Nachbarfelder"
  DATA "erobert - gleichgÅltig,"
  DATA "wem sie zuvor gehîrten."
  DATA "Wer keine Knîpfe mehr hat,"
  DATA "hat das Spiel verloren."
  DATA *
RETURN
'
'  ===  hier beginnt das Spiel  ===
'
PROCEDURE spielen
  LOCAL genug!,aus!
  @set.color(4,4,4,4)  !grau
  @set.color(3,0,0,7)  !blau
  REPEAT
    @zeig.spielfeld
    @spiel.vorbereiten
    aus!=FALSE
    REPEAT
      @get.tom
      IF scan|=1 OR (my&<y_kln& AND mx&<x_esc&)
        @wahl.genug
      ELSE IF mk&=1
        IF mx&>fd_li& AND mx&<fd_re& AND my&>fd_ob& AND my&<fd_un&
          @spiel.zug
        ELSE
          @pup
        ENDIF
        @no.but
        SHOWM
      ENDIF
    UNTIL genug! OR aus!
    IF NOT genug!
      @nach.spiel
      @wahl.genug
    ENDIF
  UNTIL genug!
RETURN
PROCEDURE zeig.spielfeld
  IF spielfeld$=""
    @gen.spielfeld
  ENDIF
  SPUT spielfeld$
RETURN
PROCEDURE gen.spielfeld
  LOCAL hr&,vr&,xd&,yd&
  @set.grafik.normal
  IF alf&=0
    @set.titel("Ti_XPLOD")
  ELSE
    @set.titel(" T i _ X P L O D ")
  ENDIF
  GRAPHMODE 4
  TEXT 1,y_kzl&,SPACE$(bn_l&)
  GRAPHMODE 3
  TEXT 8*hf&+5,y_kzl&,"ESC"
  GRAPHMODE 1
  @set.fill
  PBOX -1,y_kln&,h_br&,v_ho&
  '  Rahmen auûen:
  hr&=16*hf&
  vr&=16*vf&
  DEFFILL 1,0
  PBOX fd_li&-hr&-hf&+1,fd_ob&-vr&-vf&+1,fd_re&+hr&+hf&-1,fd_un&+vr&+vf&-1
  '  Rahmen innen:
  hr&=2*hf&
  vr&=2*vf&
  @set.fill
  PBOX fd_li&-hr&-hf&+1,fd_ob&-vr&-vf&+1,fd_re&+hr&+hf&-1,fd_un&+vr&+vf&-1
  DEFFILL 1,0
  '  Felder:
  FOR sp&=1 TO sp_z&
    FOR zl&=1 TO zl_z&
      PBOX xf&(sp&),yf&(zl&),xf&(sp&)+fd_br&,yf&(zl&)+fd_ho&
    NEXT zl&
  NEXT sp&
  HIDEM
  SGET spielfeld$
  @gen.knoepfe
  GET x_sp1&,y_spi&,x_sp1&+fd_br&+6*hf&,y_spi&+fd_ho&+6*vf&,bl_weg$
  GET x_sp2&,y_spi&,x_sp2&+fd_br&+6*hf&,y_spi&+fd_ho&+6*vf&,rt_weg$
  PBOX x_sp1&,y_spi&,x_sp1&+fd_br&+6*hf&,y_spi&+fd_ho&+6*vf&
  PBOX x_sp2&,y_spi&,x_sp2&+fd_br&+6*hf&,y_spi&+fd_ho&+6*vf&
  PUT x_sp1&+3*hf&,y_spi&+3*vf&,bl$(1)
  PUT x_sp2&+3*hf&,y_spi&+3*vf&,rt$(1)
  GET x_sp1&,y_spi&,x_sp1&+fd_br&+6*hf&,y_spi&+fd_ho&+6*vf&,bl_hin$
  GET x_sp2&,y_spi&,x_sp2&+fd_br&+6*hf&,y_spi&+fd_ho&+6*vf&,rt_hin$
  SHOWM
RETURN
PROCEDURE set.fill
  SELECT alf&
  CASE 0
    @set.color(4,4,4,4)
    DEFFILL 4,1
  CASE 1
    DEFFILL 1,1
  DEFAULT
    DEFFILL 1,2,4
  ENDSELECT
RETURN
PROCEDURE gen.knoepfe
  LOCAL hb&,hh&,ok&,op&,zy&,up&,uk&,dx&,dy&,rx&,ry&   ! konstant
  LOCAL lk&,lp&,zx&,rp&,rk&,ni&                       ! variabel
  hb&=fd_br&\2         ! halbe Breite
  hh&=fd_ho&\2         ! halbe Hîhe
  dx&=6*hf&            ! PunktabstÑnde
  dy&=6*vf&
  rx&=2*hf&+1          ! Punktradien
  ry&=2*vf&+1
  zy&=yf&(1)+fd_ho&\2  ! V-Mitte
  ok&=zy&-hh&          ! Rand oben
  uk&=zy&+hh&          ! Rand unten
  op&=zy&-dy&          ! Punkte oben
  up&=zy&+dy&          ! Punkte unten
  lk&=xf&(1)
  rk&=lk&+fd_br&
  zx&=lk&+hb&
  GET lk&,ok&,rk&,uk&,bl$(0)
  rt$(0)=bl$(0)
  ni&=1
  IF alf&=2
    DEFFILL 1,0
  ELSE
    DEFFILL 3,1
  ENDIF
  PELLIPSE zx&,zy&,rx&,ry&
  GET lk&,ok&,rk&,uk&,bl$(ni&)
  DEFFILL 2,1
  PELLIPSE zx&,zy&,rx&,ry&
  GET lk&,ok&,rk&,uk&,rt$(ni&)
  ni&=2
  ADD lk&,fd_xd&
  ADD rk&,fd_xd&
  zx&=lk&+hb&
  lp&=zx&-dx&
  rp&=zx&+dx&
  IF alf&=2
    DEFFILL 1,0
  ELSE
    DEFFILL 3,1
  ENDIF
  PELLIPSE rp&,op&,rx&,ry&
  PELLIPSE lp&,up&,rx&,ry&
  GET lk&,ok&,rk&,uk&,bl$(ni&)
  DEFFILL 2,1
  PELLIPSE rp&,op&,rx&,ry&
  PELLIPSE lp&,up&,rx&,ry&
  GET lk&,ok&,rk&,uk&,rt$(ni&)
  ni&=3
  ADD lk&,fd_xd&
  ADD rk&,fd_xd&
  zx&=lk&+hb&
  lp&=zx&-dx&
  rp&=zx&+dx&
  IF alf&=2
    DEFFILL 1,0
  ELSE
    DEFFILL 3,1
  ENDIF
  PELLIPSE lp&,op&,rx&,ry&
  PELLIPSE zx&,zy&,rx&,ry&
  PELLIPSE rp&,up&,rx&,ry&
  GET lk&,ok&,rk&,uk&,bl$(ni&)
  DEFFILL 2,1
  PELLIPSE lp&,op&,rx&,ry&
  PELLIPSE zx&,zy&,rx&,ry&
  PELLIPSE rp&,up&,rx&,ry&
  GET lk&,ok&,rk&,uk&,rt$(ni&)
  ni&=4
  ADD lk&,fd_xd&
  ADD rk&,fd_xd&
  zx&=lk&+hb&
  lp&=zx&-dx&
  rp&=zx&+dx&
  IF alf&=2
    DEFFILL 1,0
  ELSE
    DEFFILL 3,1
  ENDIF
  PELLIPSE lp&,op&,rx&,ry&
  PELLIPSE rp&,op&,rx&,ry&
  PELLIPSE lp&,up&,rx&,ry&
  PELLIPSE rp&,up&,rx&,ry&
  GET lk&,ok&,rk&,uk&,bl$(ni&)
  DEFFILL 2,1
  PELLIPSE lp&,op&,rx&,ry&
  PELLIPSE rp&,op&,rx&,ry&
  PELLIPSE lp&,up&,rx&,ry&
  PELLIPSE rp&,up&,rx&,ry&
  GET lk&,ok&,rk&,uk&,rt$(ni&)
  ni&=5
  ADD lk&,fd_xd&
  ADD rk&,fd_xd&
  zx&=lk&+hb&
  lp&=zx&-dx&
  rp&=zx&+dx&
  IF alf&=2
    DEFFILL 1,0
  ELSE
    DEFFILL 3,1
  ENDIF
  PELLIPSE lp&,op&,rx&,ry&
  PELLIPSE rp&,op&,rx&,ry&
  PELLIPSE zx&,zy&,rx&,ry&
  PELLIPSE lp&,up&,rx&,ry&
  PELLIPSE rp&,up&,rx&,ry&
  GET lk&,ok&,rk&,uk&,bl$(ni&)
  DEFFILL 2,1
  PELLIPSE lp&,op&,rx&,ry&
  PELLIPSE rp&,op&,rx&,ry&
  PELLIPSE zx&,zy&,rx&,ry&
  PELLIPSE lp&,up&,rx&,ry&
  PELLIPSE rp&,up&,rx&,ry&
  GET lk&,ok&,rk&,uk&,rt$(ni&)
  ni&=6
  ADD lk&,fd_xd&
  ADD rk&,fd_xd&
  zx&=lk&+hb&
  lp&=zx&-dx&
  rp&=zx&+dx&
  IF alf&=2
    DEFFILL 1,0
  ELSE
    DEFFILL 3,1
  ENDIF
  PELLIPSE lp&,op&,rx&,ry&
  PELLIPSE rp&,op&,rx&,ry&
  PELLIPSE lp&,zy&,rx&,ry&
  PELLIPSE rp&,zy&,rx&,ry&
  PELLIPSE lp&,up&,rx&,ry&
  PELLIPSE rp&,up&,rx&,ry&
  GET lk&,ok&,rk&,uk&,bl$(ni&)
  DEFFILL 2,1
  PELLIPSE lp&,op&,rx&,ry&
  PELLIPSE rp&,op&,rx&,ry&
  PELLIPSE lp&,zy&,rx&,ry&
  PELLIPSE rp&,zy&,rx&,ry&
  PELLIPSE lp&,up&,rx&,ry&
  PELLIPSE rp&,up&,rx&,ry&
  GET lk&,ok&,rk&,uk&,rt$(ni&)
  DEFFILL 1,0
  SPUT spielfeld$
RETURN
PROCEDURE spiel.vorbereiten
  ARRAYFILL bl&(),0
  ARRAYFILL rt&(),0
  ARRAYFILL besitzer&(),0
  blau&=0
  rot&=0
  spieler&=1
  gegner&=2
  oper&=1
  WAVE 1,1,0,3000
  @zeig.spielstand
  @spieler.hin(spieler&)
  SHOWM
RETURN
PROCEDURE zeig.spielstand
  LOCAL stand$
  stand$=RIGHT$("   "+STR$(sieg&(1)),4)+"  :  "+LEFT$(STR$(sieg&(2))+"   ",4)
  @zent(y_std&,stand$)
RETURN
PROCEDURE wahl.genug
  @pop.wahl(12*hf&,20*vf&,FALSE,FALSE,4,pt_g&,pw_g&,pt_g$(),pw_g$(),pk_g$(),wahl&)
  genug!=(wahl&=2)
  SHOWM
RETURN
'
PROCEDURE spiel.zug
  xp&=(mx&-x_ofs&)\fd_xd&
  yp&=(my&-y_ofs&)\fd_yd&
  IF xp&>0 AND xp&<=sp_z& AND yp&>0 AND yp&<=zl_z&
    IF mx&<xf&(xp&)+fd_br& AND my&<xf&(yp&)+fd_ho&
      IF besitzer&(xp&,yp&)<>gegner&
        ON spieler& GOSUB bl.zug,rt.zug
        IF NOT aus!
          @spieler.weg(spieler&)
          SWAP spieler&,gegner&
          @spieler.hin(spieler&)
          INC oper&
        ENDIF
      ELSE
        @pup
      ENDIF
    ELSE
      @pup
    ENDIF
  ELSE
    @pup
  ENDIF
RETURN
'
PROCEDURE bl.zug
  @bl.zu(xp&,yp&)
  @bl.explode
  REPEAT
    yp&=1
    REPEAT
      xp&=1
      REPEAT
        @bl.explode
        INC xp&
      UNTIL xp&>sp_z&
      INC yp&
    UNTIL yp&>zl_z&
    noch&=0
    yp&=1
    REPEAT
      xp&=1
      REPEAT
        gw&=3+(xp&=1 OR xp&=sp_z&)+(yp&=1 OR yp&=zl_z&)
        IF bl&(xp&,yp&)>gw&
          INC noch&
        ENDIF
        INC xp&
      UNTIL xp&>sp_z&
      INC yp&
    UNTIL yp&>zl_z&
    IF rot&<1 AND oper&>2
      noch&=0
      aus!=TRUE
    ENDIF
  UNTIL noch&=0
RETURN
PROCEDURE bl.explode
  gw&=3+(xp&=1 OR xp&=sp_z&)+(yp&=1 OR yp&=zl_z&)
  IF bl&(xp&,yp&)>gw&
    SOUND 1,15,8,4,1
    WAVE 0,0
    IF xp&>1
      @bl.ab
      @bl.zu(xp&-1,yp&)
    ENDIF
    IF xp&<sp_z&
      @bl.ab
      @bl.zu(xp&+1,yp&)
    ENDIF
    IF yp&>1
      @bl.ab
      @bl.zu(xp&,yp&-1)
    ENDIF
    IF yp&<zl_z&
      @bl.ab
      @bl.zu(xp&,yp&+1)
    ENDIF
  ENDIF
RETURN
PROCEDURE bl.ab
  DEC bl&(xp&,yp&)
  PUT xf&(xp&),yf&(yp&),bl$(bl&(xp&,yp&))
  IF bl&(xp&,yp&)=0
    DEC blau&
  ENDIF
RETURN
PROCEDURE bl.zu(xi&,yi&)
  IF rt&(xi&,yi&)>0
    SWAP bl&(xi&,yi&),rt&(xi&,yi&)
    INC bl&(xi&,yi&)
    INC blau&
    DEC rot&
    besitzer&(xi&,yi&)=1
  ELSE
    IF bl&(xi&,yi&)=0
      INC blau&
      besitzer&(xi&,yi&)=1
    ENDIF
    INC bl&(xi&,yi&)
  ENDIF
  PUT xf&(xi&),yf&(yi&),bl$(bl&(xi&,yi&))
RETURN
'
PROCEDURE rt.zug
  @rt.zu(xp&,yp&)
  @rt.explode
  REPEAT
    yp&=1
    REPEAT
      xp&=1
      REPEAT
        @rt.explode
        INC xp&
      UNTIL xp&>sp_z&
      INC yp&
    UNTIL yp&>zl_z&
    noch&=0
    yp&=1
    REPEAT
      xp&=1
      REPEAT
        gw&=3+(xp&=1 OR xp&=sp_z&)+(yp&=1 OR yp&=zl_z&)
        IF rt&(xp&,yp&)>gw&
          INC noch&
        ENDIF
        INC xp&
      UNTIL xp&>sp_z&
      INC yp&
    UNTIL yp&>zl_z&
    IF blau&=0 AND oper&>2
      noch&=0
      aus!=TRUE
    ENDIF
  UNTIL noch&=0
RETURN
PROCEDURE rt.explode
  gw&=3+(xp&=1 OR xp&=sp_z&)+(yp&=1 OR yp&=zl_z&)
  IF rt&(xp&,yp&)>gw&
    SOUND 1,15,8,4,1
    WAVE 0,0
    IF xp&>1
      @rt.ab
      @rt.zu(xp&-1,yp&)
    ENDIF
    IF xp&<sp_z&
      @rt.ab
      @rt.zu(xp&+1,yp&)
    ENDIF
    IF yp&>1
      @rt.ab
      @rt.zu(xp&,yp&-1)
    ENDIF
    IF yp&<zl_z&
      @rt.ab
      @rt.zu(xp&,yp&+1)
    ENDIF
  ENDIF
RETURN
PROCEDURE rt.ab
  DEC rt&(xp&,yp&)
  PUT xf&(xp&),yf&(yp&),rt$(rt&(xp&,yp&))
  IF rt&(xp&,yp&)=0
    DEC rot&
  ENDIF
RETURN
PROCEDURE rt.zu(xi&,yi&)
  IF bl&(xi&,yi&)>0
    SWAP rt&(xi&,yi&),bl&(xi&,yi&)
    INC rt&(xi&,yi&)
    INC rot&
    DEC blau&
    besitzer&(xi&,yi&)=2
  ELSE
    IF rt&(xi&,yi&)=0
      INC rot&
      besitzer&(xi&,yi&)=2
    ENDIF
    INC rt&(xi&,yi&)
  ENDIF
  PUT xf&(xi&),yf&(yi&),rt$(rt&(xi&,yi&))
RETURN
'
PROCEDURE nach.spiel
  LOCAL lit&,it$,xit&
  '
  INC sieg&(spieler&)
  it$=" "+STR$(sieg&(spieler&))+" "
  lit&=LEN(it$)
  IF spieler&=1
    xit&=h_mid&-12-lit&*8
  ELSE
    xit&=h_mid&+12
  ENDIF
  @spieler.weg(spieler&)
  GRAPHMODE 4
  TEXT xit&,y_std&,SPACE$(lit&)
  GRAPHMODE 3
  TEXT xit&,y_std&,it$
  @sirene(3)
  PAUSE 20
  FOR ni&=1 TO 5
    GRAPHMODE 1
    TEXT xit&,y_std&,it$
    @spieler.hin(spieler&)
    @peng
    PAUSE 20
    GRAPHMODE 4
    TEXT xit&,y_std&,SPACE$(lit&)
    GRAPHMODE 3
    TEXT xit&,y_std&,it$
    @spieler.weg(spieler&)
    @peng
    PAUSE 20
  NEXT ni&
  GRAPHMODE 1
  SHOWM
RETURN
PROCEDURE spieler.hin(nr&)
  IF nr&=1
    PUT x_sp1&,y_spi&,bl_hin$
  ELSE
    PUT x_sp2&,y_spi&,rt_hin$
  ENDIF
RETURN
PROCEDURE spieler.weg(nr&)
  IF nr&=1
    PUT x_sp1&,y_spi&,bl_weg$
  ELSE
    PUT x_sp2&,y_spi&,rt_weg$
  ENDIF
RETURN
'
PROCEDURE pup
  LOCAL per%,dif%
  per%=2400
  dif%=60
  PAUSE 2
  REPEAT
    SOUND 1,15,#per%,0
    ADD per%,dif%
    DEC dif%
  UNTIL per%>4000
  SOUND 1,0,0,0,0  !a Ruh is
RETURN
PROCEDURE sirene(nz&)
  LOCAL ni&,sd&
  ni&=nz&
  WHILE ni&>0
    FOR sd&=1 TO 8
      SOUND 1,15,sd&,4,1
    NEXT sd&
    PAUSE 5
    DEC ni&
  WEND
  SOUND 1,0,0,0,0
RETURN
PROCEDURE peng
  ~XBIOS(32,L:peng_sd%)
RETURN
'
' == Ti ==
