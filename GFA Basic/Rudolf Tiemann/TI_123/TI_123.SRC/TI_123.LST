' ============================================================
'    Ti_123
' D:
'    Dieses Listing darf ausschlieûlich privat benutzt werden.
'    Wenn Sie mehr wollen, wenden Sie sich an den Autor.
'    Wenn Sie das Programm verÑndern, schicken Sie dem Autor
'    bitte ein Belegexemplar.
' NL:
'    De listing mag alleen strikt privÇ gebruikt worden.
'    Wilt u meer neem dan kontakt op met de auteur.
'    Ook wanneer u voor eigen gebruik veranderingen aanbrengt
'    wordt hij graag op de hoogte gehouden.            GfA gg.
'
'        !+++  3 INLINEs  in 'pre.set.special'  +++
' D:
'    Wenn das LST-File (mit Merge) geladen wird,
'    mÅssen die INLINEs mit HELP nachgeladen werden!
' NL:
'    Als de LST-file (met Merge) geladen wordt,
'    moeten de INLINE's met HELP apart geladen worden.
'
' ============================================================
'       Label und VormenÅ zur Wahl der Sprache:
1.wahl:
DATA
DATA "  V.:  3.O / O6.12.91  "
DATA "(public domain)"
DATA "Ω"
DATA "Rudolf Tiemann"
DATA "Tel.: O6733-62O5"
DATA "Donnersbergstr.14"
DATA "65O9 Gau-Odernheim"
DATA "(West Germany)"
DATA
DATA *
DATA "",""
DATA "Deutsch","032"
DATA "Nederlands","049"
DATA "",""
DATA "    Escape    ","001"
DATA "",""
DATA *,""
'
prg_daten:
DATA "Ti_123.PRG"
DATA "=38782 Bytes ΩTi"
' D:
'    ->^^^^^^<- hier drÅber muû nach dem 1.Compilieren
'    linksbÅndig die genaue Grîûe eingetragen werden,
'    dann folgt das endgÅltige 2.Compilieren
'    (wichtig fÅr den Linkvirentest)
' NL:
'    ->^^^^^^<- hierboven moet na de eerste keer compileren
'    links-aangeschoven de exacte grootte aangegeven worden.
'    Pas daarna kan definitief gecompileerd worden.
'    (i.v.m. Linkvirustest)
'
'   > Compiler-Anweisungen:
$S&  !2-Byte-Select-Parameter
$S<  !Select optimieren auf LÑnge
$P>  !Procedures: als GFA-Routinen
$%3  !IntDiv immer als Integer
$*%  !LongMul nicht mit MULS
$B+  !Meldung statt Bomben
$E$  !Fehler-Texte  (fÅr Routine 'shit')
$C+  !bei C:-Aufrufen Register auf Stack retten und restaurieren
$I+  !Interrupt zulassen
' $U+  !hinter jedem Befehl C&S&A, EVERY, AFTER prÅfen
'
' ===========================================================
'
'
@pre.set
'
neu_start:
ON ERROR GOSUB shit
DO
  @1.wahl
LOOP
END
'
'
' ===========================================================
'
PROCEDURE pre.set
  MENU KILL
  DEFMOUSE 2
  SHOWM
  old_484|=PEEK(&H484)             !Einstellung retten
  SPOKE &H484,BCLR(PEEK(&H484),0)  !T-Klick aus
  SPOKE &H484,BSET(PEEK(&H484),1)  !Key-rep ein
  SPOKE &H484,BCLR(PEEK(&H484),2)  !Klingel aus
  alf&=XBIOS(4)   !0 1 2
  hf&=2+(alf&<1)  !1 2 2 Horizontalfaktor
  vf&=2+(alf&<2)  !1 1 2 Vertikalfaktor
  '  Die Positionen werden gewîhnlich so angegeben,
  '  daû sie fÅr die niedrige Auflîsung stimmen.
  '  Sie werden vom Programm mittels der Faktoren
  '  hf& und vf& an die aktuelle Auflîsung angepaût.
  h_max&=WORK_OUT(0)
  v_max&=WORK_OUT(1)
  CLIP 0,0 TO h_max&,v_max&   !Clipping richtig(!) setzen
  CLS
  y_kzl&=7*vf&                !y Kopfzeile
  y_kln&=y_kzl&+2+vf&         !y Kopflinie
  h_br&=h_max&+1
  h_mid&=h_br&\2
  v_ho&=v_max&+1
  v_mid&=v_ho&\2
  y_rel&=4*vf&
  bn_l&=4+2*hf&               !ButtonlÑnge
  x_esc&=bn_l&*8+1            !ESC
  top_pal$=""
  @get.palette(top_pal$)      !Farbpalette des Desktop retten
  check!=TRUE                 !fÅr Linvirentest
  '
  @pre.set.special            !programmspezifisch
  '
  @set.farben
  @set.grafik.normal
  @set.1.wahl
  DEFMOUSE 0
RETURN
PROCEDURE pre.set.special        !+++  3 INLINEs  +++
  LOCAL h_snake%,l_snake%,rat_spr%,part&,pos&,sn$
  '
  '  snakes am StÅck
  INLINE h_snake%,1118
  INLINE l_snake%,1222
  INLINE rat_spr%,74
  '  Ratte als Sprite (funktioniert in allen Auflîsungen)
  '
  CLS
  HIDEM
  GET 0,0,11*hf&+1,10*vf&,leer$
  SHOWM
  DIM li_snake$(6)
  DIM re_snake$(6)
  DIM sieg&(2)
  IF alf&=2
    part&=86
    sn$=SPACE$(1118)
    BMOVE h_snake%,V:sn$,1118
  ELSE
    part&=94
    sn$=SPACE$(1222)
    BMOVE l_snake%,V:sn$,1222
  ENDIF
  pos&=1
  burger$=MID$(sn$,pos&,part&)
  FOR ni&=1 TO 6
    ADD pos&,part&
    li_snake$(ni&)=MID$(sn$,pos&,part&)
  NEXT ni&
  FOR ni&=1 TO 6
    ADD pos&,part&
    re_snake$(ni&)=MID$(sn$,pos&,part&)
  NEXT ni&
  ratte$=SPACE$(74)
  BMOVE rat_spr%,V:ratte$,74
  x_hlp&=h_max&-x_esc&   !HELP
  y_std&=46*vf&
  '  Bildschirm-Positionen
  y_sn&=96*hf&
  x_di&=12*hf&
  x_lr&=21*hf&
  x_ls&=x_lr&-x_di&+1
  x_of&=x_lr&+x_di&
  x_rr&=x_lr&+x_di&*22
  x_rs&=x_rr&+x_di&-1
  '  Defaults & Offsets
  gegner&=2
  gegner_ofs&=2
  spielart&=1
  spielart_ofs&=7
  zufall&=1
  zufall_ofs&=10
  kurz%=2
  lang%=6
  wart%=lang%
RETURN
'
PROCEDURE get.palette(VAR pal$)
  pal$=""
  FOR ni&=0 TO 15
    pal$=pal$+MKI$(XBIOS(7,ni&,-1))
  NEXT ni&
RETURN
PROCEDURE set.farben
  IF alf&=2
    VSETCOLOR 0,7,7,7   !schwarz auf weiû
  ELSE
    VSETCOLOR 0,6,6,6   !dunkelweiss
    VSETCOLOR 1,0,0,0   !schwarz
    VSETCOLOR 2,7,0,0   !rot
    VSETCOLOR 3,0,5,0   !grÅn
    VSETCOLOR 4,0,0,7   !blau
    VSETCOLOR 5,7,7,0   !gelb
    VSETCOLOR 6,0,0,0   !schwarz
    VSETCOLOR 7,7,0,7   !violett
    VSETCOLOR 8,4,4,4   !grau
    VSETCOLOR 9,0,7,6   !tÅrkis
    VSETCOLOR 10,0,7,0  !hellgruen
    VSETCOLOR 11,0,6,7  !hellblau
    VSETCOLOR 12,3,4,5  !stahlblau
    VSETCOLOR 13,7,5,0  !orange
    VSETCOLOR 14,6,4,0  !braun
    VSETCOLOR 15,5,3,0  !dunkelbraun
  ENDIF
RETURN
'
PROCEDURE test.virus
  LOCAL pfad$,prg$,pln$,al$,prg_len%,d_l%,antw&
  pfad$=CHR$(GEMDOS(25)+65)+":"+DIR$(0)
  IF RIGHT$(pfad$,1)<>"\"
    pfad$=pfad$+"\"
  ENDIF
  RESTORE prg_daten
  READ prg$,pln$
  prg$=pfad$+prg$
  prg_len%=VAL(MID$(pln$,2))
  IF EXIST(prg$)
    OPEN "I",#1,prg$
    d_l%=LOF(#1)
    CLOSE #1
    IF d_l%<prg_len%
      al$="[3][ | | ???  ERROR  ???     | ][  EXIT  ]"
      @show.alert(1,al$,antw&)
      @short.exit
    ELSE IF d_l%>prg_len%
      al$="[3][ | |  !!!  LINKVIRUS  !!!      | ][  KILL  |EXIT]"
      @show.alert(1,al$,antw&)
      IF antw&=1
        @kill.virus
      ENDIF
      @short.exit
    ENDIF
  ELSE
    @zeig.warnung
  ENDIF
RETURN
PROCEDURE kill.virus
  LOCAL prg_adr%,frei%
  al$="[3][ | MALLOC-ERROR!      | ][  shit  ]"
  frei%=(prg_len%+255) AND &HFFFF00  !durch 256 teilbar
  RESERVE -frei%
  prg_adr%=MALLOC(frei%)
  IF prg_adr%
    OPEN "I",#1,prg$
    BGET #1,prg_adr%,prg_len%
    CLOSE #1
    '  Null ans Ende schreiben, kînnte gelîscht sein
    POKE prg_adr%+prg_len%-1,0
    BSAVE prg$,prg_adr%,prg_len%
    prg_adr%=MFREE(prg_adr%)
    IF prg_adr%
      @show.alert(1,al$,antw&)
    ENDIF
  ELSE
    @show.alert(1,al$,antw&)
  ENDIF
  RESERVE  !wie vorher
RETURN
PROCEDURE zeig.warnung                           !~NL~D~
  IF taal$="NL"
    al$="[3][ |  De test op een Link-virus |  kon niet (!)|"
    al$=al$+"  uitgevoerd worden. | ][  zeer verdacht !  ]"
  ELSE  !D
    al$="[3][ |  Der Linkvirentest       |   konnte nicht(!)|"
    al$=al$+" durchgefÅhrt werden| ][  hîchst verdÑchtig!  ]"
  ENDIF
  @show.alert(1,al$,antw&)
RETURN
PROCEDURE show.alert(bn&,VAR al$,ret&)
  @no.but
  @no.key
  DEFMOUSE 0
  SHOWM
  ret&=FORM_ALERT(bn&,al$)
  @no.but
  @no.key
RETURN
'
PROCEDURE ausgang
  ON ERROR  !damit's ein Ende hat
  SOUND 1,0,0,0,0  !Gib AIDA
  WAVE 0,0         !keine Chance
  ~XBIOS(6,L:V:top_pal$)  !alte Palette
  @set.grafik.normal
  @short.exit
RETURN
PROCEDURE short.exit
  SPOKE &H484,old_484|  !alte Einstellung
  CLS
  @no.but
  DEFMOUSE 0
  SHOWM
  EDIT
RETURN
'
PROCEDURE white.box(li&,ob&,re&,un&)
  @set.grafik.normal
  PBOX li&,ob&,re&,un&
RETURN
PROCEDURE clean
  '  fÅllt den Bildschirm (ohne Kopfzeile) mit "Hintergrund"
  ~FORM_DIAL(3,0,0,0,0,0,0,WORK_OUT(0),WORK_OUT(1))
RETURN
PROCEDURE zent(yt&,it$)
  '  zentriert den Text an der gewÅnschten y-Position
  TEXT h_mid&-LEN(it$)*4,yt&,it$
RETURN
PROCEDURE set.titel(it$)
  LOCAL tl&,xt&
  @white.box(-1,-1,h_br&,y_kln&)
  tl&=LEN(it$)
  IF tl&
    xt&=h_mid&-tl&*4
    GRAPHMODE 4
    TEXT xt&-8,y_kzl&,SPACE$(tl&+2)
    GRAPHMODE 3
    TEXT xt&,y_kzl&,it$
    GRAPHMODE 1
  ENDIF
RETURN
PROCEDURE shit
  LOCAL it$,lit&,bnr&
  ON ERROR  !aus
  it$=ERR$(ERR)  !Original Fehlermeldung
  lit&=RINSTR(it$,"[")
  '  "CONT"  und  "STOP"  statt  "Return"  schont den Reset-Knopf
  it$=LEFT$(it$,lit&)+"  CONT  |STOP]"
  @show.alert(2,it$,bnr&)
  IF bnr&=1
    RESUME neu_start
  ELSE
    @ausgang
  ENDIF
RETURN
'
PROCEDURE test.wahl(VAR pt_&,pw_&)
  LOCAL test$,dummy$
  pt_&=-1  !Info-Zeilen zÑhlen
  REPEAT
    INC pt_&
    READ test$
  UNTIL test$="*"
  pw_&=-1  !Wahl-Zeilen zÑhlen
  REPEAT
    INC pw_&
    READ test$,dummy$
  UNTIL test$="*"
RETURN
PROCEDURE read.wahl(VAR pt_&,pw_&,pt_$(),pw_$(),pk_$())
  LOCAL dummy$
  ni&=0
  WHILE ni&<pt_&
    INC ni&
    READ pt_$(ni&)
  WEND
  READ dummy$  !*=Info-Ende
  ni&=0
  WHILE ni&<pw_&
    INC ni&
    READ pw_$(ni&),pk_$(ni&)
  WEND
RETURN
'
PROCEDURE pop.wahl(li&,ob&,hoz!,vez!,mk2&,VAR pt_&,az_&,pt_$(),aw_$(),cd_$(),pw_&)
  '  li& / ob&   = links/oben
  '  hoz!/vez!   = horizontal/vertikal zentriert (relativ zur Position)
  '  pt_&/pt_$() = Infotext
  '  az_&/aw_$() = Auswahlzeilen
  '  lcd&/cd_$() = LÑnge/Scancodes (bzw. Textart)
  '         mk2& = Default fÅr rechten Mausknopf
  '         pw_& = gewÑhlt (RÅckmeldung)
  '
  LOCAL ai&,aw&,re&,un&,th&,tb&,td&,lzl&,lcd&,ax&,ay&,aw$,mi&,cd$,pop_pic$
  '
  th&=8*vf&                          !Texthîhe
  td&=9*vf&                          !Textdistanz (vertikal)
  tb&=8                              !Textbreite
  HIDEM
  SGET pop_pic$                      !Hintergrund retten
  @search.max.len(re&,az_&,aw_$())
  lzl&=re&*4+4                       !Info-LÑnge merken
  @search.max.len(re&,pt_&,pt_$())
  @pop.center
  @pop.box
  mi&=(li&+re&)\2
  li&=mi&-lzl&-1
  re&=mi&+lzl&
  ay&=ob&-td&\2+vf&
  ni&=0
  WHILE ni&<pt_&                     !Infozeilen
    ADD ay&,td&
    INC ni&
    lzl&=LEN(pt_$(ni&))
    IF lzl&
      ax&=mi&-lzl&*4                 !zentriert
      TEXT ax&,ay&,pt_$(ni&)
    ENDIF
  WEND
  IF ni&                             !wenn Infozeilen:
    ADD ay&,td&\2                    !1/2 Zeile frei
    DRAW li&-tb&,ay& TO re&+tb&,ay&  !Trennlinie
  ELSE                               !sonst:
    ADD ay&,td&\4                    !1/4 Zeile frei
  ENDIF
  ob&=ay&+td&\2-2*vf&                !Auswahl oben merken
  ni&=0
  WHILE ni&<az_&                     !Auswahlzeilen
    INC ni&
    ADD ay&,td&
    lcd&=LEN(cd_$(ni&))
    IF lcd&
      IF lcd&>2                      !Auswahl:
        DEFTEXT ,0                   !normal
      ELSE IF lcd&>0                 !Kommentar:
        DEFTEXT ,VAL(cd_$(ni&))      !~Textstil
      ELSE                           !Default:
        DEFTEXT ,4                   !kursiv
      ENDIF
      ax&=mi&-LEN(aw_$(ni&))*4       !zentrieren
      TEXT ax&,ay&,aw_$(ni&)
    ENDIF
  WEND
  un&=ay&+td&\2-2*vf&                !Auswahl unten merken
  GRAPHMODE 3                        !XOR
  DEFFILL 1,1                        !voll
  pw_&=0                             !gewÑhlt
  ay&=0                              !alt
  @no.but
  @no.key
  SHOWM
  REPEAT
    @get.tom
    IF scan|                         !Taste
      cd$=RIGHT$("00"+STR$(scan|),3)
    ELSE IF mk&=2                    !MK2
      pw_&=mk2&                      !Default-Wahl
      mk&=0                          !fÅr Anzeige
    ENDIF
    '                                !innerhalb
    IF mx&>li& AND mx&<re& AND my&>ob& AND my&<un&
      aw&=(my&-ob&)\td&+1
      IF mk&=1 AND LEN(cd_$(aw&))>2  !wÑhlbar   ( mk&=1 nur innerhalb! )
        pw_&=aw&                     !gewÑhlt
      ENDIF
      my&=aw&*td&+ob&-td&
      IF my&<>ay&                    !neu
        IF ay&                       !da war noch was
          PBOX li&,ay&,re&,ay&+th&   !alt weg
          ay&=0
        ENDIF
        IF LEN(cd_$(aw&))>2          !wÑhlbar
          PBOX li&,my&,re&,my&+th&   !neu hin
          ay&=my&                    !und merken
        ENDIF
        SHOWM
      ENDIF
    ELSE                             !auûerhalb
      IF ay&                         !da war was
        PBOX li&,ay&,re&,ay&+th&     !weg
      ENDIF
      ay&=0
    ENDIF
    IF scan|                         !Taste
      ai&=1
      REPEAT                         !suchen
        IF LEN(cd_$(ai&))>2          !wÑhlbar
          IF INSTR(cd_$(ai&),cd$)    !gefunden
            pw_&=ai&                 !gewÑhlt
          ENDIF
        ENDIF
        INC ai&
      UNTIL ai&>az_& OR pw_&
    ENDIF
  UNTIL pw_&                         !bis was gewÑhlt ist!
  IF mk&=0                           !Tastenwahl zeigen
    IF ay&                           !da war noch was
      PBOX li&,ay&,re&,ay&+th&       !alt weg
    ENDIF
    my&=pw_&*td&+ob&-td&
    PBOX li&,my&,re&,my&+th&         !neu hin
    PAUSE 10                         !kurz warten
  ENDIF
  @set.grafik.normal
  SPUT pop_pic$
  @no.but
RETURN
PROCEDURE search.max.len(VAR sl&,sz&,st$())
  ni&=0
  WHILE ni&<sz&
    INC ni&
    sl&=MAX(sl&,LEN(st$(ni&)))
  WEND
RETURN
'
PROCEDURE pop.info(li&,ob&,hoz!,vez!,sec%)
  LOCAL pt_&,az_&,ai&,re&,un&,td&,tb&,lzl&,ax&,ay&,mi&,az$,pop_pic$
  HIDEM
  SGET pop_pic$
  td&=9*vf&                          !Textdistanz (vertikal)
  tb&=8                              !Textbreite
  DIM az_$(22)                       !local array
  '  "pop.info" liest die Zeilen selbst ein.
  '  Der DATA-Pointer muû deshalb vorher von
  '  der aufrufenden Routine gestellt sein.
  REPEAT
    INC az_&
    READ az_$(az_&)
    lzl&=LEN(az_$(az_&))
    re&=MAX(re&,lzl&)                !lÑngsten Eintrag finden
  UNTIL az_$(az_&)="*"
  @pop.center
  DEC az_&
  @pop.box
  mi&=(li&+re&)\2
  ay&=ob&
  FOR ai&=1 TO az_&
    az$=az_$(ai&)
    lzl&=LEN(az$)
    ax&=mi&-lzl&*4
    ADD ay&,td&
    TEXT ax&,ay&,az$
  NEXT ai&
  ERASE az_$()                       !kann weg
  SPRITE ratte$,re&-10,un&-8
  @wart.mal(sec%*200)                !Beamtenmikado
  @set.grafik.normal
  SPRITE ratte$
  SPUT pop_pic$
  SHOWM
RETURN
PROCEDURE wart.mal(wt%)
  LOCAL ax&,ay&
  @no.key
  @no.but
  IF wt%<0
    wt%=12000   !Default max. 1 min warten
  ENDIF
  ADD wt%,TIMER
  ax&=MOUSEX
  ay&=MOUSEY
  REPEAT        !Beamtenmikado
    @get.tom
  UNTIL mk& OR scan| OR TIMER>wt% OR ABS(mx&-ax&)>20 OR ABS(my&-ay&)>20
  @no.but
RETURN
PROCEDURE pop.center
  MUL re&,tb&
  ADD re&,4
  un&=(pt_&+az_&)*td&
  '  Wenn hoz! (vez!) = TRUE, gibt li& (ob&)
  '  die relative Abweichung von der Mitte an,
  '  andernfalls die absolute Position
  '  der linken oberen Ecke.
  '  re& und un& wird berechnet und hÑngt
  '  von der Textbreite bzw. Zeilenzahl ab.
  '  Die Umrahmung (s. 'pop.box') geht jeweils
  '  um 7*hf& bzw. 7*vf& Åber diese Ecken hinaus.
  IF hoz!
    ADD li&,(h_br&-re&)\2
  ENDIF
  IF vez!
    ADD ob&,(v_ho&-un&)\2
  ENDIF
  ADD un&,ob&
  ADD re&,li&
RETURN
PROCEDURE pop.box
  @set.grafik.normal
  DEC li&
  PBOX li&-7*hf&,ob&-7*vf&,re&+7*hf&,un&+7*vf&
  BOX li&-5*hf&,ob&-5*vf&,re&+5*hf&,un&+5*vf&
  INC li&
  BOUNDARY FALSE
RETURN
PROCEDURE set.grafik.normal
  GRAPHMODE 1
  BOUNDARY TRUE
  COLOR 1
  DEFFILL 1,0,0
  DEFLINE 1,1,0,0
  DEFTEXT 1,0,0,7*vf&-1  !6/13
RETURN
PROCEDURE get.tom
  '  Taste oder Maustaste abliefern (nicht warten)
  MOUSE mx&,my&,mk&
  KEYTEST key%
  IF key%
    scan|=AND(key%,&HFF0000)\&HFFFF
    @no.key
    mk&=0
  ELSE
    scan|=0
  ENDIF
RETURN
PROCEDURE no.key
  '  Tastaturpuffer lîschen
  LPOKE XBIOS(14,1)+6,0
RETURN
PROCEDURE no.but
  WHILE MOUSEK  !fÑngt ÅberschÅssige Mausklicks ab (meistens, Sch... GEM)
    REPEAT
      ~EVNT_BUTTON(0,0,0)
      MOUSE mx&,my&,mk&
    UNTIL mk&=0
  WEND
RETURN
'
'  ===  hier beginnt das eigentliche Programm  ===
'
PROCEDURE set.1.wahl
  RESTORE 1.wahl                                   !DATA-Pointer setzen
  @test.wahl(pt_1&,pw_1&)                          !zÑhlen
  DIM pt_1$(pt_1&),pw_1$(pw_1&),pk_1$(pw_1&)       !dimesionieren
  RESTORE 1.wahl                                   !DATA-Pointer zurÅcksetzen
  @read.wahl(pt_1&,pw_1&,pt_1$(),pw_1$(),pk_1$())  !Arrays fÅllen
RETURN
'
PROCEDURE set.wahl.main
  @da.is.main
  @test.wahl(pt_m&,pw_m&)
  ERASE pt_m$(),pw_m$(),pk_m$()
  DIM pt_m$(pt_m&),pw_m$(pw_m&),pk_m$(pw_m&)
  @da.is.main
  @read.wahl(pt_m&,pw_m&,pt_m$(),pw_m$(),pk_m$())
  '  extra abhaken, damit die Wahl auch nach
  '  einem Wechsel der Sprache beachtet wird
  @abhaken.gegner(gegner&)
  @abhaken.spielart(spielart&)
  @abhaken.zufall(zufall&)
RETURN
PROCEDURE da.is.main                             !~NL~D~
  IF taal$="NL"
    RESTORE wahl_main_nl
  ELSE
    RESTORE wahl_main_d
  ENDIF
  '  ohne Infozeilen
  wahl_main_nl:
  DATA *
  DATA "INFO","023"
  DATA "Regels","019"
  DATA "Tegenstander :","1"
  DATA "  Mens      ","050"
  DATA "  Computer  ","046"
  DATA "Wie de laatste","1"
  DATA "Hamburger opeet :","1"
  DATA "  verliest  ","047"
  DATA "  wint      ","017"
  DATA "Aantal Hamburgers :","1"
  DATA "  toevallig ","020"
  DATA "  altijd 19 ","030"
  DATA "Speelstand :","1"
  DATA "Op nul zetten","011 024 049 112"
  DATA "",""
  DATA "Start","031"
  DATA "-------------------","2"
  DATA "       Escape       ","001"
  DATA *,""
  '
  wahl_main_d:
  DATA *
  DATA "INFO","023"
  DATA "Regeln","019"
  DATA "Mitspieler:","1"
  DATA "  Mensch    ","050"
  DATA "  Computer  ","046"
  DATA "Wer den letzten","1"
  DATA "Burger friût:","1"
  DATA "  verliert  ","047"
  DATA "  gewinnt   ","034"
  DATA "Anzahl Burger:","1"
  DATA "  zufÑllig  ","021"
  DATA "  jeweils 19","036"
  DATA "Spielstand:","1"
  DATA "zurÅcksetzen","021"
  DATA "",""
  DATA "Spielen","031"
  DATA "------------------","2"
  DATA "       Escape       ","001"
  DATA *,""
RETURN
PROCEDURE abhaken.gegner(nr&)
  IF nr&<>gegner&
    MID$(pw_m$(gegner&+gegner_ofs&),1)=" "
    @stand.reset
  ENDIF
  MID$(pw_m$(nr&+gegner_ofs&),1)=""
  gegner&=nr&
RETURN
PROCEDURE stand.reset
  ARRAYFILL sieg&(),0
RETURN
PROCEDURE abhaken.spielart(nr&)
  IF nr&<>spielart&
    MID$(pw_m$(spielart&+spielart_ofs&),1)=" "
  ENDIF
  spielart&=nr&
  MID$(pw_m$(nr&+spielart_ofs&),1)=""
RETURN
PROCEDURE abhaken.zufall(nr&)
  IF nr&<>zufall&
    MID$(pw_m$(zufall&+zufall_ofs&),1)=" "
  ENDIF
  zufall&=nr&
  MID$(pw_m$(nr&+zufall_ofs&),1)=""
RETURN
'
PROCEDURE set.wahl.genug
  @da.is.genug
  @test.wahl(pt_g&,pw_g&)
  ERASE pt_g$(),pw_g$(),pk_g$()
  DIM pt_g$(pt_g&),pw_g$(pw_g&),pk_g$(pw_g&)
  @da.is.genug
  @read.wahl(pt_g&,pw_g&,pt_g$(),pw_g$(),pk_g$())
RETURN
PROCEDURE da.is.genug                            !~NL~D~
  IF taal$="NL"
    IF gegner&=3
      RESTORE wahl_genug_1_nl
    ELSE
      RESTORE wahl_genug_2_nl
    ENDIF
  ELSE
    IF gegner&=3
      RESTORE wahl_genug_1_d
    ELSE
      RESTORE wahl_genug_2_d
    ENDIF
  ENDIF
  '
  wahl_genug_1_nl:
  DATA " Lafaard ! Je bent zeker "
  DATA "aan het verliezen ?!"
  DATA
  wahl_genug_2_nl:
  DATA "  Stoppen ?  "
  DATA *
  DATA "Ja","001 036 028 114"
  DATA "  Nee  ","049 057"
  DATA *,""
  '
  wahl_genug_1_d:
  DATA " Du Feigling bist wohl "
  DATA " am verlieren ?! "
  DATA
  wahl_genug_2_d:
  DATA "  Abbruch?  "
  DATA *
  DATA "ja","001 036 028 114"
  DATA "  nein  ","049 057"
  DATA *,""
RETURN
'
PROCEDURE 1.wahl
  @set.titel("  T i _ 1 2 3  ")
  @clean
  @pop.wahl(0,y_rel&,TRUE,TRUE,0,pt_1&,pw_1&,pt_1$(),pw_1$(),pk_1$(),wahl&)
  @no.but
  SELECT wahl&
  CASE 2,3
    @aktion
  CASE 5
    @last.info
    @ausgang
  ENDSELECT
RETURN
PROCEDURE last.info                              !~NL~D~
  IF taal$="NL"
    RESTORE last_info_nl
  ELSE
    RESTORE last_info_d
  ENDIF
  @pop.info(0,0,TRUE,TRUE,2)
  last_info_nl:
  DATA " tot uw dienst "
  DATA *
  last_info_d:
  DATA " servus "
  DATA *
RETURN
PROCEDURE aktion
  @set.sprache(wahl&-1)
  IF check!
    '  nur beim ersten Durchgang
    @test.virus    !=> short.exit ?
    IF alf&=1
      @geht.nicht  !=> short.exit !
    ENDIF
    check!=FALSE
  ENDIF
  @wahl.main
RETURN
PROCEDURE set.sprache(nr&)
  IF nr&=2
    neu!=(taal$<>"NL")
    taal$="NL"
  ELSE
    neu!=(taal$<>"D")
    taal$="D"
  ENDIF
  IF neu!
    @set.wahl.main
  ENDIF
RETURN
'
PROCEDURE geht.nicht
  @da.is.geht.nicht
  @test.wahl(pt_1&,pw_1&)
  ERASE pt_1$(),pw_1$(),pk_1$()
  DIM pt_1$(pt_1&),pw_1$(pw_1&),pk_1$(pw_1&)
  @da.is.geht.nicht
  @read.wahl(pt_1&,pw_1&,pt_1$(),pw_1$(),pk_1$())
  DEFMOUSE 0
  @pop.wahl(0,y_rel&,TRUE,TRUE,1,pt_1&,pw_1&,pt_1$(),pw_1$(),pk_1$(),wahl&)
  @ausgang
RETURN
PROCEDURE da.is.geht.nicht                       !~NL~D~
  IF taal$="NL"
    RESTORE geht_nicht_nl
  ELSE
    RESTORE geht_nicht_d
  ENDIF
  '
  geht_nicht_nl:
  DATA " Dit programma loopt "
  DATA "helaas alleen in"
  DATA "LAGE en HOGE"
  DATA "resolutie !"
  DATA *
  DATA "   OK   ","028 114"
  DATA *,""
  '
  geht_nicht_d:
  DATA " Dieses Programm lÑuft "
  DATA "leider nur in"
  DATA "niedriger oder hoher"
  DATA "Auflîsung!"
  DATA *
  DATA "  OK  ","028 114"
  DATA *,""
RETURN
'
PROCEDURE wahl.main
  REPEAT
    @set.titel("  T i _ 1 2 3  ")
    @clean
    @pop.wahl(0,y_rel&,TRUE,TRUE,18,pt_m&,pw_m&,pt_m$(),pw_m$(),pk_m$(),wahl&)
    @no.but
    SELECT wahl&
    CASE 1
      @prg.info
    CASE 2
      @spiel.regeln
    CASE 4,5  !Mensch=2/Computer=3
      @abhaken.gegner(wahl&-gegner_ofs&)
    CASE 8,9
      @abhaken.spielart(wahl&-spielart_ofs&)
    CASE 11,12
      @abhaken.zufall(wahl&-zufall_ofs&)
    CASE 14
      @stand.reset
    CASE 16
      @spielen
    ENDSELECT
  UNTIL wahl&=18
  @no.but
RETURN
PROCEDURE prg.info                               !~NL~D~
  IF taal$="NL"
    RESTORE prg_info_nl
  ELSE
    RESTORE prg_info_d
  ENDIF
  @set.titel(" I N F O ")
  @pop.info(0,4*vf&,TRUE,TRUE,60)
  '
  prg_info_nl:
  DATA "Ti_123 is 'public domain',"
  DATA "loopt in lage en hoge ST-resolutie"
  DATA "en 'heeft iets' tegen Linkvirussen."
  DATA "Het programma is in GFA-BASIC 3.0"
  DATA "geschreven en gecompileerd en mag,"
  DATA "nee moet verder gegeven worden - maar"
  DATA "natuurlijk uitsluitend kosteloos !"
  DATA "En om te zorgen dat het ook"
  DATA "kosteloos blijft, stuurt U de auteur"
  DATA "a.u.b. geen (!) geld."
  DATA "Veel plezier !"
  DATA "De nederlandse vertaling is van"
  DATA "Philip van Rijthoven"
  DATA "Tel.: O8O-782457"
  DATA "Nelson Krugerstraat 58"
  DATA "NL 6543 MX Nijmegen"
  DATA "(Danke!)"
  DATA *
  '
  prg_info_d:
  DATA
  DATA "Ti_123 ist 'public domain',"
  DATA "lÑuft in der hohen und"
  DATA "niedrigen ST-Auflîsung"
  DATA "und hat 'was gegen Linkviren."
  DATA "Das Programm ist in GFA-BASIC 3.0"
  DATA "geschrieben und compiliert und darf"
  DATA "und soll weitergegeben werden - aber"
  DATA "natÅrlich ausschlieûlich kostenlos!"
  DATA "Und damit es auch kostenlos bleibt,"
  DATA "schicken Sie dem Autor bitte"
  DATA "kein (!) Geld."
  DATA
  DATA "Viel Spaû!"
  DATA *
RETURN
PROCEDURE spiel.regeln                           !~NL~D~
  LOCAL it$
  IF taal$="NL"
    it$="Spelregels"
    RESTORE spiel_regeln_nl
  ELSE
    it$="Spielregeln"
    RESTORE spiel_regeln_d
  ENDIF
  @set.titel(it$)
  @pop.info(0,4*vf&,TRUE,TRUE,60)
  '
  spiel_regeln_nl:
  DATA
  DATA "Ti_123 is een spel"
  DATA "voor twee personen."
  DATA "Om de beurt moet elke speler"
  DATA "(of zijn slang)  1, 2 of 3"
  DATA "hamburgers  opvreten."
  DATA "De gedachte daaraan alleen al"
  DATA "is om misselijk van te worden,"
  DATA "het spel eindigt echter"
  DATA "nog afgrijselijker."
  DATA "Maar goed, als je per se wilt ?!"
  DATA "Ga je gang ..."
  DATA "Wie de laatste hamburger opeet"
  DATA "heeft gewonnen of juist niet, dat"
  DATA " hangt van de gekozen speelwijze af. "
  DATA "Als er geen tweede speler is,"
  DATA "wil de computer zelf wel meedoen."
  DATA
  DATA *
  spiel_regeln_d:
  DATA
  DATA "Ti_123 ist ein Zwei-Personen-Spiel."
  DATA "Jeder Spieler (bzw. seine Schlange)"
  DATA "muû abwechselnd  1, 2 oder 3"
  DATA "'Burger'  fressen."
  DATA "Der Gedanke allein"
  DATA "ist schon fÅrchterlich,"
  DATA "das Spiel ist noch grausamer,"
  DATA "- aber bitte -"
  DATA "wenn Ihr unbedingt wollt ?!"
  DATA
  DATA "Gewonnen hat (je nach Wahl)"
  DATA "wer den letzten nehmen darf"
  DATA "oder muû."
  DATA "Wenn der zweite Spieler fehlt,"
  DATA "kann der Computer mitspielen."
  DATA
  DATA *
RETURN
'
'  ===  hier beginnt das Spiel  ===
'
PROCEDURE spielen
  LOCAL genug!
  @set.wahl.genug
  @spiel.vorbereiten
  @zeig.spielfeld
  @zeig.spielstand
  REPEAT
    IF spieler&<3  !nicht wenn Computer am Zug
      wart%=lang%
      $U+  !hinter jedem Befehl  EVERY  prÅfen
      EVERY 20 GOSUB movie
      fress&=0
      REPEAT
        SHOWM
        @get.tom
        IF scan|
          @test.key
        ELSE IF my&<y_kln& AND mx&<x_esc&
          @wahl.genug
        ELSE IF my&<y_kln& AND mx&>x_hlp&
          @show.help
        ENDIF
      UNTIL mk& OR fress& OR genug!
      EVERY STOP
      $U-  !fertig
    ENDIF
    IF NOT genug!
      wart%=kurz%
      HIDEM
      ON spieler& GOSUB li.nimm,re.nimm,comp.nimm
      SHOWM
    ENDIF
  UNTIL rest&=0 OR genug!
  IF rest&=0
    @nach.spiel
  ENDIF
  SHOWM
RETURN
'
PROCEDURE spiel.vorbereiten
  IF zufall&=1
    li_weg&=RAND(3)
    re_weg&=RAND(3)
  ELSE
    li_weg&=0
    re_weg&=0
  ENDIF
  li_p&=li_weg&
  re_p&=20-re_weg&
  rest&=PRED(re_p&-li_p&)
  x_lk&=x_lr&+x_di&+li_weg&*x_di&
  x_rk&=x_rr&-x_di&-re_weg&*x_di&
  li_kopf&=4
  re_kopf&=4
  spieler&=1
  sieger&=0
RETURN
PROCEDURE zeig.spielfeld
  LOCAL li&,ob&,re&,un&,von&,bis&
  GRAPHMODE 4
  TEXT 1,y_kzl&,SPACE$(bn_l&)
  TEXT x_hlp&+1,y_kzl&,SPACE$(bn_l&)
  GRAPHMODE 3
  TEXT 8*hf&+5,y_kzl&,"ESC"
  TEXT x_hlp&+8*hf&+1,y_kzl&,"HELP"
  GRAPHMODE 1
  li&=5*hf&
  re&=314*hf&
  ob&=y_sn&-10*vf&
  un&=y_sn&+10*vf&+2
  PBOX li&-hf&-2,ob&-vf&-2,re&+hf&+2,un&+vf&+2
  BOX li&,ob&,re&,un&
  '  Kopf
  PUT x_lk&,y_sn&,li_snake$(4)
  PUT x_rk&,y_sn&,re_snake$(4)
  '  Schwanz
  PUT x_ls&,y_sn&,li_snake$(6)
  PUT x_rs&,y_sn&,re_snake$(6)
  '  Rumpf
  li&=x_lr&
  WHILE li&<x_lk&
    PUT li&,y_sn&,li_snake$(5)
    ADD li&,x_di&
  WEND
  re&=x_rr&
  WHILE re&>x_rk&
    PUT re&,y_sn&,re_snake$(5)
    SUB re&,x_di&
  WEND
  '  Burger
  von&=x_lk&+x_di&-2*hf&+4
  bis&=x_rk&-x_di&-2*hf&+4
  HIDEM
  GET von&,y_sn&,von&+14*hf&-5,y_sn&+10*vf&,help$
  FOR ni&=von& TO bis& STEP x_di&
    PUT ni&,y_sn&,burger$
  NEXT ni&
  li&=h_mid&-60
  re&=h_mid&+60
  ob&=y_std&-10*vf&
  un&=y_std&+4*vf&
  PBOX li&-3,ob&-3,re&+3,un&+3
  PBOX li&,ob&,re&,un&
RETURN
PROCEDURE zeig.spielstand
  LOCAL stand$
  stand$=RIGHT$("   "+STR$(sieg&(1)),4)+"  :  "+LEFT$(STR$(sieg&(2))+"   ",4)
  @zent(y_std&,stand$)
  SHOWM
RETURN
'
PROCEDURE test.key
  SELECT scan|
  CASE 1
    @wahl.genug
  CASE 2 TO 4
    IF spieler&=1
      fress&=MIN(scan|-1,rest&)
    ENDIF
  CASE 98
    @show.help
  CASE 109 TO 111
    IF spieler&=2
      fress&=MIN(scan|-108,rest&)
    ENDIF
  ENDSELECT
RETURN
PROCEDURE wahl.genug
  EVERY STOP
  @pop.wahl(12*hf&,20*vf&,FALSE,FALSE,2,pt_g&,pw_g&,pt_g$(),pw_g$(),pk_g$(),wahl&)
  @no.but
  mk&=0
  IF wahl&=1
    genug!=TRUE
  ELSE
    EVERY 20 GOSUB movie
  ENDIF
RETURN
PROCEDURE show.help
  LOCAL hx&
  EVERY STOP
  HIDEM
  @best.move  !besten Zug ermitteln
  IF spieler&=1
    hx&=x_lk&+fress&*x_di&-2*hf&+4
  ELSE
    hx&=x_rk&-fress&*x_di&-2*hf&+4
  ENDIF
  PUT hx&,y_sn&,burger$
  @flip
  @flip
  REPEAT  !3* oder mehr
    @flip
    @get.tom
  UNTIL scan|<>98 AND (my&>y_kln& OR mx&<x_hlp&)
  PUT hx&,y_sn&,help$
  PUT hx&,y_sn&,burger$
  fress&=0
  @no.but
  mk&=0
  SHOWM
  EVERY 20 GOSUB movie
RETURN
PROCEDURE flip
  VSYNC
  PUT hx&,y_sn&,help$,10  !NOT Z
  PAUSE 10
RETURN
'
PROCEDURE movie
  ON spieler& GOSUB li.move,re.move
RETURN
PROCEDURE li.move
  PUT x_lk&,y_sn&,li_snake$(li_kopf&),6
  IF li_kopf&<2
    li_add&=1
  ELSE IF li_kopf&>3
    li_add&=-1
  ENDIF
  ADD li_kopf&,li_add&
  PUT x_lk&,y_sn&,li_snake$(li_kopf&),6
RETURN
PROCEDURE re.move
  PUT x_rk&,y_sn&,re_snake$(re_kopf&),6
  IF re_kopf&<2
    re_add&=1
  ELSE IF re_kopf&>3
    re_add&=-1
  ENDIF
  ADD re_kopf&,re_add&
  PUT x_rk&,y_sn&,re_snake$(re_kopf&),6
RETURN
'
PROCEDURE li.nimm
  IF fress&
    @li.fressen
  ELSE IF my&>y_sn& AND my&<y_sn&+15*vf&
    fress&=(mx&-x_of&)\x_di&-li_p&
    IF fress&>0 AND fress&<4 AND fress&<=rest&
      @li.fressen
    ELSE
      @hinweis
    ENDIF
  ELSE
    @hinweis
  ENDIF
RETURN
PROCEDURE re.nimm
  IF fress&
    @re.fressen
  ELSE IF my&>y_sn& AND my&<y_sn&+15*vf&
    fress&=re_p&-(mx&-x_of&)\x_di&
    IF fress&>0 AND fress&<4 AND fress&<=rest&
      @re.fressen
    ELSE
      @hinweis
    ENDIF
  ELSE
    @hinweis
  ENDIF
RETURN
PROCEDURE hinweis                                !~NL~D~
  IF taal$="NL"
    RESTORE hinweis_nl
  ELSE
    RESTORE hinweis_d
  ENDIF
  @pop.info(0,54*vf&,TRUE,TRUE,30)
  '
  hinweis_nl:
  DATA
  DATA " Klik op de laatste hamburger "
  DATA "die je nu op wilt vreten"
  '
  DATA "of druk op een toets:"
  '
  DATA "[1] [2] [3]"
  DATA *
  hinweis_d:
  DATA
  DATA " Klick auf den letzten 'Burger',"
  DATA " den Du fressen willst,"
  DATA " oder drÅcke deine Taste:"
  DATA "[1] [2] [3]"
  DATA *
RETURN
PROCEDURE comp.nimm
  PAUSE 5
  IF rest&>10
    REPEAT
      fress&=RANDOM(3)+1
    UNTIL fress&<>alt_fress&
    alt_fress&=fress&
  ELSE
    @best.move
  ENDIF
  @re.fressen
RETURN
PROCEDURE best.move
  IF spielart&=2
    fress&=rest& MOD 4
  ELSE
    fress&=(rest&-1) MOD 4
  ENDIF
  IF fress&=0
    fress&=1
  ENDIF
RETURN
'
PROCEDURE li.fressen
  @li.mampf
  SUB rest&,fress&
  li_kopf&=4
  PUT x_lk&,y_sn&,leer$,3
  PUT x_lk&,y_sn&,li_snake$(li_kopf&),6
  spieler&=gegner&
  SHOWM
RETURN
PROCEDURE li.mampf
  PUT x_lk&,y_sn&,li_snake$(li_kopf&),6
  FOR mampf&=1 TO fress&
    FOR pixel&=1 TO x_di&\hf&
      @li.maul.auf
      @li.maul.zu
      ADD x_lk&,hf&
    NEXT pixel&
    PUT x_lk&-x_di&,y_sn&,li_snake$(5),3
    @schmatz
  NEXT mampf&
  ADD li_p&,fress&
RETURN
PROCEDURE li.maul.auf
  FOR li_kopf&=1 TO 2
    PUT x_lk&,y_sn&,li_snake$(li_kopf&),3
    @tu.nix
  NEXT li_kopf&
RETURN
PROCEDURE li.maul.zu
  FOR li_kopf&=3 TO 4
    PUT x_lk&,y_sn&,li_snake$(li_kopf&),3
    @tu.nix
  NEXT li_kopf&
RETURN
PROCEDURE re.fressen
  @re.mampf
  SUB rest&,fress&
  re_kopf&=4
  PUT x_rk&,y_sn&,leer$,3
  PUT x_rk&,y_sn&,re_snake$(re_kopf&),6
  spieler&=1
  SHOWM
RETURN
PROCEDURE re.mampf
  PUT x_rk&,y_sn&,re_snake$(re_kopf&),6
  FOR mampf&=1 TO fress&
    FOR pixel&=1 TO x_di&\hf&
      @re.maul.auf
      @re.maul.zu
      SUB x_rk&,hf&
    NEXT pixel&
    PUT x_rk&+x_di&,y_sn&,re_snake$(5),3
    @schmatz
  NEXT mampf&
  SUB re_p&,fress&
RETURN
PROCEDURE re.maul.auf
  FOR re_kopf&=1 TO 2
    PUT x_rk&,y_sn&,re_snake$(re_kopf&),3
    @tu.nix
  NEXT re_kopf&
RETURN
PROCEDURE re.maul.zu
  FOR re_kopf&=3 TO 4
    PUT x_rk&,y_sn&,re_snake$(re_kopf&),3
    @tu.nix
  NEXT re_kopf&
RETURN
PROCEDURE tu.nix
  LOCAL t_n%
  t_n%=wart%
  ADD t_n%,TIMER
  WHILE TIMER<t_n%
    '  tu nix
  WEND
RETURN
PROCEDURE schmatz
  SOUND 1,15,3,3,1
  SOUND 1,15,3,2,1
  SOUND 1,0,0,0,0
RETURN
'
PROCEDURE nach.spiel
  LOCAL t_w%
  PAUSE 5
  wart%=(kurz%+lang%)\2
  IF spielart&=1
    IF spieler&=1
      sieger&=1
    ELSE
      sieger&=2
    ENDIF
  ELSE  !Art 2
    IF spieler&=1
      sieger&=2
    ELSE
      sieger&=1
    ENDIF
  ENDIF
  INC sieg&(sieger&)
  ON sieger& GOSUB li.sieger,re.sieger
  @zeig.spielstand
  PAUSE 30
  wart%=lang%
  @tu.was
  REPEAT
    IF TIMER>t_w%
      @tu.was
    ENDIF
    @get.tom
  UNTIL my&<y_kln& OR scan| OR mk&
RETURN
PROCEDURE li.sieger
  HIDEM
  FOR ni&=1 TO 80
    @li.move
    @tu.nix
  NEXT ni&
  fress&=22-li_p&
  wart%=kurz%
  @li.mampf
RETURN
PROCEDURE re.sieger
  HIDEM
  FOR ni&=1 TO 80
    @re.move
    @tu.nix
  NEXT ni&
  fress&=re_p&+2
  wart%=kurz%
  @re.mampf
RETURN
PROCEDURE tu.was
  IF sieger&=1
    @li.maul.auf
    @pup
    @li.maul.zu
  ELSE
    @re.maul.auf
    @pup
    @re.maul.zu
  ENDIF
  SHOWM
  '  2 bis 10 sec
  t_w%=TIMER+400+RAND(400)*4
RETURN
PROCEDURE pup
  LOCAL per%,dif%
  per%=2400
  dif%=60
  PAUSE 10
  REPEAT
    SOUND 1,15,#per%,0
    ADD per%,dif%
    DEC dif%
  UNTIL per%>4000
  SOUND 1,0,0,0,0  !a Ruh is
RETURN
'
' === Ti ===
