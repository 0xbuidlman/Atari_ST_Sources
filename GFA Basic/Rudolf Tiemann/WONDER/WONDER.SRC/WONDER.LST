' ============================================================
'    WONDER
'  ( WUNDER )
' D:
'    Dieses Listing darf ausschlieûlich privat benutzt werden.
'    Wenn Sie mehr wollen, wenden Sie sich an den Autor.
'    Wenn Sie das Programm verÑndern, schicken Sie dem Autor
'    bitte ein Belegexemplar.
' NL:
'    De listing mag alleen strikt privÇ gebruikt worden.
'    Wilt u meer neem dan kontakt op met de auteur.
'    Ook wanneer u voor eigen gebruik veranderingen aanbrengt
'    wordt hij graag op de hoogte gehouden.            GfA gg.
'
' ============================================================
'
'  +++  4  INLINEs  +++
'
INLINE b_wunder%,6279
INLINE rat_spr%,74
INLINE scr_conv%,320
INLINE st_depack%,212
' D:
'    Wenn das LST-File mit MERGE geladen wird,
'    mÅssen die INLINEs mit HELP nachgeladen werden!
' NL:
'    Als de LST-file (met Merge) geladen wordt,
'    moeten de INLINE's met HELP apart geladen worden.
'
prg_daten:
DATA "WONDER.PRG"
DATA "=35819 Bytes ΩTi"
'
' D: ->^^^^^^<- hier drÅber muû nach dem 1.Compilieren
'    linksbÅndig die genaue Grîûe eingetragen werden,
'    dann folgt das endgÅltige 2.Compilieren
'    (wichtig fÅr den Linkvirentest)
' NL:->^^^^^^<- hierboven moet na de eerste keer compileren
'    links-aangeschoven de exacte grootte aangegeven worden.
'    Pas daarna kan definitief gecompileerd worden.
'    (i.v.m. Linkvirustest)
'
'   > Compiler-Anweisungen:
$S&  !2-Byte-Select-Parameter
$S<  !Select optimieren auf LÑnge
$P>  !Procedures: als GFA-Routinen
$%3  !IntDiv immer als Integer
$*%  !LongMul nicht mit MULS
$C+  !Register retten (sonst lÑuft das compilierte Programm nicht in low)
$B+  !Meldung statt Bomben
$E$  !Fehler-Texte
$I+  !Interrupt zulassen
'
' ===========================================================
'
'
@pre.set
'
neu_start:
ON ERROR GOSUB shit
DO
  @1.wahl
LOOP
END
'
'
' ===========================================================
'
'
PROCEDURE pre.set
  MENU KILL
  CLS
  DEFMOUSE 2
  SHOWM
  old_484|=PEEK(&H484)  !Einstellung retten
  SPOKE &H484,BCLR(PEEK(&H484),0)  !T-Klick aus
  SPOKE &H484,BSET(PEEK(&H484),1)  !Key-rep ein
  SPOKE &H484,BCLR(PEEK(&H484),2)  !Klingel aus
  alf&=XBIOS(4)  !0 1 2
  hf&=2+(alf&<1) !1 2 2
  vf&=2+(alf&<2) !1 1 2
  h_max&=WORK_OUT(0)
  v_max&=WORK_OUT(1)
  CLIP 0,0 TO h_max&,v_max&  !Clipping richtig(!) setzen
  h_br&=h_max&+1
  v_ho&=v_max&+1
  v_mid&=v_max&\2
  top_pal$=""
  @get.palette(top_pal$)  !Farbpalette des Desktop retten
  @set.farben
  ' Platz fÅr 2.Bildschirm machen (braucht das Assembler-Programm)
  DIM bild%(32255/4)
  scr_1%=XBIOS(3)  !Adresse des logischen (=physikalischen) Bildschirms
  scr_2%=(VARPTR(bild%(0))+255) AND NOT &HFF  !\256 teilbar
  ~XBIOS(5,L:scr_1%,L:scr_2%,-1)
  HIDEM  !Wunder auspacken:
  ~C:st_depack%(L:scr_1%,L:b_wunder%)
  IF alf&<2  !Wunder convertieren:
    ~C:scr_conv%(2,alf&)
  ENDIF
  li1&=23*hf&
  li2&=130*hf&
  li3&=li1&
  li4&=28*hf&-1
  li5&=185*hf&
  re1&=li2&-1
  re2&=288*hf&
  re3&=re2&
  ob1&=66*vf&
  un1&=136*vf&
  ob2&=ob1&
  un2&=un1&
  ob3&=un1&+1
  un3&=199*vf&
  GET li1&,ob1&,re1&,un1&,teil_1$
  GET li2&,ob2&,re2&,un2&,teil_2$
  GET li3&,ob3&,re3&,un3&,teil_3$
  CLS
  PUT li3&,ob3&,teil_3$
  SGET hintergrund$
  ~XBIOS(5,L:scr_1%,L:scr_1%,-1)
  CLS
  SPUT hintergrund$
  PUT li1&,ob1&,teil_1$
  PUT li2&,ob2&,teil_2$
  rat_spr$=SPACE$(74)
  BMOVE rat_spr%,V:rat_spr$,74
  @set.grafik.normal
  art&=1
  weit&=5*vf&
  move!=FALSE
  check!=TRUE  !fÅr Linkvirentest
  neu!=TRUE    !fÅr Sprache
  @set.1.wahl
RETURN
PROCEDURE get.palette(VAR pal$)
  pal$=""
  FOR ni&=0 TO 15
    pal$=pal$+MKI$(XBIOS(7,ni&,-1))
  NEXT ni&
RETURN
PROCEDURE set.farben
  VSETCOLOR 0,7,7,7  !weiû
  FOR ni&=1 TO 15
    VSETCOLOR ni&,0,0,0  !schwarz
  NEXT ni&
RETURN
'
PROCEDURE set.1.wahl
  RESTORE 1.wahl
  @test.wahl(pt_1&,pw_1&)
  DIM pt_1$(pt_1&),pw_1$(pw_1&),pk_1$(pw_1&)
  RESTORE 1.wahl
  @read.wahl(pt_1&,pw_1&,pt_1$(),pw_1$(),pk_1$())
  1.wahl:
  DATA "WONDER"
  DATA "   ( WUNDER )   "
  DATA *
  DATA "Deutsch","032"
  DATA " Nederlands ","049"
  DATA "",""
  DATA "Escape","001"
  DATA *,""
RETURN
'
PROCEDURE test.wahl(VAR pt_&,pw&)
  LOCAL test$,dummy$
  pt_&=-1
  REPEAT
    INC pt_&
    READ test$
  UNTIL test$="*"
  pw&=-1
  REPEAT
    INC pw&
    READ test$,dummy$
  UNTIL test$="*"
RETURN
PROCEDURE read.wahl(VAR pt_&,pw&,pt$(),pw$(),pk$())
  LOCAL dummy$
  ni&=0
  WHILE ni&<pt_&
    INC ni&
    READ pt$(ni&)
  WEND
  READ dummy$  !*
  ni&=0
  WHILE ni&<pw&
    INC ni&
    READ pw$(ni&),pk$(ni&)
  WEND
RETURN
'
PROCEDURE test.virus
  LOCAL pfad$,prg$,pln$,it$,prg_len%,d_l%
  pfad$=CHR$(GEMDOS(25)+65)+":"+DIR$(0)
  IF RIGHT$(pfad$,1)<>"\"
    pfad$=pfad$+"\"
  ENDIF
  RESTORE prg_daten
  READ prg$,pln$
  prg$=pfad$+prg$
  prg_len%=VAL(MID$(pln$,2))
  IF EXIST(prg$)
    OPEN "I",#1,prg$
    d_l%=LOF(#1)
    CLOSE #1
    IF d_l%<prg_len%
      it$="[3][ | | ???  ERROR  ???     | ][  EXIT  ]"
      @show.alert(1,it$,dummy&)
      @short.exit
    ELSE IF d_l%>prg_len%
      it$="[3][ | |  !!!  LINKVIRUS  !!!      | ][  KILL  |EXIT]"
      @show.alert(1,it$,antw&)
      IF antw&=1
        @kill.virus
      ENDIF
      @short.exit
    ENDIF
  ELSE
    @zeig.warnung
  ENDIF
RETURN
PROCEDURE kill.virus
  LOCAL prg_adr%
  it$="[3][ | MALLOC-ERROR!      | ][  shit  ]"
  frei%=(prg_len%+255) AND &HFFFF00  !durch 256 teilbar
  RESERVE -frei%
  prg_adr%=MALLOC(frei%)
  IF prg_adr%
    OPEN "I",#1,prg$
    BGET #1,prg_adr%,prg_len%
    CLOSE #1
    ' Null ans Ende schreiben, kînnte gelîscht sein
    POKE prg_adr%+prg_len%-1,0
    BSAVE prg$,prg_adr%,prg_len%
    prg_adr%=MFREE(prg_adr%)
    IF prg_adr%
      @show.alert(1,it$,dummy&)
    ENDIF
  ELSE
    @show.alert(1,it$,dummy&)
  ENDIF
  RESERVE  !wie vorher
RETURN
PROCEDURE zeig.warnung                           !~NL~D~
  IF taal$="NL"
    it$="[3][ |  De test op een Link-virus |  kon niet (!)|"
    it$=it$+"  uitgevoerd worden. | ][  zeer verdacht !  ]"
  ELSE  !D
    it$="[3][ |  Der Linkvirentest       |   konnte nicht(!)|"
    it$=it$+" durchgefÅhrt werden| ][  hîchst verdÑchtig!  ]"
  ENDIF
  @show.alert(1,it$,dummy&)
RETURN
PROCEDURE show.alert(bn&,VAR al$,ret&)
  DEFMOUSE 0
  SHOWM
  @no.but
  ret&=FORM_ALERT(bn&,al$)
RETURN
PROCEDURE shit
  LOCAL it$,lit&,bnr&
  ON ERROR  !aus
  it$=ERR$(ERR)  !Original Fehlermeldung
  lit&=RINSTR(it$,"[")
  '  "CONT"  und  "STOP"  statt  "Return"  schont den Reset-Knopf
  it$=LEFT$(it$,lit&)+"  CONT  |STOP]"
  @show.alert(2,it$,bnr&)
  IF bnr&=1
    RESUME neu_start
  ELSE
    @ausgang
  ENDIF
RETURN
'
PROCEDURE ausgang
  ON ERROR  !damit's ein Ende hat
  scr_1%=MAX(scr_1%,scr_2%)
  ~XBIOS(5,L:scr_1%,L:scr_1%,-1)
  ~XBIOS(6,L:V:top_pal$)  !Palette des Desktop
  @set.grafik.normal
  @short.exit
RETURN
PROCEDURE short.exit
  SPOKE &H484,old_484|  !alte Einstellung
  CLS
  @no.but
  DEFMOUSE 0
  SHOWM
  EDIT
RETURN
'
PROCEDURE pop.wahl(li&,ob&,hoz!,vez!,mk2&,VAR pt_&,az_&,pt_$(),aw_$(),cd_$(),pw_&)
  '  li& / ob&   = links/oben
  '  hoz!/vez!   = horizontal/vertikal zentriert (relativ zur Position)
  '  pt_&/pt_$() = Infotext
  '  az_&/aw_$() = Auswahlzeilen
  '  lcd&/cd_$() = LÑnge/Scancodes (bzw. Textart)
  '         mk2& = Default fÅr rechten Mausknopf
  '         pw_& = gewÑhlt (RÅckmeldung)
  '
  LOCAL ai&,aw&,re&,un&,th&,tb&,td&,lzl&,lcd&,ax&,ay&,aw$,mi&,cd$,pop_pic$
  '
  th&=8*vf&                          !Texthîhe
  td&=9*vf&                          !Textdistanz (vertikal)
  tb&=8                              !Textbreite
  HIDEM
  SGET pop_pic$                      !Hintergrund retten
  @search.max.len(re&,az_&,aw_$())
  lzl&=re&*4+4                       !Info-LÑnge merken
  @search.max.len(re&,pt_&,pt_$())
  @pop.center
  @pop.box
  mi&=(li&+re&)\2
  li&=mi&-lzl&-1
  re&=mi&+lzl&
  ay&=ob&-td&\2+vf&
  ni&=0
  WHILE ni&<pt_&                     !Infozeilen
    ADD ay&,td&
    INC ni&
    lzl&=LEN(pt_$(ni&))
    IF lzl&
      ax&=mi&-lzl&*4                 !zentriert
      TEXT ax&,ay&,pt_$(ni&)
    ENDIF
  WEND
  IF ni&                             !wenn Infozeilen:
    ADD ay&,td&\2                    !1/2 Zeile frei
    DRAW li&-tb&,ay& TO re&+tb&,ay&  !Trennlinie
  ELSE                               !sonst:
    ADD ay&,td&\4                    !1/4 Zeile frei
  ENDIF
  ob&=ay&+td&\2-2*vf&                !Auswahl oben merken
  ni&=0
  WHILE ni&<az_&                     !Auswahlzeilen
    INC ni&
    ADD ay&,td&
    lcd&=LEN(cd_$(ni&))
    IF lcd&
      IF lcd&>2                      !Auswahl:
        DEFTEXT ,0                   !normal
      ELSE IF lcd&>0                 !Kommentar:
        DEFTEXT ,VAL(cd_$(ni&))      !~Textstil
      ELSE                           !Default:
        DEFTEXT ,4                   !kursiv
      ENDIF
      ax&=mi&-LEN(aw_$(ni&))*4       !zentrieren
      TEXT ax&,ay&,aw_$(ni&)
    ENDIF
  WEND
  un&=ay&+td&\2-2*vf&                !Auswahl unten merken
  GRAPHMODE 3                        !XOR
  DEFFILL 1,1                        !voll
  pw_&=0                             !gewÑhlt
  ay&=0                              !alt
  @no.but
  @no.key
  SHOWM
  REPEAT
    @get.tom
    IF scan|                         !Taste
      cd$=RIGHT$("00"+STR$(scan|),3)
    ELSE IF mk&=2                    !MK2
      pw_&=mk2&                      !Default-Wahl
      mk&=0                          !fÅr Anzeige
    ENDIF
    '                                !innerhalb
    IF mx&>li& AND mx&<re& AND my&>ob& AND my&<un&
      aw&=(my&-ob&)\td&+1
      IF mk&=1 AND LEN(cd_$(aw&))>2  !wÑhlbar   ( mk&=1 nur innerhalb! )
        pw_&=aw&                     !gewÑhlt
      ENDIF
      my&=aw&*td&+ob&-td&
      IF my&<>ay&                    !neu
        IF ay&                       !da war noch was
          PBOX li&,ay&,re&,ay&+th&   !alt weg
          ay&=0
        ENDIF
        IF LEN(cd_$(aw&))>2          !wÑhlbar
          PBOX li&,my&,re&,my&+th&   !neu hin
          ay&=my&                    !und merken
        ENDIF
        SHOWM
      ENDIF
    ELSE                             !auûerhalb
      IF ay&                         !da war was
        PBOX li&,ay&,re&,ay&+th&     !weg
      ENDIF
      ay&=0
    ENDIF
    IF scan|                         !Taste
      ai&=1
      REPEAT                         !suchen
        IF LEN(cd_$(ai&))>2          !wÑhlbar
          IF INSTR(cd_$(ai&),cd$)    !gefunden
            pw_&=ai&                 !gewÑhlt
          ENDIF
        ENDIF
        INC ai&
      UNTIL ai&>az_& OR pw_&
    ENDIF
  UNTIL pw_&                         !bis was gewÑhlt ist!
  IF mk&=0                           !Tastenwahl zeigen
    IF ay&                           !da war noch was
      PBOX li&,ay&,re&,ay&+th&       !alt weg
    ENDIF
    my&=pw_&*td&+ob&-td&
    PBOX li&,my&,re&,my&+th&         !neu hin
    PAUSE 10                         !kurz warten
  ENDIF
  @set.grafik.normal
  SPUT pop_pic$
  @no.but
RETURN
PROCEDURE search.max.len(VAR sl&,sz&,st$())
  ni&=0
  WHILE ni&<sz&
    INC ni&
    sl&=MAX(sl&,LEN(st$(ni&)))
  WEND
RETURN
'
PROCEDURE pop.info(li&,ob&,hoz!,vez!,sec%)
  LOCAL pt_&,az_&,ai&,re&,un&,td&,tb&,lzl&,ax&,ay&,mi&,az$,pop_pic$
  HIDEM
  SGET pop_pic$
  td&=9*vf&                          !Textdistanz (vertikal)
  tb&=8                              !Textbreite
  DIM az_$(22)                       !local array
  '  "pop.info" liest die Zeilen selbst ein.
  '  Der DATA-Pointer muû deshalb vorher von
  '  der aufrufenden Routine gestellt sein.
  REPEAT
    INC az_&
    READ az_$(az_&)
    lzl&=LEN(az_$(az_&))
    re&=MAX(re&,lzl&)                !lÑngsten Eintrag finden
  UNTIL az_$(az_&)="*"
  @pop.center
  DEC az_&
  @pop.box
  mi&=(li&+re&)\2
  ay&=ob&
  FOR ai&=1 TO az_&
    az$=az_$(ai&)
    lzl&=LEN(az$)
    ax&=mi&-lzl&*4
    ADD ay&,td&
    TEXT ax&,ay&,az$
  NEXT ai&
  ERASE az_$()                       !kann weg
  SPRITE rat_spr$,re&-10,un&-8
  @wart.mal(sec%*200)                !Beamtenmikado
  @set.grafik.normal
  SPRITE rat_spr$
  SPUT pop_pic$
  SHOWM
RETURN
PROCEDURE wart.mal(wt%)
  LOCAL ax&,ay&
  @no.key
  @no.but
  IF wt%<0
    wt%=12000   !Default max. 1 min warten
  ENDIF
  ADD wt%,TIMER
  ax&=MOUSEX
  ay&=MOUSEY
  REPEAT        !Beamtenmikado
    @get.tom
  UNTIL mk& OR scan| OR TIMER>wt% OR ABS(mx&-ax&)>20 OR ABS(my&-ay&)>20
  @no.but
RETURN
PROCEDURE pop.center
  MUL re&,tb&
  ADD re&,4
  un&=(pt_&+az_&)*td&
  '  Wenn hoz! (vez!) = TRUE, gibt li& (ob&)
  '  die relative Abweichung von der Mitte an,
  '  andernfalls die absolute Position
  '  der linken oberen Ecke.
  '  re& und un& wird berechnet und hÑngt
  '  von der Textbreite bzw. Zeilenzahl ab.
  '  Die Umrahmung (s. 'pop.box') geht jeweils
  '  um 7*hf& bzw. 7*vf& Åber diese Ecken hinaus.
  IF hoz!
    ADD li&,(h_br&-re&)\2
  ENDIF
  IF vez!
    ADD ob&,(v_ho&-un&)\2
  ENDIF
  ADD un&,ob&
  ADD re&,li&
RETURN
PROCEDURE pop.box
  @set.grafik.normal
  DEC li&
  PBOX li&-7*hf&,ob&-7*vf&,re&+7*hf&,un&+7*vf&
  BOX li&-5*hf&,ob&-5*vf&,re&+5*hf&,un&+5*vf&
  INC li&
  BOUNDARY FALSE
RETURN
PROCEDURE set.grafik.normal
  GRAPHMODE 1
  BOUNDARY TRUE
  COLOR 1
  DEFFILL 1,0,0
  DEFLINE 1,1,0,0
  DEFTEXT 1,0,0,7*vf&-1  !6/13
RETURN
PROCEDURE get.tom
  '  Taste oder Maustaste abliefern (nicht warten)
  MOUSE mx&,my&,mk&
  KEYTEST key%
  IF key%
    scan|=AND(key%,&HFF0000)\&HFFFF
    @no.key
    mk&=0
  ELSE
    scan|=0
  ENDIF
RETURN
PROCEDURE no.key
  '  Tastaturpuffer lîschen
  LPOKE XBIOS(14,1)+6,0
RETURN
PROCEDURE no.but
  WHILE MOUSEK  !fÑngt ÅberschÅssige Mausklicks ab (meistens, Sch... GEM)
    REPEAT
      ~EVNT_BUTTON(0,0,0)
      MOUSE mx&,my&,mk&
    UNTIL mk&=0
  WEND
RETURN
'
PROCEDURE 1.wahl
  DEFMOUSE 0
  SHOWM
  @pop.wahl(0,9*vf&,TRUE,FALSE,0,pt_1&,pw_1&,pt_1$(),pw_1$(),pk_1$(),wahl&)
  IF wahl&<4
    @aktion
  ELSE
    @last.info
    @ausgang
  ENDIF
RETURN
PROCEDURE aktion
  SELECT wahl&
  CASE 2
    neu!=(taal$<>"NL")
    taal$="NL"
  DEFAULT
    neu!=(taal$<>"D")
    taal$="D"
  ENDSELECT
  IF check!
    '  nur beim ersten Durchgang
    '  alleen de eerste keer
    @test.virus  !=> short.exit ?
    check!=FALSE
  ENDIF
  IF neu!
    @set.2.wahl
    @set.3.wahl
    @1.info
    neu!=FALSE
  ENDIF
  LOCAL kapiert!
  WHILE NOT kapiert!
    @2.wahl
  WEND
RETURN
'
PROCEDURE set.2.wahl
  @da.is.2
  @test.wahl(pt_2&,pw_2&)
  ERASE pt_2$(),pw_2$(),pk_2$()
  DIM pt_2$(pt_2&),pw_2$(pw_2&),pk_2$(pw_2&)
  @da.is.2
  @read.wahl(pt_2&,pw_2&,pt_2$(),pw_2$(),pk_2$())
RETURN
PROCEDURE da.is.2                                !~NL~D~
  IF taal$="NL"
    RESTORE 2.wahl_nl
  ELSE
    RESTORE 2.wahl_d
  ENDIF
  '
  2.wahl_nl:
  DATA " 12 Heikneuters groeten U ! "
  DATA "WONDER :"
  DATA *
  DATA "S = Snel    ","031"
  DATA "L = Langzaam","038"
  DATA "--------------",""
  DATA "Escape","001"
  DATA *,""
  '
  2.wahl_d:
  DATA " 12 Ostfriesen grÅûen Sie! "
  DATA "WUNDER:"
  DATA *
  DATA "S = schnell","031"
  DATA "L = langsam","038"
  DATA "--------------",""
  DATA "Escape","001"
  DATA *,""
RETURN
PROCEDURE set.3.wahl
  @da.is.3
  @test.wahl(pt_3&,pw_3&)
  ERASE pt_3$(),pw_3$(),pk_3$()
  DIM pt_3$(pt_3&),pw_3$(pw_3&),pk_3$(pw_3&)
  @da.is.3
  @read.wahl(pt_3&,pw_3&,pt_3$(),pw_3$(),pk_3$())
RETURN
PROCEDURE da.is.3                                !~NL~D~
  IF taal$="NL"
    RESTORE 3.wahl_nl
  ELSE
    RESTORE 3.wahl_d
  ENDIF
  '
  3.wahl_nl:
  DATA "  Heeft U zich al genoeg  "
  DATA "verwonderd ?"
  DATA *
  DATA " J = Ja, wegwezen hier ","036 001"
  DATA "I = Info             ","023"
  DATA "U = Uitleg           ","022"
  DATA "V = Verder           ","047"
  DATA *,""
  '
  3.wahl_d:
  DATA "Haben Sie sich etwa"
  DATA " schon genug gewundert? "
  DATA *
  DATA " J = Ja, raus hier ","036 001"
  DATA "I = Info         ","023"
  DATA "A = AufklÑrung   ","030"
  DATA "W = weiter       ","017"
  DATA *,""
RETURN
'
PROCEDURE 2.wahl
  MID$(pt_2$(1),3)=STR$(art&+1)  !12/13
  @pop.wahl(0,9*vf&,TRUE,FALSE,4,pt_2&,pw_2&,pt_2$(),pw_2$(),pk_2$(),wahl&)
  SELECT wahl&
  CASE 1  !schnell
    weit&=5*vf&
    @move
  CASE 2  !langsam
    weit&=2
    @move
  CASE 4  !Esc
    @3.wahl
  ENDSELECT
RETURN
PROCEDURE move
  ON art& GOSUB 1.tausch,2.tausch
  art&=(art& MOD 2)+1
RETURN
PROCEDURE 3.wahl
  @pop.wahl(0,9*vf&,TRUE,FALSE,4,pt_3&,pw_3&,pt_3$(),pw_3$(),pk_3$(),wahl&)
  SELECT wahl&
  CASE 1
    kapiert!=TRUE
  CASE 2
    @2.info
  CASE 3
    @3.info
  CASE 4
    @1.info
  ENDSELECT
RETURN
'
PROCEDURE 1.info                                 !~NL~D~
  IF taal$="NL"
    RESTORE 1.info_nl
  ELSE
    RESTORE 1.info_d
  ENDIF
  @pop.info(0,0,TRUE,TRUE,60)
  '
  1.info_nl:
  DATA "Het"
  DATA "W O N D E R"
  DATA "van"
  DATA "Casteren"
  DATA
  DATA "geeft U eindelijk"
  DATA "  het definitieve antwoord  "
  DATA " op de vraag,"
  DATA "die U al zo lang"
  DATA " uit de slaap houdt : "
  DATA
  DATA "Hoe planten de"
  DATA "Kempiese Heikneuters"
  DATA "zich voort ?"
  DATA
  DATA "Let U vooral goed op !"
  DATA *
  1.info_d:
  DATA "Das"
  DATA "W U N D E R"
  DATA "von"
  DATA "Edewecht"
  DATA
  DATA "gibt Ihnen endlich"
  DATA "eine erschîpfende Antwort"
  DATA " auf die Frage,"
  DATA "die Sie schon immer so"
  DATA "  brennend interessiert hat:  "
  DATA
  DATA "Wie vermehren sich"
  DATA "die Ostfriesen?"
  DATA
  DATA "Bitte genau aufpassen!"
  DATA *
RETURN
PROCEDURE 2.info                                 !~NL~D~
  IF taal$="NL"
    RESTORE 2.info_nl
  ELSE
    RESTORE 2.info_d
  ENDIF
  @pop.info(0,0,TRUE,TRUE,60)
  '
  2.info_nl:
  DATA "Deze Belgenmop (Nr.911206)"
  DATA " - of weet U waar Casteren ligt ? - "
  DATA "is 'public domain'"
  DATA "(d.w.z. gratis en voor niks)"
  DATA "en is afkomstig van :"
  DATA
  DATA "Heiko MÅller"
  DATA "Mozartstr.17"
  DATA "D 2905 Edewecht"
  DATA "&"
  DATA "Rudolf Tiemann"
  DATA "Donnersbergstr.14"
  DATA "D 6509 Gau-Odernheim"
  DATA
  DATA "Nederlandse vertaling :"
  DATA "Philip van Rijthoven"
  DATA "Nelson Krugerstraat 58"
  DATA "NL 6543 MX Nijmegen"
  DATA "(geboren in Casteren)"
  DATA *
  2.info_d:
  DATA "Dieser"
  DATA "Ostfriesenwitz"
  DATA "(Nr.911206)"
  DATA "ist"
  DATA "'public domain'"
  DATA "  (d.h. vîllig umsonst)  "
  DATA "und stammt von:"
  DATA
  DATA "Heiko MÅller"
  DATA "Mozartstr.17"
  DATA "D 2905 Edewecht"
  DATA "&"
  DATA "Rudolf Tiemann"
  DATA "Donnersbergstr.14"
  DATA "D 6509 Gau-Odernheim"
  DATA *
RETURN
PROCEDURE 3.info                                 !~NL~D~
  IF taal$="NL"
    RESTORE 3.info_nl
  ELSE
    RESTORE 3.info_d
  ENDIF
  @pop.info(0,9*vf&,TRUE,FALSE,60)
  '
  3.info_nl:
  DATA "Uitleg :"
  DATA "De Kempiese Heikneuters"
  DATA "planten zich voort"
  DATA "  door kollektieve deling.  "
  DATA "(dat ziet U toch ?)"
  DATA *
  3.info_d:
  DATA "AufklÑrung:"
  DATA "Die Ostfriesen"
  DATA "vermehren sich durch"
  DATA "kollektive Teilung"
  DATA "  (das sieht man doch)  "
  DATA *
RETURN
PROCEDURE last.info                              !~NL~D~
  IF taal$="NL"
    RESTORE last_info_nl
  ELSE
    RESTORE last_info_d
  ENDIF
  @pop.info(0,30*vf&,TRUE,FALSE,1)
  last_info_nl:
  DATA " tot uw dienst "
  DATA *
  last_info_d:
  DATA " servus "
  DATA *
RETURN
'
PROCEDURE 1.tausch
  x1&=li1&
  x2&=li2&
  y1&=ob1&
  y2&=ob2&
  REPEAT  !Teil 1 nach oben
    @zeig.bild
    SUB y1&,weit&
  UNTIL y1&<0
  y1&=0
  REPEAT  !Teil 1 nach rechts / Teil 2 nach links
    @zeig.bild
    ADD x1&,weit&*1.5
    SUB x2&,weit&
  UNTIL x2&<li4&
  x2&=li4&
  REPEAT  !Teil 1 weiter nach rechts
    @zeig.bild
    ADD x1&,weit&
  UNTIL x1&>li5&
  x1&=li5&
  REPEAT  !Teil 1 nach unten
    @zeig.bild
    ADD y1&,weit&
  UNTIL y1&>ob1&
  y1&=ob1&
  @zeig.bild
  @set.screen
RETURN
PROCEDURE 2.tausch
  x1&=li5&
  x2&=li4&
  y1&=ob1&
  y2&=ob2&
  REPEAT  !Teil 2 nach oben
    @zeig.bild
    SUB y2&,weit&
  UNTIL y2&<0
  y2&=0
  REPEAT  !Teil 1 nach links / Teil 2 nach rechts
    @zeig.bild
    SUB x1&,weit&*1.5
    ADD x2&,weit&
  UNTIL x2&>li2&
  x2&=li2&
  REPEAT  !Teil 1 noch weiter nach links
    @zeig.bild
    SUB x1&,weit&
  UNTIL x1&<li1&
  x1&=li1&
  REPEAT  !Teil 2 nach unten
    @zeig.bild
    ADD y2&,weit&
  UNTIL y2&>ob2&
  y2&=ob2&
  @zeig.bild
  @set.screen
RETURN
PROCEDURE zeig.bild
  SWAP scr_1%,scr_2%
  ~XBIOS(5,L:scr_1%,L:scr_2%,-1)
  VSYNC
  SPUT hintergrund$
  PUT x1&,y1&,teil_1$,7
  PUT x2&,y2&,teil_2$,7
RETURN
PROCEDURE set.screen
  IF scr_1%<scr_2%
    SWAP scr_1%,scr_2%
  ENDIF
  ~XBIOS(5,L:scr_1%,L:scr_1%,-1)
  PUT li1&,ob3&,teil_3$
  PUT x2&,y2&,teil_2$
  PUT x1&,y1&,teil_1$
RETURN
'
' === Ti ===
