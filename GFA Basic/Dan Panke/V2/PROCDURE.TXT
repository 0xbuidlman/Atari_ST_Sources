

THE PROCEDURES Volume 1.25 (92-12-28)


All procedures written by Dan Panke.

    Should you have any questions or comments please feel free to
    contact me on the following systems:

        Delphi:      DPANKE
        GEnie:       D.PANKE


    The following is a description of the accompanying procedures for
    use in GFA BASIC 3.0 or greater. Some modification to these
    procedures may be required in order for them to work in earlier
    versions of GFA BASIC.



    Contents:

        4-WAY STICK
        8-WAY STICK
        ACCESSORY BASE
        ACTIVE DRIVES
        BLOCK MOVE
        CENTER TEXT
        CHANGE HERTZ
        COLOUR
        CONVERT SCREEN
        COORDINATES
        DEGAS UNCOMPRESS
        DE-ICE
        DE-LZH
        DE-LZW
        DISSOLVE SCREEN
        FILE SELECT
        FADE IN
        FADE OUT
        FUNCTION KEY
        GATHER
        ICE 2.12
        ICE2 2.12
        ICE 2.40
        ICE2 2.40
        JSR
        KEY PRESS
        LOWER CASE
        MAGNIFY
        PALETTE SAVE/RESTORE
        QUARTET
        QUARTET 4Q
        REFORMAT TEXT
        REPLAY DIGITIZED SAMPLE 1
        REPLAY DIGITIZED SAMPLE 2
        REPLAY DIGITIZED SAMPLE 3
        RESOLUTION CHANGE
        ROLL DICE
        SCREENS
        SCROLL TEXT
        SPECKLE IN SCREEN
        SPECTRUM 512
        STOPWATCH
        TINY DISPLAY
        TTP
        UNCOMPRESS SAMPLE
        VERB/NOUN
        Useful PEEKS, POKES, etc.



Procedure: 4-WAY STICK

File Name: 4WAY_STK.LST

Associated File(s): none

The Call: GOSUB 4way_stick(x%,y%)

Variable(s):

    x%,y% = current x/y position of joystick 1. The new x/y position
    will be returned in these variables.

Note(s):

    1) A STICK(1) command will freeze the mouse. If you wish to
    continue using the mouse execute a STICK 0 call after this
    procedure.

    2) This procedure only reads the joystick in 4 directions (up,
    down, left, right).

    3) This procedure only changes the x/y coordinates by 1 in each
    direction. Adjust the procedure if you require greater movement.

Example(s):

    @4way_stick(x%,y%)



Procedure: 8-WAY STICK

File Name: 8-WAY_STK.LST

Associated File(s): none

The Call: GOSUB 8way_stick(x%,y%)

Variable(s):

    x%,y% = current x/y position of joystick 1. The new x/y position
    will be returned in these variables.

Note(s):

    1) A STICK(1) command will freeze the mouse. If you wish to
    continue using the mouse execute a STICK 0 call after this
    procedure.

    2) This procedure reads the joystick in all eight positions.
    Diagonal movement adjusts both the x and y coordinates.

    3) This routine only changes the x/y coordinates by 1 in each
    direction. Adjust the procedure if you require greater movement.

Example(s):

    @8way_stick(x%,y%)



Procedure: ACCESSORY BASE

File Name: ACCESSRY.LST

Associated File(s): none

The Call: NOT A PROCEDURE!

Variable(s): 

Note(s):

    1) You must set $m for the amount of memory the accessory is to
    take up.

    2) Use this base to create an accessory out of your program.



Procedure: ACTIVE DRIVES

File Name: DRIVES.LST

Associated File(s): none

The Call: GOSUB active_drives(drv$)

Variable(s):

    drv$ = the string to place the character list of active drives.
    These codes will be placed in upper case.

Note(s):

    1) To find whether a drive is active, search the returned sting
    with the INSTR command.

Example(s):

    @active_drives(drv$)
    IF INSTR(drv$,"B")
      PRINT "Drive B is active!"
    ENDIF



Procedure: BLOCK MOVE

File Name: BLK_MOVE.LST

Associated File(s): none

The Call:
  GOSUB block_move(source%,x1%,y1%,x2%,y2%,destination%,dx%,dy%,type%)

Variable(s):

    source% = address of source screen where block to move is located.

    x1%,y1%,x2%,y2% = framed coordinates of block to move (similar to
    GET x1%,y1%,x2%,y2%,block$).

    destination% = address of destination screen where source block
    is to be copied to.

    dx%,dy% = coordinate to put blocked area (similar to PUT
    dx%,dy%,block$).

    type% = similar to the GRAPHMODE command variable. See NOTE 2.

Note(s):

    1) This procedure works very similar to the GET/PUT command but is
    slightly different and is a little more flexible. As the procedure
    stands it is about the same speed as GET/PUT. (This procedure is
    more of an example and should be modified to increase desired
    speed and result.)

    2) Consult the BITBLT command in your GFA Manual for various copy
    modes. Most common modes are:
        3  = replace (GRAPHMODE 1)
        6  = xor (GRAPHMODE 2)
        7  = transparent (GRAPHMODE 3)
        13 = inverse transparent (GRAPHMODE 4)

    3) I recommend using RC_COPY instead of this procedure.

Example(s):

    INLINE screen_2%,32000
    @block_move(screen_2%,0,0,15,15,XBIOS(3),160,100,3)



Procedure: CENTER TEXT

File Name: CENTER_T.LST

Associated File(s): none

The Call: GOSUB center_text(txt$,screen_line%)

Variable(s):

    txt$ = text string to center on screen.

    screen_line% = the screen line on which to center the text. This
    must be a number from 1 to 25.

Note(s):

    1) The length of the text string must be less than the current
    screen resolution width before the procedure will execute (less
    than 40 for low resolution and less than 80 for medium or high
    resolution).

    2) After every center text procedure call a carriage return is
    executed except for line 25 (a carriage return on line 25 would
    move the centered text to line 24).

Example(s):

    title$="Loading data, please wait..."
    @center_text(title$,4)



Procedure: CHANGE HERTZ

File Name: HERTZ.LST

Associated File(s): none

The Call: GOSUB change_hertz(rate%)

Variable(s):

    rate% = The hertz rate to change the operating system to. The
    value can only be 50 (Europe) or 60 (North America).

Note(s):

    1) Pretty straight forward. No other notes required.

Example(s):

    @change_hertz(50)
    PRINT "50 hertz..."
    DELAY 3
    @change_hertz(60)
    PRINT "Now its 60 hertz!"
    DELAY 3



Procedure: COLOUR

File Name: COLOUR.LST

Associated File(s): None

The Call: GOSUB colour(c%,r%,g%,b%)

Variable(s):

    c% = the COLOR to change.

    r%,g%,b% = the red, green and blue color settings for the desired
    COLOR change.

Note(s):

    1) For LOW resolution COLOR changes. This procedure matches the
    correct COLOR change for use with the commands: COLOR, DEFTEXT,
    DEFFILL, etc.

    2) This color change procedure does not correspond with the VT52
    {CHR$(27)+"b"+CHR$(color)} command.

Example(s):

    FOR c%=0 TO 15
      DEFTEXT c%,0,0,6
      TEXT 0,c%*8+7,c%
    NEXT c%
    FOR c%=0 TO 15
      @colour(c%,0,0,0)
      PAUSE 25
    NEXT c%



Procedure: CONVERT SCREEN

File Name: CONVERT.LST

Associated File(s): CONVERT.INL

The Call: GOSUB convert_screen(from%,to%)

Variable(s):

    from% = the screen resolution converting from (0=LOW, 1=MEDIUM, &
    2=HIGH resolution).

    to% = the screen resolution converting to (0=LOW, 1=MEDIUM, &
    2=HIGH resolution).

Note(s):

    1) This procedure allows visibility of any screen in another
    resolution. The colors will not appear correctly (as you may
    expect) but you could now save this screen and adjust it for
    future use and/or editing.

    2) This procedure creates a variable called convert_screen%.

Example(s)

    Load a high resolution picture and display it in low resolution:
        BLOAD "PICTURE.PI3",XBIOS(2)-34
        @convert_picture(2,0)

    Load a medium resolution picture and display it in high
    resolution:
        BLOAD "PICTURE.PI2",XBIOS(2)-34
        @convert_picture(1,2)



Procedure: COORDINATES

File Name: COORDNTE.LST

Associated File(s): none

The Call: GOSUB coordinates(x1%,y1%,x2%,y2%,a,nx%,y%)

Variable(s):

    x1%,y1% = Point 1 on a line.

    x2%,y2% = Point 2 on a line.

    a = coordinate a/distance_between_points to find.

    nx%,ny% = returned coordinates found in calculation.

Note(s):

    1) This procedure finds coordinates of point a/nth of the way from
    POINT 1 to POINT 2 using the formulas x=x1+(a/n)*(x2-x1) and
    y=(a/n)*(y2-y1).

    2) This procedure is used for move objects or drawing lines
    between points. An ideal use would be in arcade games to move an
    object towards another in a straight line.

Example(s):

    DO
      MOUSE x2%,y2%,mk%
      IF mk%
        m=SQR((x2%-x1%)*(x2%-x1%)+(y2%-y1%)*(y2%-y1%))
        FOR a=1 to m
          @coordinates(x1%,y1%,x2%,y2%,a,nx%,ny%)
          PSET nx%,ny%,15
        NEXT a
        x1%=nx%
        y1%=ny%
      ENDIF
    LOOP



Procedure: DEGAS UNCOMPRESS

File Name: DEGAS_PC.LST

Associated File(s): DEGAS_PC.INL

The Call: @degas_pc(source%,destination%)

Variable(s):

    source% = the starting address of the Degas compressed picture.

    destination% = where the uncompressed picture should be stored.

Note(s):

    1) In most cases the destination will be the screen addresses
    XBIOS(2) or XBIOS(3).

    2) This procedure does not set the colors for the loaded picture.
    This can be accomplished with ~XBIOS(6,L:source%+2).

    3) This procedure does not check for the correct screen
    resolution of the loaded picture.

    4) This procedure creates a variable called degas_pc% for the
    INLINE command.

Example(s):

    DIM picture%(8100)
    BLOAD "degas.pc1",VARPTR(picture%(0))
    @degas_pc(VARPTR(picture%(0)),XBIOS(3)
    ~XBIOS(6,L:VARPTR(picture%(0))+2)



Procedure: DE-ICE

File Name: ICE.LST

Associated File(s): ICE.INL
                    JAMPACK.PRG

The Call: GOSUB(source%,destination%)

Variable(s):

    source% = starting memory location of the compressed ICE file.

    destination% = destination memory location to place the
    uncompressed ICE file.

Note(s):

    1) Use JAMPACK.PRG to compress files into ICE format.

    2) ICE provides an efficient and reasonably fast decompression
    speed. Decompression speed is approximately 2/3 of a second for
    60K of uncompressed data, however, compression time is very slow.

    3) This procedure creates a variable called ice% for the INLINE
    command.

Example(s):

    DIM source|(10000),destination|(50000)
    BLOAD "file.ice",VARPTR(source|(0))
    @ice(VARPTR(source|(0)),VARPTR(destination|(0))

    INLINE degas_picture%,9267
    @ice(degas_picture%,XBIOS(3)-34)
    ~XBIOS(6,L:XBIOS(3)-32)



Procedure: DE-LZH

File Name: LZH.LST

Associated File(s): LZH.INL
                    JAMPACK.PRG

The Call: GOSUB lzh(source%,destination%)

Variable(s):

    source% = starting memory location of the compressed LZH file.

    destination% = destination memory location to place the
    uncompressed LZH file.

Note(s):

    1) Use JAMPACK.PRG to compress files into LZH format.

    2) LZH provides the best average compression of the 3 main methods
    found in the JAMPACK.PRG. Decompression is approximately 1 second
    for 60K of uncompressed data.

    3) LZH seems to overwrite the source so the LZH method is not
    recommended for multiple uses within a program.

    4) This procedure creates a variable called lzh% for the INLINE
    command.

Example(s):

    DIM source|(10000),destination|(50000)
    BLOAD "file.lzh",VARPTR(source|(0))
    @lzh(VARPTR(source|(0)),VARPTR(destination|(0))

    INLINE degas_picture%,8263
    @lzh(degas_picture%,XBIOS(3)-34)
    ~XBIOS(6,L:XBIOS(3)-32)



Procedure: DE-LZW

File Name: LZW.LST

Associated File(s): LZW.INL
                    JAMPACK.PRG

The Call: GOSUB lzw(source%,destination%)

Variable(s):

    source% = starting memory location of the compressed LZW file.

    destination% = destination memory location to place the
    uncompressed LZW file.

Note(s):

    1) Use JAMPACK.PRG to compress files into LZW format.

    2) LZW provides the poorest average compression of the 3 main
    methods found in the JAMPACK.PRG. However, decompression is the
    fastest! Approximately 1/3 of a second for 60K of uncompressed
    data.

    3) This procedure creates a variable called lzw% for the INLINE
    command.

Example(s):

    DIM source|(10000),destination|(50000)
    BLOAD "file.lzw",VARPTR(source|(0))
    @lzw(VARPTR(source|(0)),VARPTR(destination|(0))

    INLINE degas_picture%,12393
    @lzw(degas_picture%,XBIOS(3)-34)
    ~XBIOS(6,L:XBIOS(3)-32)



Procedure: DISSOLVE SCREEN

File Name: DISSOLVE.LST

Associated File(s): none

The Call: GOSUB dissolve

Note(s):

    1) Dissolve will speckle the displayed screen to the background
    color. Creates a nice effect on title screens.

    2) See 'SPECKLE IN SCREEN' for the reverse of this procedure.

Example(s):

    @dissolve



Procedure: FILE SELECT

File Name: FILE_SEL.LST

Associated File(s): none

The Call: GOSUB file_select(file$)

Variable(s):

    file$ = the selected file via the File Selector will be returned
    in this string variable.

Note(s):

    1) If you wish to have a specific file extender searched for,
    enter the extender preceeded by a period (i.e. file$=".PC?") in
    the passed procedure string variable.

    2) This procedure sets the path and active drive to the file
    selected.

Example(s):

    @file_select(file$)

    file$=".doc"
    @file_select(file$)
    BLOAD file$,location%



Procedure: FADE IN

File Name: FADEIN.LST

Associated File(s): none

The Call: GOSUB fadein(rate%,location%)

Variable(s):

    rate% = the time to take in 50ths of a second to fade in the
    color palette.

    location% = the location of the color palette to fade in.

Note(s):

    1) Normally the screen should be blanked before making the fade
    in procedure call (or use the FADE OUT procedure).

Example(s):

    BLOAD "picture.pi1",XBIOS(2)-34
    @fadein(50,XBIOS(2)-32)



Procedure: FADE OUT

File Name: FADEOUT.LST

Associated File(s): none

The Call: GOSUB fadeout(rate%)

Variable(s):

    rate% = the rate in 50ths of a second to take in fading out the
    current color palette.

Note(s):

    1) Fading the screen out will destroy the current color palette.
    You may wish to save the current palette by using the
    PALETTE("S") procedure.

Example(s):

    @fadeout(50)



Procedure: FUNCTION KEY

File Name: FUNC_KEY.LST

Associated File(s): none

The Call: GOSUB function_key(key%)

Variable(s):

    key% = the Function Key pressed will be returned in this variable.

Note(s):

    1) If no Function Key was pressed, zero will be returned in the
    passed variable. If a Function Key was pressed the number of the
    Function Key will be found in the passed variable (A number
    between 1 & 10).

Example(s):

    DO
      @function_key(key%)
      IF key%
        PRINT "F";key%;" was pressed."
      ENDIF
    LOOP



Procedure GATHER

File Name: GATHER.LST

Associated File(s): GATHER.PRG

The Call: GOSUB gather(location%,number%,address%,size%)

Variable(s):

    location% = the memory address of the GATHERed file.

    number% = the number (1-64) of the GATHERed file to use/find.

    address% = an integer variable where the desired GATHERed file
    memory address will be stored.

    size% = an integer variable where the size of the desired
    GATHERed file will be stored.

NOTE(S):

    1) The GATHER program collects files and places them into one
    file. Up to 64 files can be collected into one.

    2) If an incorrect file number is entered or a file number does
    not exist the GATHER procedure will return zero (0) in both the
    address% and size% variables.

Example(s):

    DIM files|(100000)
    REM 'pictures.set' contains a collection of DEGAS PI1 files
    BLOAD "pictures.set",V:files|(0)
    @gather(V:files|(0),1,address%,size%)
    BMOVE address%,XBIOS(2)-34,size%
    ~XBIOS(5,L:XBIOS(2)-32)



Procedure: ICE 2.12

File Name: ICE_212.LST

Associated File(s): ICE_2_12.PRG

The Call: GOSUB ice_212(source%,destination%)

Variable(s):

    source% = the source memory location of the ice packed data.

    destination% = the destination memory location to place the
    uncompressed data.

Note(s):

    1) Not as efficient as the JAMPACK ICE method but is quite good
    with picture compression.

Example(s)

    DIM source|(100000),destination|(250000)
    BLOAD file$,V:source|(0)
    @ice_212(V:source|(0),V:destination|(0))



Procedure: ICE2 2.12

File Name: ICE2_212.LST

Associated File(s): ICE_2_12.PRG

The Call: GOSUB ice2_212(location%)

Variable(s):

    location% = the location of the ice packed file. This routine
    will unpack the source onto itself.

Note(s):

    1) This routine works excellently for picture files. The decision
    to use the ICE_212(source%,destination%) procedure is up to you.

Example(s):

    BLOAD picture$,XBIOS(2)-34
    @ice2_212(XBIOS(2)-34)
    ~XBIOS(6,L:XBIOS(2)-32)


Procedure: ICE 2.40

File Name: ICE_240.LST

Associated File(s): ICE_2_40.PRG

The Call: GOSUB ice_240(source%,destination%)

Variable(s):

    source% = the source memory location of the ice packed data.

    destination% = the destination memory location to place the
    uncompressed data.

Note(s):

    1) PACK-ICE Version 2.40 is quite efficient but will NOT allow the
    picture compression method.

Example(s)

    DIM source|(100000),destination|(250000)
    BLOAD file$,V:source|(0)
    @ice_240(V:source|(0),V:destination|(0))



Procedure: ICE2 2.40

File Name: ICE2_240.LST

Associated File(s): ICE_2_40.PRG

The Call: GOSUB ice2_240(location%)

Variable(s):

    location% = the location of the ice packed file. This routine
    will unpack the source onto itself.

Note(s):

    1) This routine works extremely well for files to extract onto
    themselves.

Example(s):

    BLOAD picture$,XBIOS(2)-34
    @ice2_240(XBIOS(2)-34)
    ~XBIOS(6,L:XBIOS(2)-32)



Procedure: JSR

File Name: JSR.LST

Associated File(s): JSR.INL

The Call: GOSUB jsr(location%)

Variable(s):

    location% = the location of the established machine code to call.

Note(s):

    1) Some machine code I've encountered does not work properly when
    compiled. This is due to the fact that the stack was not saved
    before execution. This routine simply saves the stack, executes
    the code, returns the stack and exits the routine.

Example(s)

    INLINE assembler_code%,288
    @jsr(assembler_code%)



Procdure: KEY PRESS

File Name: KEYPRESS.LST

Associated File(s): none

The Call: GOSUB key_press(key%)

Variable(s):

    key% = the returned value of the key pressed. This number will
    by a long word variable.

Note(s):

    1) KEY PRESS will allow you to find the value of any combination
    of keys pressed. (Similar to the INP(2) command.)

Example(s):

    DO
      @key_press(key%)
      IF key%
        PRINT key%
      ENDIF
    LOOP



Procedure: LOWER CASE

File Name: LOWER_CS.LST

Associated File(s): none

The Call: GOSUB lower_case(txt$)

Variable(s):

    txt$ = text string to change to lower case.

Note(s):

    1) Only upper case letters (A-Z) are changed to lower case. All
    other characters are unaffected.

    2) The string to change must be passed in a string variable. The
    modified string is passed back in the same string variable.

Example(s):

    entry$="GOOD LUCK!"
    @lower_case(entry$)
    entry$=UPPER$(LEFT$(entry$))+RIGHT$(entry$,LEN(entry$)-1)
    PRINT entry$



Procedure: MAGNIFY

File Name: MAGNIFY.LST

Associated File(s): none

The Call: GOSUB
    magnify(source%,x1%,y1%,x2%,y2%,destination%,dx%,dy%,mx%,my%)

Variable(s):

    source% = address of the source screen where magnification area
    is located.

    x1%,y1%,x2%,y2% = framed coordinates of area to magnify (similar
    to GET x1%,y1%,x2%,y2%,block$).

    destination% = address of destination screen where source block
    is to be magnified.

    dx%,dy% = coordinate to start magnification (similar to PUT
    dx%,dy%,block%).

    mx%,my% = amount to magnify blocked area in both the x and y
    directions. Magnification must be postive integer values.

Note(s):

    1) This procedure enlarges a screen area to any desired size.
    This procedure is NOT error trapped so some caution must be
    observed when using it.

Example(s):

    PRINT AT(1,1);"PROCEDURES"
    @magnify(XBIOS(2),0,0,79,7,XBIOS(2),0,8,2,3)



Procedure: PALETTE SAVE/RESTORE

File Name: PALETTE.LST

Associated File(s): none

The Call: GOSUB palette(string$)

Variable(s):

    string$ = the string vairable sent is looked to see whether you
    want to 'SAVE' or 'RESTORE' the color palette. The first letter
    must be an 'S' or an 'R' ('S' to save palette, 'R' to restore).
    The sent string can be in upper or lower case.

Note(s):

    1) This procedure creates a string variable called palette$.

Example(s):

    @palette("s")
    FOR a%=0 to 15
        SETCOLOR a%,0,0,0
    NEXT a%
    @palette("r")



Procedure: QUARTET

File Name: QUARTET.LST

Associated File(s): JSR.LST
                    SINGSONG.DAT

The Call: GOSUB quartet(song%,vset%)

Variable(s):

    song% = the address of the QUARTET song to play.

    vset% = the address of the QUARTET voice set to use for the song.

Note(s):

    1) This procedure only works compiled.

    2) This procedure creates a variable called 'xquartet%'.

    3) Procedure RESERVEs memory, then MFREEs it. If you're doing odd
    things with your memory you may want to zero out the 'xquartet%'
    variable so the 'SONGSONG.DAT' file will be reloaded.

Example(s):

    DIM song|(20000),vset|(100000)
    BLOAD "song.4v",V:song|(0)
    BLOAD "song.set",V:vset|(0)
    @quartet(V:song|(0),V:vset|(0))



Procedure: QUARTET 4Q

File Name: QUARTETQ.LST

Associated File(s): JSR.INL
                    SINGSONG.DAT
                    ICE2_240.INL

The Call: GOSUB quartet_4q(file$)

Variable(s):

    file$ = the name of the Quartet '.4Q' song file to load and play.

Note(s):

    1) This procedure only works compiled.

    2) This procedure creats a variable called 'xquartet%'.

Example(s):

    @quartet_4q("A:\MAJORTOM.4Q")



Procedure: REFORMAT TEXT

File Name: REFORMAT.LST

Associated File(s): none

The Call: GOSUB reformat_text(txt$,x%,y%,width%)

Variable(s):

    txt$ = the text string to reformat on the screen.

    x%,y% = the x/y coordinates to start printing the text.

    width% = the width in characters to reformat the text to.

Note(s):

    1) This routine is not error trapped against printing off screen
    or exceeding the screen width.

    2) Consult the PRINT AT() command in the GFA Manual for legal x/y
    coordinates.

Example(s):

    txt$="The books are on the counter by the phone."
    @reformat_text(txt$,10,10,8)



Procedure: REPLAY DIGITIZED SAMPLE 1

File Name: REPLAY.LST

Associated File(s): REPLAY.INL

The Call: GOSUB replay(sample%,length%,speed%)

Variable(s):

    sample% = the starting address of the digitized sample to play.

    length% = the length of the sample found at the sample% address.

    speed% = the MHz speed at which to play the sample. The sample
    may be replayed from 3 to 16 MHz.

Note(s):

    1) This procedure is interrupt driven so digitized samples will
    play in the background.

    2) This procedure creates a variable called samplay_exe% for the
    INLINE command.

    3) The procedures, "REPLAY DIGITIZED SAMPLE 2 & 3", have superior
    replaying ability compared to this procedure.

Example(s):

    DIM gong|(20000)
    BLOAD "gong.spl",VARPTR(gong|(0))
    @replay(VARPTR(gong(0)),18244,10)



Procedure: REPLAY DIGITIZED SAMPLE 2

File Name: TWO_BIT.LST

Associated File(s): TWO-BIT.INL

The Call: GOSUB two_bit(location%,hertz%,length%)

Variable(s):

    location% = memory location of the sample to replay.

    hertz% = the MHz speed at which to replay the digitized sample.
    The sample may be replayed from 5-16 MHz.

    length% = the length of the sample in bytes found at location%.

Note(s):

    1) This procedure is interrupt driven so digitized samples will
    play in the background.

    2) This procedure creates a variable called two_bit% for the
    INLINE command.

    3) Two procedures are actually loaded in with this procedure.
    The other procedure, 'kill_two_bit', will stop any existing
    sample being played.

    4) To check if any sample is currently being played
    LPEEK(two_bit%+28). If the LPEEK returns a value the digitized
    sample is still being played.

Example(s):

    INLINE bell%,17799
    @two_bit(bell%,16,17799)
    WHILE LPEEK(two_bit%+28)
    WEND
    PRINT "Done!"



Procedure: REPLAY DIGITIZED SAMPLE 3

File Name: BASCODE.LST

Associated File(s): BASCODE.INL

The Call: GOSUB bascode(location%,length%,hertz%)

Variable(s):

    location% = memory location of the sample to replay.

    length% = the length of the sample in bytes found at location%.

    hertz% = the MHz speed at which to replay the digitized sample.
    The sample may be replayed from 4-16 MHz.

Note(s):

    1) This procedure holds all computer operations until the sample
    has completed playing.

    2) This procedure creates a variable called bascode% for the
    INLINE command.

Example(s):

    INLINE chime%,8250
    @bascode(bell%,8250,10)



Procedure: RESOLUTION CHANGE

File Name: RESOLUTN.LST

Associated File(s): none

The Call: GOSUB resolution(change%)

Variable(s):

    change% = change is the desired screen resolution.

Note(s):

    1) The passed variable must be a 0, 1 or 2 before the procedure
    will be executed. Passing a 1 will change the screen resolution to
    LOW, a 2 will change the resolution to MEDIUM, and a 0 will RESET
    the resolution to its initial setting.

    2) This procedure always executes a CLS (Clear Screen).

    3) This procedure creates a variable called resolution|.

Example(s):

    @resolution(1)
    PRINT "Low resolution"
    DELAY 1
    @resolution(2)
    PRINT "Medium resolution"
    DELAY 1
    @resolution(0)
    PRINT "Resolution restored!"
    DELAY 1



Procedure: ROLL DICE

File Name: DICE.LST

Associated File(s): none

The Call: GOSUB dice(number%,sides%,total%)

Variable(s):

    number% = the number of dice to roll.

    sides% = the number of sides on the dice.

    total% = the total of the dice rolled is returned in this
    variable. This variable is zeroed in the procedure before the
    value is calculated.

Note(s):

    1) Rolling dice is required in many games: YAHTZEE, DUNGEONS &
    DRAGONS, CRAPS, MONOPOLY, etc. This procedure can fit comfortably
    and work in any dice required program.

Example(s):

    PRINT "Rolling 2 6-sided dice..."
    @dice(2,6,total%)
    PRINT "I rolled a ";total%

    PRINT "Selecting a RANDOM number from 1-100"
    @dice(1,100,number%)
    PRINT number%



Procedure: SCREENS

File Name: SCREENS.LST

Associated File(s): none

The Call: GOSUB screens(number%,location%)

Variable(s):

    number% = the number of screens to reserve in memory or, should
    screens be already allocated, the memory location of the reserved
    screen. Sending a 0 will ERASE the reserved area.

    location% = the location of the first screen reserved if reserving
    screens, or if screen areas have been allocated the location of
    the screen area in memory.

Note(s):

    1) This procedure creates a dimensioned variable called
    screens|().

    2) Each screen (except the first one) will have an offset of 32256
    bytes from the number returned in the variable: location%. A large
    enough buffer has been given that will allow screen loads into
    the new screen areas.

    3) Flipping around the various defined screens is done through
    the use of XBIOS 5. Check your GFA manual for the use of the
    XBIOS 5 command.

Examples:

    @screens(0,location%)     ' location%=0
    @screens(2,location%)     ' reserve 2 screens
                                location%=address of 1st screen
    BLOAD "screen1.pi1",location%-34
    @screens(2,location%)     ' find location of 2nd screen
    BLOAD "screen2.pi1",location%-34
    original_screen%=XBIOS(2)
    @screens(1,location%)     ' find location of 1st screen
    ~XBIOS(5,L:location%,L:location%,-1)
    PAUSE 100
    @screens(2,location%)     ' find location of 2nd screen
    ~XBIOS(5,L:location%,L:location%,-1)
    PAUSE 100
    ~XBIOS(5,L:original_screen%,L:original_screen%,-1)



Procedure: SCROLL TEXT

File Name: SCROLL_T.LST

Associated File(s): none

The Call: GOSUB scroll_text(txt$,y%)

Variable(s):

    txt$ = the text string to scroll on screen.

    y% = the screen line to scroll the text on.

Note(s):

    1) A simple procedure that scrolls text on screen and repeats
    until a key is pressed. This procedure does not work on line 25
    (use lines 1 to 24).

    2) Pad your text line with spaces if your text line to scroll is
    NOT less than the screen width of the current resolution.

    3) This procedure is not entirely smooth but does the trick
    without creating a large and complicated routine. Again, modify
    for your own desired result.



Procedure: SPECKLE IN SCREEN

File Name: SPECKLE.LST

Associated File(s): none

The Call: GOSUB speckle(screen2%)

Variable(s):

    screen2% = the memory location of the screen to speckle in.

Note(s):

    1) SPECKLE IN SCREEN will display a new screen by randomly
    speckling the new screen into view.

    2) It is recommended that you set your colors before calling the
    SPECKLE procedure.

    3) See 'DISSOLVE' for the reverse of this procedure.

Example(s):

    DIM screen2|(32100)
    BLOAD "degas.pi1",VARPTR(screen2|(0))
    ~XBIOS(6,L:VARPTR(screen2|(0))+2)
    @speckle(VARPTR(screen2|(0))+34)



Procedure: SPECTRUM 512

File Name: SPECTRUM.LST

Associated File(s): SPECTRUM.INL

The Call: GOSUB spectrum_512(file$)

Variable(s):

    file$ = The name of the SPECTRUM 512 uncompressed (.SPU) picture
            to load and display.

NOTE(S):

    1) You must be in LOW resolution.

    2) This procedure creates a variable called spectrum_512%.

    3) The screen hertz is changed to 50 then back to 60 once the
    screen display is finished. Pressing any key will exit the
    spectrum picture display.

EXAMPLE(S):

    @spectrum_512("C:\SPEC_512\REDARROW.SPU")



Procedure: STOPWATCH

File Name: STOPWTCH.LST

Associated File(s): none

The Call: GOSUB stopwatch(cmd%,var%)

Variable(s):

    cmd% = The STOPWATCH command to perform. See below for possible
    commands.

    var% = This variable will have a value returned in it or the
    contained value will be used depending on the value of cmd%.

Note(s):

    1) The internal timer can be used as a method of scoring in games.
    Simple calculations with the use of this procedure has a great
    many possibilities.

    2) Possible values for cmd% are:
        0 - Reset the internal timer to zero (var% will also be set to
        zero).
        1 - Get the internal timer value and place it in var%.
        2 - Get the internal timer value and subtract var% from it,
        then return this value in var%.
        3 - Place the value of var% into the internal timer.

Example(s):

    @stopwatch(0,t%)
    DELAY 1
    @stopwatch(1,t%)
    PRINT t%
    DELAY 1
    @stopwatch(1,t%)
    PRINT t%
    @stopwatch(2,t%)
    PRINT t%
    @stopwatch(3,t%)
    PRINT t%



Procedure: TINY DISPLAY

File Name: TINY.LST

Associated File(s): none

The Call: GOSUB tiny(source%,destination%)

Variable(s):

    source% = The memory location of the Tiny picture to decompress.

    destination% = Where to place the Tiny picture in memory (normally
    XBIOS(2) or XBIOS(3)).

Note(s):

    1) The resolution for the Tiny picture can be found at
    PEEK(source%).

    2) The 32 bit color palette for the Tiny picture starts at
    tiny_palette%.

Example(s):

    INLINE picture%,6306
    @tiny(picture%,XBIOS(3))
    ~XBIOS(6,L:tiny_palette%)



Procedure: TTP

File Name: TTP.LST

Associated File(s): none

The Call: GOSUB ttp(txt$)

Variable(s):

    txt$ = The TTP (TOS Takes Parameters) command line string as
    entered in a .TTP program.

Note(s):

    1) Simply change a compiled GFA program to have an extender of
    .TTP and run it. A call to the TTP procedure will return what was
    entered in the command line of the program.

Example(s):

    @ttp(entry$)
    IF entry$=""
      PRINT "No command line was entered!"
    ELSE
      PRINT "The following was entered in the TTP command line:"
      PRINT entry$
    ENDIF



Procedure: UNCOMPRESS SAMPLE

File Name: UNSAMPLE.LST

Associated File(s): UNSAMPLE.INL
                    NOISEPAK.PRG

The Call: GOSUB unsample(source%,length%)

Variable(s):

    source% = Memory location of the compressed digitized sample.

    length% = Length of the uncompressed sample.

Note(s):

    1) The NOISE PAKKER program compresses digitized samples to 1/2
    their original size.

    2) Use the REPLAY procedure to play the digitized samples.

Example(s):

    DIM bell|(20000)
    BLOAD "bell.spl",V:bell|(0)
    @unsample(V:bell|(0),16980)
    @replay(V:bell|(0),16980,16)



Procedure: VERB/NOUN

File Name: VERBNOUN.LST

Associated File(s): none

The Call: GOSUB verb_noun(entry$,verb$,noun$)

Variable(s):

    entry$ = the string to separate in a verb and noun.

    verb$ = the verb part of the entry$ string.

    noun$ = the noun part of the entry$ string.

Note(s):

    1) Verb$ and noun$ will always be returned in upper case.

    2) Extraneous spaces are trimmed before execution.

    3) If the entry$ string is a single word, both verb$ and noun$
    will be equal to the entry$ string.

    4) The procedure is very useful for anyone writing text
    adventures.

    5) Verb$ and noun$ are always set to a length of zero in the
    procedure before execution.

Example(s):

    DO
      INPUT entry$
      @verb_noun(entry$,verb$,noun$)
      PRINT verb$;" ",noun$
    LOOP




USEFUL PEEKS, POKES, etc.

    SDPOKE &H484,&H0 - turns OFF key clicks, repeats and GEM bell.

    SDPOKE &H484,10000 - turns ON key clicks, repeats and GEM bell.

    SPOKE &H484,PEEK(&H484) AND NOT 1 - key click OFF.

    SPOKE &H484,PEEK(&H484) OR 1 - key click ON.

    SPOKE &H484,PEEK(&H484) AND NOT 4 - GEM bell turned OFF.

    SPOKE &H484,PEEK(&H484) OR 4 - GEM bell turned ON.

    LPOKE XBIOS(14,1)+6,0 - erase keyboard buffer.

    LPOKE XBIOS(14,0)+20,0 - erase serial output buffer.

    ~XBIOS(35,wait%,speed%) - adjust the keyboard repeat rate. Wait%
    is the time a key must be held down before a repeat starts.
    Speed% is the number of 20 millisecond units to wait between each
    repeated character.

    ~XBIOS(29,1) - turn disk drive light ON.

    ~XBIOS(30,66) - turn disk drive light OFF.

    IF (PEEK(&HFFFA01) AND 2)=0 - modem is on-line. Anything else and
    modem is off-line.

    IF (PEEK(&HFFFA01) AND 64)=0 - you are receiving a ring signal
    from the phone line.

    GEMDOS(6,255) - returns the integer value of any key combination.
    Similar to INP(2).

    ~BIOS(11,BCLR(BIOS(11,-1),4)) - CapsLock OFF.

    ~BIOS(11,BSET(BIOS(11,-1),4)) - CapsLock ON.

    IF PEEK(&H2C+4)=0 - Program was RUN from "AUTO" folder. Anything
    and program was run from the DESKTOP.

    To use "EVERY" and "AFTER" you must invoke $I+ and $U in the
    compiler.

    IF GEMDOS(17) - Printer is ready!

