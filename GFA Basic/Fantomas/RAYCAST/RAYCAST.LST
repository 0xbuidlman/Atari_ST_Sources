' *-----------------------------------------------------------------------*
'
'                             ð RAYCAST v 1.00 ð
'
'                              ½ FANTOMAS 1999
'
' *-----------------------------------------------------------------------*
'
ON BREAK GOSUB fin
ON ERROR GOSUB fin
'
DIM stable&(359+90),mil&(359+90)
DIM grid&(20,20)
DIM reg%(16)
INLINE module%,32034
INLINE playmod%,11916
INLINE e_fond%,32034
INLINE e_murs%,32034
INLINE ecran1%,32034
INLINE ecran2%,32034
adr1%=4+INT(ecran1%/4)*4
adr2%=4+INT(ecran2%/4)*4
image1%=e_fond%+34
image2%=e_fond%+16034
murs%=e_murs%+34
ecran%=XBIOS(3)
super%=GEMDOS(32,L:0)
stride%=4
turn%=5
OUT 4,18
@maketables
res&=XBIOS(88,W:-1)
~XBIOS(5,L:adr1%,L:adr1%,W:3,W:&X10000010)        ! RVB 320x200 16c.
CLS
~XBIOS(5,L:adr2%,L:adr1%,W:3,W:-1)                ! RVB 320x200 16c.
CLS
~XBIOS(6,L:e_fond%+2)
BMOVE murs%+100*160,adr1%+150*160,38*160
BMOVE murs%+100*160,adr2%+150*160,38*160
@loadscreen("level1.dat")
' *-----------------------------------------------------------------------*
' *                                                                       *
' *                      ð Boucle principale ð                            *
' *                                                                       *
' *-----------------------------------------------------------------------*
' @mod_start
REPEAT
  x&=39
  SWAP adr1%,adr2%                          ! Pour le d‚placement du sol.
  ~XBIOS(5,L:adr1%,L:adr2%,W:3,W:-1)        ! Mets les ‚crans en place.
  VSYNC                                     ! Synchro.
  BMOVE image1%,ADD(adr1%,8000),16000                 ! TransfŠre le fond.
  ' -----------------------------------------------------------------------
  ' ð Calcul du labyrinthe
  ' -----------------------------------------------------------------------
  head1%=SUB(heading%,14)
  head2%=ADD(heading%,15)
  '
  FOR a%=head1% TO head2%
    angle&=a% MOD 360
    IF angle&<0
      ADD angle&,360
    ENDIF
    ancos&=ADD(angle&,90)
    stepx&=stable&(ancos&)
    stepy&=stable&(angle&)
    xx&=px&
    yy&=py&
    l&=0
    '
    REPEAT
      INC l&
      xx&=xx&-stepx&
      yy&=yy&-stepy&
      xdiv&=xx&\1024
      ydiv&=yy&\1024
      k&=grid&(xdiv&,ydiv&)
    UNTIL k&
    '
    dd&=mil&(l&)
    g&=100-dd&
    h&=100+dd&-g&
    ' ---------------------------------------------------------------------
    ' ð Affichage
    ' ---------------------------------------------------------------------
    SELECT k&
    CASE 1
      RC_COPY murs%,0,0,8,h& TO adr1%,x&,g&
    CASE 2
      RC_COPY murs%,9,0,8,h& TO adr1%,x&,g&
    CASE 3
      RC_COPY murs%,18,0,8,h& TO adr1%,x&,g&
    CASE 4
      RC_COPY murs%,27,0,8,h& TO adr1%,x&,g&
    CASE 5
      RC_COPY murs%,36,0,8,h& TO adr1%,x&,g&
    DEFAULT
      RC_COPY murs%,45,0,8,h& TO adr1%,x&,g&
    ENDSELECT
    '
    ADD x&,8
  NEXT a%
  '
  ' ð Pistolet
  '
  RC_COPY murs%,82,38,24,35 TO adr1%,147,115,4
  RC_COPY murs%,82,0,24,35 TO adr1%,147,115,7
  ' -----------------------------------------------------------------------
  ' ð Test des touches (d‚placements)
  ' -----------------------------------------------------------------------
  SDPOKE &HFF9202,&HFFFE           ! Read first line (Pause, FireA, U,D,L,R)
  result1=DPEEK(&HFF9200)
  result2=DPEEK(&HFF9202)
  '
  pause!=BTST(result1,0)          ! Cleared (0) bits mark
  fire_a!=BTST(result1,1)         ! pressed controls. IF NOT would seem
  j_up!=BTST(result2,8)           ! to be the test of choice for all this...
  j_down!=BTST(result2,9)
  j_left!=BTST(result2,10)
  j_right!=BTST(result2,11)
  tst|=BYTE{&HFFFFFC02}
  ' --------------
  ' Vers la droite
  ' --------------
  IF tst|=75 OR NOT (j_left!)
    heading%=(heading%+(360-turn%)) MOD 360
    RC_COPY image1%,40,0,236,50 TO image1%,44,0
    RC_COPY image2%,275,0,4,50 TO image1%,40,0
    BMOVE image1%,image2%,8000
    SWAP image1%,image2%                           ! Swap des 2 ‚crans.
  ELSE
    ' --------------
    ' Vers la gauche
    ' --------------
    IF tst|=77 OR NOT (j_right!)
      heading%=(heading%+turn%) MOD 360
      RC_COPY image1%,44,0,236,50 TO image1%,40,0
      RC_COPY image2%,40,0,4,50 TO image1%,275,0
      BMOVE image1%,image2%,8000
      SWAP image1%,image2%                        ! Swap des 2 ‚crans.
    ELSE
      ' -----------
      ' Vers le bas
      ' -----------
      IF tst|=72 OR NOT (j_up!)
        newpx&=px&-(stable&(heading%+90)*stride%)
        newpy&=py&-(stable&(heading%)*stride%)
        IF grid&(newpx&\1024,newpy&\1024)=0
          px&=newpx&
          py&=newpy&
          SWAP image1%,image2%                      ! Swap des 2 ‚crans.
        ELSE
          ' IF grid&(newpx&/1024,py&/1024)=0
          ' px&=newpx&
          ' ENDIF
          ' IF grid&(px&/1024,newpy&/1024)=0
          ' py&=newpy&
          ' ENDIF
          RC_COPY murs%,106,0,32,32 TO adr1%,143,33
          ' SOUND 80,1
        ENDIF
      ELSE
        ' ------------
        ' Vers le haut
        ' ------------
        IF tst|=80 OR NOT (j_down!)
          newpx&=px&+(stable&(heading%+90)*stride%)
          newpy&=py&+(stable&(heading%)*stride%)
          IF grid&(newpx&\1024,newpy&\1024)=0
            SWAP image1%,image2%                      ! Swap des 2 ‚crans.
            px&=newpx&
            py&=newpy&
          ELSE
            ' IF grid&(newpx&/1024,py&/1024)=0
            ' px&=newpx&
            ' ENDIF
            ' IF grid&(px&/1024,newpy&/1024)=0
            ' py&=newpy&
            ' ENDIF
            RC_COPY murs%,106,0,32,32 TO adr1%,143,33
            ' SOUND 80,1
          ENDIF
        ENDIF
      ENDIF
    ENDIF
  ENDIF
UNTIL tst|=1
@fin
' -------------------------------------------------------------------------
' ð Fin du programme
' -------------------------------------------------------------------------
PROCEDURE fin
  ' @mod_end
  OUT 4,8
  ~XBIOS(5,L:ecran%,L:ecran%,W:3,W:res&)
  ~GEMDOS(32,L:super%)
  END
RETURN
' -------------------------------------------------------------------------
' ð Pr‚calcul des tables de Sinus/Cosinus et division par 900
' -------------------------------------------------------------------------
PROCEDURE maketables
  FOR angle&=0 TO 359+90
    stable&(angle&)=COS(angle&*PI/180)*1024\10
    IF angle&>0
      mil&(angle&)=900\angle&
      IF mil&(angle&)>50
        mil&(angle&)=50
      ENDIF
    ENDIF
  NEXT angle&
RETURN
' -------------------------------------------------------------------------
' ð Lance la musique
' -------------------------------------------------------------------------
PROCEDURE mod_start
  ' reg%(8)=module%
  ' RCALL playmod%,reg%()
RETURN
' -------------------------------------------------------------------------
' ð  Stoppe la musique
' -------------------------------------------------------------------------
PROCEDURE mod_end
  ' RCALL playmod%+2,reg%()
RETURN
' -------------------------------------------------------------------------
' ð Chargement d'un niveau
' -------------------------------------------------------------------------
PROCEDURE loadscreen(fil$)
  OPEN "i",#1,"\LEVELS\"+fil$
  INPUT #1,width$
  INPUT #1,height$
  INPUT #1,px$
  INPUT #1,py$
  INPUT #1,heading$
  height&=VAL(height$)
  width&=VAL(width$)
  FOR yyy&=1 TO height&
    FOR xxx&=1 TO width&
      INPUT #1,col$
      grid&(xxx&,yyy&)=VAL(col$)
    NEXT xxx&
  NEXT yyy&
  CLOSE #1
  px&=VAL(px$)
  py&=VAL(py$)
  heading%=VAL(heading$)
  px&=px&*1024
  py&=py&*1024
RETURN
