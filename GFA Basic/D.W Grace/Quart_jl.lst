' START OF QUARTERION JULIA SET PROGRAM
' Q -> u*Q*Q + v
CLS
RESERVE (FRE(0) DIV 256)*256
DIM macro&(15,15,15),prim!(699,7,7,7),comp!(699,7,7,7)
ARRAYFILL macro&(),-1
ARRAYFILL comp!(),FALSE
ARRAYFILL prim!(),FALSE
'
DIM dx&(5),dy&(5),dz&(5),ren_c_chk|(7),ren_x&(7),ren_y&(7),ren_z&(7)
FOR n|=0 TO 5
  READ dx&(n|),dy&(n|),dz&(n|)
NEXT n|
FOR n|=0 TO 7
  READ ren_c_chk|(n|),ren_x&(n|),ren_y&(n|),ren_z&(n|)
NEXT n|
FOR n|=0 TO 15
  READ col&
  VSETCOLOR n|,col&*2
NEXT n|
'
const=1/SQR(2)
'
'    neighbours for computation
'    UP    DOWN   LEFT   RIGHT FRWRD BACK
DATA 0,0,1,0,0,-1,-1,0,0,1,0,0,0,1,0,0,-1,0
'    neighbours for rendering
'    UP        DOWN       LEFT     BACK
DATA 3,-1,-1,1,3,-1,-1,-1,2,-1,0,0,2,0,-1,0
'    LEFTUP    LEFTDOWN BACKUP    BACKDOWN
DATA 2,-1,0,-1,2,-1,0,1,2,0,-1,-1,2,0,-1,1
'
' colour data
DATA 0,&h113,&h114,&h115,&h116,&H117,&h127,&h137
DATA &h147,&h157,&h167,&h277,&h377,&h477,&h577,&h677
'
INPUT "u (Complex)";a,b
INPUT "v (Complex)";c,d
INPUT "Iters ";mi&
x|=64
z|=64
y|=0
in_set!=FALSE
REPEAT
  compute
  INC y|
UNTIL in_set!
DEC y|
PRINT y|
macro&(8,y| DIV 8,8)=0
prim!(0,0,y| MOD 8,0)=TRUE
comp!(0,0,y| MOD 8,0)=TRUE
dum|=0
top_ptr&=1
PRINT "COMPUTING"
recur(x|,y|,z|,dum|)
RESERVE
CLS
render
REPEAT
UNTIL MOUSEK
> PROCEDURE recur(x|,y|,z|,n_dat|)
  '  PRINT x|;"  ";y|;"  ";z|
  comp_count|=0
  n_dat|=0
  dum|=1
  prim_count|=0
  FOR n|=0 TO 5
    ' Compute neighbours
    point(x|+dx&(n|),y|+dy&(n|),z|+dz&(n|))
    SUB comp_count|,c_flag!
    SUB prim_count|,in_set!
    SUB n_dat|,in_set!*dum|
    MUL dum|,2
  NEXT n|
  PRINT comp_count|
  IF comp_count|<6 AND prim_count|<6
    ' Call recur for neighbours that are in set
    IF BTST(n_dat|,0)
      ' up
      recur(x|,y|,z|+1,dum|)
    ENDIF
    IF BTST(n_dat|,1)
      ' down
      recur(x|,y|,z|-1,dum|)
    ENDIF
    IF BTST(n_dat|,2)
      ' left
      recur(x|-1,y|,z|,dum|)
    ENDIF
    IF BTST(n_dat|,3)
      ' right
      recur(x|+1,y|,z|,dum|)
    ENDIF
    IF BTST(n_dat|,4)
      ' forward
      recur(x|,y|+1,z|,dum|)
    ENDIF
    IF BTST(n_dat|,5)
      ' back
      recur(x|,y|-1,z|,dum|)
    ENDIF
  ENDIF
RETURN
> PROCEDURE point(x|,y|,z|)
  x_ptr|=x| DIV 8       ! set pointers
  y_ptr|=y| DIV 8
  z_ptr|=z| DIV 8
  ptr&=macro&(x_ptr|,y_ptr|,z_ptr|)
  x_pri|=x| MOD 8
  y_pri|=y| MOD 8
  z_pri|=z| MOD 8
  IF ptr&=-1
    ' Create new macro
    macro&(x_ptr|,y_ptr|,z_ptr|)=top_ptr&
    ptr&=top_ptr&
    INC top_ptr&
  ENDIF
  IF comp!(ptr&,x_pri|,y_pri|,z_pri|)
    c_flag!=TRUE
    in_set!=prim!(ptr&,x_pri|,y_pri|,z_pri|)
  ELSE
    ' Compute this point
    compute
    prim!(ptr&,x_pri|,y_pri|,z_pri|)=in_set!
    comp!(ptr&,x_pri|,y_pri|,z_pri|)=TRUE
    c_flag!=FALSE
  ENDIF
RETURN
> PROCEDURE compute
  rq=x|/32-2
  iq=y|/32-2
  jq=z|/32-2
  kq=0
  i&=0
  REPEAT
    r2=rq*rq
    i2=iq*iq
    j2=jq*jq
    k2=kq*kq
    re=r2-i2-j2-k2
    im=2*rq*iq
    jq=2*rq*(a*jq-b*kq)
    kq=2*rq*(a*kq+b*jq)
    rq=a*re-b*im+c
    iq=b*re+a*im+d
    INC i&
  UNTIL r2+i2+j2+k2>6 OR i&=mi&
  in_set!=i&=mi&
RETURN
> PROCEDURE render
  y|=0
  REPEAT
    PRINT AT(1,1);y|
    y_ptr|=y| DIV 8
    y_pri|=y| MOD 8
    column!=FALSE
    FOR z|=0 TO 127
      z_ptr|=z| DIV 8
      z_pri|=z| MOD 8
      x_ptr|=0
      flag!=FALSE
      REPEAT
        ptr&=macro&(x_ptr|,y_ptr|,z_ptr|)
        IF NOT ptr&=-1
          x_pri|=0
          REPEAT
            flag!=prim!(ptr&,x_pri|,y_pri|,z_pri|)
            IF flag!
              x|=x_ptr|*8+x_pri|
              col|=0
              FOR n|=0 TO 7
                find_neig(x|+ren_x&(n|),y|+ren_y&(n|),z|+ren_z&(n|),ren_c_chk|(n|))
                IF found!
                  ADD col|,diag_count|
                ENDIF
              NEXT n|
              IF col|>0
                COLOR col|-3
              ELSE
                COLOR 1
              ENDIF
              PLOT y|,z|
            ENDIF
            INC x_pri|
          UNTIL flag! OR x_pri|=8
        ENDIF
        INC x_ptr|
      UNTIL flag! OR x_ptr|=16
      IF flag!
        column!=TRUE
      ENDIF
    NEXT z|
    IF column!
      INC y|
    ELSE
      ADD y|,8
    ENDIF
  UNTIL y|>127
RETURN
> PROCEDURE find_neig(nx|,ny|,nz|,chk_num|)
  found!=FALSE
  nz_ptr|=nz| DIV 8
  nz_pri|=nz| MOD 8
  diag_count|=0
  REPEAT
    ny_ptr|=ny| DIV 8
    ny_pri|=ny| MOD 8
    nx_ptr|=nx| DIV 8
    nx_pri|=nx| MOD 8
    ptr&=macro&(nx_ptr|,ny_ptr|,nz_ptr|)
    IF NOT ptr&=-1
      found!=prim!(ptr&,nx_pri|,ny_pri|,nz_pri|)
    ENDIF
    INC diag_count|
    INC nx|
    INC ny|
  UNTIL found! OR diag_count|=chk_num|
  '  PRINT AT(1,21);diag_count|
RETURN
