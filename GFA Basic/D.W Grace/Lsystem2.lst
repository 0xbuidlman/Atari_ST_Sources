' ******  L - System Fractal
current_path$="\"
lsystem
'
> PROCEDURE lsystem
  '
  ' SYNTAX OF .LSF FILE :
  '  "//"            - COMMENT LINE IGNORED COMPLETELY.
  '  "LSYSTEM()"     - FUNCTION.
  '
  ' SYNTAX OF PARAMTERS :
  ' DEFAULT # OF ITERS, LINE LENGTH (REAL),
  ' TURN ANGLE (DEGREES), START ANGLE, XSTART, YSTART, START STRING,
  ' PRODUTION RULES.
  '
  LOCAL file_name$,file_exist!,cancel!,path_fine!,prg_ok!
  DIM prod_rules$(10),x_stack(99),y_stack(99),angle_stack&(99)
  '
  CLS
  '
  file_name$="TEST.LSD"
  select_file("LSD",file_name$,file_exist!,cancel!,path_fine!)
  '
  IF path_fine! AND file_exist! AND NOT cancel!
    '
    PRINT "FRACTAL ENGINE V3.0 L-SYSTEM ITERPRETER"
    PRINT "---------------------------------------"
    prg_ok!=TRUE
    PRINT
    PRINT "ASCII FILE : ";file_name$
    PRINT
    '
    ' *************************** READ ASCII FILE ******************************
    '
    OPEN "I",#1,file_name$
    '
    REPEAT
      lsys_string(field$,eof!)
    UNTIL field$="LSYSTEM" OR eof!
    '
    lsys_string(field$,eof!)
    max_iters|=VAL(field$)
    '
    lsys_string(field$,eof!)
    line_len=VAL(field$)
    '
    lsys_string(field$,eof!)
    turn&=VAL(field$)
    '
    lsys_string(field$,eof!)
    start_angle&=VAL(field$)
    '
    lsys_string(field$,eof!)
    x0=VAL(field$)
    '
    lsys_string(field$,eof!)
    y0=VAL(field$)
    '
    lsys_string(prg$,eof!)
    '
    lsys_string(prod_letters$,eof!)
    num_letters|=LEN(prod_letters$)
    dum$=""
    '
    FOR n|=1 TO num_letters|
      lsys_string(field$,eof!)
      prod_rules$(n|)=field$
    NEXT n|
    '
    CLOSE #1
    '
    ' ***************************  WRITE LOGO STRING ***************************
    '
    PRINT "WRITING LOGO STRING ..."
    '
    FOR iter|=1 TO max_iters|
      '
      PRINT AT(1,7);"Iterations left = ";max_iters|-iter|;"  ";
      temp_prg$=""
      len&=LEN(prg$)
      count&=len&
      prg_end&=len&-1
      '
      FOR pc_count&=0 TO prg_end&
        '
        DEC count&
        PRINT AT(1,8);"Characters left = ";(count&);"  "
        char$=CHR$(PEEK(V:prg$+pc_count&))
        '
        FOR letter|=1 TO num_letters|
          '
          IF char$=MID$(prod_letters$,letter|,1)
            '
            char$=prod_rules$(letter|)
            LET letter|=num_letters|
            '
          ENDIF
          '
        NEXT letter|
        '
        IF LEN(temp_prg$)+LEN(char$)<32767
          temp_prg$=temp_prg$+char$
        ELSE
          ALERT 3,"ERROR : String too lomg.|Try fewer iterations.",1,"OK",ok|
          pc_count&=prg_end&
          iter|=max_iters|
          prg_ok!=FALSE
          '
        ENDIF
        '
        EXIT IF MOUSEK=2
        '
      NEXT pc_count&
      '
      prg$=temp_prg$
      '
    NEXT iter|
    '
    IF prg_ok!
      '
      ' ******************* INTERPRET LOGO STRING - DRAW LSYSTEM  ****************
      '
      CLS
      stack_ptr%=0
      current_angle&=start_angle&
      len&=LEN(prg$)
      prg_end&=len&-1
      '
      FOR pc_count&=0 TO prg_end&
        '
        char$=CHR$(PEEK(V:prg$+pc_count&))
        '
        SELECT char$
        CASE "F"
          '
          x=x0+COSQ(current_angle&)*line_len
          y=y0-SINQ(current_angle&)*line_len
          COLOR stack_ptr% MOD 14+2
          LINE x0,y0,x,y
          x0=x
          y0=y
          '
        CASE "+"
          current_angle&=(current_angle&-turn&+360) MOD 360
          '
        CASE "-"
          current_angle&=(current_angle&+turn&) MOD 360
          '
        CASE "["
          '
          x_stack(stack_ptr%)=x0
          y_stack(stack_ptr%)=y0
          angle_stack&(stack_ptr%)=current_angle&
          INC stack_ptr%
          '
        CASE "]"
          '
          IF stack_ptr%=0
            PRINT V:prg$-prg_start%
            PRINT "STACK ERROR"
            '
          ELSE
            '
            DEC stack_ptr%
            x0=x_stack(stack_ptr%)
            y0=y_stack(stack_ptr%)
            current_angle&=angle_stack&(stack_ptr%)
            '
          ENDIF
          '
          EXIT IF MOUSEK=2
          '
        ENDSELECT
        '
      NEXT pc_count&
      '
      WHILE MOUSEK=0
      WEND
      '
    ENDIF                       ! IF LOGO PROGRAM OK
    '
  ENDIF                 ! IF FILE READ IN OK
  '
  ERASE prod_rules$(),x_stack(),y_stack(),angle_stack&()
  '
RETURN
'
'
> PROCEDURE lsys_string(VAR field$,eof!)
  '
  ' READS IN A STRING A CHARACTER AT A TIME UNTIL A DELEMINATOR CHARATER IS
  ' FOUND OR THE END OF THE FILE.
  '
  LOCAL char$,delimeter!
  '
  char$=""
  '
  REPEAT
    get_char(char$,eof!)
    lsys_delimeter(char$,delimeter!)
    '
  UNTIL eof! OR NOT delimeter!
  '
  field$=""
  '
  WHILE NOT (delimeter! OR eof!)
    field$=field$+char$
    get_char(char$,eof!)
    lsys_delimeter(char$,delimeter!)
    '
  WEND
  '
RETURN
'
'
> PROCEDURE lsys_delimeter(char$,VAR delimeter!)
  '
  delimeter!=char$="," OR char$="(" OR char$="""" OR char$=")" OR char$="/"
  delimeter!=char$=" " OR ASC(char$)<32 OR delimeter!
  '
RETURN
'
'
> PROCEDURE get_char(VAR char$,eof!)
  '
  eof!=EOF(#1)
  '
  IF NOT eof!
    char$=CHR$(INP(#1))
  ENDIF
  '
RETURN
'
'
> PROCEDURE select_file(ext$,VAR file_name$,file_exist!,cancel!,path_fine!)
  '
  ' USER SELECTS A FILE USING A FILE SELECT BOX
  '
  LOCAL path$
  '
  path$=current_path$+"*."+ext$         ! current_path$ IS GLOBAL
  ~FSEL_INPUT(path$,file_name$,n&)
  CLS
  cancel!=(n&=0)                        ! cancel button oN FSEL' BOX
  '
  IF NOT cancel!
    current_path$=path$
    be_rid_of_ext(current_path$,path_fine!)
    file_name$=current_path$+file_name$
    auto_ext(ext$,file_name$)
    file_exist!=EXIST(file_name$)
    '
  ENDIF
  '
  '
RETURN
'
'
> PROCEDURE be_rid_of_ext(VAR path$,path_fine!)
  '
  ' REMOVES EXTENSION FROM THE VARIABLE path$
  '
  LOCAL path_len|,n|
  '
  path_len|=LEN(path$)
  n|=path_len|+1
  '
  REPEAT
    DEC n|
  UNTIL n|=0 OR MID$(path$,n|,1)="\"
  '
  path_fine!=n|>0
  path$=LEFT$(path$,n|)
  '
RETURN
'
'
> PROCEDURE auto_ext(ext$,VAR file_name$)
  '
  ' REPLACES EXISTING EXTENTION ON A FILE NAME, OR ADDS ONE IF THERE IS'NT ANY
  '
  LOCAL ext_exist!,n|,string_len|
  '
  string_len|=LEN(file_name$)
  '
  IF ASC(MID$(file_name$,string_len|,1))=0      ! FOR SOME UNKNOWN REASON
    file_name$=LEFT$(file_name$,string_len|-1)  ! THERES OFTEN AN EXTRA USELESS
    DEC string_len|                             ! CHAR AT THE END OF A FILE
  ENDIF                                         ! NAME ?????
  '
  n|=string_len|+1
  ext_exist!=FALSE
  '
  REPEAT                        ! CHECK THAT THERE IS AN EXTENTION
    DEC n|
    ext_exist!=MID$(file_name$,n|,1)="."
    '
  UNTIL ext_exist! OR n|=string_len|-4
  '
  IF ext_exist!
    file_name$=LEFT$(file_name$,n|)+ext$
    '
  ELSE
    file_name$=file_name$+"."+ext$
    '
  ENDIF
  '
RETURN
