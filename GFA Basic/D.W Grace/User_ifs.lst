' INTERACTIVE IFS CODE GENERATOR AND RENDERING PROGRAM.
' rendering and probabilities not included yet
' need some kind of menu : erase grid, select trans number etc
'
DIM polygon(255,1)
DIM affine(9,6)   ! (*,0-3):MATRIX, (*,4 & 5):TRANSLATION, (*,6):PROBABILITY
'
x_step=1/320
y_step=2*x_step
x_min=-320*x_step
y_min=-99*y_step
x_map=1/x_step
y_map=1/y_step
'
'
VSETCOLOR 0,0
VSETCOLOR 1,7,7,7
VSETCOLOR 2,4,4,4
VSETCOLOR 3,2,2,2
'
'
INPUT "Number of affine transformations ";num_a_ts|
grid
def_polygon(num_vertices|)
FOR trans_num|=0 TO num_a_ts|-1
  create_affine(trans_num|)
NEXT trans_num|
WHILE INKEY$=""
WEND
CLS
' FOR trans_num|=0 TO num_a_ts|-1
' FOR i|=0 TO 5
' PRINT affine(trans_num|,i|)
' NEXT i|
' NEXT trans_num|
' WHILE INKEY$=""
' WEND
'
render_ifs(40000)
'
> PROCEDURE grid
  LOCAL x&
  CLS
  COLOR 3
  '
  FOR x&=0 TO 632 STEP 16
    LINE x&,0,x&,199
  NEXT x&
  '
  FOR x&=4 TO 200 STEP 8
    LINE 0,x&,639,x&
  NEXT x&
  '
  trans_screen(0,0,x&,y&)
  COLOR 2
  LINE x&,0,x&,199
  LINE 0,y&,639,y&
  '
RETURN
'
'
> PROCEDURE def_polygon(VAR num_vertices|)
  LOCAL old_x&,old_y&,m_x&,m_y&,m_key|,count|
  '
  COLOR 1
  '  GRAPHMODE 3
  '
  REPEAT
    MOUSE old_x&,old_y&,m_key|
  UNTIL m_key|=1
  trans_coords(0,old_x&,old_y&)
  '
  REPEAT
  UNTIL MOUSEK=0
  '
  temp_x&=old_x&
  temp_y&=old_y&
  num_vertices|=1
  '
  REPEAT
    '
    MOUSE m_x&,m_y&,m_key|
    '
    IF m_key|=1
      trans_coords(num_vertices|,m_x&,m_y&)
      LINE old_x&,old_y&,m_x&,m_y&
      old_x&=m_x&
      old_y&=m_y&
      INC num_vertices|
      wait_mouse
    ENDIF
    '
    temp_x&=m_x&
    temp_y&=m_y&
    '
  UNTIL m_key|=2
  '
  DEC num_vertices|
  trans_screen(polygon(0,0),polygon(0,1),x&,y&)
  LINE x&,y&,old_x&,old_y&
  '
RETURN
'
'
> PROCEDURE trans_coords(vertice|,x&,y&)
  polygon(vertice|,0)=x&*x_step+x_min
  polygon(vertice|,1)=(199-y&)*y_step+y_min
RETURN
'
'
> PROCEDURE trans_screen(x,y,VAR x&,y&)
  x&=(x-x_min)*x_map
  y&=199-(y-y_min)*y_map
RETURN
'
'
> PROCEDURE create_affine(trans_num|)
  ' ALLOWS THE USER TO DEFINE AN AFFINE TRANSFORMATION USING SCALING, ROTATION,
  ' SHEAR, ANOTHER ROTATION AND FINALLY A TRANSLATION. THE (COMPOSITE) AFFINE
  ' TRANSFORMATION IS STORED USING SIX REALS IN THE affine ARRAY.
  ' trans_num| IS THE INDEX NUMBER OF THE AFFINE TRANSFORMATION.
  '
  LOCAL m_x&,m_y&,m_key|,old_x&,old_y&,s
  '
  HIDEM
  GRAPHMODE 3
  '
  affine(trans_num|,0)=1                        ! INITIALISE MATRIX PART TO THE
  affine(trans_num|,1)=0                        ! IDENTITY (OR UNIT) MATRIX.
  affine(trans_num|,2)=0
  affine(trans_num|,3)=1
  affine(trans_num|,4)=0                        ! INITIALISE TRANSLATION PART TO
  affine(trans_num|,5)=0                        ! IDENTITY TRASLATION.
  '
  SETMOUSE 160,199
  draw_polygon(trans_num|)
  '
  ' ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
  '
  REPEAT                                        ! CREATE SCALING LOOP.
    '
    MOUSE m_x&,m_y&,m_key|
    '
    IF NOT m_y&=old_y&
      s=(m_y&+1)/200
      PRINT AT(1,1);"Scaling : ";USING "#.###",s
      draw_polygon(trans_num|)                          ! ERASE OLD POLYGON.
      affine(trans_num|,0)=s
      affine(trans_num|,3)=s
      draw_polygon(trans_num|)                          ! DRAW NEW ONE.
    ENDIF
    '
    old_y&=m_y&
    '
  UNTIL m_key|=1
  '
  ' ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
  '
  add_rotation
  '
  ' ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
  '
  temp_11=affine(trans_num|,0)
  temp_12=affine(trans_num|,1)
  temp_21=affine(trans_num|,2)
  temp_22=affine(trans_num|,3)
  '
  SETMOUSE 319,1
  wait_mouse
  '
  REPEAT                                        ! CREATE SHEAR LOOP.
    '
    MOUSE m_x&,m_y&,m_key|
    '
    IF NOT (m_x&=old_x& AND m_y&=old_y&)
      '
      alpha=m_x&/319-1
      beta=(199-m_y&)/99-1
      PRINT AT(1,1);"Shear : ";USING "#.##",alpha;
      PRINT ", ";USING "#.##",beta
      '
      draw_polygon(trans_num|)                          ! ERASE OLD POLYGON.
      affine(trans_num|,2)=alpha*temp_11+beta*temp_21
      affine(trans_num|,3)=alpha*temp_12+beta*temp_22
      draw_polygon(trans_num|)                          ! DRAW NEW ONE.
      '
    ENDIF
    '
    old_x&=m_x&
    old_y&=m_y&
    '
  UNTIL m_key|=1
  '
  ' ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
  '
  add_rotation
  '
  ' ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
  '
  SETMOUSE 319,100
  wait_mouse
  '
  REPEAT                                        ! CREATE SHEAR LOOP.
    '
    MOUSE m_x&,m_y&,m_key|
    '
    IF NOT (m_x&=old_x& AND m_y&=old_y&)
      '
      alpha=m_x&/319-1
      beta=(199-m_y&)/99-1
      PRINT AT(1,1);"Translation : ";USING "#.##",alpha;
      PRINT ", ";USING "#.##",beta
      '
      draw_polygon(trans_num|)                          ! ERASE OLD POLYGON.
      affine(trans_num|,4)=alpha
      affine(trans_num|,5)=beta
      draw_polygon(trans_num|)                          ! DRAW NEW ONE.
      '
    ENDIF
    '
    old_x&=m_x&
    old_y&=m_y&
    '
  UNTIL m_key|=1
  '
  ' ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
  '
  draw_polygon(trans_num|)
  GRAPHMODE 0
  COLOR 2
  draw_polygon(trans_num|)
  wait_mouse
  SHOWM
  '
RETURN
'
'
> PROCEDURE add_rotation
  '
  temp_11=affine(trans_num|,0)
  temp_12=affine(trans_num|,1)
  temp_21=affine(trans_num|,2)
  temp_22=affine(trans_num|,3)
  '
  SETMOUSE 0,100
  wait_mouse
  '
  REPEAT                                        ! CREATE ROTATION LOOP.
    '
    MOUSE m_x&,m_y&,m_key|
    '
    IF NOT m_x&=old_x&
      '
      theta=m_x&*PI/319
      PRINT AT(1,1);"Rotation : ";USING "###.#",theta*180/PI
      c_theta=COS(theta)
      s_theta=SIN(theta)
      '
      draw_polygon(trans_num|)                          ! ERASE OLD POLYGON.
      affine(trans_num|,0)=c_theta*temp_11-s_theta*temp_21
      affine(trans_num|,1)=c_theta*temp_12-s_theta*temp_22
      affine(trans_num|,2)=s_theta*temp_11+c_theta*temp_21
      affine(trans_num|,3)=s_theta*temp_12+c_theta*temp_22
      draw_polygon(trans_num|)                          ! DRAW NEW ONE.
      '
    ENDIF
    '
    old_x&=m_x&
    '
  UNTIL m_key|=1
  '
RETURN
'
'
> PROCEDURE draw_polygon(trans_num|)
  ' DRAWS POLGON (GIVEN BY polygon ARRAY) TRANSLATED USING AFFINE TRANS n|.
  '
  LOCAL vertice|,x,y,x&,y&,old_x&,old_y&,start_x&,start_y&,temp
  '
  x=polygon(0,0)
  temp=x
  y=polygon(0,1)
  x=x*affine(trans_num|,0)+y*affine(trans_num|,1)+affine(trans_num|,4)
  y=temp*affine(trans_num|,2)+y*affine(trans_num|,3)+affine(trans_num|,5)
  '
  trans_screen(x,y,start_x&,start_y&)
  old_x&=start_x&
  old_y&=start_y&
  '
  FOR vertice|=1 TO num_vertices|
    '
    x=polygon(vertice|,0)
    y=polygon(vertice|,1)
    temp=x
    x=x*affine(trans_num|,0)+y*affine(trans_num|,1)+affine(trans_num|,4)
    y=temp*affine(trans_num|,2)+y*affine(trans_num|,3)+affine(trans_num|,5)
    trans_screen(x,y,x&,y&)
    LINE x&,y&,old_x&,old_y&
    old_x&=x&
    old_y&=y&
    '
  NEXT vertice|
  '
  LINE x&,y&,start_x&,start_y&
  '
RETURN
'
'
> PROCEDURE mult_matrices(a_11,a_12,a_21,a_22,VAR b_11,b_12,b_21,b_22)
  LOCAL r_11,r_12,r_21,r_22
  '
  r_11=a_11*b_11+a_12*b_21
  r_12=a_11*b_12+a_12*b_22
  r_21=a_21*b_11+a_22*b_21
  r_22=a_21*b_12+a_22*b_22
  '
  b_11=r_11
  b_12=r_12
  b_21=r_21
  b_22=r_22
  '
RETURN
'
'
> PROCEDURE wait_mouse
  REPEAT
  UNTIL MOUSEK=0
RETURN
'
'
PROCEDURE render_ifs(max_it%)
  '
  COLOR 1
  mean=1/num_a_ts|
  x=0
  y=0
  iters%=0
  '
  REPEAT
    '
    r=RND
    p=mean
    trans_num|=0
    '
    WHILE p<r
      '
      INC trans_num|
      ADD p,mean
      '
    WEND
    '
    temp=x
    x=affine(trans_num|,0)*x+affine(trans_num|,1)*y+affine(trans_num|,4)
    y=affine(trans_num|,2)*temp+affine(trans_num|,3)*y+affine(trans_num|,5)
    IF iters%>50
      trans_screen(x,y,x&,y&)
      PLOT x&,y&
    ENDIF
    INC iters%
    '
  UNTIL iters%=max_it%
  '
RETURN
'
'
> PROCEDURE save_ifs(name$,path$)
  ' ????????????????????????????????????????????????????????????
  LOCAL adr%
  adr%=MALLOC(768)              ! = 256*3
  '  BYTE{adr%}=num_a_ts|
  '  INT{adr%+2}=max_it%
  FOR dest%=0 TO 1
  NEXT dest%
RETURN
