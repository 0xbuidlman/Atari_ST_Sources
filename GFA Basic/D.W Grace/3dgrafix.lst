' 3D TEST PROGRAM.  ALLOWS THE USER TO MOVE AROUND A CUBE IN 3 DIMENSIONS.
'
DIM cube_3d(7,3)   ! 3D CO-ORDINATES  OF THE VERTICES OF A CUBE
DIM c(3),s0(3),sx(3),sy(3),sz(3),e(3)    ! VIEW VECTORS
DIM e_offset(3),origin(3)            ! Origin() IS A ZERO VECTOR - MAKES SENSE.
DIM r(3,3)
'
setvertex(0,0,0,0,cube_3d())
setvertex(1,1,0,0,cube_3d())
setvertex(2,1,1,0,cube_3d())
setvertex(3,0,1,0,cube_3d())
setvertex(4,0,0,1,cube_3d())
setvertex(5,1,0,1,cube_3d())
setvertex(6,1,1,1,cube_3d())
setvertex(7,0,1,1,cube_3d())
'
' INITIALISE VIEW WINDOW ETC
x_res&=320
y_res&=200
win_width=1
win_height=win_width*y_res&/x_res&
focus=2      ! PROPORTIONAL (TO win_width) DISTANCE FROM WINDOW TO EYE.
fb_prop=1/(x_res&*focus)  ! FORWARD AND BACKWARDS STEP PROPORTION. SEE MAIN LOOP.
'
c(1)=0.5      ! VECTOR CO-ORDS OF THE CENTRE OF THE WINDOW
c(2)=-2
c(3)=0.5
'
sx(1)=win_width/x_res&         ! X-PIXEL STEP VECTOR
sx(2)=0
sx(3)=0
'
sy(1)=0
sy(2)=0
sy(3)=win_height/y_res&      ! Y-PIXEL STEP VECTOR
'
calcs0
'
e_offset(1)=0
e_offset(2)=-focus*win_width
e_offset(3)=0
calceye
'
' INITIALISE Origin() DOES NOT CHANGE THOUGHOUT PROCEDURES.
origin(1)=0
origin(2)=0
origin(3)=0
'
GRAPHMODE 3
resetmouse
' HIDEM
COLOR 1
'
' MAIN LOOP
REPEAT
  '
  rendercube
  '
  REPEAT
    mx&=MOUSEX
    my&=MOUSEY
    mk|=MOUSEK
    i$=INKEY$
  UNTIL mk|<3 AND NOT (mx&=mx_user& AND my&=my_user& AND i$="")
  ' ? mk|, mx&, mx_user&, my&,my_user&, i$
  '
  IF i$=""
    '
    ' ERASE OLD WINDOW
    rendercube
    '
    ' VIEW WINDOW CHANGES IN SOME WAY :
    temp_x&=mx&-mx_user&
    temp_y&=my&-my_user&
    '
    SELECT mk|
    CASE 0            ! MOVE IN PLANE OF WINDOW (UP/DOWN/LEFT/RIGHT)
      '
      c(1)=c(1)+temp_x&*sx(1)+temp_y&*sy(1)
      c(2)=c(2)+temp_x&*sx(2)+temp_y&*sy(2)
      c(3)=c(3)+temp_x&*sx(3)+temp_y&*sy(3)
      '
    CASE 1          ! MOVE FORWARD/BACK
      '
      c(1)=c(1)+temp_y&*e_offset(1)*fb_prop
      c(2)=c(2)+temp_y&*e_offset(2)*fb_prop
      c(3)=c(3)+temp_y&*e_offset(3)*fb_prop
      '
    CASE 2                ! ROTATION
      '
      IF NOT temp_x&=0
        ' WINDOW ROTATION ANGLE GIVEN IN DEGREES BY temp_x&.
        calc3drotmat(temp_x&,e_offset(),r())
        rotvector(sx(),origin(),r())
        rotvector(sy(),origin(),r())
      ENDIF
      '
      IF NOT temp_y&=0
        ' PAN ANGLE (ABOUT THE WINDOW'S HORIZONTAL) GIVEN IN DEGREES BY temp_y&.
        calc3drotmat(temp_y&,sx(),r())
        rotvector(e_offset(),origin(),r())
        rotvector(sy(),origin(),r())
      ENDIF
      '
    ENDSELECT
    '
    ' UPDATE S0(), E() AND RECENTRE MOUSE.
    calcs0
    calceye
    resetmouse
    '
  ENDIF
  '
UNTIL i$=" "
'
' SHOWM
' ==============================================================================
'                         GENERIC 3D PROCEDURES
' ==============================================================================
'
> PROCEDURE projectpoint(VAR x&,y&,p())
  '
  ' P, S0, Sx, Sy AND E ARE 3-TUPLE VECTORS.
  ' PROJECTS A POINT P ONTO THE SCREEN AT CO-ORDINATES x&, y&. THE BOTTOM LEFT OF THE
  ' SCREEN IS AT POSITION S0 ANDS ITS ORIENTATION IS DESCRIBED BY Sx AND Sy ;
  ' EG S0+Sx=POSITION OF PIXEL (1, 0). VECTOR E DESCRIBES THE POSITION OF THE VIEW POINT. THIS
  ' PROCEDURE WORKS BY FINDING WHERE THE LINE FROM P TO E INTERSECTS THE SCREEN PLANE
  ' AND HENCE DETERMINES x&, y&.
  ' EG IT SOLVES  alpha*(P - E) + E = S0 + x&*Sx + y&*Sy   =>  3 EQUATIONS, 3 UNKNOWNS : alpha, x&,  y&.
  '
  LOCAL a1,b1,c1,a2,b2,c2,temp
  DIM v(3)
  '
  ' INITIALISE VIEW VECTOR, V = P - E.
  vecaddsub(-1,v(),p(),e())
  '
  ' ELIMINATE alpha BY TRANSFORMING INTO 2 EQUATIONS OF THE FORM  a*x& + b*y& + c = 0
  a1=sx(1)*v(2)-sx(2)*v(1)
  a2=sx(1)*v(3)-sx(3)*v(1)
  b1=sy(1)*v(2)-sy(2)*v(1)
  b2=sy(1)*v(3)-sy(3)*v(1)
  temp=s0(1)-e(1)
  verysmall(temp)
  c1=temp*v(2)-(s0(2)-e(2))*v(1)
  c2=temp*v(3)-(s0(3)-e(3))*v(1)
  '
  ' NOW SOLVE a1*x& + b1*y& + c1 = a2*x& + b2*y& + c2 = 0 FOR x& AND y&.  WILL GET DIVISION BY ZERO
  ' ERROR IF E = P.  SHOULD CHECK FOR THIS BEFORE CALLING THIS PROCEDURE.  I DO NOT KNOW
  ' OF ANY OTHER CASES WHERE THIS ERROR WILL OCCUR.
  '
  temp=a1*b2-a2*b1
  verysmall(temp)
  x&=(c2*b1-c1*b2)/temp
  y&=(a2*c1-a1*c2)/temp
  '
  ERASE v()
  '
RETURN
> PROCEDURE calc3drotmat(rot_angle&,VAR v(),r())
  '
  ' CALCULATES A 3D ROTATION MATRIX R :
  '
  LOCAL crot,srot,ct,st,cp,sp,cp_ct,cp_st,sp_ct,sp_st,temp_norm,v_3sqrd
  DIM u(3,3),t(3,3),t_inv(3,3)
  '
  ' CALCULATE U, SIMPLY A PLANAR ROTATION EXTENDED TO 3D.
  crot=COS(rot_angle&*PI/180)
  srot=SIN(rot_angle&*PI/180)
  '
  u(1,1)=crot
  u(1,2)=-srot
  u(1,3)=0
  u(2,1)=srot
  u(2,2)=crot
  u(2,3)=0
  u(3,1)=0
  u(3,2)=0
  u(3,3)=1
  '
  ' CALCULATE SIN AND COS OF THE ANGLES IN THE TWO ROTATIONS.
  v_3sqrd=v(3)^2
  temp_norm=SQR(v(1)^2+v_3sqrd)
  '
  IF temp_norm=0
    cp=1
    sp=0
  ELSE
    cp=v(3)/temp_norm
    sp=v(1)/temp_norm
  ENDIF
  '
  temp_norm=SQR(v(2)^2+v_3sqrd)
  '
  IF temp_norm=0
    ct=1
    st=0
  ELSE
    ct=v(3)/temp_norm
    st=v(2)/temp_norm
  ENDIF
  '
  ' CALCULATE TEMPORARY VARIABLES TO SPEED UP CALCULATIONS.
  sp_st=sp*st
  sp_ct=sp*ct
  cp_st=cp*st
  cp_ct=cp*ct
  '
  ' CALCULATE T ; COMPOSED OF A ROTATION BY phi IN THE ik PLANE FOLLOWED BY A ROTATION BY
  ' tau IN THE jk PLANE.  EG.
  '
  t(1,1)=cp
  t(1,2)=0
  t(1,3)=-sp
  t(2,1)=-sp_st
  t(2,2)=ct
  t(2,3)=-cp_st
  t(3,1)=sp_ct
  t(3,2)=st
  t(3,3)=cp_ct
  '
  ' CALCULATE T INVERSE ; COMPOSED OF INVERSE ROTATIONS (VIZ : COS(-a) = COS(a),
  ' SIN(-a) = -SIN(a)  AND  (AB)' = B'A' ). EG.
  '
  '           / COS(phi)    0    SIN(phi)  \   /  1     0           0       \
  ' T_inv  =  |    0        1      0       | x |  0   COS(tau)    SIN(tau ) |
  '           \ -SIN(phi)   0    COS(phi)  /   \  0   -SIN(tau)   COS(tau)  /
  '
  t_inv(1,1)=cp
  t_inv(1,2)=-sp_st
  t_inv(1,3)=sp_ct
  t_inv(2,1)=0
  t_inv(2,2)=ct
  t_inv(2,3)=st
  t_inv(3,1)=-sp
  t_inv(3,2)=-cp_st
  t_inv(3,3)=cp_ct
  '
  ' CALCULATE R = T_inv.U.T, USING MATRIX MULTIPLICATION.
  matmul(r(),t(),u())
  matmul(r(),r(),t_inv())
  '
  ERASE u(),t(),t_inv()
  '
RETURN
> PROCEDURE rotvector(VAR v(),rot_centre(),r())
  '
  ' ROTATES THE VECTOR V() ABOUT WITH RESPECT TO AN ORIGIN RotCentre(). ROTATION MATRIX R()
  ' MUST BE PRE-CALCULATED THEN PASSED TO THIS PROCEDURE
  '
  LOCAL norm
  '
  vecaddsub(-1,v(),v(),rot_centre())
  norm=v(1)^2+v(2)^2+v(3)^2
  matvecmul(r(),v())
  '
  IF ABS(norm-(v(1)^2+v(2)^2+v(3)^2))>0.1
    PRINT "NORM FUCKED"
  ENDIF
  '
  vecaddsub(1,v(),v(),rot_centre())
  '
RETURN
> PROCEDURE calcs0
  '
  LOCAL x_temp&,y_temp&
  '
  x_temp&=x_res& DIV 2
  y_temp&=y_res& DIV 2
  s0(1)=c(1)-x_temp&*sx(1)-y_temp&*sy(1)
  s0(2)=c(2)-x_temp&*sx(2)-y_temp&*sy(2)
  s0(3)=c(3)-x_temp&*sx(3)-y_temp&*sy(3)
  '
RETURN
> PROCEDURE calceye
  '
  vecaddsub(1,e(),c(),e_offset())
  '
RETURN
> PROCEDURE resetmouse
  '
  mx_user&=x_res&/2
  my_user&=y_res&/2
  SETMOUSE mx_user&,my_user&
  '
RETURN
> PROCEDURE verysmall(VAR x)
  IF x=0
    x=1.0E-10
    PRINT AT(1,1);"DIVISION BY ZERO"
    '    KEYGET a%
    '    PRINT AT(1,1);"                                          "
  ENDIF
  '
RETURN
> PROCEDURE vecaddsub(sign&,VAR a(),b(),c())
  '
  FOR i|=1 TO 3
    a(i|)=b(i|)+c(i|)*sign&
  NEXT i|
  '
RETURN
> PROCEDURE mataddsub(sign&,VAR a(),b(),c())
  '
  FOR i|=1 TO 3
    FOR j|=1 TO 3
      a(i|,j|)=b(i|,j|)+c(i|,j|)*sign&
    NEXT j|
  NEXT i|
  '
RETURN
> PROCEDURE matmul(VAR a(),b(),c())
  '
  LOCAL i|,j|,sum
  DIM d(3,3)
  '
  FOR i|=1 TO 3
    FOR j|=1 TO 3
      '
      sum=0
      '
      FOR k|=1 TO 3
        sum=sum+b(i|,k|)*c(k|,j|)
      NEXT k|
      '
      d(i|,j|)=sum
      '
    NEXT j|
  NEXT i|
  '
  FOR i|=1 TO 3
    FOR j|=1 TO 3
      a(i|,j|)=d(i|,j|)
    NEXT j|
  NEXT i|
  '
  ERASE d()
  '
RETURN
> PROCEDURE matvecmul(VAR matrix(),row_vec())
  '
  LOCAL sum
  DIM temp_vec(3)
  '
  FOR i|=1 TO 3
    sum=0
    '
    FOR j|=1 TO 3
      sum=sum+matrix(i|,j|)*row_vec(j|)
      '
    NEXT j|
    temp_vec(i|)=sum
  NEXT i|
  '
  row_vec(1)=temp_vec(1)
  row_vec(2)=temp_vec(2)
  row_vec(3)=temp_vec(3)
  '
  ERASE temp_vec()
  '
RETURN
'
' CUBE PROCEDURES
'
> PROCEDURE setvertex(vertex|,i,j,k,VAR vertices())
  '
  ' SETS THE i, j, k COMPONENTS OF A VERTEX IN AN ARRAY OF VERTICES.
  vertices(vertex|,1)=i
  vertices(vertex|,2)=j
  vertices(vertex|,3)=k
  '
RETURN
> PROCEDURE rendercube
  '
  LOCAL vertex|,x&,y&
  '
  DIM cube_2d&(7,1),p(3)
  '
  FOR vertex|=0 TO 7
    '
    p(1)=cube_3d(vertex|,1)
    p(2)=cube_3d(vertex|,2)
    p(3)=cube_3d(vertex|,3)
    projectpoint(x&,y&,p())
    cube_2d&(vertex|,0)=x&
    cube_2d&(vertex|,1)=y&
    '    PRINT "Point( ";p(1);", ";p(2);", ";p(3);" ) -->  ( ";x&;", ";y&;" )"
    '
  NEXT vertex|
  '  STOP
  '
  ' DRAW THE TWELVE LINES THAT MAKE UP THE CUBE
  LINE cube_2d&(0,0),cube_2d&(0,1),cube_2d&(1,0),cube_2d&(1,1)
  LINE cube_2d&(1,0),cube_2d&(1,1),cube_2d&(2,0),cube_2d&(2,1)
  LINE cube_2d&(2,0),cube_2d&(2,1),cube_2d&(3,0),cube_2d&(3,1)
  LINE cube_2d&(3,0),cube_2d&(3,1),cube_2d&(0,0),cube_2d&(0,1)
  LINE cube_2d&(4,0),cube_2d&(4,1),cube_2d&(5,0),cube_2d&(5,1)
  LINE cube_2d&(5,0),cube_2d&(5,1),cube_2d&(6,0),cube_2d&(6,1)
  LINE cube_2d&(6,0),cube_2d&(6,1),cube_2d&(7,0),cube_2d&(7,1)
  LINE cube_2d&(7,0),cube_2d&(7,1),cube_2d&(4,0),cube_2d&(4,1)
  LINE cube_2d&(0,0),cube_2d&(0,1),cube_2d&(4,0),cube_2d&(4,1)
  LINE cube_2d&(1,0),cube_2d&(1,1),cube_2d&(5,0),cube_2d&(5,1)
  LINE cube_2d&(2,0),cube_2d&(2,1),cube_2d&(6,0),cube_2d&(6,1)
  LINE cube_2d&(3,0),cube_2d&(3,1),cube_2d&(7,0),cube_2d&(7,1)
  '
  ERASE cube_2d&(),p()
  '
RETURN
