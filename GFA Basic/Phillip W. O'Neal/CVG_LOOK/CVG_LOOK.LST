' CVG LOOK
$m2000000
'
@main
'
> PROCEDURE main
  '
  @init
  DO
    c_type%=EVNT_MULTI(&X10000,1,1,1,0,0,0,0,0,0,0,0,0,0,buffer%,0,mx%,my%,b%,key_state%,key%,d%)
    @check_event
    '
  LOOP
  '
RETURN
'
> PROCEDURE init
  '
  ' GET PRG ID
  ap_id&=APPL_INIT()
  '
  ' GET VDI HANDLE OF PROGRAMS WORKSTATION
  handle&=V~H
  '
  screen_colors%=WORK_OUT(13)  ! 2,4,16,256,256(TRUE COLOR)
  CONTRL(0)=102  ! 'VQ_EXTND' - GET EXTRA INFO ABOUT WORKSTATION
  CONTRL(1)=0
  CONTRL(3)=1
  CONTRL(6)=handle&
  INTIN(0)=1
  VDISYS
  screen_bits%=INTOUT(4)  ! GET # OF SCREEN PLANES
  '
  @path_init
  @check_for_mint
  @memory_init
  @store_colors
  @rsc_setup
  @window_init
  '
  ' CHECK FOR FILE FROM COMMAND LINE
  IF tail$<>"" THEN
    temp$=from_path$+MID$(tail$,2)
    '
  ENDIF
  '
  DEFMOUSE 0
  '
RETURN
'
> PROCEDURE path_init
  ' COMMAND LINE, COMMAND$ IS PATH+FILENAME OF PROCESS THAT
  ' STARTED PROGRAM. TAIL$ IS FILENAME THAT WAS DROPED ON ME
  shell%=SHEL_READ(command$,tail$)
  '
  ' GET CURRENT DIRECTORY
  current_drive%=GEMDOS(25)
  from_path$=DIR$(current_drive%+1)+"\"
  '
  ' ADD DRIVE LETTER IF NOT PRESENT
  IF MID$(from_path$,1,1)="\" THEN
    from_path$=CHR$(current_drive%+65)+":"+from_path$
    '
  ELSE
    IF MID$(from_path$,2,1)<>":" THEN
      from_path$=CHR$(current_drive%+65)+":\"+from_path$
      '
    ENDIF
    '
  ENDIF
  '
  ' STRIP FILENAME FROM PATH
  test%=RINSTR(command$,"\")
  IF test% THEN
    my_path$=MID$(command$,1,test%)
  ELSE
    my_path$=from_path$
  ENDIF
  '
  dummy$="0123456789"
  '
  path_read$="D:\CVG\"
  ' path_read$=my_path$
  path_write$=my_path$
  rsc$=my_path$+"CVG_LOOK.RSC"         ! RSC FILENAME
  convert_filename$=""
  '
RETURN
'
> PROCEDURE check_for_mint
  '
  ' CHECK FOR MINT COOKIE
  '
  INLINE cookie%,6
  CHAR{cookie%}="    "+CHR$(0)+CHR$(0)
  '
  ' GET ADDRESS OF COOKIE JAR
  jar%=LPEEK(1440)
  '
  mint%=0
  '
  IF jar% THEN
    DO
      IF LPEEK(jar%) THEN
        LPOKE cookie%,LPEEK(jar%)
        cookie$=CHAR{cookie%}
        jar%=jar%+8
        IF cookie$="MiNT" THEN
          mint%=1
          jar%=0
        ENDIF
        '
      ELSE
        jar%=0
        '
      ENDIF
      '
    LOOP UNTIL jar%=0
    '
  ENDIF
  '
  IF mint% THEN
    '
    ' PUT PRG NAME IN MENU
    me_id&=MENU_REGISTER(ap_id&,"  CVG LOOK")
    '
  ENDIF
  '
RETURN
'
> PROCEDURE memory_init
  '
  DIM display$(32000)
  DIM commands&(32000,12)
  DIM palette%(screen_colors%,2)
  '
  ' BUFFER FOR WINDOW TITLE/INFOLINE
  window_title%=GEMDOS(72,L:256)
  window_infoline%=GEMDOS(72,L:256)
  '
  ' SAVE OLD DTA AND SET NEW DTA ADDRESS
  dta%=GEMDOS(72,L:1024)
  old_dta%=FGETDTA()
  ~FSETDTA(dta%)
  ABSOLUTE attrib|,dta%+21
  '
  ' MESSAGE BUFFER FOR EVENT CALL
  DIM buffer&(15)
  buffer%=VARPTR(buffer&(0))
  '
  ' MESSAGE BUFFER FOR ME TO SEND EVENT MESSAGES
  DIM my_buffer&(15)
  my_buffer%=VARPTR(my_buffer&(0))
  '
RETURN
'
> PROCEDURE rsc_setup
  '
  IF EXIST(rsc$) THEN
    rsc%=RSRC_LOAD(rsc$)
    @rsc_do
    '
  ELSE
    ' CANT FIND RSC FILE
    END
    '
  ENDIF
  '
RETURN
'
> PROCEDURE rsc_do
  '
  ' GET ADDRESS TREE
  ~RSRC_GADDR(0,0,menu%)
  '
  ' SHOW MENU
  ~MENU_BAR(menu%,1)
  '
  ' SET VARS TO OBJ NUMBERS
  m_about%=7
  m_load%=16
  m_save%=17
  m_print%=18
  m_quit%=20
  '
RETURN
'
> PROCEDURE window_init
  '
  ' GET MAX WINDOW SIZE
  flag%=WIND_GET(0,4,mwx%,mwy%,mww%,mwh%)
  main_win%=-1
  vek_win%=-1
  '
RETURN
'
> PROCEDURE window_setup
  '
  ' CREATE WINDOW WITH ALL GADGETS
  main_win%=WIND_CREATE(&X111111101111,mwx%,mwy%,mww%,mwh%)
  '
  ' SET TITLE
  CHAR{window_title%}=convert_filename$
  flag%=WIND_SET(main_win%,2,CARD(SWAP(window_title%)),CARD(window_title%),0,0)
  '
  ' OPEN WINDOW
  flag%=WIND_OPEN(main_win%,mwx%,mwy%,mww%,mwh%)
  flag%=WIND_GET(main_win%,5,main_wx%,main_wy%,main_ww%,main_wh%)
  flag%=WIND_GET(main_win%,4,main_iwx%,main_iwy%,main_iww%,main_iwh%)
  '
  vview%=0
  hview%=0
  @size_slider
  '
RETURN
'
> PROCEDURE vek_window_setup
  ' CREATE WINDOW WITH ALL GADGETS
  vek_win%=WIND_CREATE(&X101111,mwx%,mwy%,mww%,mwh%)
  '
  ' SET TITLE
  CHAR{window_title%}=convert_filename$
  flag%=WIND_SET(vek_win%,2,CARD(SWAP(window_title%)),CARD(window_title%),0,0)
  '
  ' OPEN WINDOW
  flag%=WIND_OPEN(vek_win%,mwx%,mwy%,mww%,mwh%)
  flag%=WIND_GET(vek_win%,5,vek_wx%,vek_wy%,vek_ww%,vek_wh%)
  flag%=WIND_GET(vek_win%,4,vek_iwx%,vek_iwy%,vek_iww%,vek_iwh%)
  '
RETURN
'
> PROCEDURE check_event
  '
  ' MENU/WINDOW EVENT
  IF c_type% AND &X10000 THEN
    '
    ' TYPE OF EVENT
    command%=buffer&(0)
    IF command%=10 THEN
      '
      ' MENU ITEM
      @the_menu
      '
    ELSE
      '
      ' WINDOW EVENT
      @a_window
      '
    ENDIF
    '
  ENDIF
  '
RETURN
'
> PROCEDURE the_menu
  '
  ' WHICH MENU TITLE ?
  tit%=buffer&(3)
  '
  ' MAKE MENU TITLE NORMAL AGAIN
  ~MENU_TNORMAL(menu%,tit%,1)
  '
  ' WHICH MENU ITEM WAS SELECTED
  item%=buffer&(4)
  '
  SELECT item%
    '
  CASE m_about%
    ' PRG CREDITS
    ALERT 0," |CVG LOOK  |By Phillip  | ",0," OK ",d%
    '
  CASE m_load%
    FILESELECT #"Select "+extension_read$+" file to LOAD",path_read$+"*."+extension_read$,convert_filename$,temp$
    IF temp$<>"" THEN
      @all
    ENDIF
    IF main_win%<1
      @window_setup
    ELSE
      @size_slider
    ENDIF
    @update_main
    IF good_file% THEN
      IF vek_win%<1
        @vek_window_setup
      ENDIF
      @update_vek
    ENDIF
    '
  CASE m_save%
    '
  CASE m_print%
    @dump_text
    '
  CASE m_quit%
    @prg_exit
    '
  ENDSELECT
  '
RETURN
'
> PROCEDURE a_window
  '
  ' HANDLE OF WINDOW THAT TRIGGERED EVENT
  win%=buffer&(3)
  '
  ' BE SURE IT WAS OUR WINDOW
  IF win%=main_win% THEN
    SELECT command%
      '
      ' WIND UPDATE
    CASE 20
      @repair
      '
      ' WINDOW CLICKED ON
    CASE 21
      ' WINDOW SET TO TOP
      flag%=WIND_SET(main_win%,10,0,0,0,0)
      DEFMOUSE 0
      '
      ' CLOSE WINDOW
    CASE 22
      flag%=WIND_CLOSE(main_win%)
      flag%=WIND_DELETE(main_win%)
      main_win%=-1
      '
      ' WINDOW SIZED,MOVED
    CASE 23 ! FULL WINDOW
      IF main_wx%<>mwx% OR main_wy%<>mwy% OR main_ww%<>mww% OR main_wh%<>mwh% THEN
        flag%=WIND_SET(main_win%,5,mwx%,mwy%,mww%,mwh%)
        flag%=WIND_GET(main_win%,5,main_wx%,main_wy%,main_ww%,main_wh%)
      ELSE
        flag%=WIND_GET(main_win%,6,main_wx%,main_wy%,main_ww%,main_wh%) ! GET SIZE
        flag%=WIND_SET(main_win%,5,main_wx%,main_wy%,main_ww%,main_wh%)
      ENDIF
      flag%=WIND_GET(main_win%,4,main_iwx%,main_iwy%,main_iww%,main_iwh%) ! GET INSIDE SIZE
      @size_slider
      '
    CASE 24,25,26
      old_main_vview%=main_vview%
      old_main_hview%=main_hview%
      @event_slider
      @update_main
      '
    CASE 27,28
      main_wx%=buffer&(4)
      main_wy%=buffer&(5)
      main_ww%=buffer&(6)
      main_wh%=buffer&(7)
      flag%=WIND_SET(main_win%,5,main_wx%,main_wy%,main_ww%,main_wh%)
      flag%=WIND_GET(main_win%,4,main_iwx%,main_iwy%,main_iww%,main_iwh%)
      @size_slider
      '
    ENDSELECT
    '
  ENDIF
  '
  IF win%=vek_win% THEN
    SELECT command%
      '
      ' WIND UPDATE
    CASE 20
      @repair_vek
      '
      ' WINDOW CLICKED ON
    CASE 21
      ' WINDOW SET TO TOP
      flag%=WIND_SET(vek_win%,10,0,0,0,0)
      DEFMOUSE 0
      '
      ' CLOSE WINDOW
    CASE 22
      flag%=WIND_CLOSE(vek_win%)
      flag%=WIND_DELETE(vek_win%)
      vek_win%=-1
      '
      ' WINDOW SIZED,MOVED
    CASE 23 ! FULL WINDOW
      IF vek_wx%<>mwx% OR vek_wy%<>mwy% OR vek_ww%<>mww% OR vek_wh%<>mwh% THEN
        flag%=WIND_SET(vek_win%,5,mwx%,mwy%,mww%,mwh%)
        flag%=WIND_GET(vek_win%,5,vek_wx%,vek_wy%,vek_ww%,vek_wh%)
      ELSE
        flag%=WIND_GET(vek_win%,6,vek_wx%,vek_wy%,vek_ww%,vek_wh%) ! GET SIZE
        flag%=WIND_SET(vek_win%,5,vek_wx%,vek_wy%,vek_ww%,vek_wh%)
      ENDIF
      flag%=WIND_GET(vek_win%,4,vek_iwx%,vek_iwy%,vek_iww%,vek_iwh%) ! GET INSIDE SIZE
      @update_vek
      '
    CASE 27,28
      vek_wx%=buffer&(4)
      vek_wy%=buffer&(5)
      vek_ww%=buffer&(6)
      vek_wh%=buffer&(7)
      flag%=WIND_SET(vek_win%,5,vek_wx%,vek_wy%,vek_ww%,vek_wh%)
      flag%=WIND_GET(vek_win%,4,vek_iwx%,vek_iwy%,vek_iww%,vek_iwh%)
      IF command%=27 THEN
        @update_vek
      ENDIF
      '
    ENDSELECT
    '
  ENDIF
  '
RETURN
'
> PROCEDURE fix_vslider
  '
  vslider_position%=(vview%/vmax%)*1000
  flag%=WIND_SET(main_win%,9,vslider_position%,0,0,0)
  '
RETURN
'
> PROCEDURE fix_hslider
  '
  hslider_position%=(hview%/hmax%)*1000
  flag%=WIND_SET(main_win%,8,hslider_position%,0,0,0)
  '
RETURN
'
> PROCEDURE event_slider
  '
  SELECT command%
  CASE 24
    slider_event%=buffer&(4)
    SELECT slider_event%
    CASE 0 ! 'ABOVE'
      IF vview%>0
        vview%=vview%-vfit%
        IF vview%<0
          vview%=0
        ENDIF
        @fix_vslider
        '
      ENDIF
      '
    CASE 1 ! 'BELOW'
      IF vview%<vmax% AND vslider_size%<1000 THEN
        vview%=vview%+vfit%
        IF vview%>vmax% THEN
          vview%=vmax%
        ENDIF
        @fix_vslider
      ENDIF
      '
    CASE 2 ! 'UP'
      IF vview%>0
        DEC vview%
        @fix_vslider
        '
      ENDIF
      '
    CASE 3 ! 'DOWN'
      IF vview%<vmax% AND vslider_size%<1000 THEN
        INC vview%
        @fix_vslider
      ENDIF
      '
    CASE 4 ! 'LEFT OF SLIDER'
      IF hview%>0
        hview%=hview%-hfit%
        IF hview%<0 THEN
          hview%=0
        ENDIF
        @fix_hslider
        '
      ENDIF
      '
    CASE 5 ! 'RIGHT OF SLIDER'
      IF hview%<hmax% AND hslider_size%<1000 THEN
        hview%=hview%+hfit%
        IF hview%>hmax% THEN
          hview%=hmax%
        ENDIF
        @fix_hslider
      ENDIF
      '
    CASE 6 ! 'LEFT'
      IF hview%>0
        DEC hview%
        @fix_hslider
        '
      ENDIF
      '
    CASE 7 ! 'RIGHT'
      IF hview%<hmax% AND hslider_size%<1000 THEN
        INC hview%
        @fix_hslider
      ENDIF
      '
    ENDSELECT
  CASE 25 ! 'H SLIDER BOX'
    IF hslider_size%<1000 THEN
      hslider_position%=buffer&(4)
      hview%=(hslider_position%/1000)*hmax%
      @fix_hslider
      '
    ENDIF
    '
  CASE 26 ! 'V SLIDER BOX'
    IF vslider_size%<1000 THEN
      vslider_position%=buffer&(4)
      vview%=(vslider_position%/1000)*vmax%
      @fix_vslider
      '
    ENDIF
    '
  ENDSELECT
  '
RETURN
'
> PROCEDURE size_slider
  '
  widest_line%=1
  FOR x%=0 TO current_line%
    widest_line%=MAX(widest_line%,LEN(display$(x%)))
  NEXT x%
  '
  IF INT(main_iww%/8)<widest_line%+1 THEN
    hmax%=widest_line%+1-INT(main_iww%/8)
    hfit%=INT(main_iww%/8)
    hslider_size%=(hfit%/(widest_line%+1))*1000
    IF hview%>hmax% THEN
      hview%=hmax%
      @fix_hslider
    ENDIF
    '
  ELSE
    hview%=0
    hslider_size%=1000
    hslider_position%=0
    hfit%=widest_line%+1
  ENDIF
  '
  IF INT(main_iwh%/16)<current_line% THEN
    vmax%=current_line%-INT(main_iwh%/16)
    vfit%=INT(main_iwh%/16)
    vslider_size%=(vfit%/current_line%)*1000
    IF vview%>vmax% THEN
      vview%=vmax%
      @fix_vslider
    ENDIF
    '
  ELSE
    vview%=0
    vslider_size%=1000
    vslider_position%=0
    vfit%=current_line%
  ENDIF
  '
  flag%=WIND_SET(main_win%,8,hslider_position%,0,0,0)
  flag%=WIND_SET(main_win%,15,hslider_size%,0,0,0)
  '
  flag%=WIND_SET(main_win%,9,vslider_position%,0,0,0)
  flag%=WIND_SET(main_win%,16,vslider_size%,0,0,0)
  '
RETURN
'
> PROCEDURE repair
  '
  ' TELL GEM WE ARE TAKING OVER SCREEN AND MOUSE
  er%=WIND_UPDATE(1)
  er%=WIND_UPDATE(3)
  '
  ' GET FIRST RECTANGLE FROM LIST
  er%=WIND_GET(main_win%,11,fx%,fy%,fx2%,fy2%)
  '
  ' GET DIRTY AREA
  fix_wx%=buffer&(4)
  fix_wy%=buffer&(5)
  fix_ww%=buffer&(6)
  fix_wh%=buffer&(7)
  '
  ' CALC AREA THAT OVERLAPS DIRTY AREA
  fix_flag%=RC_INTERSECT(fix_wx%,fix_wy%,fix_ww%,fix_wh%,fx%,fy%,fx2%,fy2%)
  '
  IF fix_flag% THEN
    CLIP fx%,fy%,fx2%,fy2%
    DEFFILL 0,2,8
    PBOX fx%,fy%,fx%+fx2%-1,fy%+fy2%-1
    @redraw
    '
  ENDIF
  '
  fix_done%=0
  '
  ' SAME AS ABOVE FOR THE OTHER RECTANGLES FROM LIST
  DO
    er%=WIND_GET(main_win%,12,fx%,fy%,fx2%,fy2%)
    '
    IF fx2%+fy2%=0 THEN
      fix_done%=1
    ELSE
      fix_wx%=buffer&(4)
      fix_wy%=buffer&(5)
      fix_ww%=buffer&(6)
      fix_wh%=buffer&(7)
      fix_flag%=RC_INTERSECT(fix_wx%,fix_wy%,fix_ww%,fix_wh%,fx%,fy%,fx2%,fy2%)
      IF fix_flag% THEN
        CLIP fx%,fy%,fx2%,fy2%
        PBOX fx%,fy%,fx%+fx2%-1,fy%+fy2%-1
        @redraw
        '
      ENDIF
    ENDIF
    '
  LOOP UNTIL fix_done%=1
  '
  er%=WIND_UPDATE(2)
  er%=WIND_UPDATE(0)                      !  DONE!
  '
RETURN
'
> PROCEDURE redraw
  FOR x%=0 TO vfit%
    TEXT main_iwx%,main_iwy%+x%*16+16,MID$(display$(vview%+x%),hview%,hfit%)
  NEXT x%
  '
RETURN
'
> PROCEDURE update_main
  my_buffer&(0)=20
  my_buffer&(3)=main_win%
  my_buffer&(4)=main_iwx%
  my_buffer&(5)=main_iwy%
  my_buffer&(6)=main_iwx%+main_iww%-1
  my_buffer&(7)=main_iwy%+main_iwh%-1
  ~APPL_WRITE(ap_id&,16,my_buffer%)
RETURN
'
> PROCEDURE repair_vek
  '
  ' TELL GEM WE ARE TAKING OVER SCREEN AND MOUSE
  er%=WIND_UPDATE(1)
  er%=WIND_UPDATE(3)
  '
  ' GET FIRST RECTANGLE FROM LIST
  er%=WIND_GET(vek_win%,11,fx%,fy%,fx2%,fy2%)
  '
  ' GET DIRTY AREA
  fix_wx%=buffer&(4)
  fix_wy%=buffer&(5)
  fix_ww%=buffer&(6)
  fix_wh%=buffer&(7)
  '
  ' CALC AREA THAT OVERLAPS DIRTY AREA
  fix_flag%=RC_INTERSECT(fix_wx%,fix_wy%,fix_ww%,fix_wh%,fx%,fy%,fx2%,fy2%)
  '
  IF fix_flag% THEN
    CLIP fx%,fy%,fx2%,fy2%
    DEFFILL 0,2,8
    PBOX fx%,fy%,fx%+fx2%-1,fy%+fy2%-1
    @draw
    '
  ENDIF
  '
  fix_done%=0
  '
  ' SAME AS ABOVE FOR THE OTHER RECTANGLES FROM LIST
  DO
    er%=WIND_GET(vek_win%,12,fx%,fy%,fx2%,fy2%)
    '
    IF fx2%+fy2%=0 THEN
      fix_done%=1
    ELSE
      fix_wx%=buffer&(4)
      fix_wy%=buffer&(5)
      fix_ww%=buffer&(6)
      fix_wh%=buffer&(7)
      fix_flag%=RC_INTERSECT(fix_wx%,fix_wy%,fix_ww%,fix_wh%,fx%,fy%,fx2%,fy2%)
      IF fix_flag% THEN
        CLIP fx%,fy%,fx2%,fy2%
        PBOX fx%,fy%,fx%+fx2%-1,fy%+fy2%-1
        @draw
        '
      ENDIF
    ENDIF
    '
  LOOP UNTIL fix_done%=1
  '
  er%=WIND_UPDATE(2)
  er%=WIND_UPDATE(0)                      !  DONE!
  '
RETURN
'
> PROCEDURE draw
  '
  scalex=16384/vek_iww%
  scaley=16384/vek_iwh%
  '
  xit%=0
  command%=0
  DO
    instruction%=commands&(command%,0)
    SELECT instruction%
    CASE -1
      '
    CASE 0   ! START POINT : X,Y
      startx%=commands&(command%,1)
      starty%=commands&(command%,2)
      '
    CASE 1   ! LINE TO : X,Y
      x%=commands&(command%,1)
      y%=commands&(command%,2)
      '
      LINE vek_iwx%+((sx%)+(startx%*sw)),vek_iwy%+((sy%)+(starty%*sh)),vek_iwx%+((sx%)+(x%*sw)),vek_iwy%+((sy%)+(y%*sh))
      startx%=x%
      starty%=y%
      '
    CASE 2   ! CURVE TO : CX1,CY1,CX2,CY2,X,Y
      cx1%=commands&(command%,1)
      cy1%=commands&(command%,2)
      cx2%=commands&(command%,3)
      cy2%=commands&(command%,4)
      x%=commands&(command%,5)
      y%=commands&(command%,6)
      '
      CURVE vek_iwx%+((sx%)+(startx%*sw)),vek_iwy%+((sy%)+(starty%*sh)),vek_iwx%+((sx%)+(cx1%*sw)),vek_iwy%+((sy%)+(cy1%*sh)),vek_iwx%+((sx%)+(cx2%*sw)),vek_iwy%+((sy%)+(cy2%*sh)),vek_iwx%+((sx%)+(x%*sw)),vek_iwy%+((sy%)+(y%*sh))
      startx%=x%
      starty%=y%
      '
    CASE 3   ! SET SIZE : MIN_X,MIN_Y,MAX_X,MAX_Y
      '
    CASE 4   ! SET INFO : 12 WORDS
      sx%=commands&(command%,3)/scalex
      sy%=commands&(command%,4)/scaley
      sw=commands&(command%,5)/16384/scalex
      sh=commands&(command%,6)/16384/scaley
      '
      @set_fill
      DEFFILL fill_color%
      '
      @set_line
      DEFLINE line_type%,(line_width%/100)+1,line_start%,line_end%
      COLOR line_color%
      '
    CASE 15  ! END OF OBJECT
      LINE vek_iwx%+((sx%)+(startx%*sw)),vek_iwy%+((sy%)+(starty%*sh)),vek_iwx%+10+((sx%)+(startx%*sw)),vek_iwy%+10+((sy%)+(starty%*sh))
      '
    CASE 48  ! END OF FILE
      xit%=1
      '
    DEFAULT
      '
    ENDSELECT
    INC command%
  LOOP UNTIL xit%
  '
RETURN
'
> PROCEDURE set_line
  red%=(commands&(command%,9) AND &HFF)*4
  green%=(SHR(commands&(command%,10) AND &HFF00,8))*4
  blue%=(commands&(command%,10) AND &HFF)*4
  '
  @set_color
  line_color%=color%
  IF line_color%<0 THEN
    line_color%=0
  ENDIF
  '
  line_width%=commands&(command%,12) AND &HFF
  line_type%=commands&(command%,11) AND &H3
  line_start%=SHR(commands&(command%,11) AND &HC000,14)
  line_end%=SHR(commands&(command%,11) AND &H3000,12)
  '
RETURN
'
> PROCEDURE set_fill
  red%=(commands&(command%,7) AND &HFF)*4
  green%=(SHR(commands&(command%,8) AND &HFF00,8))*4
  blue%=(commands&(command%,8) AND &HFF)*4
  '
  @set_color
  fill_color%=color%
  IF fill_color%<0 THEN
    fill_color%=0
  ENDIF
  '
RETURN
'
> PROCEDURE update_vek
  my_buffer&(0)=20
  my_buffer&(3)=vek_win%
  my_buffer&(4)=vek_iwx%
  my_buffer&(5)=vek_iwy%
  my_buffer&(6)=vek_iwx%+vek_iww%-1
  my_buffer&(7)=vek_iwy%+vek_iwh%-1
  ~APPL_WRITE(ap_id&,16,my_buffer%)
RETURN
'
> PROCEDURE all
  '
  search$=temp$
  '
  test%=RINSTR(temp$,"\")
  '
  ' STRIP FILENAME
  IF test% THEN
    path_read$=MID$(temp$,1,test%)
  ENDIF
  '
  ' SEARCH FOR FILE
  finished%=GEMDOS(78,L:V:search$,&X111111)
  '
  DO UNTIL finished%
    convert_filename$=CHAR{dta%+30}
    '
    IF convert_filename$<>"." AND convert_filename$<>".."
      '
      ' DON'T DO FOLDERS
      IF BTST(attrib|,4)=0
        @convert
        '
      ENDIF
      '
    ENDIF
    '
    ' SEARCH FOR NEXT FILE
    finished%=GEMDOS(79)
    '
  LOOP
  '
RETURN
'
> PROCEDURE convert
  '
  l%=LEN(convert_filename$)
  ' convert_out$=MID$(convert_filename$,1,l%-3)+"TXT"
  OPEN "I",#1,path_read$+convert_filename$
  '
  ' OPEN "O",#2,path_write$+convert_out$
  '
  good_file%=1
  test$=""
  FOR x%=0 TO 9
    y%=INP(#1)
    test$=test$+CHR$(y%)
  NEXT x%
  '
  IF test$="CALAMUSCVG" THEN
    current_line%=0
    version%=INP&(#1)
    '
    SELECT version%
    CASE 1000
      display$(current_line%)=convert_filename$+" 1.09 "+STR$(size%)+" bytes."
      '
    CASE 1100
      display$(current_line%)=convert_filename$+" SL "+STR$(size%)+" bytes."
      commands&(current_line%,0)=-1
      '
    DEFAULT
      display$(current_line%)=convert_filename$+" UNKNOWN:"+STR$(version%)+" "+STR$(size%)+" bytes."
      '
    ENDSELECT
    IF version%=1100 THEN
      INC current_line%
      '
      xit%=0
      '
      DO
        instruction%=INP&(#1)
        SELECT instruction%
        CASE 0   ! START POINT : X,Y
          x%=INP&(#1)
          y%=INP&(#1)
          '
          display$(current_line%)="START POINT:"+STR$(x%)+","+STR$(y%)
          '
          commands&(current_line%,0)=instruction%
          commands&(current_line%,1)=x%
          commands&(current_line%,2)=y%
          INC current_line%
          '
        CASE 1   ! LINE TO : X,Y
          x%=INP&(#1)
          y%=INP&(#1)
          display$(current_line%)="LINE TO:"+STR$(x%)+","+STR$(y%)
          '
          commands&(current_line%,0)=instruction%
          commands&(current_line%,1)=x%
          commands&(current_line%,2)=y%
          INC current_line%
          '
        CASE 2   ! CURVE TO : CX1,CY1,CX2,CY2,X,Y
          cx1%=INP&(#1)
          cy1%=INP&(#1)
          cx2%=INP&(#1)
          cy2%=INP&(#1)
          x%=INP&(#1)
          y%=INP&(#1)
          display$(current_line%)="CURVE TO:"+STR$(x%)+","+STR$(y%)+" "+STR$(cx1%)+","+STR$(cy1%)+" "+STR$(cx2%)+","+STR$(cy2%)
          '
          commands&(current_line%,0)=instruction%
          commands&(current_line%,1)=cx1%
          commands&(current_line%,2)=cy1%
          commands&(current_line%,3)=cx2%
          commands&(current_line%,4)=cy2%
          commands&(current_line%,5)=x%
          commands&(current_line%,6)=y%
          INC current_line%
          '
        CASE 3   ! SET SIZE : MIN_X,MIN_Y,MAX_X,MAX_Y
          d0%=INP&(#1)
          d1%=INP&(#1)
          d2%=INP&(#1)
          d3%=INP&(#1)
          display$(current_line%)="SET SIZE:(0)"+BIN$(d0%,16)+" "+STR$(d0%)+" (1):"+BIN$(d1%,16)+" "+STR$(d1%)+" (2):"+BIN$(d2%,16)+" "+STR$(d2%)+" (3):"+BIN$(d3%,16)+" "+STR$(d3%)
          commands&(current_line%,0)=instruction%
          commands&(current_line%,1)=d0%
          commands&(current_line%,2)=d1%
          commands&(current_line%,3)=d2%
          commands&(current_line%,4)=d3%
          INC current_line%
          '
        CASE 4   ! SET INFO : 12 WORDS
          commands&(current_line%,0)=instruction%
          d%=INP&(#1)
          commands&(current_line%,1)=d%
          display$(current_line%)="OBJECT INFO:"+STR$(d%)
          FOR x%=1 TO 11
            d%=INP&(#1)
            commands&(current_line%,x%+1)=d%
            display$(current_line%)=display$(current_line%)+" "+STR$(d%)
          NEXT x%
          FOR x%=0 TO 11
            d%=commands&(current_line%,x%+1)
            display$(current_line%)=display$(current_line%)+" "+STR$(x%)+":"+BIN$(d%,16)
          NEXT x%
          '
          INC current_line%
          '
        CASE 15  ! END OF OBJECT
          display$(current_line%)="END OF OBJECT."
          commands&(current_line%,0)=instruction%
          INC current_line%
          '
        CASE 48  ! END OF FILE
          display$(current_line%)="END OF FILE."
          commands&(current_line%,0)=instruction%
          INC current_line%
          display$(current_line%)=""
          xit%=1
          '
        DEFAULT
          display$(current_line%)="?="+STR$(instruction%)
          commands&(current_line%,0)=instruction%
          INC current_line%
          '
        ENDSELECT
      LOOP UNTIL xit% OR EOF(#1)
      '
    ELSE
      current_line%=1
      display$(current_line%)=""
      commands&(0,0)=48
      good_file%=0
      '
    ENDIF
    '
  ELSE
    display$(0)="Not CVG."
    current_line%=1
    display$(current_line%)=""
    commands&(0,0)=48
    good_file%=0
    '
  ENDIF
  '
  CLOSE #1
  '
RETURN
'
> PROCEDURE dump_text
  IF OUT?(0) THEN
    FOR x%=0 TO current_line%
      FOR y%=1 TO LEN(display$(x%))
        a%=ASC(MID$(display$(x%),y%,1))
        OUT 0,a%
      NEXT y%
      OUT 0,10,13
    NEXT x%
    OUT 0,10,12
  ENDIF
  '
RETURN
'
> PROCEDURE store_colors
  '
  FOR color%=0 TO screen_colors%-1
    '
    CONTRL(0)=26                  ! VQ_COLOR
    CONTRL(1)=0
    CONTRL(3)=2
    CONTRL(6)=handle&
    INTIN(0)=color%               ! VDI COLOR INDEX
    INTIN(1)=0                    ! FLAG 0= ,1=
    VDISYS
    palette%(color%,0)=INTOUT(1)  ! RED VALUE 0-1000
    palette%(color%,1)=INTOUT(2)  ! GREEN  "    "
    palette%(color%,2)=INTOUT(3)  ! BLUE   "    "
    '
  NEXT color%
  '
RETURN
'
> PROCEDURE restore_colors
  '
  FOR color%=0 TO screen_colors%-1
    '
    CONTRL(0)=14                 ! VS_COLOR
    CONTRL(1)=0
    CONTRL(3)=4
    CONTRL(6)=handle&
    INTIN(0)=color%              ! COLOR INDEX
    INTIN(1)=palette%(color%,0)  ! RED VALUE 0-1000
    INTIN(2)=palette%(color%,1)  ! GREEN  "     "
    INTIN(3)=palette%(color%,2)  ! BLUE   "     "
    VDISYS
    '
  NEXT color%
  '
RETURN
'
> PROCEDURE set_color
  color%=1
  IF screen_colors%=256 AND screen_bits%>8 THEN
    CONTRL(0)=14                 ! VS_COLOR
    CONTRL(1)=0
    CONTRL(3)=4
    CONTRL(6)=handle&
    INTIN(0)=1                   ! COLOR INDEX
    INTIN(1)=red%                ! RED VALUE 0-1000
    INTIN(2)=green%              ! GREEN  "     "
    INTIN(3)=blue%               ! BLUE   "     "
    VDISYS
  ELSE
    FOR test%=0 TO screen_colors%-1
      '
      CONTRL(0)=26                  ! VQ_COLOR
      CONTRL(1)=0
      CONTRL(3)=2
      CONTRL(6)=handle&
      INTIN(0)=test%               ! VDI COLOR INDEX
      INTIN(1)=0                    ! FLAG 0= ,1=
      VDISYS
      r%=INTOUT(1)                  ! RED VALUE 0-1000
      g%=INTOUT(2)                  ! GREEN  "    "
      b%=INTOUT(3)                  ! BLUE   "    "
      IF INT(red%/25)=INT(r%/25) AND INT(g%/25)=INT(green%/25) AND INT(b%/25)=INT(blue%/25) THEN
        color%=test%
        test%=screen_colors%
      ENDIF
      '
    NEXT test%
  ENDIF
  '
RETURN
'
> PROCEDURE prg_exit
  '
  IF main_win%>0
    flag%=WIND_CLOSE(main_win%)
    flag%=WIND_DELETE(main_win%)
  ENDIF
  '
  IF vek_win%>0
    flag%=WIND_CLOSE(vek_win%)
    flag%=WIND_DELETE(vek_win%)
  ENDIF
  '
  @restore_colors
  '
  ' KILL MENU
  ~MENU_BAR(menu%,0)
  '
  ' RESTORE DTA
  ~FSETDTA(old_dta%)
  '
  ' RELEASE MEMORY
  d%=GEMDOS(73,L:dta%)
  d%=GEMDOS(73,L:window_title%)
  d%=GEMDOS(73,L:window_infoline%)
  '
  ' RELEASE RSC MEMORY
  ~RSRC_FREE()
  '
  END
  '
RETURN
