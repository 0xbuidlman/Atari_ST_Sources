' $m6000000
@init_variables
'
DO
  c_type%=EVNT_MULTI(&X10011,1,1,1,0,0,0,0,0,0,0,0,0,0,buffer%,100,mx%,my%,b%,key_state%,key%,d%)
  @check_event
LOOP
'
> PROCEDURE init_variables
  '
  DEFFILL 0,2,8
  '
  @check_for_mint
  '
  INLINE dta%,1024
  ~FSETDTA(dta%)
  '
  ABSOLUTE length%,dta%+26
  ABSOLUTE attrib|,dta%+21
  '
  INLINE window_title%,128
  INLINE dir_title%,128
  '
  current_drive%=GEMDOS(25)            ! DRIVE PROGRAM WAS RAN FROM
  my_path$=DIR$(current_drive%+1)+"\"  ! PATH     "     "   "   "
  f_name$=my_path$+"*.DIR"
  set$=my_path$+"FULL_DIR.INF"         ! INF FILENAME
  rsc$=my_path$+"FULL_DIR.RSC"         ! RSC FILENAME
  '
  pad$=SPACE$(9)
  '
  @set_load
  @rsc_setup
  '
  rm%=0
  width%=0
  repair_flag%=0
  '
  OPTION BASE 0
  size%=32764
  DIM file$(2,size%),index%(size%),sort$(size%),path$(size%/4),mask$(size%/8),mask%(size%/8),used%(size%/8),s_a_v_e%(size%)
  DIM buffer&(7)             ! MESSAGE BUFFER FOR EVENT CALL
  buffer%=VARPTR(buffer&(0))
  '
  sort_name$="NameTypeSizePath"
  '
  @set_drives
  @set_defaults
  @all_clear
  '
  ~MENU_BAR(menu%,1)        ! SHOW MY MENU
  '
  @window_setup
  '
  DEFMOUSE 0
  '
RETURN
'
> PROCEDURE check_for_mint
  '
  INLINE cook%,6
  CHAR{cook%}="    "+CHR$(0)+CHR$(0)
  handle%=V~H
  jar%=LPEEK(1440)
  mint%=0
  IF jar% THEN
    DO
      IF LPEEK(jar%) THEN
        LPOKE cook%,LPEEK(jar%)
        cookie$=CHAR{cook%}
        jar%=jar%+8
        IF cookie$="MiNT" THEN
          mint%=1
          jar%=0
        ENDIF
      ELSE
        jar%=0
      ENDIF
    LOOP UNTIL jar%=0
  ENDIF
  IF mint% THEN
    ~MENU_REGISTER(handle%,"  Full Dir")
  ENDIF
  '
RETURN
'
> PROCEDURE set_drives
  '
  drives$="ACDEFGHIJKLMNOPQRSTVWXYZ"
  '
  ds%=BIOS(10)
  '
  drive%=0
  FOR loop%=0 TO 25
    IF loop%<>1 AND loop%<>20
      IF BTST(ds%,loop%)
        OB_STATE(main%,b_a_drive%+drive%)=BCLR(OB_STATE(main%,b_a_drive%+drive%),3)
        OB_STATE(main%,b_all%)=BCLR(OB_STATE(main%,b_all%),3)
        OB_STATE(main%,b_rm%)=BCLR(OB_STATE(main%,b_rm%),3)
        max_drive%=drive%
      ELSE
        OB_STATE(main%,b_a_drive%+drive%)=BSET(OB_STATE(main%,b_a_drive%+drive%),3)
      ENDIF
      INC drive%
    ENDIF
  NEXT loop%
  '
RETURN
'
> PROCEDURE set_defaults
  char_width%=OB_W(main%,t_dummy%)
  char_height%=OB_H(main%,t_dummy%)
  '
  OB_X(main%,b_lines_slider%)=(lines%/1000)*lines_box_w%
  CHAR{{OB_SPEC(main%,b_lines_slider%)}}=STR$(lines%)
  '
  OB_X(main%,b_columns_slider%)=(columns_box_w%-columns_slider_w%)*((columns%-1)/8)
  CHAR{{OB_SPEC(main%,b_columns_slider%)}}=STR$(columns%)
  '
  FOR unset%=0 TO 3
    OB_STATE(main%,b_sort_name%+unset%)=BCLR(OB_STATE(main%,b_sort_name%+unset%),0)
  NEXT unset%
  OB_STATE(main%,b_sort_name%+sort%)=BSET(OB_STATE(main%,b_sort_name%+sort%),0)
  IF folder_show% THEN
    OB_STATE(main%,b_use_path%)=BSET(OB_STATE(main%,b_use_path%),0)
  ELSE
    OB_STATE(main%,b_use_path%)=BCLR(OB_STATE(main%,b_use_path%),0)
  ENDIF
  '
RETURN
'
> PROCEDURE rsc_setup
  '
  IF EXIST(rsc$) THEN
    rsc%=RSRC_LOAD(rsc$)
    @rsc_do
    '
  ELSE ! CAN'T FIND RSC FILE
    txt$=" |FULL DIR cannot find it's RSC file. |Do you want to look for it ? | "
    ALERT 2,txt$,1,"OK|Cancel",button%
    '
    IF button%=1 THEN
      rsc$="\FULL_DIR.RSC"
      FILESELECT #"Find FULL DIR's RSC file",rsc$,"FULL_DIR.RSC",rsc$
      '
      IF rsc$<>"" AND EXIST(rsc$) THEN
        rsc%=RSRC_LOAD(rsc$)
        @rsc_do
      ELSE
        END
      ENDIF
      '
    ELSE
      END
    ENDIF
    '
  ENDIF
  '
  IF rsc%=0 THEN ! STILL DIDN'T FIND RSC FILE
    txt$=" |FULL DIR aborted: |Error loading .RSC file. | "
    ALERT 1,txt$,1,"OK",d%
    END
  ENDIF
  '
RETURN
'
> PROCEDURE rsc_do
  '
  ~RSRC_GADDR(0,0,menu%)      ! GET ADDRESS TREE
  ~RSRC_GADDR(0,1,main%)
  ~RSRC_GADDR(0,2,status%)
  ~RSRC_GADDR(0,3,credits%)
  '
  b_a_drive%=2
  b_z_drive%=25
  b_all%=26
  b_rm%=27
  b_help%=28
  b_save%=29
  b_clear%=30
  b_use_path%=31
  b_save_setup%=32
  d_files%=33
  t_files%=34
  d_used%=35
  t_used%=36
  b_view%=37
  d_sort%=38
  b_sort_name%=40
  b_sort_type%=41
  b_sort_size%=42
  b_sort_path%=43
  d_columns%=44
  b_columns_left%=45
  b_columns_box%=46
  b_columns_slider%=47
  b_columns_right%=48
  d_width%=49
  t_width%=50
  d_lines%=51
  b_lines_left%=52
  b_lines_box%=53
  b_lines_slider%=54
  b_lines_right%=55
  b_reset%=56
  d_types%=57
  t_types%=58
  t_dummy%=59
  b_toggle%=60
  t_mask_start%=62
  b_mask_left%=71
  b_mask_box%=72
  b_mask_slider%=73
  b_mask_right%=74
  t_status%=1
  '
  max_ext%=8
  t_mask_end%=t_mask_start%+max_ext%
  '
  mask_box_w%=OB_W(main%,b_mask_box%)
  min_mask_slider_w%=OB_W(main%,b_mask_slider%)
  '
  columns_box_w%=OB_W(main%,b_columns_box%)
  columns_slider_w%=OB_W(main%,b_columns_slider%)
  '
  lines_box_w%=OB_W(main%,b_lines_box%)
  lines_slider_w%=OB_W(main%,b_lines_slider%)
  '
  ~FORM_CENTER(main%,main_x%,main_y%,main_w%,main_h%)
  ~FORM_CENTER(status%,status_x%,status_y%,status_w%,status_h%)
  ~FORM_CENTER(credits%,credits_x%,credits_y%,credits_w%,credits_h%)
  '
RETURN
'
> PROCEDURE window_setup
  '
  flag%=WIND_GET(0,4,swx%,swy%,sww%,swh%) ! GET SIZE OF DESKTOP-MENUBAR
  CHAR{dir_title%}="FULL DIRECTORY"
  '
  flag%=WIND_GET(0,4,view_wx%,view_wy%,view_ww%,view_wh%) ! GET SIZE OF DESKTOP-MENUBAR
  view_win%=WIND_CREATE(&X111111101111,view_wx%,view_wy%,view_ww%,view_wh%)
  flag%=WIND_OPEN(view_win%,view_wx%,view_wy%,view_ww%,view_wh%)
  flag%=WIND_GET(view_win%,4,view_iwx%,view_iwy%,view_iww%,view_iwh%)  ! GET INSIDE WINDOW SIZE
  flag%=WIND_SET(view_win%,2,CARD(SWAP(dir_title%)),CARD(dir_title%),0,0)
  @size_slider
  '
  ~WIND_CALC(0,&X1011,swx%,swy%,main_w%,main_h%,d%,d%,main_ww%,main_wh%)
  main_wx%=swx%+(sww%-main_ww%)/2
  main_wy%=swy%+(swh%-main_wh%)/2
  '
  main_win%=WIND_CREATE(&X1011,main_wx%,main_wy%,main_ww%,main_wh%)
  CHAR{window_title%}="FULL DIR MENU"
  flag%=WIND_SET(main_win%,2,CARD(SWAP(window_title%)),CARD(window_title%),0,0)
  ' CREATE WINDOW WITH ALL WIDGETS
  '
  flag%=WIND_OPEN(main_win%,main_wx%,main_wy%,main_ww%,main_wh%)
  flag%=WIND_GET(main_win%,4,main_iwx%,main_iwy%,main_iww%,main_iwh%)  ! GET INSIDE WINDOW SIZE
  '
  OB_X(main%,0)=main_iwx% ! MAIN'S POSITION
  OB_Y(main%,0)=main_iwy% ! MAIN'S POSITION
  '
RETURN
'
> PROCEDURE check_event
  '
  IF c_type% AND &X10 THEN       ! MOUSE EVENT
    @button
    '
  ENDIF
  '
  IF c_type% AND &X10000 THEN    ! MENU/WINDOW EVENT
    command%=buffer&(0)          ! KIND OF EVENT
    '
    IF command%=10 THEN          ! MENU ITEM
      @the_menu
      '
    ELSE                         ! WINDOW EVENT
      @a_window
      '
    ENDIF
    '
  ENDIF
  '
RETURN
'
> PROCEDURE the_menu
  '
  tit%=buffer&(3)   ! WHICH MENU TITLE ?
  ~MENU_TNORMAL(menu%,tit%,1)  ! MAKE MENU TITLE NORMAL AGAIN
  item%=buffer&(4)  ! WHICH MENU ITEM WAS SELECTED
  '
  IF item%=6  ! CREDIT
    ~FORM_DIAL(0,0,0,0,0,credits_x%,credits_y%,credits_w%,credits_h%)
    ~OBJC_DRAW(credits%,0,2,credits_x%,credits_y%,credits_w%,credits_h%)
    '
    er%=WIND_UPDATE(1)                      ! TELL GEM WE ARE TAKING OVER
    DO
    LOOP UNTIL MOUSEK=0
    DO
    LOOP UNTIL MOUSEK<>0
    DO
    LOOP UNTIL MOUSEK=0
    er%=WIND_UPDATE(0)                      ! TELL GEM WE ARE TAKING OVER
    '
    ~FORM_DIAL(3,0,0,0,0,credits_x%,credits_y%,credits_w%,credits_h%)
    '
  ENDIF
  '
RETURN
'
> PROCEDURE button
  '
  window_over%=WIND_FIND(mx%,my%)
  IF main_win%=window_over% THEN
    '
    main_found%=OBJC_FIND(main%,0,2,mx%,my%)
    ' DID MOUSE CLICK ON A DESKTOP BUTTON ?
    '
    SELECT main_found%
    CASE b_sort_name% TO b_sort_path% ! SORT
      @b_sort
      '
    CASE b_save%  ! SAVE
      IF BTST(OB_STATE(main%,main_found%),3)=0 THEN
        @main_select
        @s_a_v_e
        '
      ENDIF
      '
    CASE b_clear% ! CLEAR
      @b_clear
      '
    CASE b_rm% ! REMOVEABLE MEDIA
      OB_STATE(main%,main_found%)=BCHG(OB_STATE(main%,main_found%),0)
      main_obj%=main_found%
      @repair
      '
      DO
      LOOP UNTIL MOUSEK=0
      '
      rm%=BTST(OB_STATE(main%,main_found%),0)
      '
    CASE b_help% ! HELP
      @b_help
      '
    CASE b_view% ! VIEW
      @main_select
      flag%=WIND_SET(view_win%,10,0,0,0,0) ! WINDOW SET TO TOP
      '
    CASE b_all%   ! ALL
      @b_all
      '
    CASE b_a_drive% TO b_z_drive% ! DRIVES
      '
      @b_drive
      '
    CASE b_reset% ! RESET
      IF ext%>0
        '
        @mask_change
        @reset
        '
      ENDIF
      '
    CASE b_toggle% ! TOGGLE
      IF ext%>0
        '
        @mask_change
        @toggle
        '
      ENDIF
      '
    CASE b_mask_left%
      IF ext%>0 AND mask_pos%>0
        '
        DEC mask_pos%
        IF mask_pos%<0 THEN
          mask_pos%=0
        ENDIF
        '
        @set_mask
        @mask_move
        '
      ENDIF
      '
    CASE b_mask_right%
      IF ext%>0 AND mask_pos%<ext%-(max_ext%+1)
        '
        INC mask_pos%
        IF mask_pos%>ext%-(max_ext%+1) THEN
          mask_pos%=ext%-(max_ext%+1)
        ENDIF
        '
        @set_mask
        @mask_move
        '
      ENDIF
      '
    CASE b_mask_box%
      IF mx%-(OB_X(main%,0)+OB_X(main%,b_mask_slider%))<OB_X(main%,b_mask_box%) THEN
        '
        mask_pos%=mask_pos%-(max_ext%+1)
        IF mask_pos%<0 THEN
          mask_pos%=0
        ENDIF
        '
      ELSE
        '
        mask_pos%=mask_pos%+max_ext%+1
        IF mask_pos%>ext%-(max_ext%+1) THEN
          mask_pos%=ext%-(max_ext%+1)
        ENDIF
        '
      ENDIF
      '
      @mask_move2
      '
    CASE b_mask_slider%
      IF ext%>max_ext%+1
        slide_box%=GRAF_SLIDEBOX(main%,b_mask_box%,b_mask_slider%,0)
        mask_pos%=(slide_box%/1000)*(ext%-(max_ext%+1))
        @mask_move2
        '
      ENDIF
      '
    CASE t_mask_start% TO t_mask_end%
      the_mask%=main_found%+mask_pos%-t_mask_start%
      IF the_mask%<ext%
        OB_STATE(main%,main_found%)=BCHG(OB_STATE(main%,main_found%),0)
        mask%(the_mask%)=BCHG(mask%(the_mask%),0)
        main_obj%=main_found%
        @repair
        '
        IF mask%(the_mask%)=0
          used%=used%+used%(the_mask%)
        ELSE
          used%=used%-used%(the_mask%)
        ENDIF
        CHAR{{OB_SPEC(main%,t_used%)}}=STR$(used%,6)
        main_obj%=t_used%
        @repair
        '
        DO
        LOOP UNTIL MOUSEK=0
        '
      ENDIF
      '
    CASE b_use_path% ! PATH
      OB_STATE(main%,main_found%)=BCHG(OB_STATE(main%,main_found%),0)
      folder_show%=-BTST(OB_STATE(main%,main_found%),0)
      main_obj%=main_found%
      @repair
      '
      IF file_count%>0 THEN
        total%=((folder_width%*folder_show%+25)*columns%)
      ELSE
        total%=0
      ENDIF
      CHAR{{OB_SPEC(main%,t_width%)}}=STR$(total%,4)
      main_obj%=t_width%
      @repair
      '
      DO
      LOOP UNTIL MOUSEK=0
      '
    CASE b_save_setup% ! PATH
      OB_STATE(main%,main_found%)=BSET(OB_STATE(main%,main_found%),0)
      main_obj%=main_found%
      @repair
      '
      DO
      LOOP UNTIL MOUSEK=0
      '
      OB_STATE(main%,main_found%)=BCLR(OB_STATE(main%,main_found%),0)
      main_obj%=main_found%
      @repair
      '
      @set_save
      '
    CASE b_lines_right%
      IF lines%<999 THEN
        INC lines%
        '
        @line_move
        '
      ENDIF
      '
    CASE b_lines_left%
      IF lines%>0 THEN
        '
        DEC lines%
        @line_move
        '
      ENDIF
      '
    CASE b_lines_box%
      IF mx%-(OB_X(main%,0)+OB_X(main%,b_lines_slider%))<OB_X(main%,b_lines_box%) THEN
        '
        lines%=lines%-25
        IF lines%<0 THEN
          lines%=0
        ENDIF
        '
      ELSE
        lines%=lines%+25
        IF lines%>1000 THEN
          lines%=1000
        ENDIF
        '
      ENDIF
      '
      @line_move
      '
    CASE b_lines_slider%
      lines%=GRAF_SLIDEBOX(main%,b_lines_box%,b_lines_slider%,0)
      @line_move
      '
    CASE b_columns_right%
      IF columns%<9 THEN
        INC columns%
        @column_move
        '
      ENDIF
      '
    CASE b_columns_left%
      IF columns%>1 THEN
        '
        DEC columns%
        @column_move
        '
      ENDIF
      '
    CASE b_columns_box%
      IF mx%-(OB_X(main%,0)+OB_X(main%,b_columns_slider%))<OB_X(main%,b_columns_box%) THEN
        '
        columns%=columns%-3
        IF columns%<1 THEN
          columns%=1
        ENDIF
        '
      ELSE
        columns%=columns%+3
        IF columns%>9 THEN
          columns%=9
        ENDIF
        '
      ENDIF
      '
      @column_move
      '
    CASE b_columns_slider%
      columns%=GRAF_SLIDEBOX(main%,b_columns_box%,b_columns_slider%,0)
      columns%=(columns%/111)+1
      IF columns%<1 THEN
        columns%=1
      ENDIF
      IF columns%>9 THEN
        columns%=9
      ENDIF
      '
      @column_move
      '
    ENDSELECT
    '
  ENDIF
  '
RETURN
'
> PROCEDURE b_sort
  '
  IF main_found%<>b_sort_name%+sort% THEN
    OB_STATE(main%,b_sort_name%+sort%)=BCLR(OB_STATE(main%,b_sort_name%+sort%),0)
    main_obj%=b_sort_name%+sort%
    @repair
    '
    sort%=main_found%-b_sort_name%
    OB_STATE(main%,b_sort_name%+sort%)=BSET(OB_STATE(main%,b_sort_name%+sort%),0)
    main_obj%=b_sort_name%+sort%
    @repair
    '
    DO
    LOOP UNTIL MOUSEK=0
    '
    @sort
    @view_repair
    '
  ENDIF
  '
RETURN
'
> PROCEDURE b_clear
  '
  IF BTST(OB_STATE(main%,main_found%),3)=0 THEN
    @main_select
    @all_clear
    FOR drive%=b_a_drive% TO b_z_drive%
      IF BTST(OB_STATE(main%,drive%),3)=0 THEN
        main_obj%=drive%
        @repair
      ENDIF
    NEXT drive%
    main_obj%=b_save%
    @repair
    main_obj%=b_clear%
    @repair
    main_obj%=t_files%
    @repair
    main_obj%=t_used%
    @repair
    main_obj%=b_mask_slider%
    @repair
    main_obj%=t_mask_start%-1
    @repair
    main_obj%=t_types%
    @repair
    main_obj%=t_width%
    @repair
    '
  ENDIF
  '
RETURN
'
> PROCEDURE b_help
  '
  OB_STATE(main%,main_found%)=BSET(OB_STATE(main%,main_found%),0)
  main_obj%=b_help%
  @repair
  '
  DO
  LOOP UNTIL MOUSEK=0
  '
  txt$=" |Click on an item for help,  |Click 'Help' to exit help.  | "
  ALERT 0,txt$,1," OK ",d%
  '
  DO
  LOOP UNTIL MOUSEK=0
  '
  DO
    help_type%=EVNT_MULTI(&X10011,1,1,1,0,0,0,0,0,0,0,0,0,0,buffer%,100,mx%,my%,b%,key_state%,key%,d%)
    @check_help
  LOOP UNTIL help_found%=b_help%
  '
  DO
  LOOP UNTIL MOUSEK=0
  '
  OB_STATE(main%,main_found%)=BCLR(OB_STATE(main%,main_found%),0)
  main_obj%=b_help%
  @repair
  '
RETURN
'
> PROCEDURE b_all
  '
  IF BTST(OB_STATE(main%,main_found%),3)=0 AND BTST(OB_STATE(main%,main_found%),0)=0 THEN
    @main_select
    '
    sort_flag%=0
    '
    FOR drive%=0 TO max_drive%
      IF BTST(OB_STATE(main%,b_a_drive%+drive%),3)=0 AND BTST(OB_STATE(main%,b_a_drive%+drive%),0)=0 THEN
        sort_flag%=1
        current_drive$=MID$(drives$,drive%+1,1)
        IF b_a_drive%+drive%=b_a_drive% OR rm%=TRUE THEN
          OB_STATE(main%,b_a_drive%+drive%)=BSET(OB_STATE(main%,b_a_drive%+drive%),0)
          main_obj%=b_a_drive%+drive%
          @repair
          '
          @drive_dir(current_drive$)
          '
          OB_STATE(main%,b_a_drive%+drive%)=BCLR(OB_STATE(main%,b_a_drive%+drive%),0)
          main_obj%=b_a_drive%+drive%
          @repair
          '
        ELSE
          OB_STATE(main%,b_a_drive%+drive%)=BSET(OB_STATE(main%,b_a_drive%+drive%),0)
          main_obj%=b_a_drive%+drive%
          @repair
          @drive_dir(current_drive$)
        ENDIF
        '
      ENDIF
      '
    NEXT drive%
    '
    IF BTST(OB_STATE(main%,b_save%),3)=TRUE AND file_count%>0 THEN
      OB_STATE(main%,b_save%)=BCLR(OB_STATE(main%,b_save%),3)
      main_obj%=b_save%
      @repair
      '
      OB_STATE(main%,b_clear%)=BCLR(OB_STATE(main%,b_clear%),3)
      main_obj%=b_clear%
      @repair
      '
    ENDIF
    '
    @update
    '
  ENDIF
  '
RETURN
'
> PROCEDURE b_drive
  '
  IF BTST(OB_STATE(main%,main_found%),3)=0 AND (BTST(OB_STATE(main%,main_found%),0)=0 OR rm%=TRUE) THEN
    current_drive$=MID$(drives$,main_found%+1-b_a_drive%,1)
    IF main_found%=b_a_drive% OR rm%=TRUE THEN
      OB_STATE(main%,main_found%)=BSET(OB_STATE(main%,main_found%),0)
      main_obj%=main_found%
      @repair
      '
      DO
      LOOP UNTIL MOUSEK=0
      '
      @drive_dir(current_drive$)
      '
      OB_STATE(main%,main_found%)=BCLR(OB_STATE(main%,main_found%),0)
      main_obj%=main_found%
      @repair
      '
    ELSE
      OB_STATE(main%,main_found%)=BSET(OB_STATE(main%,main_found%),0)
      main_obj%=main_found%
      @repair
      '
      DO
      LOOP UNTIL MOUSEK=0
      '
      @drive_dir(current_drive$)
      '
    ENDIF
    '
    sort_flag%=1
    @update
    '
    IF BTST(OB_STATE(main%,b_save%),3)=TRUE AND file_count%>0 THEN
      OB_STATE(main%,b_save%)=BCLR(OB_STATE(main%,b_save%),3)
      main_obj%=b_save%
      @repair
      '
      OB_STATE(main%,b_clear%)=BCLR(OB_STATE(main%,b_clear%),3)
      main_obj%=b_clear%
      @repair
      '
    ENDIF
    '
  ENDIF
  '
RETURN
'
> PROCEDURE a_window
  '
  win%=buffer&(3)  ! HANDLE OF WINDOW THAT TRIGGERED EVENT
  '
  IF win%=main_win% THEN ! BE SURE IT WAS OUR WINDOW
    SELECT command%
      '
    CASE 20     ! WIND UPDATE
      main_obj%=0
      repair_flag%=1
      @repair
      repair_flag%=0
      '
    CASE 21     ! WINDOW CLICKED ON
      flag%=WIND_SET(main_win%,10,0,0,0,0) ! WINDOW SET TO TOP
      DEFMOUSE 0
      '
    CASE 22 ! CLOSE WINDOW
      @trying_to_quit
      '
    CASE 27,28 ! WINDOW MOVED
      main_wx%=buffer&(4) ! GET NEW WINDOW POSITION/SIZE
      main_wy%=buffer&(5)
      flag%=WIND_SET(main_win%,5,main_wx%,main_wy%,main_ww%,main_wh%)     ! SIZE WINDOW
      flag%=WIND_GET(main_win%,4,main_iwx%,main_iwy%,main_iww%,main_iwh%) ! GET INSIDE SIZE
      OB_X(main%,0)=main_iwx%  ! SET
      OB_Y(main%,0)=main_iwy%
      '
    ENDSELECT
    '
  ENDIF
  '
  IF win%=view_win% THEN ! BE SURE IT WAS OUR WINDOW
    SELECT command%
      '
    CASE 20     ! WIND UPDATE
      repair_flag%=1
      @view_repair
      repair_flag%=0
      '
    CASE 21     ! WINDOW CLICKED ON
      flag%=WIND_SET(view_win%,10,0,0,0,0) ! WINDOW SET TO TOP
      DEFMOUSE 0
      '
    CASE 23 ! FULL
      IF view_wx%=swx% AND view_wy%=swy% AND view_ww%=sww% AND view_wh%=swh%
        flag%=WIND_GET(view_win%,6,view_wx%,view_wy%,view_ww%,view_wh%)
      ELSE
        flag%=WIND_GET(view_win%,7,view_wx%,view_wy%,view_ww%,view_wh%)
      ENDIF
      flag%=WIND_SET(view_win%,5,view_wx%,view_wy%,view_ww%,view_wh%)     ! SIZE WINDOW
      flag%=WIND_GET(view_win%,4,view_iwx%,view_iwy%,view_iww%,view_iwh%) ! GET INSIDE SIZE
      @size_slider
      '
    CASE 22 ! CLOSE WINDOW
      flag%=WIND_SET(main_win%,10,0,0,0,0) ! WINDOW SET TO TOP
      '
    CASE 24 ! ARROWS/SLIDERS
      @sliders
      '
    CASE 25 ! HORZ SLIDER
      IF hslide<1000 THEN
        hpos=buffer&(4)
        flag%=WIND_SET(view_win%,8,hpos,d%,d%,d%)     ! SIZE WINDOW
        viewx%=(hpos/1000)*(width%-max_char%)
        @view_repair
        '
      ENDIF
      '
    CASE 26 ! VERT SLIDER
      IF vslide<1000 THEN
        vpos=buffer&(4)
        flag%=WIND_SET(view_win%,9,vpos,d%,d%,d%)     ! SIZE WINDOW
        viewy%=(vpos/1000)*(file_count%-max_line%)
        @view_repair
        '
      ENDIF
      '
    CASE 27,28 ! WINDOW SIZED,MOVED
      view_wx%=buffer&(4) ! GET NEW WINDOW POSITION/SIZE
      view_wy%=buffer&(5)
      view_ww%=buffer&(6)
      view_wh%=buffer&(7)
      flag%=WIND_SET(view_win%,5,view_wx%,view_wy%,view_ww%,view_wh%)     ! SIZE WINDOW
      flag%=WIND_GET(view_win%,4,view_iwx%,view_iwy%,view_iww%,view_iwh%) ! GET INSIDE SIZE
      '
      tempx%=viewx%
      tempy%=viewy%
      @size_slider
      IF tempx%<>viewx% OR tempy%<>viewy%
        @view_repair
      ENDIF
      '
    ENDSELECT
    '
  ENDIF
  '
RETURN
'
> PROCEDURE main_select
  '
  OB_STATE(main%,main_found%)=BSET(OB_STATE(main%,main_found%),0)
  main_obj%=main_found%
  @repair
  '
  PAUSE 5
  '
  DO
  LOOP UNTIL MOUSEK=0
  '
  OB_STATE(main%,main_found%)=BCLR(OB_STATE(main%,main_found%),0)
  main_obj%=main_found%
  @repair
  '
RETURN
'
> PROCEDURE mask_change
  '
  OB_STATE(main%,main_found%)=BSET(OB_STATE(main%,main_found%),0)
  main_obj%=main_found%
  @repair
  '
  DO
  LOOP UNTIL MOUSEK=0
  '
  OB_STATE(main%,main_found%)=BCLR(OB_STATE(main%,main_found%),0)
  main_obj%=main_found%
  @repair
  PAUSE 5
  '
RETURN
'
> PROCEDURE mask_move
  '
  OB_X(main%,b_mask_slider%)=(mask_box_w%-mask_slider_w%)*(mask_pos%/(ext%-(max_ext%+1)))
  main_obj%=b_mask_box%
  @repair
  '
  PAUSE 5
  '
RETURN
'
> PROCEDURE mask_move2
  '
  OB_X(main%,b_mask_slider%)=(mask_box_w%-mask_slider_w%)*(mask_pos%/(ext%-(max_ext%+1)))
  @set_mask
  '
  main_obj%=b_mask_box%
  @repair
  PAUSE 5
  '
RETURN
'
> PROCEDURE line_move
  '
  OB_X(main%,b_lines_slider%)=(lines_box_w%-lines_slider_w%)*(lines%/(1000-lines_slider_w%))
  CHAR{{OB_SPEC(main%,b_lines_slider%)}}=STR$(lines%)
  '
  main_obj%=b_lines_box%
  @repair
  '
  PAUSE 5
  '
RETURN
'
> PROCEDURE column_move
  '
  OB_X(main%,b_columns_slider%)=(columns_box_w%-columns_slider_w%)*((columns%-1)/8)
  CHAR{{OB_SPEC(main%,b_columns_slider%)}}=STR$(columns%)
  '
  main_obj%=b_columns_box%
  @repair
  IF file_count%>0 THEN
    total%=((folder_width%*folder_show%+25)*columns%)
  ELSE
    total%=0
  ENDIF
  CHAR{{OB_SPEC(main%,t_width%)}}=STR$(total%,4)
  main_obj%=t_width%
  @repair
  PAUSE 5
  '
RETURN
'
> PROCEDURE check_help
  '
  IF help_type% AND &X10 THEN       ! MOUSE EVENT
    help_over%=WIND_FIND(mx%,my%)
    IF main_win%=window_over% THEN
      '
      help_found%=OBJC_FIND(main%,0,2,mx%,my%)
      ' DID MOUSE CLICK ON A DESKTOP BUTTON ?
      '
      SELECT help_found%
      CASE d_sort% TO b_sort_path% ! SORT
        txt$=" |The sort is applied to the  |text window and to the  |saved directory.  "
        '
      CASE b_save%  ! SAVE
        txt$=" |Save the directory to a  |file; see Columns,Lines,  |Use Path and Types.  "
        '
      CASE b_clear% ! CLEAR
        txt$=" |Erase data from memory,  |and reset drive buttons.  | "
        '
      CASE b_rm% ! REMOVEABLE MEDIA
        txt$=" |When selected a drive  |is treated as  |'R'emovable 'M'edia.  "
        '
      CASE b_view% ! VIEW
        txt$=" |Tops the text window.  |The text window close box  |will top the menu window.  "
        '
      CASE b_all%   ! ALL
        txt$=" |Reads the directory of  |all active drives.  | "
        '
      CASE b_a_drive% TO b_z_drive% ! DRIVES
        txt$=" |Click on a drive letter  |to read it's directory.  | "
        '
      CASE b_reset% ! RESET
        txt$=" |Deselects all types.  | "
        '
      CASE b_toggle% ! TOGGLE
        txt$=" |Changes the state  |of all types.  | "
        '
      CASE b_mask_left% TO b_mask_right%
        txt$=" |This slider is used  |to view the types.  | "
        '
      CASE t_mask_start% TO t_mask_end%
        txt$=" |Click on a type to select/  |deselect it. The selected  |types will not be saved.  "
        '
      CASE b_use_path% ! PATH
        txt$=" |If selected then the path  |is saved with each filename.  | "
        '
      CASE b_save_setup%
        txt$="Saves 'Use Path', 'Sort',  |'Columns', and 'Lines'  |info to 'FULL_DIR.INF'.  |Info read on PRG start.  "
        '
      CASE d_lines% TO b_lines_right%
        txt$=" |Lines per page. Used  |in multi-column saves.  |0 = all one page.  "
        '
      CASE d_columns% TO b_columns_right%
        txt$=" |The filenames are saved  |in this many columns.  | "
        '
      CASE d_files% TO t_files%
        txt$=" |Total number of files  |found on all drives read.  | "
        '
      CASE d_used% TO t_used%
        txt$=" |Total number of filenames  |that will be saved.  | "
        '
      CASE d_types% TO t_types%
        txt$=" |Number of unique  |types found.  | "
        '
      CASE d_width% TO t_width%
        txt$=" |Width in characters of  |one line of text in the  |saved file.  | "
        '
      DEFAULT
        txt$=" |Click on an item for help,  |Click 'Help' to exit help.  | "
        '
      ENDSELECT
      '
      IF help_found%<>b_help% THEN
        ALERT 0,txt$,1," OK ",d%
        '
      ENDIF
      '
      DO
      LOOP UNTIL MOUSEK=0
      '
    ENDIF
    '
  ELSE
    help_found%=b_help%
    '
  ENDIF
  '
RETURN
'
> PROCEDURE update
  '
  IF sort_flag% THEN
    '
    DEFMOUSE 2
    '
    mask_pos%=0
    '
    width%=0
    IF ext%>1 THEN
      CHAR{{OB_SPEC(status%,t_status%)}}="Sorting extensions..."
      ~FORM_DIAL(0,0,0,0,0,status_x%,status_y%,status_w%,status_h%)
      ~OBJC_DRAW(status%,0,2,status_x%,status_y%,status_w%,status_h%)
      '
      QSORT mask$(),ext% ! ,mask%()
      '
      FOR file%=0 TO file_count%-1
        used%(file%)=0
      NEXT file%
      '
      FOR file%=0 TO file_count%-1
        width%=MAX(width%,LEN(file$(2,file%))+23)
        '
        temp$=MID$(file$(0,file%),10,3)
        '
        FOR test%=0 TO ext%-1
          IF mask$(test%)=temp$ THEN
            '
            INC used%(test%)
            test%=ext%
            '
          ENDIF
          '
        NEXT test%
        '
      NEXT file%
      '
      ~FORM_DIAL(3,0,0,0,0,status_x%,status_y%,status_w%,status_h%)
      '
    ENDIF
    @sort
    '
    IF ext%>max_ext%+1
      mask_slider_w%=((max_ext%+1)/ext%)*mask_box_w%
      mask_slider_w%=MAX(min_mask_slider_w%,mask_slider_w%)
      '
    ELSE
      mask_slider_w%=mask_box_w%
      '
    ENDIF
    OB_X(main%,b_mask_slider%)=0
    OB_W(main%,b_mask_slider%)=mask_slider_w%
    CHAR{{OB_SPEC(main%,b_mask_slider%)}}=STR$(mask_pos%+1)
    '
    CHAR{{OB_SPEC(main%,t_files%)}}=STR$(file_count%,6)
    CHAR{{OB_SPEC(main%,t_types%)}}=STR$(ext%,4)
    '
    used%=file_count%
    CHAR{{OB_SPEC(main%,t_used%)}}=STR$(used%,6)
    '
    IF file_count%>0 THEN
      total%=((folder_width%*folder_show%+25)*columns%)
    ELSE
      total%=0
    ENDIF
    CHAR{{OB_SPEC(main%,t_width%)}}=STR$(total%,4)
    '
    @size_slider
    @view_repair
    @set_mask
    '
    main_obj%=b_mask_box%
    @repair
    main_obj%=t_files%
    @repair
    main_obj%=t_used%
    @repair
    main_obj%=t_width%
    @repair
    main_obj%=t_types%
    @repair
    '
    DEFMOUSE 0
    '
  ENDIF
  '
RETURN
'
> PROCEDURE set_mask
  '
  FOR txt%=0 TO max_ext%
    '
    IF mask_pos%+txt%<ext% THEN
      IF mask%(mask_pos%+txt%) THEN
        OB_STATE(main%,t_mask_start%+txt%)=BSET(OB_STATE(main%,t_mask_start%+txt%),0)
        '
      ELSE
        OB_STATE(main%,t_mask_start%+txt%)=BCLR(OB_STATE(main%,t_mask_start%+txt%),0)
        '
      ENDIF
      '
      CHAR{{OB_SPEC(main%,t_mask_start%+txt%)}}=mask$(mask_pos%+txt%)
      '
    ELSE
      OB_STATE(main%,t_mask_start%+txt%)=BCLR(OB_STATE(main%,t_mask_start%+txt%),0)
      CHAR{{OB_SPEC(main%,t_mask_start%+txt%)}}="---"
      '
    ENDIF
    '
  NEXT txt%
  '
  CHAR{{OB_SPEC(main%,b_mask_slider%)}}=STR$(mask_pos%+1)
  main_obj%=t_mask_start%-1
  @repair
  '
RETURN
'
> PROCEDURE reset
  '
  FOR txt%=0 TO MIN(max_ext%,ext%-1)
    OB_STATE(main%,t_mask_start%+txt%)=BCLR(OB_STATE(main%,t_mask_start%+txt%),0)
    '
  NEXT txt%
  '
  FOR txt%=0 TO ext%-1
    mask%(txt%)=BCLR(mask%(txt%),0)
    '
  NEXT txt%
  '
  used%=file_count%
  @mask_show
  '
RETURN
'
> PROCEDURE toggle
  '
  FOR txt%=0 TO MIN(max_ext%,ext%-1)
    OB_STATE(main%,t_mask_start%+txt%)=BCHG(OB_STATE(main%,t_mask_start%+txt%),0)
    '
  NEXT txt%
  '
  FOR txt%=0 TO ext%-1
    mask%(txt%)=BCHG(mask%(txt%),0)
    '
  NEXT txt%
  '
  used%=file_count%-used%
  @mask_show
  '
RETURN
'
> PROCEDURE mask_show
  '
  CHAR{{OB_SPEC(main%,t_used%)}}=STR$(used%,6)
  main_obj%=t_used%
  @repair
  '
  main_obj%=t_mask_start%-1
  @repair
  '
RETURN
'
> PROCEDURE repair
  '
  er%=WIND_UPDATE(1)                      ! TELL GEM WE ARE TAKING OVER
  er%=WIND_GET(main_win%,11,fx%,fy%,fx2%,fy2%) ! GET FIRST RECTANGLE
  IF repair_flag%=1
    fix_wx%=buffer&(4)
    fix_wy%=buffer&(5)
    fix_ww%=buffer&(6)
    fix_wh%=buffer&(7)
    fix_flag%=RC_INTERSECT(fix_wx%,fix_wy%,fix_ww%,fix_wh%,fx%,fy%,fx2%,fy2%)
    IF fix_flag% THEN
      ~OBJC_DRAW(main%,main_obj%,2,fx%,fy%,fx2%,fy2%)
    ENDIF
  ELSE
    ~OBJC_DRAW(main%,main_obj%,2,fx%,fy%,fx2%,fy2%)
  ENDIF
  fix_done%=0
  '
  DO
    er%=WIND_GET(main_win%,12,fx%,fy%,fx2%,fy2%)      ! GET NEXT RECTANGLE
    '
    IF fx2%+fy2%=0 THEN                          ! ANY MORE RECTANGLES ?
      fix_done%=1
    ELSE
      IF repair_flag%=1
        fix_wx%=buffer&(4)
        fix_wy%=buffer&(5)
        fix_ww%=buffer&(6)
        fix_wh%=buffer&(7)
        fix_flag%=RC_INTERSECT(fix_wx%,fix_wy%,fix_ww%,fix_wh%,fx%,fy%,fx2%,fy2%)
        IF fix_flag% THEN
          ~OBJC_DRAW(main%,main_obj%,2,fx%,fy%,fx2%,fy2%)
        ENDIF
      ELSE
        ~OBJC_DRAW(main%,main_obj%,2,fx%,fy%,fx2%,fy2%)
      ENDIF
    ENDIF
    '
  LOOP UNTIL fix_done%=1
  '
  er%=WIND_UPDATE(0)                      !  DONE!
  '
RETURN
'
> PROCEDURE view_repair
  '
  er%=WIND_UPDATE(1)                      ! TELL GEM WE ARE TAKING OVER
  er%=WIND_GET(view_win%,11,fx%,fy%,fx2%,fy2%) ! GET FIRST RECTANGLE
  '
  IF repair_flag%=1
    fix_wx%=buffer&(4)
    fix_wy%=buffer&(5)
    fix_ww%=buffer&(6)
    fix_wh%=buffer&(7)
    fix_flag%=RC_INTERSECT(fix_wx%,fix_wy%,fix_ww%,fix_wh%,fx%,fy%,fx2%,fy2%)
    '
    IF fix_flag% THEN
      @view_show
      '
    ENDIF
    '
  ELSE
    @view_show
    '
  ENDIF
  '
  fix_done%=0
  '
  DO
    er%=WIND_GET(view_win%,12,fx%,fy%,fx2%,fy2%)      ! GET NEXT RECTANGLE
    '
    IF fx2%+fy2%=0 THEN                          ! ANY MORE RECTANGLES ?
      fix_done%=1
      '
    ELSE
      IF repair_flag%=1
        fix_wx%=buffer&(4)
        fix_wy%=buffer&(5)
        fix_ww%=buffer&(6)
        fix_wh%=buffer&(7)
        fix_flag%=RC_INTERSECT(fix_wx%,fix_wy%,fix_ww%,fix_wh%,fx%,fy%,fx2%,fy2%)
        IF fix_flag% THEN
          @view_show
          '
        ENDIF
        '
      ELSE
        @view_show
        '
      ENDIF
    ENDIF
    '
  LOOP UNTIL fix_done%=1
  '
  er%=WIND_UPDATE(0)                      !  DONE!
  '
RETURN
'
> PROCEDURE view_show
  '
  CLIP fx%,fy%,fx2%,fy2%
  PBOX fx%,fy%,fx%+fx2%-1,fy%+fy2%-1
  FOR loop%=0 TO max_line%
    IF loop%+viewy%<file_count% THEN
      temp$=file$(0,index%(loop%+viewy%))+" "
      RSET pad$=file$(1,index%(loop%+viewy%))
      temp$=temp$+pad$+" "+file$(2,index%(loop%+viewy%))
      TEXT view_iwx%+1,loop%*char_height%+view_iwy%+char_height%-1,MID$(temp$,viewx%+1,max_char%)
      '
    ENDIF
    '
  NEXT loop%
  '
RETURN
'
> PROCEDURE sliders
  '
  arrow%=buffer&(4) ! WHAT WIDGET WAS CLICKED
  SELECT arrow%
    '
  CASE 0 ! TOP HALF OF SLIDER
    IF viewy%<>0 AND vslide<1000 THEN ! IF NOT MIN POS AND SLIDER NOT MAX SIZE
      viewy%=viewy%-max_line%
      @slide_v1
    ENDIF
    '
  CASE 1 ! BOTTOM HALF OF SLIDER
    IF viewy%<>file_count%-max_line% AND vslide<1000 THEN
      viewy%=viewy%+max_line%
      @slide_v2
    ENDIF
    '
  CASE 2 ! UP ARROW
    IF viewy%<>0 AND vslide<1000 THEN
      DEC viewy%
      @slide_v1
    ENDIF
    '
  CASE 3 ! DOWN ARROW
    IF viewy%<>file_count%-max_line% AND vslide<1000 THEN
      INC viewy%
      @slide_v2
    ENDIF
    '
  CASE 4 ! LEFT HALF OF SLIDER
    IF viewx%<>0 AND hslide<1000 THEN ! IF NOT MIN POS AND SLIDER NOT MAX SIZE
      viewx%=viewx%-max_char%
      @slide_h1
    ENDIF
    '
  CASE 5 ! RIGHT HALF OF SLIDER
    IF viewx%<>width%-max_char% AND hslide<1000 THEN
      viewx%=viewx%+max_char%
      @slide_h2
    ENDIF
    '
  CASE 6 ! LEFT ARROW
    IF viewx%<>0 AND hslide<1000 THEN
      DEC viewx%
      @slide_h1
    ENDIF
    '
  CASE 7 ! RIGHT ARROW
    IF viewx%<>width%-max_char% AND hslide<1000 THEN
      INC viewx%
      @slide_h2
    ENDIF
    '
  ENDSELECT
  '
RETURN
'
> PROCEDURE slide_v1
  '
  IF viewy%<0 THEN
    viewy%=0
  ENDIF
  hpos=(viewy%/(file_count%-max_line%))*1000
  flag%=WIND_SET(view_win%,9,hpos,0,0,0) ! SET SLIDER POSITION
  @view_repair
  '
RETURN
'
> PROCEDURE slide_v2
  '
  IF viewy%>file_count%-max_line% THEN
    viewy%=file_count%-max_line%
  ENDIF
  hpos=(viewy%/(file_count%-max_line%))*1000
  flag%=WIND_SET(view_win%,9,hpos,0,0,0)
  @view_repair
  '
RETURN
'
> PROCEDURE slide_h1
  '
  IF viewx%<0 THEN
    viewx%=0
  ENDIF
  vpos=(viewx%/(width%-max_char%))*1000
  flag%=WIND_SET(view_win%,8,vpos,0,0,0) ! SET SLIDER POSITION
  @view_repair
  '
RETURN
'
> PROCEDURE slide_h2
  '
  IF viewx%>width%-max_char% THEN
    viewx%=width%-max_char%
  ENDIF
  vpos=(viewx%/(width%-max_char%))*1000
  flag%=WIND_SET(view_win%,8,vpos,0,0,0)
  @view_repair
  '
RETURN
'
> PROCEDURE size_slider
  '
  max_line%=view_iwh%/char_height%
  max_char%=view_iww%/char_width%
  '
  IF file_count% THEN
    IF file_count%>max_line% THEN
      vslide=(max_line%/file_count%)*1000
    ELSE
      vslide=1000
    ENDIF
    '
    IF width%>max_char% THEN
      hslide=(max_char%/width%)*1000
    ELSE
      hslide=1000
    ENDIF
    '
  ELSE
    vslide=1000
    hslide=1000
    '
  ENDIF
  '
  flag%=WIND_SET(view_win%,16,vslide,0,0,0)
  flag%=WIND_SET(view_win%,15,hslide,0,0,0)
  '
  IF vslide>999 THEN
    flag%=WIND_SET(view_win%,9,0,0,0,0)
    vpos=0
    flag%=WIND_SET(view_win%,9,vpos,d%,d%,d%)
    viewy%=0
    '
  ELSE
    flag%=WIND_GET(view_win%,9,vpos,d%,d%,d%)
    viewy%=(vpos/1000)*(file_count%-max_line%)
    '
  ENDIF
  '
  IF hslide>999 THEN
    flag%=WIND_SET(view_win%,8,0,0,0,0)
    hpos=0
    flag%=WIND_SET(view_win%,8,hpos,d%,d%,d%)
    viewx%=0
    '
  ELSE
    flag%=WIND_GET(view_win%,8,hpos,d%,d%,d%)
    viewx%=(hpos/1000)*(width%-max_char%)
    '
  ENDIF
  '
RETURN
'
> PROCEDURE trying_to_quit
  '
  txt$=" |SURE YOU WANT TO QUIT ?  "
  but$="OK| CANCEL "
  ALERT 2,txt$,1,but$,button%
  '
  IF button%=1 THEN
    flag%=WIND_CLOSE(main_win%)       ! CLOSE WINDOW
    flag%=WIND_DELETE(main_win%)      ! DELETE WINDOW
    flag%=WIND_CLOSE(view_win%)       ! CLOSE WINDOW
    flag%=WIND_DELETE(view_win%)      ! DELETE WINDOW
    ~MENU_BAR(menu%,0)                ! KILL MY MENU
    ~RSRC_FREE()                      ! FREE RSC MEMORY
    END
    '
  ENDIF
  '
RETURN
'
> PROCEDURE sort
  '
  IF file_count% THEN
    CHAR{{OB_SPEC(status%,t_status%)}}="Sorting "+STR$(file_count%)+" entries by "+MID$(sort_name$,sort%*4+1,4)+"..."
    ~FORM_DIAL(0,0,0,0,0,status_x%,status_y%,status_w%,status_h%)
    ~OBJC_DRAW(status%,0,2,status_x%,status_y%,status_w%,status_h%)
    DEFMOUSE 2
    SELECT sort%
    CASE 0 ! FILENAME
      FOR move%=0 TO file_count%-1
        sort$(move%)=file$(0,move%)+MID$(file$(2,move%),1,1)
        index%(move%)=move%
      NEXT move%
      QSORT sort$(),file_count%,index%()
      '
    CASE 1 ! EXT
      FOR move%=0 TO file_count%-1
        sort$(move%)=MID$(file$(0,move%),10,3)+MID$(file$(0,move%),1,8)+MID$(file$(2,move%),1,1)
        index%(move%)=move%
      NEXT move%
      QSORT sort$(),file_count%,index%()
      '
    CASE 2 ! SIZE
      FOR move%=0 TO file_count%-1
        RSET pad$=file$(1,move%)
        sort$(move%)=pad$+file$(0,move%)+MID$(file$(2,move%),1,1)
        index%(move%)=move%
      NEXT move%
      QSORT sort$(),file_count%,index%()
      '
    CASE 3 ! PATH
      FOR move%=0 TO file_count%-1
        pad%=folder_width%-LEN(file$(2,move%))
        IF pad% THEN
          sort$(move%)=file$(2,move%)+SPACE$(pad%)+file$(0,move%)
        ELSE
          sort$(move%)=file$(2,move%)+file$(0,move%)
        ENDIF
        index%(move%)=move%
      NEXT move%
      QSORT sort$(),file_count%,index%()
      '
    ENDSELECT
    ~FORM_DIAL(3,0,0,0,0,status_x%,status_y%,status_w%,status_h%)
    DEFMOUSE 0
    '
  ENDIF
  '
RETURN
'
> PROCEDURE set_save
  '
  OPEN "O",#1,set$
  OUT& #1,lines%
  OUT #1,columns%
  OUT #1,folder_show%
  OUT #1,sort%
  CLOSE #1
  '
RETURN
'
> PROCEDURE set_load
  '
  lines%=0
  columns%=1
  folder_show%=0
  sort%=0
  '
  IF EXIST(set$) THEN
    OPEN "I",#1,set$
    lines%=INP&(#1)
    columns%=INP(#1)
    folder_show%=INP(#1)
    sort%=INP(#1)
    CLOSE #1
  ENDIF
  '
RETURN
'
> PROCEDURE s_a_v_e
  '
  FILESELECT #"SAVE DIRECTORY",f_name$,"FULL.DIR",f_name$
  '
  button%=1
  '
  IF EXIST(f_name$) THEN
    alert$="    THE FILE| "+f_name$+"  | ALREADY EXIST.| OVERWRITE IT ?  "
    ALERT 0,alert$,1," OK |CANCEL",button%
    '
  ENDIF
  '
  IF button%=1 AND f_name$<>"" THEN
    '
    CHAR{{OB_SPEC(status%,t_status%)}}="Saving "+STR$(used%)+" entries..."
    ~FORM_DIAL(0,0,0,0,0,status_x%,status_y%,status_w%,status_h%)
    ~OBJC_DRAW(status%,0,2,status_x%,status_y%,status_w%,status_h%)
    DEFMOUSE 2
    '
    check$="*"
    FOR x%=0 TO ext%-1
      IF mask%(x%)=0 THEN
        check$=check$+mask$(x%)+"*"
        '
      ENDIF
      '
    NEXT x%
    '
    old_lines%=lines%
    IF lines%=0 THEN
      lines%=INT(used%/columns%)
      IF used%<>lines%*columns%
        INC lines%
      ENDIF
    ENDIF
    '
    OPEN "O",#1,f_name$
    '
    count%=0
    '
    FOR x%=0 TO file_count%-1
      '
      temp$="*"+MID$(file$(0,index%(x%)),10,3)+"*"
      test%=INSTR(check$,temp$)
      '
      IF test% THEN
        s_a_v_e%(count%)=index%(x%)
        INC count%
      ENDIF
      '
    NEXT x%
    '
    temp_width%=0
    FOR x%=0 TO count%-1
      temp_width%=MAX(temp_width%,LEN(file$(2,s_a_v_e%(x%))))
      '
    NEXT x%
    '
    page%=0
    current%=0
    '
    DO
      line$=""
      y%=0
      DO
        '
        x%=page%*lines%*columns%+lines%*y%+current%
        IF x%<count% THEN
          RSET pad$=file$(1,s_a_v_e%(x%))
          '
          IF folder_show% THEN
            extra%=temp_width%+2-LEN(file$(2,s_a_v_e%(x%)))
            line$=line$+file$(0,s_a_v_e%(x%))+" "+pad$+" "+file$(2,s_a_v_e%(x%))+SPACE$(extra%)
            '
          ELSE
            line$=line$+file$(0,s_a_v_e%(x%))+" "+pad$
            IF columns%>1 AND y%<columns%-1 THEN
              line$=line$+" | "
            ELSE
              line$=line$+"   "
            ENDIF
            '
          ENDIF
          '
        ENDIF
        '
        INC y%
      LOOP UNTIL y%>=columns%
      '
      IF line$<>"" THEN
        PRINT #1,line$
      ENDIF
      INC current%
      '
      IF current%=lines% THEN
        current%=0
        INC page%
        '
      ENDIF
      '
    LOOP UNTIL x%>=count% AND current%=0
    '
    CLOSE #1
    '
    lines%=old_lines%
    '
    ~FORM_DIAL(3,0,0,0,0,status_x%,status_y%,status_w%,status_h%)
    DEFMOUSE 0
    '
  ENDIF
  '
RETURN
'
> PROCEDURE all_clear
  '
  DEFMOUSE 2
  '
  FOR drive%=b_a_drive% TO b_z_drive%
    OB_STATE(main%,drive%)=BCLR(OB_STATE(main%,drive%),0)
    '
  NEXT drive%
  '
  OB_STATE(main%,b_save%)=BSET(OB_STATE(main%,b_save%),3)
  OB_STATE(main%,b_clear%)=BSET(OB_STATE(main%,b_clear%),3)
  '
  file_count%=0
  CHAR{{OB_SPEC(main%,t_files%)}}=STR$(file_count%,6)
  '
  ext%=0
  total%=0
  path_count%=0
  path_counter%=0
  folder_width%=0
  used%=0
  CHAR{{OB_SPEC(main%,t_used%)}}=STR$(used%,6)
  CHAR{{OB_SPEC(main%,t_width%)}}=STR$(total%,4)
  CHAR{{OB_SPEC(main%,t_types%)}}=STR$(ext%,4)
  '
  mask_pos%=0
  mask$(0)=""
  OB_X(main%,b_mask_slider%)=0
  OB_W(main%,b_mask_slider%)=mask_box_w%
  CHAR{{OB_SPEC(main%,b_mask_slider%)}}=" "
  '
  FOR txt%=t_mask_start% TO t_mask_end%
    OB_STATE(main%,txt%)=BCLR(OB_STATE(main%,txt%),0)
    CHAR{{OB_SPEC(main%,txt%)}}="---"
    '
  NEXT txt%
  '
  @size_slider
  @view_repair
  DEFMOUSE 0
  '
RETURN
'
> PROCEDURE drive_dir(drive$)
  '
  CHAR{{OB_SPEC(status%,t_status%)}}="Reading directory of "+drive$+": ..."
  ~FORM_DIAL(0,0,0,0,0,status_x%,status_y%,status_w%,status_h%)
  ~OBJC_DRAW(status%,0,2,status_x%,status_y%,status_w%,status_h%)
  DEFMOUSE 2
  '
  @read_dir(drive$+":\")
  '
  WHILE path_count%>path_counter%
    INC path_counter%
    @read_dir(path$(path_counter%))
    '
  WEND
  '
  DEFMOUSE 0
  ~FORM_DIAL(3,0,0,0,0,status_x%,status_y%,status_w%,status_h%)
  '
RETURN
'
> PROCEDURE read_dir(path$)
  '
  search$=path$+"*.*"+CHR$(0)
  '
  finished%=GEMDOS(78,L:V:search$,&X111111)
  '
  DO UNTIL finished%
    file$=CHAR{dta%+30}
    '
    IF file$<>"." AND file$<>".."
      IF BTST(attrib|,4)
        INC path_count%
        path$(path_count%)=path$+file$+"\"
        folder_width%=MAX(folder_width%,LEN(path$(path_count%)))
        '
      ELSE
        tfile$=file$
        '
        place%=INSTR(file$,".")
        '
        IF place%=0 THEN
          temp%=LEN(file$)
          IF temp%=8 THEN
            tfile$=file$+".   "
          ELSE
            tfile$=file$+SPACE$(8-temp%)+".   "
          ENDIF
          ext$="   "
          '
        ELSE
          '
          tfile$=MID$(file$,1,place%-1)
          twidth%=8-LEN(tfile$)
          IF twidth% THEN
            tfile$=tfile$+SPACE$(twidth%)+"."
          ELSE
            tfile$=tfile$+"."
          ENDIF
          '
          ext$=MID$(file$,place%+1)
          '
          SELECT LEN(ext$)
          CASE 1
            ext$=ext$+"  "
            '
          CASE 2
            ext$=ext$+" "
            '
          ENDSELECT
          '
          tfile$=tfile$+ext$
        ENDIF
        '
        found%=0
        '
        FOR test%=0 TO ext%
          IF mask$(test%)=ext$ THEN
            found%=1
            test%=ext%
            '
          ENDIF
          '
        NEXT test%
        '
        IF found%=0 THEN
          mask$(ext%)=ext$
          mask%(ext%)=0
          INC ext%
          '
        ENDIF
        '
        file$(0,file_count%)=tfile$
        file$(1,file_count%)=STR$(length%)
        file$(2,file_count%)=path$
        '
        index%(file_count%)=file_count%
        '
        INC file_count%
      ENDIF
      '
    ENDIF
    '
    finished%=GEMDOS(79)
    '
  LOOP
  '
RETURN
'
