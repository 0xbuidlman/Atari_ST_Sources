$m120000
' FILE SPY 2 PRG ½1994 BY PHILLIP O'NEAL
' RESERVE 5000000
@init
DO
  @check
LOOP
> PROCEDURE check
  @set_free
  @set_menu
  c_type&=EVNT_MULTI(&X110011,2,1,1,0,0,0,0,0,0,0,0,0,0,buffer%,10,mx&,my&,button&,key_state&,key&,clicks&)
  abort%=0
  @check_event
RETURN
> PROCEDURE multi_check
  FOR multi_check%=0 TO MIN(last_used%+5,6)
    c_type&=EVNT_MULTI(&X110000,2,1,1,0,0,0,0,0,0,0,0,0,0,buffer%,0)
    @check_repair_event
  NEXT multi_check%
RETURN
> PROCEDURE abort
  IF INP?(2) THEN
    the_key%=INP(2)
    IF the_key%=27 THEN
      abort%=1
    ENDIF
  ENDIF
RETURN
> PROCEDURE init
  DEFMOUSE 2
  @init_variables
  @path_setup
  @dims
  @check_for_mint
  @rsc_do
  @settings_load
  @init_help
  @all_set
  @main_window
  @droped
  DEFMOUSE 0
RETURN
> PROCEDURE droped
  IF tail$<>""
    test%=RINSTR(tail$,"\")
    IF test%
      view_name$=tail$
    ELSE
      view_name$=current_path$+tail$
    ENDIF
    @load
  ENDIF
RETURN
> PROCEDURE init_variables
  INLINE dta%,1024
  INLINE cook%,6
  file_name_buffer%=GEMDOS(72,L:256)
  search_file_buffer%=GEMDOS(72,L:32000)
  my_handle&=V~H
  old_dta%=FGETDTA()
  ~FSETDTA(dta%)
  screen_width%=WORK_OUT(0)
  screen_height%=WORK_OUT(1)
  CONTRL(0)=102
  CONTRL(1)=0
  CONTRL(3)=1
  CONTRL(6)=my_handle&
  INTIN(0)=1
  VDISYS
  screen_bits%=INTOUT(4)
  flag%=WIND_GET(0,4,mwx%,mwy%,mww%,mwh%)
  ~WIND_CALC(1,&X11111111111,mwx%,mwy%,mww%,mwh%,d%,d%,iww%,iwh%)
  window_x_plus%=mww%-iww%
  window_y_plus%=mwh%-iwh%
  window_step%=window_y_plus%-1
  max_window%=61
  window_buffer%=GEMDOS(72,L:(max_window%+3)*256)
  window_title%=window_buffer%
  window_info%=window_buffer%+(max_window%+3)*128
  current%=-1
  find_flag%=0
  last_used%=-1
  min_width%=80
  min_height%=96
  find$=""
  replace$=""
  dat_type%=0
  source_text$=""
  dest_text$=""
  start_value%=0
  stop_value%=0
  every_value%=0
  size_value%=0
  width_value%=0
  all%=0
  pick_total%=0
  add_all%=0
  case%=0
  match%=0
  home%=0
  source_file%=-1
  dest_file%=-1
  shift_file%=0
  shift_view%=0
  source_view%=0
  dest_view%=0
  init_open%=0
  window_type%=0
  where%=0
  op%=0
  bit_size%=0
  windows%=0
  iconify%=0
  viewer%=0
  pref_open%=0
  alerts%=0
  alert_on%=0
  alert_leaving%=1
  alert_deleting%=1
  help_exit%=1
  alert_done%=1
RETURN
> PROCEDURE dims
  DIM source_mfdb%(8)
  DIM destination_mfdb%(8)
  DIM parameters%(8)
  FOR zero%=4 TO 8
    source_mfdb%(zero%)=0
    destination_mfdb%(zero%)=0
  NEXT zero%
  source_mfdb%(5)=screen_bits%
  destination_mfdb%(5)=screen_bits%
  parameters%(8)=3
  DIM buffer&(15)
  buffer%=VARPTR(buffer&(0))
  DIM my_buffer&(15)
  my_buffer%=VARPTR(my_buffer&(0))
  DIM free_buffer%(3)
  free_buffer%=VARPTR(free_buffer%(0))
  temp%=max_window%+2
  DIM help$(100,20)
  DIM alert$(7)
  DIM win%(temp%)
  DIM status%(temp%)
  DIM wx%(temp%),wy%(temp%)
  DIM ww%(temp%),wh%(temp%)
  DIM owx%(temp%),owy%(temp%)
  DIM oww%(temp%),owh%(temp%)
  DIM iwx%(temp%),iwy%(temp%)
  DIM iww%(temp%),iwh%(temp%)
  DIM slider_size%(temp%)
  DIM slider_position%(temp%)
  DIM view%(temp%),size%(temp%)
  DIM the_width%(temp%)
  DIM max_row%(temp%)
  DIM max_window_line%(temp%)
  DIM max_char%(temp%)
  DIM byte_buffer%(temp%)
  DIM search%(temp%)
  DIM found%(temp%)
  DIM view_name$(temp%)
  DIM view_path$(temp%)
  DIM edit%(temp%),bits%(31)
  DIM pick%(temp%)
  DIM type%(temp%)
  DIM search_file$(128)
  DIM type$(3)
  DIM where$(1)
  DIM op$(8)
  DIM bit_size$(2)
  DIM init_open$(1)
  DIM shift$(2)
  DIM alerts$(2)
  alerts$(0)="Center"
  alerts$(1)="Mouse"
  alerts$(2)="Last"
  DIM windows$(2)
  FOR x%=0 TO temp%
    byte_buffer%(x%)=-1
    win%(x%)=-1
    status%(x%)=-1
  NEXT x%
  DIM viewer$(1,9)
  viewer$(0,0)="GEMVIEW.ACC "
  viewer$(1,0)="C:\"
  viewer$(0,1)="GEMVIEW.APP "
  viewer$(1,1)="C:\"
  FOR x%=2 TO 9
    viewer$(0,x%)=""
    viewer$(1,x%)="C:\"
  NEXT x%
  where$(0)="Printer"
  where$(1)="File"
RETURN
> PROCEDURE check_event
  IF c_type& AND &X10000 THEN
    command%=buffer&(0)
    SELECT command%
    CASE 10
      @event_menu
    CASE 63
      ' @pipe
    DEFAULT
      @event_window
    ENDSELECT
  ENDIF
  IF c_type& AND &X1 THEN
    code&=SHR(key& AND &HFF00,8)
    @event_keypress
  ENDIF
  IF c_type& AND &X10 THEN
    @event_button
  ENDIF
RETURN
> PROCEDURE check_repair_event
  IF c_type& AND &X10000 THEN
    command%=buffer&(0)
    IF command%=10 THEN
      tit%=buffer&(3)
      ~MENU_TNORMAL(menu%,tit%,1)
    ELSE
      IF command%=20 THEN
        top%=buffer&(3)
        current%=-1
        IF win%(max_window%)=top% THEN
          current%=max_window%
        ELSE
          IF win%(max_window%+1)=top% THEN
            current%=max_window%+1
          ELSE
            IF win%(max_window%+2)=top% THEN
              current%=max_window%+2
            ELSE
              FOR x%=0 TO last_used%
                IF win%(x%)=top% THEN
                  current%=x%
                  x%=max_window%
                ENDIF
              NEXT x%
            ENDIF
          ENDIF
        ENDIF
        IF current%>-1
          @repair
        ENDIF
      ENDIF
    ENDIF
  ENDIF
RETURN
> PROCEDURE event_keypress
  @which_window
  IF current%>-1 THEN
    code&=SHR(key& AND &HFF00,8)
    ' PRINT code&;" ";
    IF iconify%=0 OR code&=16 OR code&=23 OR code&=98 THEN
      SELECT code&
      CASE 53 ! '?' ABOUT
        @about
      CASE 23 ! 'I'CONIFY
        IF iconify%=0 THEN
          @set_iconify
        ELSE
          @clr_iconify
        ENDIF
      CASE 47 ! 'V'IEW
        dialog_button%=b_main_view%
        @process_button
      CASE 9,102 ! '*' ON KEYPAD
        flag%=WIND_SET(win%(max_window%),10,0,0,0,0)
      CASE 28,114 ! 'RETURN', 'ENTER'
        IF current%=max_window%+1 THEN
          @about_close
        ELSE
          IF BTST(key_state&,0) OR BTST(key_state&,1) THEN ! RIGHT, LEFT SHIFT
            @set_button
          ELSE
            IF current%<max_window% AND current%>-1 THEN
              type%(current%)=window_type%
              @set_button_size
              @info_line
              @update_display
            ENDIF
          ENDIF
        ENDIF
      CASE 18 ! 'E'DIT
        IF current%=max_window% THEN
          edit%=t_main_data%
          @edit_values
        ELSE
          IF current%<max_window% AND current%>-1 THEN
            IF size%(current%)>0 THEN
              edit_col%=0
              edit_row%=0
              mx&=iwx%(current%)
              my&=iwy%(current%)
              @edit
            ENDIF
          ENDIF
        ENDIF
      CASE 24 ! 'O'PEN
        IF last_used%<max_window%-1 THEN
          IF BTST(key_state&,2) THEN ! +CONTROL
            @make_new
          ELSE
            @do_open
          ENDIF
        ENDIF
      CASE 45 ! 'X' SEARCH
        @search_file
      CASE 50 ! 'M'ERGE
        IF BTST(key_state&,0) OR BTST(key_state&,1) THEN ! RIGHT, LEFT SHIFT
          @merge_all
        ELSE
          IF current%=max_window% THEN
            IF all%>-1 THEN
              @merge_all
            ELSE
              IF source_file%>-1 THEN
                current%=source_file%
                @merge
              ENDIF
            ENDIF
          ELSE
            IF current%>-1 AND current%<max_window% THEN
              @merge
            ENDIF
          ENDIF
        ENDIF
      CASE 17 ! 'W' CLOSE
        IF BTST(key_state&,0) OR BTST(key_state&,1) THEN ! RIGHT, LEFT SHIFT
          @close_all
        ELSE
          IF current%<max_window% AND current%>-1 THEN
            @close
          ENDIF
        ENDIF
      CASE 31 ! 'S'AVE
        IF BTST(key_state&,0) OR BTST(key_state&,1) OR all%>0 THEN ! RIGHT, LEFT SHIFT
          @save_all
        ELSE
          IF current%<max_window% AND current%>-1 THEN
            @save
          ENDIF
        ENDIF
      CASE 25 ! 'P'RINT
        IF BTST(key_state&,0) OR BTST(key_state&,1) OR all%>0 THEN ! RIGHT, LEFT SHIFT
          @dump_all
        ELSE
          IF current%<max_window% AND current%>-1 THEN
            @dump
          ENDIF
        ENDIF
      CASE 16 ! 'Q'UIT
        @trying_to_quit
      CASE 33 ! 'F'IND
        IF BTST(key_state&,0) OR BTST(key_state&,1) THEN ! RIGHT, LEFT SHIFT
          @find_all
        ELSE
          IF current%<max_window% AND current%>-1 THEN
            @find
          ENDIF
        ENDIF
      CASE 49 ! 'N'EXT
        IF BTST(key_state&,0) OR BTST(key_state&,1) OR all%>0 THEN ! RIGHT, LEFT SHIFT
          @find_next_all
        ELSE
          IF current%<max_window% AND current%>-1 THEN
            @find_next
          ENDIF
        ENDIF
      CASE 19 ! 'R'EPLACE
        IF BTST(key_state&,0) OR BTST(key_state&,1) OR all%>0 THEN ! RIGHT, LEFT SHIFT
          IF BTST(key_state&,2) THEN ! +CONTROL
            replace_all%=1
          ENDIF
          @replace_all
        ELSE
          IF current%<max_window% AND current%>-1 THEN
            IF BTST(key_state&,2) THEN ! +CONTROL
              replace_all%=1
            ENDIF
            @replace
          ENDIF
        ENDIF
      CASE 44 ! 'Z' ADD
        IF BTST(key_state&,0) OR BTST(key_state&,1) OR all%>0 THEN ! RIGHT, LEFT SHIFT
          IF BTST(key_state&,2) THEN ! +CONTROL
            add_all%=1
          ENDIF
          @add_all
          add_all%=0
        ELSE
          IF current%<max_window% AND current%>-1 THEN
            IF BTST(key_state&,2) THEN ! +CONTROL
              add_all%=1
            ENDIF
            @add
            add_all%=0
          ENDIF
        ENDIF
      CASE 30 ! 'A'SCII CHANGE
        IF BTST(key_state&,0) OR BTST(key_state&,1) OR all%>0 THEN ! RIGHT, LEFT SHIFT
          @ascii_change_all
        ELSE
          IF current%<max_window% AND current%>-1 THEN
            @ascii_change
          ENDIF
        ENDIF
      CASE 48 ! 'B'IT CHANGE
        IF BTST(key_state&,0) OR BTST(key_state&,1) OR all%>0 THEN ! RIGHT, LEFT SHIFT
          @bit_change_all
        ELSE
          IF current%<max_window% AND current%>-1 THEN
            @bit_change
          ENDIF
        ENDIF
      CASE 46 ! 'C'OPY
        IF current%=max_window% THEN
          IF source_file%>-1 THEN
            copy_from%=source_file%
            @copy
          ENDIF
        ELSE
          IF current%<max_window% AND current%>-1 THEN
            copy_from%=current%
            @copy
          ENDIF
        ENDIF
      CASE 82 ! 'INSERT'
        IF BTST(key_state&,0) OR BTST(key_state&,1) OR all%>0 THEN ! RIGHT, LEFT SHIFT
          @insert_all
        ELSE
          IF current%<max_window% AND current%>-1 THEN
            @insert
          ENDIF
        ENDIF
      CASE 83 ! 'D'ELETE
        IF BTST(key_state&,0) OR BTST(key_state&,1) OR all%>0 THEN ! RIGHT, LEFT SHIFT
          @delete_all
        ELSE
          IF current%<max_window% AND current%>-1 THEN
            @delete
          ENDIF
        ENDIF
      CASE 34 ! 'G'OTO
        IF BTST(key_state&,0) OR BTST(key_state&,1) OR all%>0 THEN ! RIGHT, LEFT SHIFT
          @goto_all
        ELSE
          IF current%<max_window% AND current%>-1 THEN
            @goto
          ENDIF
        ENDIF
      CASE 20 ! 'T' TILE WINDOW
        IF last_used%>-1 THEN
          @tile
        ENDIF
      CASE 98 ! 'HELP'
        @help
      CASE 2,109 ! '1' TEXT
        IF current%=max_window% THEN
          old_dat_type%=dat_type%
          dat_type%=0
          IF old_dat_type%<>dat_type% THEN
            @set_type
            @change_data
            @set_text
          ENDIF
        ELSE
          IF current%<max_window% AND current%>-1 THEN
            new_type%=0
            IF type%(current%)<>new_type% THEN
              type%(current%)=new_type%
              @size_slider
              @fix_slider
            ENDIF
          ENDIF
        ENDIF
      CASE 3,110 ! '2' ASCII
        IF current%=max_window% THEN
          old_dat_type%=dat_type%
          dat_type%=1
          IF old_dat_type%<>dat_type% THEN
            @set_type
            @change_data
            @set_text
          ENDIF
        ELSE
          IF current%<max_window% AND current%>-1 THEN
            new_type%=1
            IF type%(current%)<>new_type% THEN
              type%(current%)=new_type%
              @size_slider
              @fix_slider
            ENDIF
          ENDIF
        ENDIF
      CASE 4,111 ! '3' HEX
        IF current%=max_window% THEN
          old_dat_type%=dat_type%
          dat_type%=2
          IF old_dat_type%<>dat_type% THEN
            @set_type
            @change_data
            @set_text
          ENDIF
        ELSE
          IF current%<max_window% AND current%>-1 THEN
            new_type%=2
            IF type%(current%)<>new_type% THEN
              type%(current%)=new_type%
              @size_slider
              @fix_slider
            ENDIF
          ENDIF
        ENDIF
      CASE 5,106 ! '4' GRAPHICS/BINARY
        IF current%<max_window% AND current%>-1 THEN
          new_type%=3
          IF type%(current%)<>new_type% THEN
            type%(current%)=new_type%
            @size_slider
            @fix_slider
          ENDIF
        ENDIF
      CASE 72 ! UP
        IF current%<max_window% AND current%>-1 THEN
          IF view%(current%)>0 THEN
            command%=24
            SELECT key_state&
            CASE 0 TO 2
              buffer&(4)=2
            CASE 4 ! CONTROL
              buffer&(4)=0
            ENDSELECT
            @event_slider
          ENDIF
        ENDIF
      CASE 80 ! DOWN
        IF current%<max_window% AND current%>-1 THEN
          IF view%(current%)<size%(current%) THEN
            command%=24
            SELECT key_state&
            CASE 0 TO 2
              buffer&(4)=3
            CASE 4 ! CONTROL
              buffer&(4)=1
            ENDSELECT
            @event_slider
          ENDIF
        ENDIF
      CASE 75 ! LEFT
        @width_less
      CASE 77 ! RIGHT
        @width_more
      CASE 57 ! 'SPACE' FULL WINDOW
        IF current%=max_window% THEN
          @full_all
        ELSE
          IF current%<max_window% AND current%>-1 THEN
            IF BTST(key_state&,0) OR BTST(key_state&,1) THEN ! RIGHT, LEFT SHIFT
              @full_all
            ELSE
              @full_window
            ENDIF
          ENDIF
        ENDIF
      CASE 15 ! 'TAB' NEXT WINDOW
        IF last_used%>-1 THEN
          INC current%
          IF current%>last_used% THEN
            current%=0
          ENDIF
          flag%=WIND_SET(win%(current%),10,0,0,0,0)
        ENDIF
      CASE 71 ! CLRHOME
        IF current%<max_window% AND current%>-1 THEN
          IF view%(current%)=0 THEN
            home%=-1
          ELSE
            home%=0
          ENDIF
          IF BTST(key_state&,0) OR BTST(key_state&,1) THEN ! RIGHT, LEFT SHIFT
            @home_all
          ENDIF
        ENDIF
      ENDSELECT
    ENDIF
  ENDIF
RETURN
> PROCEDURE event_menu
  tit%=buffer&(3)
  ~MENU_TNORMAL(menu%,tit%,1)
  item%=buffer&(4)
  SELECT item%
  CASE m_about%
    @about
  ENDSELECT
RETURN
> PROCEDURE event_window
  top%=buffer&(3)
  current%=-1
  IF top%>-1 THEN
    IF win%(max_window%)=top% THEN
      current%=max_window%
    ELSE
      IF win%(max_window%+1)=top% THEN
        current%=max_window%+1
      ELSE
        IF win%(max_window%+2)=top% THEN
          current%=max_window%+2
        ELSE
          FOR x%=0 TO last_used%
            IF win%(x%)=top% THEN
              current%=x%
              x%=max_window%
            ENDIF
          NEXT x%
        ENDIF
      ENDIF
    ENDIF
  ENDIF
  IF current%>-1 THEN
    SELECT command%
    CASE 20 ! WIND UPDATE
      @repair
    CASE 21 ! WINDOW CLICKED ON
      flag%=WIND_SET(win%(current%),10,0,0,0,0)
      DEFMOUSE 0
    CASE 22 ! CLOSE WINDOW
      IF current%<max_window% THEN
        @close
      ELSE
        IF current%=max_window%+2 THEN
          @about_close
        ELSE
          IF current%=max_window%+2 THEN
            pref_open%=0
            flag%=WIND_CLOSE(win%(current%))
          ELSE
            @trying_to_quit
          ENDIF
        ENDIF
      ENDIF
    CASE 23 ! FULL WINDOW
      @full_window
    CASE 24,26
      @event_slider
    CASE 27,28 ! WINDOW SIZED, MOVED
      flag%=WIND_GET(win%(current%),5,old_wx%,old_wy%,old_ww%,old_wh%)
      wx%(current%)=buffer&(4)
      wy%(current%)=buffer&(5)
      IF current%<max_window% THEN
        ww%(current%)=buffer&(6)
        wh%(current%)=buffer&(7)
        ww%(current%)=MAX(ww%(current%),min_width%+window_x_plus%)
        IF wx%(current%)+ww%(current%)>mww% THEN
          temp%=mww%-wx%(current%)
          ww%(current%)=MAX(temp%,min_width%+window_x_plus%)
          IF wx%(current%)+ww%(current%)>mww% THEN
            temp%=mww%-ww%(current%)
            wx%(current%)=MIN(temp%,wx%(current%))
          ENDIF
        ENDIF
        wh%(current%)=MAX(wh%(current%),min_height%+window_y_plus%)
        IF wy%(current%)+wh%(current%)>screen_height% THEN
          temp%=screen_height%-wy%(current%)
          wh%(current%)=MAX(temp%,min_height%+window_y_plus%)
          IF wy%(current%)+wh%(current%)>screen_height% THEN
            temp%=screen_height%-wh%(current%)
            wy%(current%)=MIN(temp%,wy%(current%))
          ENDIF
        ENDIF
        ww%(current%)=INT((ww%(current%)-window_x_plus%)/8)*8+window_x_plus%
        wh%(current%)=INT((wh%(current%)-window_y_plus%)/16)*16+window_y_plus%
        wx%(current%)=INT(wx%(current%)/8)*8-1
      ENDIF
      IF wx%(current%)<0 THEN
        wx%(current%)=0
      ENDIF
      flag%=WIND_SET(win%(current%),5,wx%(current%),wy%(current%),ww%(current%),wh%(current%))
      flag%=WIND_GET(win%(current%),4,iwx%(current%),iwy%(current%),iww%(current%),iwh%(current%))
      IF current%=max_window% THEN
        OB_X(main_dialog%,0)=iwx%(max_window%)
        OB_Y(main_dialog%,0)=iwy%(max_window%)
        OB_X(alt_dialog%,0)=iwx%(max_window%)
        OB_Y(alt_dialog%,0)=iwy%(max_window%)
      ELSE
        IF current%=max_window%+1 THEN
          OB_X(about_dialog%,0)=iwx%(max_window%+1)
          OB_Y(about_dialog%,0)=iwy%(max_window%+1)
        ELSE
          IF current%=max_window%+2 THEN
            OB_X(pref_dialog%,0)=iwx%(max_window%+2)
            OB_Y(pref_dialog%,0)=iwy%(max_window%+2)
          ELSE
            old_width%=the_width%(current%)
            @size_slider
            @info_line
            IF old_width%<>the_width%(current%) THEN
              @update_display
            ENDIF
          ENDIF
        ENDIF
      ENDIF
    ENDSELECT
  ENDIF
RETURN
> PROCEDURE pipe
  PRINT "Window:";buffer&(3)
  PRINT "X,Y:";buffer&(4);",";buffer&(5)
  pipe$="U:\PIPE\"+CHR$(BYTE(SHR(buffer&(7),8)))+CHR$(BYTE(buffer&(7)))
  PRINT "Pipe:";pipe$
  OPEN "O",#1,pipe$
  CLOSE #1
  @multi_check
  search_file$=pipe$+CHR$(0)
  ' ~FSETDTA(dta%)
  test%=GEMDOS(78,L:V:search_file$,&X100111)
  IF test%=0 THEN
    OPEN "I",#1,pipe$
    PRINT "Size:";LOF(#1)
    IF LOF(#1) THEN
      DO WHILE EOF(#1)=0
        INPUT #1,temp$
        PRINT temp$
      LOOP
    ENDIF
    CLOSE #1
    ' KILL pipe$
  ENDIF
RETURN
> PROCEDURE full_all
  IF last_used%>-1 THEN
    SELECT all%
    CASE 0
      IF current%=max_window% THEN
        IF source_file%>-1 THEN
          current%=source_file%
          @full_window
        ENDIF
      ELSE
        @full_window
      ENDIF
    CASE 1
      FOR current_full%=0 TO last_used%
        current%=current_full%
        IF pick%(current%) THEN
          @full_window
        ENDIF
      NEXT current_full%
    CASE 2
      FOR current_full%=0 TO last_used%
        current%=current_full%
        @full_window
      NEXT current_full%
    ENDSELECT
  ENDIF
RETURN
> PROCEDURE full_window
  IF current%>-1 AND current%<max_window% THEN
    flag%=WIND_GET(win%(current%),5,old_wx%,old_wy%,old_ww%,old_wh%)
    @size_window
    IF wx%(current%)+ww%(current%)>mww% THEN
      temp%=mww%-wx%(current%)
      ww%(current%)=MAX(temp%,min_width%+window_x_plus%)
      IF wx%(current%)+ww%(current%)>mww% THEN
        temp%=mww%-ww%(current%)
        wx%(current%)=MIN(temp%,wx%(current%))
      ENDIF
    ENDIF
    IF wy%(current%)+wh%(current%)>screen_height% THEN
      temp%=screen_height%-wy%(current%)
      wh%(current%)=MAX(temp%,min_height%+window_y_plus%)
      IF wy%(current%)+wh%(current%)>screen_height% THEN
        temp%=screen_height%-wh%(current%)
        wy%(current%)=MIN(temp%,wy%(current%))
      ENDIF
    ENDIF
    ww%(current%)=INT((ww%(current%)-window_x_plus%)/8)*8+window_x_plus%
    wh%(current%)=INT((wh%(current%)-window_y_plus%)/16)*16+window_y_plus%
    wx%(current%)=INT(wx%(current%)/8)*8-1
    IF wx%(current%)<0 THEN
      wx%(current%)=0
    ENDIF
    flag%=WIND_SET(win%(current%),5,wx%(current%),wy%(current%),ww%(current%),wh%(current%))
    flag%=WIND_GET(win%(current%),4,iwx%(current%),iwy%(current%),iww%(current%),iwh%(current%))
    old_width%=the_width%(current%)
    @size_slider
    @info_line
    IF old_width%<>the_width%(current%) THEN
      @update_display
    ENDIF
  ENDIF
RETURN
> PROCEDURE size_window
  SELECT type%(current%)
  CASE 0 ! TEXT
    max_in_width%=mwx%+mww%-(wx%(current%)+window_x_plus%)
    max_in_height%=mwy%+mwh%-(wy%(current%)+window_y_plus%)
    max_char%=INT(max_in_width%/8)
    IF max_char%>=size%(current%) THEN
      max_char%=size%(current%)
      max_line%=1
    ELSE
      max_line%=size%(current%)+1
    ENDIF
    IF max_line%*16>max_in_height% THEN
      max_line%=INT(max_in_height%/16)
    ENDIF
    ww%(current%)=max_char%*8+window_x_plus%
    wh%(current%)=max_line%*16+window_y_plus%
  CASE 1 ! ASCII
    max_in_width%=mwx%+mww%-(wx%(current%)+window_x_plus%)
    max_in_height%=mwy%+mwh%-(wy%(current%)+window_y_plus%)
    max_char%=INT(max_in_width%/8)
    IF max_char%>=size%(current%) THEN
      max_char%=size%(current%)
      max_line%=1
    ELSE
      max_line%=INT(size%(current%)/max_char%)+1
    ENDIF
    IF max_line%*16>max_in_height% THEN
      max_line%=INT(max_in_height%/16)
    ENDIF
    ww%(current%)=max_char%*8+window_x_plus%
    wh%(current%)=max_line%*16+window_y_plus%
  CASE 2 ! HEX
    max_in_width%=mwx%+mww%-(wx%(current%)+window_x_plus%)
    max_in_height%=mwy%+mwh%-(wy%(current%)+window_y_plus%)
    max_char%=INT(((max_in_width%+8)/3)/8)
    IF max_char%>=size%(current%) THEN
      max_char%=size%(current%)
      max_line%=1
    ELSE
      max_line%=INT(size%(current%)/max_char%)+1
    ENDIF
    IF max_line%*16>max_in_height% THEN
      max_line%=INT(max_in_height%/16)
    ENDIF
    ww%(current%)=((max_char%*3)-1)*8+window_x_plus%
    wh%(current%)=max_line%*16+window_y_plus%
  CASE 3 ! GRAPHIC
    max_in_width%=INT((mwx%+mww%-(wx%(current%)+window_x_plus%))/16)*16
    max_in_height%=mwy%+mwh%-(wy%(current%)+window_y_plus%)
    pixels%=(max_in_width%*screen_bits%)/8
    max_char%=pixels%
    IF max_char%>=size%(current%) THEN
      max_char%=size%(current%)
      max_line%=1
    ELSE
      max_line%=INT(size%(current%)/max_char%)+1
    ENDIF
    IF max_line%>max_in_height% THEN
      max_line%=max_in_height%
    ENDIF
    ww%(current%)=((max_char%*8)/screen_bits%)+window_x_plus%
    wh%(current%)=max_line%+window_y_plus%
  ENDSELECT
  IF ww%(current%)<min_width%+window_x_plus% THEN
    ww%(current%)=min_width%+window_x_plus%
  ENDIF
  IF wh%(current%)<min_height%+window_y_plus% THEN
    wh%(current%)=min_height%+window_y_plus%
  ENDIF
RETURN
> PROCEDURE event_button
  @which_window
  IF current%>-1 THEN
    clicked_on%=WIND_FIND(mx&,my&)
    IF win%(max_window%)=clicked_on% THEN
      SELECT iconify%
      CASE 0
        dialog_button%=OBJC_FIND(main_dialog%,0,4,mx&,my&)
        @process_button
      CASE 1
        dialog_button%=OBJC_FIND(alt_dialog%,0,4,mx&,my&)
        SELECT dialog_button%
        CASE t_alt_iconify%
          @clr_iconify
        ENDSELECT
      CASE 2
      ENDSELECT
    ELSE
      IF win%(max_window%+1)=clicked_on% THEN
        dialog_button%=OBJC_FIND(about_dialog%,0,4,mx&,my&)
        IF dialog_button%=about_button% THEN
          @about_close
        ENDIF
      ELSE
        IF win%(max_window%+2)=clicked_on% THEN
          dialog_button%=OBJC_FIND(pref_dialog%,0,4,mx&,my&)
          @pick_pref
        ELSE
          IF win%(current%)=clicked_on% THEN
            IF clicks&=2 THEN
              IF size%(current%)>0 THEN
                edit_row%=INT((my&-iwy%(current%))/16)
                edit_col%=INT((mx&-iwx%(current%))/8)
                @edit
              ENDIF
            ELSE
              @pick_popup
            ENDIF
          ENDIF
        ENDIF
      ENDIF
    ENDIF
  ENDIF
RETURN
> PROCEDURE which_window
  flag%=WIND_GET(0,10,top%,d%,d%,d%)
  current%=-1
  IF win%(max_window%)=top% THEN
    current%=max_window%
  ELSE
    IF win%(max_window%+1)=top% THEN
      current%=max_window%+1
    ELSE
      IF win%(max_window%+2)=top% THEN
        current%=max_window%+2
      ELSE
        FOR x%=0 TO last_used%
          IF win%(x%)=top% THEN
            current%=x%
            x%=max_window%
          ENDIF
        NEXT x%
      ENDIF
    ENDIF
  ENDIF
RETURN
> PROCEDURE process_button
  SELECT dialog_button%
  CASE t_main_iconify%
    @set_iconify
  CASE t_main_file%
    @pick_file
  CASE t_main_edit%
    @pick_edit
  CASE t_main_options%
    @pick_options
  CASE t_main_ascii%
    old_dat_type%=dat_type%
    dat_type%=0
    IF old_dat_type%<>dat_type% THEN
      @set_type
      @change_data
      @set_text
    ENDIF
    DO
    LOOP UNTIL MOUSEK=0
  CASE t_main_hex%
    old_dat_type%=dat_type%
    dat_type%=1
    IF old_dat_type%<>dat_type% THEN
      @set_type
      @change_data
      @set_text
    ENDIF
    DO
    LOOP UNTIL MOUSEK=0
  CASE t_main_binary%
    old_dat_type%=dat_type%
    dat_type%=2
    IF old_dat_type%<>dat_type% THEN
      @set_type
      @change_data
      @set_text
    ENDIF
    DO
    LOOP UNTIL MOUSEK=0
  CASE t_main_data%,t_main_mask%,t_main_start%,t_main_stop%,t_main_every%,t_main_size%,t_main_width%
    edit%=dialog_button%
    @edit_values
  CASE b_main_case%
    IF case%=0 THEN
      case%=1
    ELSE
      case%=0
    ENDIF
    @set_case
    DO
    LOOP UNTIL MOUSEK=0
  CASE b_main_match%
    IF match%=0 THEN
      match%=1
    ELSE
      match%=0
    ENDIF
    @set_match
    DO
    LOOP UNTIL MOUSEK=0
  CASE b_main_set%
    @set_button
  CASE b_main_all%
    @pick_shift
    DO
    LOOP UNTIL MOUSEK=0
  CASE b_main_all_next%
    INC all%
    IF all%=3 THEN
      all%=0
    ENDIF
    @set_shift
  CASE b_main_source_file%
    IF last_used%>-1 THEN
      pick_file_type%=0
      @pick_the_file
    ENDIF
  CASE b_main_source_file_next%
    IF last_used%>-1 THEN
      INC source_file%
      IF view_name$(source_file%)="" THEN
        source_file%=-1
      ENDIF
      @set_source
    ENDIF
  CASE b_main_dest_file%
    IF last_used%>-1 THEN
      pick_file_type%=1
      @pick_the_file
    ENDIF
  CASE b_main_dest_file_next%
    IF last_used%>-1 THEN
      INC dest_file%
      IF view_name$(dest_file%)="" THEN
        dest_file%=-1
      ENDIF
      @set_dest
    ENDIF
  CASE b_main_display%
    @pick_display
  CASE b_main_display_next%
    INC window_type%
    IF window_type%=4 THEN
      window_type%=0
    ENDIF
    @set_display
  CASE b_main_open%
    @pick_open
  CASE b_main_open_next%
    INC init_open%
    IF init_open%=2 THEN
      init_open%=0
    ENDIF
    @set_open
  CASE b_main_windows%
    @pick_windows
  CASE b_main_windows_next%
    INC windows%
    IF windows%=3 THEN
      windows%=0
    ENDIF
    @set_windows
  CASE b_main_op%
    @pick_op
  CASE b_main_op_next%
    INC op%
    IF op%=9 THEN
      op%=0
    ENDIF
    @set_op
  CASE b_main_bit_size%
    @pick_bit_size
  CASE b_main_bit_size_next%
    INC bit_size%
    IF bit_size%=3 THEN
      bit_size%=0
    ENDIF
    @set_size
  CASE b_main_viewer%
    @viewer_list
  CASE b_main_viewer_next%
    old_viewer%=viewer%
    IF viewer%=9 THEN
      temp%=0
      DO
        IF viewer$(0,temp%)<>"" THEN
          viewer%=temp%
          temp%=9
          @set_viewer
        ELSE
          INC temp%
        ENDIF
      LOOP UNTIL temp%=9
    ELSE
      temp%=viewer%+1
      DO
        IF viewer$(0,temp%)<>"" THEN
          viewer%=temp%
          temp%=9
          @set_viewer
        ELSE
          INC temp%
        ENDIF
      LOOP UNTIL temp%=9
      IF viewer%=old_viewer% THEN
        temp%=0
        DO
          IF viewer$(0,temp%)<>"" THEN
            viewer%=temp%
            temp%=old_viewer%
            @set_viewer
          ELSE
            INC temp%
          ENDIF
        LOOP UNTIL temp%>=old_viewer%
      ENDIF
    ENDIF
  CASE b_main_view%
    IF BTST(OB_STATE(main_dialog%,dialog_button%),3)=0 THEN
      OB_STATE(main_dialog%,dialog_button%)=BSET(OB_STATE(main_dialog%,dialog_button%),0)
      object%=dialog_button%
      @get_offset
      @update_main
      @view
      OB_STATE(main_dialog%,dialog_button%)=BCLR(OB_STATE(main_dialog%,dialog_button%),0)
      object%=dialog_button%
      @get_offset
      @update_main
    ENDIF
  ENDSELECT
RETURN
> PROCEDURE event_slider
  SELECT command%
  CASE 24
    slider_event%=buffer&(4)
    SELECT slider_event%
    CASE 6 ! 'LEFT'
      @width_less
    CASE 7 ! 'RIGHT'
      @width_more
    CASE 2 ! 'UP'
      IF view%(current%)>0
        IF key_state& THEN
          DEC view%(current%)
        ELSE
          SELECT type%(current%)
          CASE 0 ! TEXT
            @text_up
          CASE 1 ! ASCII
            view%(current%)=view%(current%)-the_width%(current%)
          CASE 2 ! HEX
            view%(current%)=view%(current%)-the_width%(current%)
          CASE 3 ! GRAPHICS
            view%(current%)=view%(current%)-((the_width%(current%)*screen_bits%)/8)
          ENDSELECT
          IF view%(current%)<0 THEN
            view%(current%)=0
          ENDIF
        ENDIF
        @fix_slider
      ENDIF
    CASE 0 ! 'ABOVE SLIDER'
      IF view%(current%)>0 THEN
        SELECT type%(current%)
        CASE 0 ! TEXT
          FOR up%=1 TO max_window_line%(current%)
            @text_up
          NEXT up%
        CASE 1 ! ASCII
          view%(current%)=view%(current%)-(max_window_line%(current%)*the_width%(current%))
        CASE 2 ! HEX
          view%(current%)=view%(current%)-(max_window_line%(current%)*the_width%(current%))
        CASE 3 ! GRAPHICS
          view%(current%)=view%(current%)-(max_window_line%(current%)*((the_width%(current%)*screen_bits%))/8)
        ENDSELECT
        IF view%(current%)<0 THEN
          view%(current%)=0
        ENDIF
        @fix_slider
      ENDIF
    CASE 1 ! 'BELOW SLIDER'
      SELECT type%(current%)
      CASE 0 ! TEXT
        FOR down%=1 TO max_window_line%(current%)
          @text_down
        NEXT down%
      CASE 1 ! ASCII
        view%(current%)=view%(current%)+max_window_line%(current%)*the_width%(current%)
      CASE 2 ! HEX
        view%(current%)=view%(current%)+max_window_line%(current%)*the_width%(current%)
      CASE 3 ! GRAPHICS
        view%(current%)=view%(current%)+max_window_line%(current%)*((the_width%(current%)*screen_bits%)/8)
      ENDSELECT
      IF view%(current%)>size%(current%)-1 THEN
        view%(current%)=size%(current%)-1
      ENDIF
      @fix_slider
    CASE 3 ! 'DOWN'
      IF view%(current%)<size%(current%)-1
        IF key_state& THEN
          INC view%(current%)
        ELSE
          SELECT type%(current%)
          CASE 0 ! TEXT
            @text_down
          CASE 1 ! ASCII
            view%(current%)=view%(current%)+the_width%(current%)
          CASE 2 ! HEX
            view%(current%)=view%(current%)+the_width%(current%)
          CASE 3 ! GRAPHICS
            view%(current%)=view%(current%)+((the_width%(current%)*screen_bits%)/8)
          ENDSELECT
          IF view%(current%)>size%(current%)-1 THEN
            view%(current%)=size%(current%)-1
          ENDIF
        ENDIF
        @fix_slider
      ENDIF
    ENDSELECT
  CASE 26 ! 'SLIDER BOX'
    old_view%=view%(current%)
    IF slider_size%(current%)<1000
      slider_position%(current%)=buffer&(4)
      view%(current%)=(slider_position%(current%)/1000)*(size%(current%)-1)
      IF type%(current%)=0 THEN
        @text_up
        IF view%(current%)<0 THEN
          view%(current%)=0
        ENDIF
      ENDIF
      IF old_view%<>view%(current%)
        flag%=WIND_SET(win%(current%),9,slider_position%(current%),0,0,0)
        @fix_slider
      ENDIF
    ENDIF
  ENDSELECT
RETURN
> PROCEDURE width_less
  IF current%<max_window% AND current%>-1 THEN
    IF BTST(key_state&,0) OR BTST(key_state&,1) THEN ! RIGHT, LEFT SHIFT
      less%=16
    ELSE
      less%=1
    ENDIF
    SELECT type%(current%)
    CASE 0 ! TEXT
      ww%(current%)=ww%(current%)-(8*less%)
    CASE 1 ! ASCII
      ww%(current%)=ww%(current%)-(8*less%)
    CASE 2 ! HEX
      ww%(current%)=ww%(current%)-(8*3*less%)
    CASE 3 ! GRAPHICS
      ww%(current%)=ww%(current%)-(16*less%)
    ENDSELECT
    IF ww%(current%)<min_width%+window_x_plus% THEN
      ww%(current%)=min_width%+window_x_plus%
    ENDIF
    flag%=WIND_SET(win%(current%),5,wx%(current%),wy%(current%),ww%(current%),wh%(current%))
    flag%=WIND_GET(win%(current%),4,iwx%(current%),iwy%(current%),iww%(current%),iwh%(current%))
    old_width%=the_width%(current%)
    @size_slider
    @info_line
    IF old_width%<>the_width%(current%) THEN
      @update_display
    ENDIF
  ENDIF
RETURN
> PROCEDURE width_more
  IF current%<max_window% AND current%>-1 THEN
    IF BTST(key_state&,0) OR BTST(key_state&,1) THEN ! RIGHT, LEFT SHIFT
      more%=16
    ELSE
      more%=1
    ENDIF
    SELECT type%(current%)
    CASE 0 ! TEXT
      ww%(current%)=ww%(current%)+8*more%
    CASE 1 ! ASCII
      ww%(current%)=ww%(current%)+8*more%
    CASE 2 ! HEX
      ww%(current%)=ww%(current%)+8*3*more%
    CASE 3 ! GRAPHICS
      ww%(current%)=ww%(current%)+16*more%
    ENDSELECT
    flag%=WIND_SET(win%(current%),5,wx%(current%),wy%(current%),ww%(current%),wh%(current%))
    flag%=WIND_GET(win%(current%),4,iwx%(current%),iwy%(current%),iww%(current%),iwh%(current%))
    old_width%=the_width%(current%)
    @size_slider
    @info_line
    IF old_width%<>the_width%(current%) THEN
      @update_display
    ENDIF
  ENDIF
RETURN
> PROCEDURE text_up
  place%=view%(current%)
  IF place%>0 THEN
    search_size%=125
    temp%=place%-(search_size%+size%(current%))
    IF temp%>0 THEN
      search_size%=search_size%-temp%
    ENDIF
    search_buffer$=SPACE$(search_size%)
    search_buffer%=VARPTR(search_buffer$)
    BMOVE byte_buffer%(current%)+place%-search_size%,search_buffer%,search_size%
    xit%=0
    place%=1
    old_place%=place%
    DO
      test%=INSTR(MID$(search_buffer$,place%),CHR$(0))
      IF test%<1 THEN
        test%=INSTR(MID$(search_buffer$,place%),CHR$(13))
        IF test%<1 THEN
          IF MID$(search_buffer$,place%+test%+1,1)=CHR$(10) THEN
            INC test%
          ENDIF
        ENDIF
      ENDIF
      IF test%=0 OR place%>=search_size% THEN
        xit%=old_place%+1
      ELSE
        old_place%=place%
        place%=place%+test%
      ENDIF
    LOOP UNTIL xit%>0
    view%(current%)=view%(current%)-(search_size%+1-xit%)
    IF view%(current%)=1 THEN
      view%(current%)=0
    ENDIF
  ENDIF
RETURN
> PROCEDURE text_down
  place%=view%(current%)
  IF place%<size%(current%) THEN
    search_size%=MIN(255,the_width%(current%))
    temp%=place%+search_size%-size%(current%)
    IF temp%>0 THEN
      search_size%=search_size%-temp%
    ENDIF
    search_buffer$=SPACE$(search_size%)
    search_buffer%=VARPTR(search_buffer$)
    BMOVE byte_buffer%(current%)+place%,search_buffer%,search_size%
    test%=INSTR(search_buffer$,CHR$(0))
    IF test%<1 THEN
      test%=INSTR(search_buffer$,CHR$(13))
      IF test%<1 THEN
        test%=INSTR(search_buffer$,CHR$(10))
        IF test%<1 THEN
          test%=search_size%
        ENDIF
      ELSE
        IF MID$(search_buffer$,test%+1,1)=CHR$(10) THEN
          INC test%
        ENDIF
      ENDIF
    ENDIF
  ENDIF
  view%(current%)=view%(current%)+test%
RETURN
> PROCEDURE fix_slider
  @info_line
  slider_position%(current%)=(view%(current%)/(size%(current%)-1))*1000
  flag%=WIND_SET(win%(current%),9,slider_position%(current%),0,0,0)
  @update_display
RETURN
> PROCEDURE path_setup
  shell%=SHEL_READ(drop_path$,tail$)
  tail$=MID$(tail$,2)
  test%=RINSTR(drop_path$,"\")
  IF test% THEN
    drop_path$=MID$(drop_path$,1,test%)
  ELSE
    drop_path$=""
  ENDIF
  current_drive%=GEMDOS(25)
  current_path$=DIR$(current_drive%+1)+"\"
  search_file$=drop_path$+"FILE_SPY.RSC"+CHR$(0)
  ' ~FSETDTA(dta%)
  test%=GEMDOS(78,L:V:search_file$,&X100111)
  IF test%=0 THEN
    view_path$=drop_path$
  ELSE
    search_file$=current_path$+"FILE_SPY.RSC"+CHR$(0)
    ' ~FSETDTA(dta%)
    test%=GEMDOS(78,L:V:search_file$,&X100111)
    IF test%=0 THEN
      view_path$=current_path$
    ELSE
      @rsc_setup
    ENDIF
  ENDIF
  my_rsc$=view_path$+"FILE_SPY.RSC"
  my_inf$=view_path$+"FILE_SPY.INF"
  search_path$=view_path$
  search_list_path$=view_path$
RETURN
> PROCEDURE rsc_setup
  txt$=" |File Spy cannot find it's RSC file. |What do you want to do ? | "
  ALERT 0,txt$,1,"Find|Cancel",button%
  SELECT button%
  CASE 1
    @hide_mouse
    FILESELECT #"Find File Spy's RSC file",view_path$+"*.*","FILE_SPY.RSC",temp$
    @show_mouse
    test%=RINSTR(temp$,"\")
    IF test% THEN
      temp$=MID$(temp$,1,test%)
    ENDIF
    search_file$=temp$+"FILE_SPY.RSC"+CHR$(0)
    ' ~FSETDTA(dta%)
    test%=GEMDOS(78,L:V:search_file$,&X100111)
    IF test%=0 THEN
      view_path$=temp$
    ELSE
      ~FSETDTA(old_dta%)
      END
    ENDIF
  CASE 2
    ~FSETDTA(old_dta%)
    END
  ENDSELECT
RETURN
> PROCEDURE rsc_do
  rsc%=RSRC_LOAD(my_rsc$)
  IF rsc%=0 THEN
    txt$=" |Problem loading resource file.  | "
    ALERT 0,txt$,2,"Continue|Cancel",button%
    IF button%=2 THEN
      END
    ENDIF
  ENDIF
  ~RSRC_GADDR(0,0,menu%)
  ~RSRC_GADDR(0,1,main_dialog%)
  ~RSRC_GADDR(0,2,alert_dialog%)
  ~RSRC_GADDR(0,3,source_dialog%)
  ~RSRC_GADDR(0,4,display_dialog%)
  ~RSRC_GADDR(0,5,d%)
  ~RSRC_GADDR(0,6,op_dialog%)
  ~RSRC_GADDR(0,7,bit_size_dialog%)
  ~RSRC_GADDR(0,8,windows_dialog%)
  ~RSRC_GADDR(0,9,file_dialog%)
  ~RSRC_GADDR(0,10,edit_dialog%)
  ~RSRC_GADDR(0,11,options_dialog%)
  ~RSRC_GADDR(0,12,search_dialog%)
  ~RSRC_GADDR(0,13,shift_dialog%)
  ~RSRC_GADDR(0,14,open_dialog%)
  ~RSRC_GADDR(0,15,about_dialog%)
  ~RSRC_GADDR(0,16,alt_dialog%)
  ~RSRC_GADDR(0,17,viewer_dialog%)
  ~RSRC_GADDR(0,18,pref_dialog%)
  ~RSRC_GADDR(0,19,popup_dialog%)
  ~FORM_CENTER(main_dialog%,main_x%,main_y%,main_w%,main_h%)
  ~FORM_CENTER(alert_dialog%,alert_x%,alert_y%,alert_w%,alert_h%)
  ~FORM_CENTER(search_dialog%,search_x%,search_y%,search_w%,search_h%)
  ~FORM_CENTER(about_dialog%,about_x%,about_y%,about_w%,about_h%)
  ~FORM_CENTER(alt_dialog%,alt_x%,alt_y%,alt_w%,alt_h%)
  ~FORM_CENTER(pref_dialog%,pref_x%,pref_y%,pref_w%,pref_h%)
  ~FORM_CENTER(popup_dialog%,popup_x%,popup_y%,popup_w%,popup_h%)
  m_about%=6
  t_main_file%=2
  t_main_edit%=3
  t_main_options%=4
  t_main_iconify%=6
  t_main_ascii%=7
  t_main_hex%=8
  t_main_binary%=9
  b_main_case%=10
  b_main_match%=11
  t_main_data%=13
  t_main_mask%=15
  t_main_start%=17
  t_main_stop%=19
  t_main_every%=21
  t_main_size%=23
  t_main_width%=25
  t_main_free%=27
  b_main_source_file%=31
  b_main_source_file_next%=32
  b_main_all%=34
  b_main_all_next%=35
  b_main_dest_file%=39
  b_main_dest_file_next%=40
  b_main_display%=42
  b_main_display_next%=43
  b_main_set%=44
  b_main_op%=49
  b_main_op_next%=50
  b_main_bit_size%=52
  b_main_bit_size_next%=53
  b_main_open%=55
  b_main_open_next%=56
  b_main_viewer%=60
  b_main_viewer_next%=61
  b_main_windows%=63
  b_main_windows_next%=64
  b_main_view%=65
  t_alt_iconify%=3
  t_alt_icon%=4
  t_alert_text%=1
  b_alert_1%=6
  t_alert_1%=7
  b_alert_2%=8
  t_alert_2%=9
  b_alert_3%=10
  t_alert_3%=11
  t_search_file%=3
  t_search_find%=5
  b_pref_center%=3
  b_pref_mouse%=4
  b_pref_last%=5
  b_pref_printer%=8
  b_pref_file%=9
  b_pref_leaving%=10
  b_pref_deleting%=12
  b_pref_ok%=14
  about_button%=6
  IF screen_bits%<4 THEN
    OB_FLAGS(main_dialog%,b_main_case%)=BCLR(OB_FLAGS(main_dialog%,b_main_case%),10)
    OB_FLAGS(main_dialog%,b_main_match%)=BCLR(OB_FLAGS(main_dialog%,b_main_match%),10)
    OB_FLAGS(main_dialog%,b_main_view%)=BCLR(OB_FLAGS(main_dialog%,b_main_view%),10)
    OB_FLAGS(main_dialog%,b_main_set%)=BCLR(OB_FLAGS(main_dialog%,b_main_set%),10)
    OB_FLAGS(alert_dialog%,b_alert_1%)=BCLR(OB_FLAGS(alert_dialog%,b_alert_1%),10)
    OB_FLAGS(alert_dialog%,b_alert_2%)=BCLR(OB_FLAGS(alert_dialog%,b_alert_2%),10)
    OB_FLAGS(alert_dialog%,b_alert_3%)=BCLR(OB_FLAGS(alert_dialog%,b_alert_3%),10)
    OB_FLAGS(about_dialog%,about_button%)=BCLR(OB_FLAGS(about_dialog%,about_button%),10)
    OB_FLAGS(pref_dialog%,b_pref_center%)=BCLR(OB_FLAGS(pref_dialog%,b_pref_center%),10)
    OB_FLAGS(pref_dialog%,b_pref_mouse%)=BCLR(OB_FLAGS(pref_dialog%,b_pref_mouse%),10)
    OB_FLAGS(pref_dialog%,b_pref_last%)=BCLR(OB_FLAGS(pref_dialog%,b_pref_last%),10)
    OB_FLAGS(pref_dialog%,b_pref_printer%)=BCLR(OB_FLAGS(pref_dialog%,b_pref_printer%),10)
    OB_FLAGS(pref_dialog%,b_pref_file%)=BCLR(OB_FLAGS(pref_dialog%,b_pref_file%),10)
    OB_FLAGS(pref_dialog%,b_pref_ok%)=BCLR(OB_FLAGS(pref_dialog%,b_pref_ok%),10)
  ENDIF
  CHAR{{OB_SPEC(main_dialog%,t_main_iconify%)}}=CHR$(127)
  CHAR{{OB_SPEC(alt_dialog%,t_alt_iconify%)}}=CHR$(127)
  IF mint_os%=1 OR magic_os%=1 THEN
  ELSE
    ~MENU_BAR(menu%,1)
  ENDIF
  source_height%=OB_H(source_dialog%,18)
  slider_height%=OB_H(shift_dialog%,16)
  pick_height%=OB_H(op_dialog%,1)
  popup_width%=OB_W(popup_dialog%,0)
  popup_height%=OB_H(popup_dialog%,0)
  '
  FOR x%=0 TO 3
    type$(x%)=TRIM$(CHAR{{OB_SPEC(display_dialog%,x%+1)}})
  NEXT x%
  FOR x%=0 TO 8
    op$(x%)=TRIM$(CHAR{{OB_SPEC(op_dialog%,x%+1)}})
  NEXT x%
  FOR x%=0 TO 2
    bit_size$(x%)=TRIM$(CHAR{{OB_SPEC(bit_size_dialog%,x%+1)}})
  NEXT x%
  FOR x%=0 TO 1
    init_open$(x%)=TRIM$(CHAR{{OB_SPEC(open_dialog%,x%+1)}})
  NEXT x%
  FOR x%=0 TO 2
    shift$(x%)=TRIM$(CHAR{{OB_SPEC(shift_dialog%,x%+1)}})
  NEXT x%
  FOR x%=0 TO 2
    windows$(x%)=TRIM$(CHAR{{OB_SPEC(windows_dialog%,x%+1)}})
  NEXT x%
RETURN
> PROCEDURE main_window
  ~WIND_CALC(0,&X1011,main_x%,main_y%,main_w%,main_h%,wx%(max_window%),wy%(max_window%),main_ww%,main_wh%)
  ~WIND_CALC(0,&X1011,alt_x%,alt_y%,alt_w%,alt_h%,d%,d%,alt_ww%,alt_wh%)
  ~WIND_CALC(0,&X1001,alert_x%,alert_y%,alert_w%,alert_h%,d%,d%,alert_ww%,alert_wh%)
  IF main_nwx%<>-1 OR main_nwy%<>-1 THEN
    IF main_nwx%<>-1 AND main_nwx%<mww% THEN
      wx%(max_window%)=main_nwx%
    ENDIF
    IF main_nwy%<>-1 AND main_nwy%>=mwy% AND main_nwy%<mwy%+mwh% THEN
      wy%(max_window%)=main_nwy%
    ENDIF
    ~WIND_CALC(1,&X1011,wx%(max_window%),wy%(max_window%),main_ww%,main_wh%,iwx%(max_window%),iwy%(max_window%),d%,d%)
    OB_X(main_dialog%,0)=iwx%(max_window%)
    OB_Y(main_dialog%,0)=iwy%(max_window%)
    OB_X(alt_dialog%,0)=iwx%(max_window%)
    OB_Y(alt_dialog%,0)=iwy%(max_window%)
  ENDIF
  ww%(max_window%)=main_ww%
  wh%(max_window%)=main_wh%
  win%(max_window%)=WIND_CREATE(&X1011,wx%(max_window%),wy%(max_window%),ww%(max_window%),wh%(max_window%))
  window_title$="File Spy"+CHR$(0)
  CHAR{window_title%+max_window%*128}=window_title$
  flag%=WIND_SET(win%(max_window%),2,CARD(SWAP(window_title%+max_window%*128)),CARD(window_title%+max_window%*128),0,0)
  flag%=WIND_OPEN(win%(max_window%),wx%(max_window%),wy%(max_window%),ww%(max_window%),wh%(max_window%))
  flag%=WIND_GET(4,win%(max_window%),iwx%(max_window%),iwy%(max_window%),iww%(max_window%),iwh%(max_window%))
  win%(max_window%+1)=WIND_CREATE(&X1001,mwx%,mwy%,mww%,mwh%)
  win%(max_window%+2)=WIND_CREATE(&X1011,mwx%,mwy%,mww%,mwh%)
RETURN
> PROCEDURE window_setup
  win%(current%)=WIND_CREATE(&X11111111111,mwx%,mwy%,mww%,mwh%)
  IF win%(current%)>-1 THEN
    INC last_used%
    found%(current%)=-1
    search%(current%)=-1
    edit%(current%)=0
    view_name$(current%)=view_name$
    view_path$(current%)=view_path$
    view%(current%)=0
    type%(current%)=window_type%
    pick%(current%)=0
    status%(current%)=1
    @title
    flag%=1
    @set_window_size
    @info_line
    @multi_check
    @bell
  ELSE
    IF byte_buffer%(current%)>0 THEN
      d%=GEMDOS(73,L:byte_buffer%(current%)) ! RELEASE MEMORY
    ENDIF
    exit%=1
    alert$(0)=""
    alert$(1)="Sorry, you have reached you systems"
    alert$(2)="window limit. Try closing a window"
    alert$(3)="that in not in use."
    alert$(4)=""
    alert$(5)=""
    alert$(6)="OK"
    alert$(7)=""
    alert_button%=1
    @alert
  ENDIF
RETURN
> PROCEDURE pref_open
  IF pref_open%=0 THEN
    pref_open%=1
    current%=max_window%+2
    SELECT alerts%
    CASE 0 ! CENTER
      ~FORM_CENTER(pref_dialog%,pref_x%,pref_y%,pref_w%,pref_h%)
    CASE 1 ! MOUSE
      pref_x%=mx&-(pref_w%/2)
      pref_y%=my&-(pref_h%/2)
    CASE 2 ! LAST
    ENDSELECT
    ~WIND_CALC(0,&X1001,pref_x%,pref_y%,pref_w%,pref_h%,pref_wx%,pref_wy%,pref_ww%,pref_wh%)
    IF pref_wx%<mwx% THEN
      pref_wx%=mwx%
    ENDIF
    IF pref_wx%>mww%-pref_ww% THEN
      pref_wx%=mww%-pref_ww%
    ENDIF
    IF pref_wy%<mwy% THEN
      pref_wy%=mwy%
    ENDIF
    IF pref_wy%>mwh%+mwy%-pref_wh% THEN
      pref_wy%=mwh%+mwy%-pref_wh%
    ENDIF
    ~WIND_CALC(1,&X1001,pref_wx%,pref_wy%,pref_ww%,pref_wh%,pref_x%,pref_y%,d%,d%)
    OB_X(pref_dialog%,0)=pref_x%
    OB_Y(pref_dialog%,0)=pref_y%
    wx%(current%)=pref_wx%
    wy%(current%)=pref_wy%
    ww%(current%)=pref_ww%
    wh%(current%)=pref_wh%
    window_title$="Preferences (File Spy)"+CHR$(0)
    CHAR{window_title%+(max_window%+2)*128}=window_title$
    flag%=WIND_SET(win%(max_window%+2),2,CARD(SWAP(window_title%+(max_window%+2)*128)),CARD(window_title%+(max_window%+2)*128),0,0)
    flag%=WIND_OPEN(win%(current%),wx%(current%),wy%(current%),ww%(current%),wh%(current%))
    flag%=WIND_SET(win%(current%),5,wx%(current%),wy%(current%),ww%(current%),wh%(current%))
    flag%=WIND_GET(win%(current%),4,iwx%(current%),iwy%(current%),iww%(current%),iwh%(current%))
    OB_X(pref_dialog%,0)=iwx%(max_window%+2)
    OB_Y(pref_dialog%,0)=iwy%(max_window%+2)
  ELSE
    flag%=WIND_SET(win%(max_window%+2),10,0,0,0,0)
  ENDIF
RETURN
> PROCEDURE pick_pref
  SELECT dialog_button%
  CASE b_pref_center%
    IF BTST(OB_STATE(pref_dialog%,dialog_button%),0)=0 THEN
      alerts%=0
      @set_pref
    ENDIF
  CASE b_pref_mouse%
    IF BTST(OB_STATE(pref_dialog%,dialog_button%),0)=0 THEN
      alerts%=1
      @set_pref
    ENDIF
  CASE b_pref_last%
    IF BTST(OB_STATE(pref_dialog%,dialog_button%),0)=0 THEN
      alerts%=2
      @set_pref
    ENDIF
  CASE b_pref_printer%
    IF BTST(OB_STATE(pref_dialog%,dialog_button%),0)=0 THEN
      where%=0
      @set_pref
    ENDIF
  CASE b_pref_file%
    IF BTST(OB_STATE(pref_dialog%,dialog_button%),0)=0 THEN
      where%=1
      @set_pref
    ENDIF
  CASE b_pref_leaving%
    IF alert_leaving%=0 THEN
      alert_leaving%=1
    ELSE
      alert_leaving%=0
    ENDIF
    @set_pref
    DO
    LOOP UNTIL MOUSEK=0
  CASE b_pref_deleting%
    IF alert_deleting%=0 THEN
      alert_deleting%=1
    ELSE
      alert_deleting%=0
    ENDIF
    @set_pref
    DO
    LOOP UNTIL MOUSEK=0
  CASE b_pref_ok%
    OB_STATE(pref_dialog%,dialog_button%)=BSET(OB_STATE(pref_dialog%,dialog_button%),0)
    object%=dialog_button%
    @get_pref_offset
    @update_pref
    OB_STATE(pref_dialog%,dialog_button%)=BCLR(OB_STATE(pref_dialog%,dialog_button%),0)
    DO
    LOOP UNTIL MOUSEK=0
    flag%=WIND_CLOSE(win%(max_window%+2))
    pref_open%=0
  ENDSELECT
RETURN
> PROCEDURE get_pref_offset
  IF pref_open%=1 THEN
    ~OBJC_OFFSET(pref_dialog%,object%,rx%,ry%)
    rw%=OB_W(pref_dialog%,object%)
    rh%=OB_H(pref_dialog%,object%)
  ENDIF
RETURN
> PROCEDURE update_pref
  IF pref_open%=1 THEN
    my_buffer&(0)=20
    my_buffer&(3)=win%(max_window%+2)
    my_buffer&(4)=rx%-2
    my_buffer&(5)=ry%-2
    my_buffer&(6)=rw%+4
    my_buffer&(7)=rh%+4
    ~APPL_WRITE(handle&,16,my_buffer%)
    @multi_check
  ENDIF
RETURN
> PROCEDURE set_window_size
  wx%(current%)=mwx%
  wy%(current%)=mwy%
  ww%(current%)=min_width%+window_x_plus%
  wh%(current%)=min_height%+window_y_plus%
  IF init_open%=0 THEN
    @full_window
    flag%=WIND_OPEN(win%(current%),wx%(current%),wy%(current%),ww%(current%),wh%(current%))
  ELSE
    SELECT type%(current%)
    CASE 0 ! TEXT
      max_in_width%=mwx%+ww%(current%)-(wx%(current%)+window_x_plus%)
      max_in_height%=mwy%+wh%(current%)-(wy%(current%)+window_y_plus%)
      max_char%=INT(max_in_width%/8)
      IF max_char%>=size%(current%) THEN
        max_char%=size%(current%)
        max_line%=1
      ELSE
        max_line%=size%(current%)+1
      ENDIF
      IF max_line%*16>max_in_height% THEN
        max_line%=INT(max_in_height%/16)
      ENDIF
      ww%(current%)=max_char%*8+window_x_plus%
      wh%(current%)=max_line%*16+window_y_plus%
    CASE 1 ! ASCII
      max_in_width%=mwx%+ww%(current%)-(wx%(current%)+window_x_plus%)
      max_in_height%=mwy%+wh%(current%)-(wy%(current%)+window_y_plus%)
      max_char%=INT(max_in_width%/8)
      IF max_char%>=size%(current%) THEN
        max_char%=size%(current%)
        max_line%=1
      ELSE
        max_line%=INT(size%(current%)/max_char%)+1
      ENDIF
      IF max_line%*16>max_in_height% THEN
        max_line%=INT(max_in_height%/16)
      ENDIF
      ww%(current%)=max_char%*8+window_x_plus%
      wh%(current%)=max_line%*16+window_y_plus%
    CASE 2 ! HEX
      max_in_width%=mwx%+ww%(current%)-(wx%(current%)+window_x_plus%)
      max_in_height%=mwy%+wh%(current%)-(wy%(current%)+window_y_plus%)
      max_char%=INT(((max_in_width%+8)/3)/8)
      IF max_char%>=size%(current%) THEN
        max_char%=size%(current%)
        max_line%=1
      ELSE
        max_line%=INT(size%(current%)/max_char%)+1
      ENDIF
      IF max_line%*16>max_in_height% THEN
        max_line%=INT(max_in_height%/16)
      ENDIF
      ww%(current%)=((max_char%*3)-1)*8+window_x_plus%
      wh%(current%)=max_line%*16+window_y_plus%
    CASE 3 ! GRAPHIC
      max_in_width%=INT((mwx%+ww%(current%)-(wx%(current%)+window_x_plus%))/16)*16
      max_in_height%=mwy%+wh%(current%)-(wy%(current%)+window_y_plus%)
      pixels%=(max_in_width%*screen_bits%)/8
      max_char%=pixels%
      IF max_char%>=size%(current%) THEN
        max_char%=size%(current%)
        max_line%=1
      ELSE
        max_line%=INT(size%(current%)/max_char%)+1
      ENDIF
      IF max_line%>max_in_height% THEN
        max_line%=max_in_height%
      ENDIF
      ww%(current%)=((max_char%*8)/screen_bits%)+window_x_plus%
      wh%(current%)=max_line%+window_y_plus%
    ENDSELECT
    IF ww%(current%)<min_width%+window_x_plus% THEN
      ww%(current%)=min_width%+window_x_plus%
    ENDIF
    IF wh%(current%)<min_height%+window_y_plus% THEN
      wh%(current%)=min_height%+window_y_plus%
    ENDIF
    IF last_used%>-1 THEN
      '
      temp_x%=ww%(current%)
      temp_y%=wh%(current%)
      FOR x%=0 TO last_used%
        IF x%<>current% THEN
          temp_x%=MIN(temp_x%,wx%(x%))
          temp_y%=MIN(temp_y%,wy%(x%))
        ENDIF
      NEXT x%
      '
      IF temp_x%<ww%(current%) OR temp_y%<wh%(current%) THEN
        temp_x%=mwx%
        temp_y%=mwy%
        FOR x%=0 TO last_used%
          IF x%<>current% THEN
            IF wx%(x%)+ww%(x%)>temp_x% THEN
              temp_x%=MAX(temp_x%,wx%(x%)+ww%(x%))
              IF temp_x%+ww%(current%)>mww% THEN
                temp_x%=mwx%
                temp_y%=MAX(temp_y%,wy%(x%)+wh%(x%))
                IF temp_y%+wy%(current%)>screen_height% THEN
                  x%=last_used%
                ENDIF
              ENDIF
            ELSE
              temp_y%=MAX(temp_y%,wy%(x%)+wh%(x%))
            ENDIF
          ENDIF
        NEXT x%
        IF temp_y%+wy%(current%)>screen_height% THEN
          temp_y%=mwy%
        ENDIF
      ELSE
        temp_x%=mwx%
        temp_y%=mwy%
      ENDIF
      '
      wx%(current%)=temp_x%
      wy%(current%)=temp_y%
      IF wx%(current%)+ww%(current%)>mww% THEN
        temp%=mww%-wx%(current%)
        ww%(current%)=MAX(temp%,min_width%+window_x_plus%)
        IF wx%(current%)+ww%(current%)>mww% THEN
          temp%=mww%-ww%(current%)
          wx%(current%)=MIN(temp%,wx%(current%))
        ENDIF
      ENDIF
      IF wy%(current%)+wh%(current%)>screen_height% THEN
        temp%=screen_height%-wy%(current%)
        wh%(current%)=MAX(temp%,min_height%+window_y_plus%)
        IF wy%(current%)+wh%(current%)>screen_height% THEN
          temp%=screen_height%-wh%(current%)
          wy%(current%)=MIN(temp%,wy%(current%))
        ENDIF
      ENDIF
    ENDIF
    ww%(current%)=INT((ww%(current%)-window_x_plus%)/8)*8+window_x_plus%
    wh%(current%)=INT((wh%(current%)-window_y_plus%)/16)*16+window_y_plus%
    wx%(current%)=INT(wx%(current%)/8)*8-1
    IF wx%(current%)<0 THEN
      wx%(current%)=0
    ENDIF
    flag%=WIND_OPEN(win%(current%),wx%(current%),wy%(current%),ww%(current%),wh%(current%))
    flag%=WIND_GET(win%(current%),4,iwx%(current%),iwy%(current%),iww%(current%),iwh%(current%))
    @size_slider
  ENDIF
RETURN
> PROCEDURE check_for_mint
  CHAR{cook%}="    "+CHR$(0)+CHR$(0)
  handle&=APPL_INIT()
  jar%=LPEEK(1440)
  mint_os%=0
  magic_os%=0
  sys_viewer%=0
  sys_viewer$=""
  IF jar% THEN
    DO
      IF LPEEK(jar%) THEN
        LPOKE cook%,LPEEK(jar%)
        cookie$=CHAR{cook%}
        ' PRINT cookie$,LPEEK(jar%+4)
        IF cookie$="MiNT" THEN
          mint_os%=1
        ENDIF
        IF cookie$="MagX" THEN
          magic_os%=1
        ENDIF
        IF cookie$="View" THEN
          sys_viewer%=1
          view_address%=LPEEK(jar%+4)
        ENDIF
        jar%=jar%+8
      ELSE
        jar%=0
      ENDIF
    LOOP UNTIL jar%=0
  ENDIF
  IF mint_os%=1 OR magic_os%=1 THEN
    ~MENU_REGISTER(handle&,"  File Spy")
  ENDIF
  IF sys_viewer%=1 THEN
    sys_viewer$=CHAR{view_address%}
  ENDIF
RETURN
> PROCEDURE tile
  IF last_used%>-1 THEN
    DEFMOUSE 2
    @which_window
    old_topped%=current%
    SELECT windows%
    CASE 0 ! STACK
      current_tile%=0
      y%=mwy%
      DO
        owx%(current_tile%)=wx%(current_tile%)
        owy%(current_tile%)=wy%(current_tile%)
        oww%(current_tile%)=ww%(current_tile%)
        owh%(current_tile%)=wh%(current_tile%)
        wx%(current_tile%)=mwx%
        wy%(current_tile%)=y%
        ww%(current_tile%)=mww%
        wh%(current_tile%)=mwh%+mwy%-wy%(current_tile%)
        SELECT type%(current_tile%)
        CASE 0 ! TEXT
          max_char%=INT((ww%(current_tile%)-window_x_plus%)/8)
          max_line%=size%(current_tile%)+1
          wh%(current_tile%)=MIN(wh%(current_tile%),window_y_plus%+max_line%*16)
        CASE 1 ! ASCII
          max_char%=INT((ww%(current_tile%)-window_x_plus%)/8)
          max_line%=INT(size%(current_tile%)/max_char%)+1
          wh%(current_tile%)=MIN(wh%(current_tile%),window_y_plus%+max_line%*16)
        CASE 2 ! HEX
          max_char%=INT((ww%(current_tile%)-window_x_plus%)/24)
          max_line%=INT(size%(current_tile%)/max_char%)+1
          wh%(current_tile%)=MIN(wh%(current_tile%),window_y_plus%+max_line%*16)
        CASE 3 ! GRAPHIC
          max_char%=(INT((ww%(current_tile%)-window_x_plus%)/16))*16
          max_line%=INT(size%(current_tile%)/max_char%)+1
          wh%(current_tile%)=MIN(wh%(current_tile%),window_y_plus%+max_line%)
        ENDSELECT
        wh%(current_tile%)=MAX(wh%(current_tile%),min_height%+window_y_plus%)
        y%=y%+window_step%
        IF y%>screen_height% THEN
          y%=mwy%
        ENDIF
        INC current_tile%
      LOOP UNTIL current_tile%>last_used%
    CASE 1 ! TILE
      x_outside%=mww%/INT(SQR(last_used%+1))
      IF x_outside%<min_width%+window_x_plus% THEN
        x_outside%=min_width%+window_x_plus%
      ENDIF
      columns%=INT(mww%/x_outside%)
      rows%=INT((last_used%+1)/columns%)
      IF rows%*columns%<last_used%+1 THEN
        INC rows%
      ENDIF
      y_outside%=INT(mwh%/rows%)
      IF y_outside%<>mwh%/(INT((last_used%+1)/columns%)) THEN
        INC y_outside%
      ENDIF
      IF y_outside%<min_height%+window_y_plus% THEN
        y_outside%=min_height%+window_y_plus%
      ENDIF
      y_jump%=INT(mwh%/rows%)
      IF y_jump%*rows%>mwh% THEN
        y_jump%=INT(mwh%/(rows%+1))
      ENDIF
      current_tile%=0
      tile_x%=0
      tile_y%=0
      DO
        owx%(current_tile%)=wx%(current_tile%)
        owy%(current_tile%)=wy%(current_tile%)
        oww%(current_tile%)=ww%(current_tile%)
        owh%(current_tile%)=wh%(current_tile%)
        x%=tile_x%*x_outside%+mwx%
        y%=tile_y%*y_jump%+mwy%
        wx%(current_tile%)=x%
        wy%(current_tile%)=y%
        ww%(current_tile%)=x_outside%
        wh%(current_tile%)=y_outside%
        INC current_tile%
        INC tile_x%
        IF tile_x%>=columns% THEN
          tile_x%=0
          INC tile_y%
        ENDIF
      LOOP UNTIL current_tile%>last_used%
    CASE 2 ! FULL
      current_tile%=0
      DO
        owx%(current_tile%)=wx%(current_tile%)
        owy%(current_tile%)=wy%(current_tile%)
        oww%(current_tile%)=ww%(current_tile%)
        owh%(current_tile%)=wh%(current_tile%)
        wx%(current_tile%)=mwx%
        wy%(current_tile%)=mwy%
        ww%(current_tile%)=mww%
        wh%(current_tile%)=mwh%
        INC current_tile%
      LOOP UNTIL current_tile%>last_used%
    ENDSELECT
    FOR current_tile%=0 TO last_used%
      current%=current_tile%
      ww%(current%)=INT((ww%(current%)-window_x_plus%)/8)*8+window_x_plus%
      wh%(current%)=INT((wh%(current%)-window_y_plus%)/16)*16+window_y_plus%
      wx%(current%)=INT(wx%(current%)/8)*8-1
      IF owx%(current%)<>wx%(current%) OR owy%(current%)<>wy%(current%) OR oww%(current%)<>ww%(current%) OR owh%(current%)<>wh%(current%) THEN
        flag%=WIND_SET(win%(current%),5,wx%(current%),wy%(current%),ww%(current%),wh%(current%))
        flag%=WIND_GET(win%(current%),4,iwx%(current%),iwy%(current%),iww%(current%),iwh%(current%))
        @size_slider
        @fix_slider
      ENDIF
      flag%=WIND_SET(win%(current%),10,0,0,0,0)
      @multi_check
    NEXT current_tile%
    flag%=WIND_SET(win%(old_topped%),10,0,0,0,0)
    DEFMOUSE 0
  ENDIF
RETURN
> PROCEDURE repair
  er%=WIND_UPDATE(1)
  er%=WIND_UPDATE(3)
  HIDEM
  er%=WIND_GET(win%(current%),11,fx%,fy%,fx2%,fy2%)
  fix_wx%=buffer&(4)
  fix_wy%=buffer&(5)
  fix_ww%=buffer&(6)
  fix_wh%=buffer&(7)
  fix_flag%=RC_INTERSECT(fix_wx%,fix_wy%,fix_ww%,fix_wh%,fx%,fy%,fx2%,fy2%)
  IF fix_flag% THEN
    IF current%=max_window% THEN
      @display_main
    ELSE
      IF current%=max_window%+1 THEN
        IF alert_done%=0 THEN
          @display_alert
        ELSE
          @display_about
        ENDIF
      ELSE
        IF current%=max_window%+2 THEN
          @display_pref
        ELSE
          SELECT type%(current%)
          CASE 0
            @display_text
          CASE 1
            @display_ascii
          CASE 2
            @display_hex
          CASE 3
            @display_graphic
          ENDSELECT
        ENDIF
      ENDIF
    ENDIF
  ENDIF
  fix_done%=0
  DO
    er%=WIND_GET(win%(current%),12,fx%,fy%,fx2%,fy2%)
    IF fx2%+fy2%=0 THEN
      fix_done%=1
    ELSE
      fix_wx%=buffer&(4)
      fix_wy%=buffer&(5)
      fix_ww%=buffer&(6)
      fix_wh%=buffer&(7)
      fix_flag%=RC_INTERSECT(fix_wx%,fix_wy%,fix_ww%,fix_wh%,fx%,fy%,fx2%,fy2%)
      IF fix_flag% THEN
        IF current%=max_window% THEN
          @display_main
        ELSE
          IF current%=max_window%+1 THEN
            IF alert_done%=0 THEN
              @display_alert
            ELSE
              @display_about
            ENDIF
          ELSE
            IF current%=max_window%+2 THEN
              @display_pref
            ELSE
              SELECT type%(current%)
              CASE 0
                @display_text
              CASE 1
                @display_ascii
              CASE 2
                @display_hex
              CASE 3
                @display_graphic
              ENDSELECT
            ENDIF
          ENDIF
        ENDIF
      ENDIF
    ENDIF
  LOOP UNTIL fix_done%=1
  er%=WIND_UPDATE(2)
  er%=WIND_UPDATE(0)
  SHOWM
RETURN
> PROCEDURE display_alert
  CLIP fx%,fy%,fx2%,fy2%
  ~OBJC_DRAW(alert_dialog%,0,4,fx%,fy%,fx2%,fy2%)
RETURN
> PROCEDURE display_about
  CLIP fx%,fy%,fx2%,fy2%
  ~OBJC_DRAW(about_dialog%,0,4,fx%,fy%,fx2%,fy2%)
RETURN
> PROCEDURE display_pref
  CLIP fx%,fy%,fx2%,fy2%
  ~OBJC_DRAW(pref_dialog%,0,4,fx%,fy%,fx2%,fy2%)
RETURN
> PROCEDURE display_main
  CLIP fx%,fy%,fx2%,fy2%
  SELECT iconify%
  CASE 0
    ~OBJC_DRAW(main_dialog%,0,4,fx%,fy%,fx2%,fy2%)
  CASE 1
    ~OBJC_DRAW(alt_dialog%,0,4,fx%,fy%,fx2%,fy2%)
  ENDSELECT
RETURN
> PROCEDURE display_text
  CLIP fx%,fy%,fx2%,fy2%
  DEFFILL 0,2,8
  PBOX fx%,fy%,fx%+fx2%-1,fy%+fy2%-1
  IF size%(current%) THEN
    place%=view%(current%)
    FOR row%=0 TO max_window_line%(current%)-1
      IF place%<size%(current%) THEN
        search_size%=MIN(255,the_width%(current%))
        temp%=place%+search_size%-size%(current%)
        IF temp%>0 THEN
          search_size%=search_size%-temp%
        ENDIF
        search_buffer$=SPACE$(search_size%)
        search_buffer%=VARPTR(search_buffer$)
        BMOVE byte_buffer%(current%)+place%,search_buffer%,search_size%
        test%=INSTR(search_buffer$,CHR$(0))
        IF test%<1 THEN
          test%=INSTR(search_buffer$,CHR$(13))
          IF test%<1 THEN
            test%=INSTR(search_buffer$,CHR$(10))
            IF test%<1 THEN
              test%=search_size%
            ENDIF
          ELSE
            IF MID$(search_buffer$,test%+1,1)=CHR$(10) THEN
              INC test%
            ENDIF
          ENDIF
        ENDIF
        dat$=MID$(search_buffer$,1,test%)
        FOR x%=1 TO LEN(dat$)
          IF ASC(MID$(dat$,x%,1))<32 THEN
            MID$(dat$,x%,1)=" "
          ENDIF
        NEXT x%
        DEFTEXT 1,0,,13
        TEXT iwx%(current%),iwy%(current%)+row%*16+16*0.9,dat$
        place%=place%+test%
      ELSE
        row%=max_window_line%(current%)
      ENDIF
    NEXT row%
  ENDIF
RETURN
> PROCEDURE display_ascii
  CLIP fx%,fy%,fx2%,fy2%
  DEFFILL 0,2,8
  PBOX fx%,fy%,fx%+fx2%-1,fy%+fy2%-1
  IF size%(current%) THEN
    FOR row%=0 TO max_window_line%(current%)-1
      dat$=SPACE$(the_width%(current%))
      place%=view%(current%)+row%*the_width%(current%)
      IF place%<size%(current%) THEN
        the_end%=size%(current%)-place%
        BMOVE byte_buffer%(current%)+place%,V:dat$,MIN(the_width%(current%),the_end%)
        FOR test%=1 TO MIN(the_width%(current%),the_end%)
          IF MID$(dat$,test%,1)=CHR$(0) THEN
            MID$(dat$,test%,1)=CHR$(32)
          ENDIF
        NEXT test%
        DEFTEXT 1,0,,13
        pos%=0
        DO
          TEXT iwx%(current%)+8*pos%,iwy%(current%)+row%*16+16*0.9,MID$(dat$,pos%+1,100)
          pos%=pos%+100
        LOOP UNTIL pos%>the_width%(current%)
      ELSE
        row%=max_window_line%(current%)
      ENDIF
    NEXT row%
  ENDIF
RETURN
> PROCEDURE display_hex
  CLIP fx%,fy%,fx2%,fy2%
  DEFFILL 0,2,8
  PBOX fx%,fy%,fx%+fx2%-1,fy%+fy2%-1
  IF size%(current%) THEN
    FOR row%=0 TO max_window_line%(current%)-1
      place%=view%(current%)+row%*the_width%(current%)
      IF place%<size%(current%) THEN
        the_end%=size%(current%)-place%
        dat$=""
        FOR hex%=0 TO MIN(the_width%(current%),the_end%)-1
          dat$=dat$+HEX$(PEEK(byte_buffer%(current%)+place%+hex%),2)+" "
        NEXT hex%
        DEFTEXT 1,0,,13
        pos%=0
        DO
          TEXT iwx%(current%)+8*pos%,iwy%(current%)+row%*16+16*0.9,MID$(dat$,pos%+1,100)
          pos%=pos%+100
        LOOP UNTIL INT(pos%/3)>the_width%(current%)
      ELSE
        row%=max_window_line%(current%)
      ENDIF
    NEXT row%
  ENDIF
RETURN
> PROCEDURE display_graphic
  CLIP fx%,fy%,fx2%,fy2%
  DEFFILL 0,2,8
  PBOX fx%,fy%,fx%+fx2%-1,fy%+fy2%-1
  place%=byte_buffer%(current%)+view%(current%)
  raster_size%=INT((size%(current%)-view%(current%))/2)*2
  IF raster_size% THEN
    tw%=MIN((raster_size%*8)/screen_bits%,the_width%(current%))
    th%=INT(((raster_size%*8)/screen_bits%)/the_width%(current%))
    source_mfdb%(0)=place%
    source_mfdb%(1)=tw%
    source_mfdb%(2)=th%
    source_mfdb%(3)=tw%/16
    source_mfdb%(5)=screen_bits%
    destination_mfdb%(0)=0
    parameters%(0)=fx%-iwx%(current%)
    parameters%(1)=fy%-iwy%(current%)
    parameters%(2)=MIN(tw%,fx%+fx2%-iwx%(current%))-1
    parameters%(3)=MIN(th%,fy%+fy2%-iwy%(current%))-1
    parameters%(4)=fx%
    parameters%(5)=fy%
    parameters%(6)=fx%+fx2%-1
    parameters%(7)=fy%+fy2%-1
    BITBLT source_mfdb%(),destination_mfdb%(),parameters%()
  ENDIF
RETURN
> PROCEDURE get_offset
  ~OBJC_OFFSET(main_dialog%,object%,rx%,ry%)
  rw%=OB_W(main_dialog%,object%)
  rh%=OB_H(main_dialog%,object%)
RETURN
> PROCEDURE update_main
  IF win%(max_window%)>-1 THEN
    my_buffer&(0)=20
    my_buffer&(3)=win%(max_window%)
    my_buffer&(4)=rx%-2
    my_buffer&(5)=ry%-2
    my_buffer&(6)=rw%+4
    my_buffer&(7)=rh%+4
    ~APPL_WRITE(handle&,16,my_buffer%)
    @multi_check
  ENDIF
RETURN
> PROCEDURE update_display
  IF current%>-1 THEN
    my_buffer&(0)=20
    my_buffer&(3)=win%(current%)
    my_buffer&(4)=iwx%(current%)
    my_buffer&(5)=iwy%(current%)
    my_buffer&(6)=iww%(current%)
    my_buffer&(7)=iwh%(current%)
    ~APPL_WRITE(handle&,16,my_buffer%)
    @multi_check
  ENDIF
RETURN
> PROCEDURE change_display
  IF current%=max_window% THEN
    dialog_button%=t_main_ascii%+new_type%-1
    @process_button
  ELSE
    IF last_used%>-1 THEN
      old_current%=current%
      SELECT all%
      CASE 0
        IF source_file%>-1 THEN
          current%=source_file%
          IF type%(current%)<>new_type% THEN
            type%(current%)=new_type%
            @size_slider
            @fix_slider
          ENDIF
        ENDIF
      CASE 1
        FOR current_set%=0 TO last_used%
          current%=current_set%
          IF pick%(current%) THEN
            IF type%(current%)<>new_type% THEN
              type%(current%)=new_type%
              @size_slider
              @fix_slider
            ENDIF
          ENDIF
        NEXT current_set%
      CASE 2
        FOR current_set%=0 TO last_used%
          current%=current_set%
          IF type%(current%)<>new_type% THEN
            type%(current%)=new_type%
            @size_slider
            @fix_slider
          ENDIF
        NEXT current_set%
      ENDSELECT
      current%=old_current%
    ENDIF
  ENDIF
RETURN
> PROCEDURE title
  IF current%<max_window% THEN
    window_title$=view_name$(current%)+" "+STR$(size%(current%))
    window_title$=MID$(window_title$,1,127)+CHR$(0)
    CHAR{window_title%+current%*128}=window_title$
    flag%=WIND_SET(win%(current%),2,CARD(SWAP(window_title%+current%*128)),CARD(window_title%+current%*128),0,0)
  ENDIF
RETURN
> PROCEDURE info_line
  IF current%<max_window% THEN
    window_info$=STR$(view%(current%))+" <"+STR$(the_width%(current%))+"> "+type$(type%(current%))
    window_info$=MID$(window_info$,1,127)+CHR$(0)
    CHAR{window_info%+current%*128}=window_info$
    flag%=WIND_SET(win%(current%),3,CARD(SWAP(window_info%+current%*128)),CARD(window_info%+current%*128),0,0)
  ENDIF
RETURN
> PROCEDURE size_slider
  old_view%=view%(current%)
  SELECT type%(current%)
  CASE 0 ! TEXT
    max_char%(current%)=INT(iww%(current%)/8)
    max_window_line%(current%)=INT(iwh%(current%)/16)
    the_width%(current%)=max_char%(current%)
    max_row%(current%)=size%(current%)+1
    IF size%(current%)>0 THEN
      view%(current%)=old_view%
      IF view%(current%)>=size%(current%) THEN
        view%(current%)=size%(current%)-1
      ENDIF
      IF max_row%(current%)-max_window_line%(current%)>0 THEN
        slider_position%(current%)=(view%(current%)/size%(current%))*1000
      ELSE
        slider_position%(current%)=0
      ENDIF
    ELSE
      slider_position%(current%)=0
    ENDIF
    IF size%(current%)>0 THEN
      IF max_row%(current%)>max_window_line%(current%) THEN
        slider_size%(current%)=(max_window_line%(current%)/(max_row%(current%)+max_window_line%(current%)))*1000
      ELSE
        slider_size%(current%)=999
      ENDIF
    ELSE
      slider_size%(current%)=1000
    ENDIF
  CASE 1,2 ! ASCII, HEX
    max_char%(current%)=INT(iww%(current%)/8)
    max_window_line%(current%)=INT(iwh%(current%)/16)
    IF type%(current%)=1 THEN
      the_width%(current%)=max_char%(current%)
    ELSE
      the_width%(current%)=INT((max_char%(current%)+1)/3)
    ENDIF
    max_row%(current%)=INT(size%(current%)/the_width%(current%))+1
    IF size%(current%)>0 THEN
      view%(current%)=old_view%
      IF view%(current%)>=size%(current%) THEN
        view%(current%)=size%(current%)-1
      ENDIF
      IF max_row%(current%)-max_window_line%(current%)>0 THEN
        slider_position%(current%)=(view%(current%)/size%(current%))*1000
      ELSE
        slider_position%(current%)=0
      ENDIF
    ELSE
      slider_position%(current%)=0
    ENDIF
    IF size%(current%)>0 THEN
      IF max_row%(current%)>max_window_line%(current%) THEN
        slider_size%(current%)=(max_window_line%(current%)/(max_row%(current%)+max_window_line%(current%)))*1000
      ELSE
        slider_size%(current%)=999
      ENDIF
    ELSE
      slider_size%(current%)=1000
    ENDIF
  CASE 3 ! GRAPHIC
    max_char%(current%)=INT(iww%(current%)/16)*16
    max_window_line%(current%)=iwh%(current%)
    the_width%(current%)=max_char%(current%)
    max_row%(current%)=INT(((size%(current%)*8)/screen_bits%)/the_width%(current%))+1
    IF size%(current%)>0 THEN
      view%(current%)=old_view%
      IF view%(current%)>=size%(current%) THEN
        view%(current%)=size%(current%)-1
      ENDIF
      IF max_row%(current%)-max_window_line%(current%)>0 THEN
        slider_position%(current%)=(view%(current%)/size%(current%))*1000
      ELSE
        slider_position%(current%)=0
      ENDIF
    ELSE
      slider_position%(current%)=0
    ENDIF
    IF size%(current%)>0 THEN
      IF max_row%(current%)>max_window_line%(current%) THEN
        slider_size%(current%)=(max_window_line%(current%)/(max_row%(current%)+max_window_line%(current%)))*1000
      ELSE
        slider_size%(current%)=999
      ENDIF
    ELSE
      slider_size%(current%)=1000
    ENDIF
  ENDSELECT
  flag%=WIND_SET(win%(current%),9,slider_position%(current%),0,0,0)
  flag%=WIND_SET(win%(current%),16,slider_size%(current%),0,0,0)
RETURN
> PROCEDURE init_viewer
  FOR x%=0 TO 9
    test$=CHAR{{OB_SPEC(viewer_dialog%,x%+1)}}
    temp$=" "+viewer$(0,x%)+" "
    l%=LEN(temp$)
    IF l%<14 THEN
      temp$=temp$+SPACE$(14-l%)
    ENDIF
    IF test$<>temp$ THEN
      CHAR{{OB_SPEC(viewer_dialog%,x%+1)}}=temp$
    ENDIF
  NEXT x%
RETURN
> PROCEDURE set_viewer
  IF sys_viewer$<>"" THEN
    temp$=sys_viewer$
    test%=RINSTR(temp$,"\")
    IF test% THEN
      temp_path$=MID$(temp$,1,test%)
      temp_name$=MID$(temp$,test%+1)
    ELSE
      temp_path$="\"
      temp_name$=temp$
    ENDIF
    search_file$=temp_path$+temp_name$+CHR$(0)
    finished%=GEMDOS(78,L:V:search_file$,&X100111)
    IF finished%=0 THEN
      temp%=-1
      FOR x%=0 TO 9
        IF viewer$(0,x%)="              "
          temp%=x%
          x%=9
        ENDIF
      NEXT x%
      IF temp%>-1 THEN
        viewer$(0,9)=temp_name$
        viewer$(1,9)=temp_path$
        @init_viewer
      ENDIF
    ENDIF
  ENDIF
  test$=CHAR{{OB_SPEC(viewer_dialog%,viewer%+1)}}
  temp$=CHAR{{OB_SPEC(main_dialog%,b_main_viewer%)}}
  IF temp$<>test$ THEN
    CHAR{{OB_SPEC(main_dialog%,b_main_viewer%)}}=test$
    object%=b_main_viewer%
    @get_offset
    @update_main
  ENDIF
  temp$=CHAR{{OB_SPEC(main_dialog%,b_main_viewer%)}}
  IF temp$="              " THEN
    IF BTST(OB_STATE(main_dialog%,b_main_view%),3)=0 THEN
      OB_STATE(main_dialog%,b_main_view%)=BSET(OB_STATE(main_dialog%,b_main_view%),3)
      object%=b_main_view%
      @get_offset
      @update_main
    ENDIF
  ELSE
    IF BTST(OB_STATE(main_dialog%,b_main_view%),3) THEN
      OB_STATE(main_dialog%,b_main_view%)=BCLR(OB_STATE(main_dialog%,b_main_view%),3)
      object%=b_main_view%
      @get_offset
      @update_main
    ENDIF
  ENDIF
RETURN
> PROCEDURE viewer_list
  the_dialog%=viewer_dialog%
  max_pick%=10
  current_pick%=viewer%+1
  ~OBJC_OFFSET(main_dialog%,dialog_button%,tx%,ty%)
  rx%=tx%
  ry%=ty%-((current_pick%-1)*pick_height%)
  rw%=OB_W(the_dialog%,0)+1
  rh%=OB_H(the_dialog%,0)+1
  ok%=0
  DO
    IF ry%+rh%>mwy%+mwh% THEN
      ry%=ry%-pick_height%
    ELSE
      ok%=1
    ENDIF
  LOOP UNTIL ok%=1
  IF ry%+rh%<ty%+pick_height% THEN
    ry%=ry%+pick_height%
  ENDIF
  ok%=0
  DO
    IF ry%<mwy% THEN
      ry%=ry%+pick_height%
    ELSE
      ok%=1
    ENDIF
  LOOP UNTIL ok%=1
  IF ry%>ty% THEN
    ry%=ty%
  ENDIF
  OB_X(the_dialog%,0)=rx%
  OB_Y(the_dialog%,0)=ry%
  pick%=current_pick%
  old_pick%=pick%
  IF BTST(OB_STATE(the_dialog%,pick%),3)=0 THEN
    OB_STATE(the_dialog%,pick%)=BSET(OB_STATE(the_dialog%,pick%),0)
  ENDIF
  exit%=0
  er%=WIND_UPDATE(1)
  er%=WIND_UPDATE(3)
  ~FORM_DIAL(0,0,0,0,0,rx%-2,ry%-2,rw%+4,rh%+4)
  ~OBJC_DRAW(the_dialog%,0,4,rx%-2,ry%-2,rw%+4,rh%+4)
  DO
  LOOP UNTIL MOUSEK=0
  DO
    event_type&=EVNT_MULTI(&X100110,2,1,1,0,rx%,ry%,rw%,rh%,0,0,0,0,0,buffer%,1,mx&,my&,button&,key_state&,key&,clicks&)
    IF event_type& AND &X100 THEN ! IN
      button%=OBJC_FIND(the_dialog%,0,4,mx&,my&)
      IF button%>0 THEN
        IF button%<>pick% THEN
          IF pick%>0 THEN
            IF BTST(OB_STATE(the_dialog%,pick%),0)=TRUE! THEN
              OB_STATE(the_dialog%,pick%)=BCLR(OB_STATE(the_dialog%,pick%),0)
              ~OBJC_DRAW(the_dialog%,pick%,4,rx%,ry%,rw%,rh%)
            ENDIF
          ENDIF
          IF BTST(OB_STATE(the_dialog%,button%),3)=0 THEN
            IF BTST(OB_STATE(the_dialog%,button%),0)=0 THEN
              OB_STATE(the_dialog%,button%)=BSET(OB_STATE(the_dialog%,button%),0)
              ~OBJC_DRAW(the_dialog%,button%,4,rx%,ry%,rw%,rh%)
              pick%=button%
            ENDIF
          ELSE
            pick%=0
          ENDIF
        ENDIF
        IF event_type& AND &X10 THEN
          SELECT key_state&
          CASE 1,2 ! SHIFT
            temp_name$=viewer$(0,pick%-1)
            temp_path$=viewer$(1,pick%-1)
            vx%=mx&
            vy%=my&
            DO
            LOOP UNTIL MOUSEK=0
            FILESELECT #"Select viewer",temp_path$+"*.*",temp_name$,temp$
            test%=RINSTR(temp$,"\")
            IF test% THEN
              temp_path$=MID$(temp$,1,test%)
              temp_name$=MID$(temp$,test%+1)
            ELSE
              temp_path$="\"
              temp_name$=temp$
            ENDIF
            ' ~FSETDTA(dta%)
            search_file$=temp_path$+temp_name$+CHR$(0)
            finished%=GEMDOS(78,L:V:search_file$,&X100111)
            ' ~FSETDTA(dta%)
            IF finished%=0 THEN
              viewer$(0,pick%-1)=temp_name$
              viewer$(1,pick%-1)=temp_path$
              @init_viewer
            ENDIF
            SETMOUSE vx%,vy%
            ~OBJC_DRAW(the_dialog%,button%,4,rx%,ry%,rw%,rh%)
          CASE 4 ! CONTROL
            viewer$(0,pick%-1)=""
            viewer$(1,pick%-1)=""
            @init_viewer
          ENDSELECT
        ENDIF
      ENDIF
    ELSE
      exit%=1
    ENDIF
    IF event_type& AND &X10 THEN ! BUTTON
      button%=OBJC_FIND(the_dialog%,0,4,mx&,my&)
      IF button%=0 THEN
        exit%=2
      ELSE
        IF BTST(OB_STATE(the_dialog%,button%),3)=0 THEN
          exit%=2
        ELSE
          exit%=1
        ENDIF
      ENDIF
    ENDIF
  LOOP UNTIL exit%>0
  DO
  LOOP UNTIL MOUSEK=0
  IF pick% THEN
    OB_STATE(the_dialog%,pick%)=BCLR(OB_STATE(the_dialog%,pick%),0)
  ENDIF
  ~FORM_DIAL(3,0,0,0,0,rx%-2,ry%-2,rw%+4,rh%+4)
  er%=WIND_UPDATE(2)
  er%=WIND_UPDATE(0)
  IF old_pick%<>pick% AND exit%=2 THEN
    viewer%=pick%-1
  ENDIF
  @set_viewer
RETURN
> PROCEDURE view
  temp_name$=TRIM$(viewer$(0,viewer%))
  temp_path$=viewer$(1,viewer%)
  ' ~FSETDTA(dta%)
  search_file$=temp_path$+temp_name$+CHR$(0)
  finished%=GEMDOS(78,L:V:search_file$,&X100111)
  ' ~FSETDTA(dta%)
  IF finished%=0 THEN
    IF source_file%>-1 THEN
      temp_name$=view_name$(source_file%)
      temp_path$=view_path$(source_file%)
    ELSE
      @which_window
      IF current%>-1 AND current%<max_window% THEN
        temp_name$=view_name$(current%)
        temp_path$=view_path$(current%)
      ELSE
        FILESELECT #"Select file to send",view_path$+"*.*",view_name$,temp_view$
        test%=RINSTR(temp_view$,"\")
        IF test% THEN
          temp_path$=MID$(temp_view$,1,test%)
          temp_name$=MID$(temp_view$,test%+1)
        ELSE
          temp_path$="\"
          temp_name$=temp_view$
        ENDIF
      ENDIF
    ENDIF
    IF temp_name$<>"" THEN
      ' ~FSETDTA(dta%)
      search_file$=temp_path$+temp_name$+CHR$(0)
      finished%=GEMDOS(78,L:V:search_file$,&X100111)
      ' ~FSETDTA(dta%)
      IF finished%=0 THEN
        other_path$=temp_path$
        other_name$=temp_name$
        @do_view
      ENDIF
    ENDIF
  ELSE
    '          ........................................
    alert$(0)=""
    alert$(1)="Sorry, but I could not find"
    alert$(2)="'"+temp_name$+"', try setting it again,"
    alert$(3)="or using another application."
    alert$(4)=""
    alert$(5)=""
    alert$(6)="OK"
    alert$(7)=""
    alert_button%=2
    @alert
  ENDIF
RETURN
> PROCEDURE do_view
  view_ok%=0
  viewer_name$=TRIM$(viewer$(0,viewer%))
  test%=RINSTR(viewer_name$,".")
  IF test%>1 THEN
    viewer_name$=MID$(viewer_name$,1,test%-1)
  ENDIF
  temp_size%=LEN(viewer_name$)
  IF temp_size%<8 THEN
    viewer_name$=viewer_name$+SPACE$(8-temp_size%)+CHR$(0)
  ENDIF
  tail$=other_path$+other_name$+CHR$(0)
  view_id&=APPL_FIND(viewer_name$)
  IF view_id&>-1 THEN
    my_buffer&(0)=&HDF00 ! VIEW MESSAGE ?
    my_buffer&(1)=handle&
    my_buffer&(2)=LEN(tail$)+1
    my_buffer&(3)=0
    CHAR{my_buffer%+16}=tail$
    flag&=APPL_WRITE(view_id&,my_buffer%+16+my_buffer&(2),my_buffer%)
    SELECT flag&
    CASE -1 ! APPL NOT FOUND
      view_ok%=1
    CASE 0  ! MESSAGE ERROR
      view_ok%=2
      my_buffer&(0)=&HDF01 ! VIEW FAILED ?
      my_buffer&(1)=handle&
      my_buffer&(2)=LEN(tail$)+1
      my_buffer&(3)=0
      CHAR{my_buffer%+16}=tail$
      flag&=APPL_WRITE(view_id&,my_buffer%+16+my_buffer&(2),my_buffer%)
      FOR x%=0 TO 9
        c_type&=EVNT_MULTI(&X110000,0,0,0,0,0,0,0,0,0,0,0,0,0,buffer%,100,mx&,my&,button&,key_state&,key&,clicks&)
        IF c_type& AND &X10000 THEN
          command%=buffer&(0)
          IF command%=&H5601 THEN
            ' PRINT "VIEW FAILED MESSAGE:";buffer&(5),buffer&(7)
          ENDIF
        ENDIF
      NEXT x%
    CASE 1  ! MESSAGE SENT OK
    ENDSELECT
  ELSE
    view_ok%=1
  ENDIF
  IF view_ok%>0 THEN
    '          ........................................
    alert$(0)=""
    alert$(1)=""
    SELECT view_ok%
    CASE 1
      alert$(2)="'"+TRIM$(viewer$(0,viewer%))+"' not found."
    CASE 2
      alert$(2)="Error calling '"+TRIM$(viewer$(0,viewer%))+"'."
    ENDSELECT
    alert$(3)=""
    alert$(4)=""
    alert$(5)=""
    alert$(6)="OK"
    alert$(7)=""
    alert_button%=2
    @alert
  ENDIF
RETURN
> PROCEDURE change_data
  SELECT old_dat_type%
  CASE 0 ! ASCII
    SELECT dat_type%
    CASE 1 ! HEX
      IF source_text$<>"" THEN
        temp$=source_text$
        @change_ascii_to_hex
        source_text$=change$
      ENDIF
      IF dest_text$<>"" THEN
        temp$=dest_text$
        @change_ascii_to_hex
        dest_text$=change$
      ENDIF
    CASE 2 ! BINARY
      IF source_text$<>"" THEN
        temp$=source_text$
        @change_ascii_to_hex
        temp$=change$
        @change_hex_to_binary
        source_text$=change$
      ENDIF
      IF dest_text$<>"" THEN
        temp$=dest_text$
        @change_ascii_to_hex
        temp$=change$
        @change_hex_to_binary
        dest_text$=change$
      ENDIF
    ENDSELECT
  CASE 1 ! HEX
    SELECT dat_type%
    CASE 0 ! ASCII
      IF source_text$<>"" THEN
        temp$=source_text$
        @change_hex_to_ascii
        source_text$=change$
      ENDIF
      IF dest_text$<>"" THEN
        temp$=dest_text$
        @change_hex_to_ascii
        dest_text$=change$
      ENDIF
    CASE 2 ! BINARY
      IF source_text$<>"" THEN
        temp$=source_text$
        @change_hex_to_binary
        source_text$=change$
      ENDIF
      IF dest_text$<>"" THEN
        temp$=dest_text$
        @change_hex_to_binary
        dest_text$=change$
      ENDIF
    ENDSELECT
  CASE 2 ! BINARY
    SELECT dat_type%
    CASE 0 ! ASCII
      IF source_text$<>"" THEN
        temp$=source_text$
        @change_binary_to_ascii
        source_text$=change$
      ENDIF
      IF dest_text$<>"" THEN
        temp$=dest_text$
        @change_binary_to_ascii
        dest_text$=change$
      ENDIF
    CASE 1 ! HEX
      IF source_text$<>"" THEN
        temp$=source_text$
        @change_binary_to_ascii
        temp$=change$
        @change_ascii_to_hex
        source_text$=change$
      ENDIF
      IF dest_text$<>"" THEN
        temp$=dest_text$
        @change_binary_to_ascii
        temp$=change$
        @change_ascii_to_hex
        dest_text$=change$
      ENDIF
    ENDSELECT
  ENDSELECT
RETURN
> PROCEDURE change_ascii_to_hex
  change$=""
  chars%=MIN(LEN(temp$),16)
  change%=1
  DO
    change$=change$+HEX$(ASC(MID$(temp$,change%,1)),2)
    INC change%
  LOOP UNTIL change%>chars%
RETURN
> PROCEDURE change_hex_to_ascii
  temp$=UPPER$(temp$)
  change$=""
  chars%=INT(LEN(temp$)/2)
  change%=0
  IF chars%>0 THEN
    DO
      char1%=ASC(MID$(temp$,change%*2+1,1))
      char2%=ASC(MID$(temp$,change%*2+2,1))
      IF (char1%>47 AND char1%<58) OR (char1%>64 AND char1%<71) THEN
        IF (char2%>47 AND char2%<58) OR (char2%>64 AND char2%<71) THEN
          hi%=ASC(MID$(temp$,change%*2+1,1))-48
          lo%=ASC(MID$(temp$,change%*2+2,1))-48
          IF hi%>9 THEN
            hi%=hi%-7
          ENDIF
          IF lo%>9 THEN
            lo%=lo%-7
          ENDIF
          value%=hi%*16+lo%
          change$=change$+CHR$(value%)
          INC change%
        ELSE
          change%=chars%
        ENDIF
      ELSE
        change%=chars%
      ENDIF
    LOOP UNTIL change%=chars%
  ENDIF
RETURN
> PROCEDURE change_hex_to_binary
  temp$=UPPER$(temp$)
  change$=""
  chars%=MIN(LEN(temp$),8)
  change%=1
  IF chars%>0 THEN
    DO
      char%=ASC(MID$(temp$,change%,1))
      IF (char%>47 AND char%<58) OR (char%>64 AND char%<71) THEN
        value%=char%-48
        IF value%>9 THEN
          value%=value%-7
        ENDIF
        FOR bit%=0 TO 3
          IF BTST(value%,3-bit%) THEN
            change$=change$+"1"
          ELSE
            change$=change$+"0"
          ENDIF
        NEXT bit%
        INC change%
      ELSE
        change%=chars%+1
      ENDIF
    LOOP UNTIL change%>chars%
  ENDIF
RETURN
> PROCEDURE change_binary_to_ascii
  temp$=UPPER$(temp$)
  change$=""
  chars%=INT(LEN(temp$)/8)
  change%=0
  IF chars%>0 THEN
    good_flag%=1
    FOR x%=0 TO chars%-1
      value%=0
      FOR y%=0 TO 7
        IF MID$(temp$,x%*8+(7-y%)+1,1)="1" THEN
          value%=BSET(value%,y%)
        ELSE
          IF MID$(temp$,x%*8+(7-y%)+1,1)="0" OR MID$(temp$,x%*8+(7-y%)+1,1)="?" THEN
          ELSE
            y%=7
            x%=chars%-1
            good_flag%=0
          ENDIF
        ENDIF
      NEXT y%
      IF good_flag%=1 THEN
        change$=change$+CHR$(value%)
      ENDIF
    NEXT x%
  ENDIF
RETURN
> PROCEDURE set_iconify
  iconify%=1
  current%=max_window%
  ww%(current%)=alt_ww%
  wh%(current%)=alt_wh%
  flag%=WIND_CLOSE(win%(current%))
  ' ~GRAF_SHRINKBOX(wx%(current%),wy%(current%),ww%(current%),wh%(current%),wx%(current%),wy%(current%),main_ww%,main_wh%)
  flag%=WIND_OPEN(win%(current%),wx%(current%),wy%(current%),ww%(current%),wh%(current%))
  flag%=WIND_SET(win%(current%),5,wx%(current%),wy%(current%),ww%(current%),wh%(current%))
  flag%=WIND_GET(win%(current%),4,iwx%(current%),iwy%(current%),iww%(current%),iwh%(current%))
  OB_X(alt_dialog%,0)=iwx%(max_window%)
  OB_Y(alt_dialog%,0)=iwy%(max_window%)
  @update_display
  FOR current_iconify%=0 TO last_used%
    current%=current_iconify%
    status%(current%)=0
    flag%=WIND_CLOSE(win%(current%))
    @multi_check
  NEXT current_iconify%
RETURN
> PROCEDURE clr_iconify
  iconify%=0
  current%=max_window%
  ww%(current%)=main_ww%
  wh%(current%)=main_wh%
  flag%=WIND_CLOSE(win%(current%))
  ' ~GRAF_GROWBOX(wx%(current%),wy%(current%),alt_ww%,alt_wh%,wx%(current%),wy%(current%),ww%(current%),wh%(current%))
  flag%=WIND_SET(win%(current%),5,wx%(current%),wy%(current%),ww%(current%),wh%(current%))
  flag%=WIND_OPEN(win%(current%),wx%(current%),wy%(current%),ww%(current%),wh%(current%))
  flag%=WIND_GET(win%(current%),4,iwx%(current%),iwy%(current%),iww%(current%),iwh%(current%))
  @update_display
  FOR current_iconify%=0 TO last_used%
    current%=current_iconify%
    status%(current%)=1
    flag%=WIND_OPEN(win%(current%),wx%(current%),wy%(current%),ww%(current%),wh%(current%))
    @multi_check
  NEXT current_iconify%
  flag%=WIND_SET(win%(max_window%),10,0,0,0,0)
RETURN
> PROCEDURE set_button
  OB_STATE(main_dialog%,b_main_set%)=BSET(OB_STATE(main_dialog%,b_main_set%),0)
  object%=b_main_set%
  @get_offset
  @update_main
  DO
  LOOP UNTIL MOUSEK=0
  IF last_used%>-1 THEN
    SELECT all%
    CASE 0
      IF current%<>max_window% THEN
        type%(current%)=window_type%
        @set_button_size
        @info_line
        @update_display
      ELSE
        IF source_file%>-1 THEN
          current%=source_file%
          type%(current%)=window_type%
          @set_button_size
          @info_line
          @update_display
        ENDIF
      ENDIF
    CASE 1
      FOR set%=0 TO last_used%
        current%=set%
        IF pick%(current%) THEN
          type%(current%)=window_type%
          @set_button_size
          @info_line
          @update_display
        ENDIF
      NEXT set%
    CASE 2
      FOR set%=0 TO last_used%
        current%=set%
        type%(current%)=window_type%
        @set_button_size
        @info_line
        @update_display
      NEXT set%
    ENDSELECT
  ENDIF
  OB_STATE(main_dialog%,b_main_set%)=BCLR(OB_STATE(main_dialog%,b_main_set%),0)
  object%=b_main_set%
  @get_offset
  @update_main
RETURN
> PROCEDURE set_button_size
  IF width_value%=0 THEN
    temp_width%=iww%(current%)
  ELSE
    SELECT type%(current%)
    CASE 0 ! TEXT
      temp_width%=width_value%*8
    CASE 1 ! ASCII
      temp_width%=width_value%*8
    CASE 2 ! HEX
      temp_width%=width_value%*8*3-1
    CASE 3 ! GRAPHICS
      temp_width%=width_value%
    ENDSELECT
  ENDIF
  IF temp_width%<min_width%+window_x_plus% THEN
    temp_width%=min_width%+window_x_plus%
  ENDIF
  ww%(current%)=temp_width%+window_x_plus%
  wh%(current%)=mwh%
  SELECT type%(current%)
  CASE 0 ! TEXT
    max_in_width%=ww%(current%)-window_x_plus%
    max_in_height%=mwy%+mwh%-(wy%(current%)+window_y_plus%)
    max_char%=INT(max_in_width%/8)
    IF max_char%>=size%(current%) THEN
      max_char%=size%(current%)
      max_line%=1
    ELSE
      max_line%=size%(current%)+1
    ENDIF
    IF max_line%*16>max_in_height% THEN
      max_line%=INT(max_in_height%/16)
    ENDIF
    ww%(current%)=max_char%*8+window_x_plus%
    wh%(current%)=max_line%*16+window_y_plus%
  CASE 1 ! ASCII
    max_in_width%=ww%(current%)-window_x_plus%
    max_in_height%=mwy%+mwh%-(wy%(current%)+window_y_plus%)
    max_char%=INT(max_in_width%/8)
    IF max_char%>=size%(current%) THEN
      max_char%=size%(current%)
      max_line%=1
    ELSE
      max_line%=INT(size%(current%)/max_char%)+1
    ENDIF
    IF max_line%*16>max_in_height% THEN
      max_line%=INT(max_in_height%/16)
    ENDIF
    ww%(current%)=max_char%*8+window_x_plus%
    wh%(current%)=max_line%*16+window_y_plus%
  CASE 2 ! HEX
    max_in_width%=ww%(current%)-window_x_plus%
    max_in_height%=mwy%+mwh%-(wy%(current%)+window_y_plus%)
    max_char%=INT(((max_in_width%+8)/3)/8)
    IF max_char%>=size%(current%) THEN
      max_char%=size%(current%)
      max_line%=1
    ELSE
      max_line%=INT(size%(current%)/max_char%)+1
    ENDIF
    IF max_line%*16>max_in_height% THEN
      max_line%=INT(max_in_height%/16)
    ENDIF
    ww%(current%)=((max_char%*3)-1)*8+window_x_plus%
    wh%(current%)=max_line%*16+window_y_plus%
  CASE 3 ! GRAPHIC
    max_in_width%=INT((ww%(current%)-window_x_plus%)/16)*16
    max_in_height%=mwy%+mwh%-(wy%(current%)+window_y_plus%)
    pixels%=(max_in_width%*screen_bits%)/8
    max_char%=pixels%
    IF max_char%>=size%(current%) THEN
      max_char%=size%(current%)
      max_line%=1
    ELSE
      max_line%=INT(size%(current%)/max_char%)+1
    ENDIF
    IF max_line%>max_in_height% THEN
      max_line%=max_in_height%
    ENDIF
    ww%(current%)=((max_char%*8)/screen_bits%)+window_x_plus%
    wh%(current%)=max_line%+window_y_plus%
  ENDSELECT
  IF ww%(current%)<min_width%+window_x_plus% THEN
    ww%(current%)=min_width%+window_x_plus%
  ENDIF
  IF wh%(current%)<min_height%+window_y_plus% THEN
    wh%(current%)=min_height%+window_y_plus%
  ENDIF
  wx%(current%)=INT(wx%(current%)/8)*8-1
  IF wx%(current%)<0 THEN
    wx%(current%)=0
  ENDIF
  flag%=WIND_SET(win%(current%),5,wx%(current%),wy%(current%),ww%(current%),wh%(current%))
  flag%=WIND_GET(win%(current%),4,iwx%(current%),iwy%(current%),iww%(current%),iwh%(current%))
  @size_slider
RETURN
> PROCEDURE get_text
  source_text$=CHAR{{OB_SPEC(main_dialog%,t_main_data%)}}
  dest_text$=CHAR{{OB_SPEC(main_dialog%,t_main_mask%)}}
  start_value%=VAL(CHAR{{OB_SPEC(main_dialog%,t_main_start%)}})
  stop_value%=VAL(CHAR{{OB_SPEC(main_dialog%,t_main_stop%)}})
  every_value%=VAL(CHAR{{OB_SPEC(main_dialog%,t_main_every%)}})
  size_value%=VAL(CHAR{{OB_SPEC(main_dialog%,t_main_size%)}})
  width_value%=VAL(CHAR{{OB_SPEC(main_dialog%,t_main_width%)}})
RETURN
> PROCEDURE all_set
  @set_text
  @set_type
  @set_shift
  @set_case
  @set_match
  @set_source
  @set_dest
  @set_open
  @set_display
  @set_op
  @set_size
  @set_windows
  @init_viewer
  @set_viewer
  @set_pref
RETURN
> PROCEDURE set_menu
  IF last_used%=max_window%-1 THEN
    OB_STATE(file_dialog%,3)=BSET(OB_STATE(file_dialog%,3),3) ! OPEN
    OB_STATE(file_dialog%,4)=BSET(OB_STATE(file_dialog%,4),3) ! NEW
  ELSE
    OB_STATE(file_dialog%,3)=BCLR(OB_STATE(file_dialog%,3),3) ! OPEN
    OB_STATE(file_dialog%,4)=BCLR(OB_STATE(file_dialog%,4),3) ! NEW
  ENDIF
  IF source_text$="" THEN
    OB_STATE(edit_dialog%,3)=BSET(OB_STATE(edit_dialog%,3),3) ! SEARCH
  ELSE
    OB_STATE(edit_dialog%,3)=BCLR(OB_STATE(edit_dialog%,3),3) ! SEARCH
  ENDIF
  IF last_used%>-1 THEN
    OB_STATE(options_dialog%,1)=BCLR(OB_STATE(options_dialog%,1),3) ! TILE
    IF all%=0 AND source_file%=-1 THEN
      OB_STATE(edit_dialog%,12)=BSET(OB_STATE(edit_dialog%,12),3) ! COPY
      OB_STATE(edit_dialog%,14)=BSET(OB_STATE(edit_dialog%,14),3) ! DELETE
      OB_STATE(edit_dialog%,16)=BSET(OB_STATE(edit_dialog%,16),3) ! GOTO
      OB_STATE(popup_dialog%,16)=BSET(OB_STATE(popup_dialog%,16),3) ! COPY
      OB_STATE(popup_dialog%,18)=BSET(OB_STATE(popup_dialog%,18),3) ! DELETE
      OB_STATE(popup_dialog%,20)=BSET(OB_STATE(popup_dialog%,20),3) ! GOTO
    ELSE
      IF source_file%=-1 THEN
        OB_STATE(edit_dialog%,12)=BSET(OB_STATE(edit_dialog%,12),3) ! COPY
        OB_STATE(popup_dialog%,16)=BSET(OB_STATE(popup_dialog%,16),3) ! COPY
      ELSE
        OB_STATE(edit_dialog%,12)=BCLR(OB_STATE(edit_dialog%,12),3) ! COPY
        OB_STATE(popup_dialog%,16)=BCLR(OB_STATE(popup_dialog%,16),3) ! COPY
      ENDIF
      IF all%=1 AND pick_total%=0 THEN
        OB_STATE(edit_dialog%,14)=BSET(OB_STATE(edit_dialog%,14),3) ! DELETE
        OB_STATE(edit_dialog%,16)=BSET(OB_STATE(edit_dialog%,16),3) ! GOTO
        OB_STATE(popup_dialog%,18)=BSET(OB_STATE(popup_dialog%,18),3) ! DELETE
        OB_STATE(popup_dialog%,20)=BSET(OB_STATE(popup_dialog%,20),3) ! GOTO
      ELSE
        OB_STATE(edit_dialog%,14)=BCLR(OB_STATE(edit_dialog%,14),3) ! DELETE
        OB_STATE(edit_dialog%,16)=BCLR(OB_STATE(edit_dialog%,16),3) ! GOTO
        OB_STATE(popup_dialog%,18)=BCLR(OB_STATE(popup_dialog%,18),3) ! DELETE
        OB_STATE(popup_dialog%,20)=BCLR(OB_STATE(popup_dialog%,20),3) ! GOTO
      ENDIF
    ENDIF
    IF all%=0 THEN
      IF source_file%=-1 THEN
        @menu_replace_lite
        @menu_file_lite
        @menu_lite
      ELSE
        @menu_replace_normal
        @menu_file_normal
        @menu_normal
      ENDIF
    ELSE
      IF all%=1 AND pick_total%=0 THEN
        @menu_replace_lite
        @menu_file_lite
        @menu_lite
      ELSE
        @menu_replace_normal
        @menu_file_normal
        @menu_normal
      ENDIF
    ENDIF
  ELSE
    OB_STATE(edit_dialog%,12)=BSET(OB_STATE(edit_dialog%,12),3)     ! COPY
    OB_STATE(edit_dialog%,14)=BSET(OB_STATE(edit_dialog%,14),3)     ! DELETE
    OB_STATE(edit_dialog%,16)=BSET(OB_STATE(edit_dialog%,16),3)     ! GOTO
    OB_STATE(options_dialog%,1)=BSET(OB_STATE(options_dialog%,1),3) ! TILE
    OB_STATE(popup_dialog%,16)=BSET(OB_STATE(popup_dialog%,16),3) ! COPY
    OB_STATE(popup_dialog%,18)=BSET(OB_STATE(popup_dialog%,18),3) ! DELETE
    OB_STATE(popup_dialog%,20)=BSET(OB_STATE(popup_dialog%,20),3) ! GOTO
    @menu_replace_lite
    @menu_file_lite
    @menu_lite
  ENDIF
RETURN
> PROCEDURE menu_replace_normal
  IF source_text$="" THEN
    @menu_replace_lite
  ELSE
    IF dest_text$="" THEN
      @menu_replace_lite
    ELSE
      OB_STATE(edit_dialog%,4)=BCLR(OB_STATE(edit_dialog%,4),3) ! REPLACE
      OB_STATE(edit_dialog%,5)=BCLR(OB_STATE(edit_dialog%,5),3) ! REPLACE ALL
      OB_STATE(edit_dialog%,6)=BCLR(OB_STATE(edit_dialog%,6),3) ! ADD
      OB_STATE(edit_dialog%,7)=BCLR(OB_STATE(edit_dialog%,7),3) ! ADD ALL
      OB_STATE(popup_dialog%,8)=BCLR(OB_STATE(popup_dialog%,8),3) ! REPLACE
      OB_STATE(popup_dialog%,9)=BCLR(OB_STATE(popup_dialog%,9),3) ! REPLACE ALL
      OB_STATE(popup_dialog%,10)=BCLR(OB_STATE(popup_dialog%,10),3) ! ADD
      OB_STATE(popup_dialog%,11)=BCLR(OB_STATE(popup_dialog%,11),3) ! ADD ALL
    ENDIF
  ENDIF
RETURN
> PROCEDURE menu_replace_lite
  OB_STATE(edit_dialog%,4)=BSET(OB_STATE(edit_dialog%,4),3) ! REPLACE
  OB_STATE(edit_dialog%,5)=BSET(OB_STATE(edit_dialog%,5),3) ! REPLACE ALL
  OB_STATE(edit_dialog%,6)=BSET(OB_STATE(edit_dialog%,6),3) ! ADD
  OB_STATE(edit_dialog%,7)=BSET(OB_STATE(edit_dialog%,7),3) ! ADD ALL
  OB_STATE(popup_dialog%,8)=BSET(OB_STATE(popup_dialog%,8),3) ! REPLACE
  OB_STATE(popup_dialog%,9)=BSET(OB_STATE(popup_dialog%,9),3) ! REPLACE ALL
  OB_STATE(popup_dialog%,10)=BSET(OB_STATE(popup_dialog%,10),3) ! ADD
  OB_STATE(popup_dialog%,11)=BSET(OB_STATE(popup_dialog%,11),3) ! ADD ALL
RETURN
> PROCEDURE menu_file_normal
  OB_STATE(file_dialog%,5)=BCLR(OB_STATE(file_dialog%,5),3) ! MERGE
  OB_STATE(file_dialog%,6)=BCLR(OB_STATE(file_dialog%,6),3) ! CLOSE
  OB_STATE(file_dialog%,7)=BCLR(OB_STATE(file_dialog%,7),3) ! SAVE
  OB_STATE(file_dialog%,9)=BCLR(OB_STATE(file_dialog%,9),3) ! PRINT
RETURN
> PROCEDURE menu_file_lite
  OB_STATE(file_dialog%,5)=BSET(OB_STATE(file_dialog%,5),3) ! MERGE
  OB_STATE(file_dialog%,6)=BSET(OB_STATE(file_dialog%,6),3) ! CLOSE
  OB_STATE(file_dialog%,7)=BSET(OB_STATE(file_dialog%,7),3) ! SAVE
  OB_STATE(file_dialog%,9)=BSET(OB_STATE(file_dialog%,9),3) ! PRINT
RETURN
> PROCEDURE menu_normal
  IF source_text$="" THEN
    @menu_lite
  ELSE
    OB_STATE(edit_dialog%,1)=BCLR(OB_STATE(edit_dialog%,1),3) ! FIND
    OB_STATE(edit_dialog%,2)=BCLR(OB_STATE(edit_dialog%,2),3) ! NEXT
    OB_STATE(edit_dialog%,9)=BCLR(OB_STATE(edit_dialog%,9),3) ! ASCII CHANGE
    OB_STATE(edit_dialog%,10)=BCLR(OB_STATE(edit_dialog%,10),3) ! BIT CHANGE
    OB_STATE(edit_dialog%,13)=BCLR(OB_STATE(edit_dialog%,13),3) ! INSERT
    OB_STATE(popup_dialog%,6)=BCLR(OB_STATE(popup_dialog%,6),3) ! FIND
    OB_STATE(popup_dialog%,7)=BCLR(OB_STATE(popup_dialog%,6),7) ! NEXT
    OB_STATE(popup_dialog%,13)=BCLR(OB_STATE(popup_dialog%,6),13) ! ASCII CHANGE
    OB_STATE(popup_dialog%,14)=BCLR(OB_STATE(popup_dialog%,6),14) ! BIT CHANGE
    OB_STATE(popup_dialog%,17)=BCLR(OB_STATE(popup_dialog%,6),17) ! INSERT
  ENDIF
RETURN
> PROCEDURE menu_lite
  OB_STATE(edit_dialog%,1)=BSET(OB_STATE(edit_dialog%,1),3) ! FIND
  OB_STATE(edit_dialog%,2)=BSET(OB_STATE(edit_dialog%,2),3) ! NEXT
  OB_STATE(edit_dialog%,9)=BSET(OB_STATE(edit_dialog%,9),3) ! ASCII CHANGE
  OB_STATE(edit_dialog%,10)=BSET(OB_STATE(edit_dialog%,10),3) ! BIT CHANGE
  OB_STATE(edit_dialog%,13)=BSET(OB_STATE(edit_dialog%,13),3) ! INSERT
  OB_STATE(popup_dialog%,6)=BSET(OB_STATE(popup_dialog%,6),3) ! FIND
  OB_STATE(popup_dialog%,7)=BSET(OB_STATE(popup_dialog%,6),7) ! NEXT
  OB_STATE(popup_dialog%,13)=BSET(OB_STATE(popup_dialog%,6),13) ! ASCII CHANGE
  OB_STATE(popup_dialog%,14)=BSET(OB_STATE(popup_dialog%,6),14) ! BIT CHANGE
  OB_STATE(popup_dialog%,17)=BSET(OB_STATE(popup_dialog%,6),17) ! INSERT
RETURN
> PROCEDURE set_pref
  SELECT alerts%
  CASE 0 ! CENTER
    object%=b_pref_center%
    state%=FALSE
    bit%=0
    @do_set_pref
    object%=b_pref_mouse%
    state%=TRUE
    bit%=0
    @do_set_pref
    object%=b_pref_last%
    state%=TRUE
    bit%=0
    @do_set_pref
  CASE 1 ! MOUSE
    object%=b_pref_center%
    state%=TRUE
    bit%=0
    @do_set_pref
    object%=b_pref_mouse%
    state%=FALSE
    bit%=0
    @do_set_pref
    object%=b_pref_last%
    state%=TRUE
    bit%=0
    @do_set_pref
  CASE 2 ! LAST
    object%=b_pref_center%
    state%=TRUE
    bit%=0
    @do_set_pref
    object%=b_pref_mouse%
    state%=TRUE
    bit%=0
    @do_set_pref
    object%=b_pref_last%
    state%=FALSE
    bit%=0
    @do_set_pref
  ENDSELECT
  SELECT where%
  CASE 0 ! PRINTER
    object%=b_pref_printer%
    state%=FALSE
    bit%=0
    @do_set_pref
    object%=b_pref_file%
    state%=TRUE
    bit%=0
    @do_set_pref
  CASE 1 ! FILE
    object%=b_pref_printer%
    state%=TRUE
    bit%=0
    @do_set_pref
    object%=b_pref_file%
    state%=FALSE
    bit%=0
    @do_set_pref
  ENDSELECT
  object%=b_pref_leaving%
  IF alert_leaving%=1 THEN
    state%=FALSE
  ELSE
    state%=TRUE
  ENDIF
  bit%=2
  @do_set_pref
  object%=b_pref_deleting%
  IF alert_deleting%=1 THEN
    state%=FALSE
  ELSE
    state%=TRUE
  ENDIF
  bit%=2
  @do_set_pref
RETURN
> PROCEDURE do_set_pref
  IF BTST(OB_STATE(pref_dialog%,object%),bit%)=state% THEN
    OB_STATE(pref_dialog%,object%)=BCHG(OB_STATE(pref_dialog%,object%),bit%)
    @get_pref_offset
    @update_pref
  ENDIF
RETURN
> PROCEDURE set_text
  SELECT dat_type%
  CASE 1 ! HEX
    IF LEN(source_text$) THEN
      source_text$=UPPER$(source_text$)
      size%=LEN(source_text$)
      place%=size%
      FOR char_check%=1 TO size%
        char%=ASC(MID$(source_text$,char_check%,1))
        IF (char%>47 AND char%<58) OR (char%>64 AND char%<71) THEN
        ELSE
          place%=char_check%-1
          char_check%=size%
        ENDIF
      NEXT char_check%
      IF place%=0 THEN
        source_text$=""
      ELSE
        IF place%<>size% THEN
          source_text$=MID$(source_text$,1,place%)
        ENDIF
      ENDIF
    ENDIF
    IF LEN(dest_text$) THEN
      dest_text$=UPPER$(dest_text$)
      size%=LEN(dest_text$)
      place%=size%
      FOR char_check%=1 TO size%
        char%=ASC(MID$(dest_text$,char_check%,1))
        IF (char%>47 AND char%<58) OR (char%>64 AND char%<71) THEN
        ELSE
          place%=char_check%-1
          char_check%=size%
        ENDIF
      NEXT char_check%
      IF place%=0 THEN
        dest_text$=""
      ELSE
        IF place%<>size% THEN
          dest_text$=MID$(dest_text$,1,place%)
        ENDIF
      ENDIF
    ENDIF
  CASE 2 ! BINARY
    IF LEN(source_text$) THEN
      size%=LEN(source_text$)
      place%=size%
      FOR char_check%=1 TO size%
        char%=ASC(MID$(source_text$,char_check%,1))
        IF char%=48 OR char%=49 OR char%=63 THEN
        ELSE
          place%=char_check%-1
          char_check%=size%
        ENDIF
      NEXT char_check%
      IF place%=0 THEN
        source_text$=""
      ELSE
        IF place%<>size% THEN
          source_text$=MID$(source_text$,1,place%)
        ENDIF
      ENDIF
    ENDIF
    IF LEN(dest_text$) THEN
      size%=LEN(dest_text$)
      place%=size%
      FOR char_check%=1 TO size%
        char%=ASC(MID$(dest_text$,char_check%,1))
        IF char%=48 OR char%=49 OR char%=63 THEN
        ELSE
          place%=char_check%-1
          char_check%=size%
        ENDIF
      NEXT char_check%
      IF place%=0 THEN
        dest_text$=""
      ELSE
        IF place%<>size% THEN
          dest_text$=MID$(dest_text$,1,place%)
        ENDIF
      ENDIF
    ENDIF
  ENDSELECT
  temp$=CHAR{{OB_SPEC(main_dialog%,t_main_data%)}}
  IF source_text$<>temp$ THEN
    CHAR{{OB_SPEC(main_dialog%,t_main_data%)}}=source_text$
    object%=t_main_data%
    @get_offset
    @update_main
  ENDIF
  old_find$=find$
  find$=source_text$
  IF old_find$<>find$ THEN
    FOR x%=0 TO last_used%
      found%(x%)=-1
      search%(x%)=-1
    NEXT x%
  ENDIF
  temp$=CHAR{{OB_SPEC(main_dialog%,t_main_mask%)}}
  IF dest_text$<>temp$ THEN
    CHAR{{OB_SPEC(main_dialog%,t_main_mask%)}}=dest_text$
    object%=t_main_mask%
    @get_offset
    @update_main
  ENDIF
  old_replace$=replace$
  replace$=dest_text$
  IF old_replace$<>replace$ THEN
    FOR x%=0 TO last_used%
      found%(x%)=-1
      search%(x%)=-1
    NEXT x%
  ENDIF
  IF stop_value%<start_value% THEN
    stop_value%=start_value%
  ENDIF
  temp$=CHAR{{OB_SPEC(main_dialog%,t_main_start%)}}
  IF STR$(start_value%)<>temp$ THEN
    CHAR{{OB_SPEC(main_dialog%,t_main_start%)}}=STR$(start_value%)
    object%=t_main_start%
    @get_offset
    @update_main
  ENDIF
  temp$=CHAR{{OB_SPEC(main_dialog%,t_main_stop%)}}
  IF STR$(stop_value%)<>temp$ THEN
    CHAR{{OB_SPEC(main_dialog%,t_main_stop%)}}=STR$(stop_value%)
    object%=t_main_stop%
    @get_offset
    @update_main
  ENDIF
  temp$=CHAR{{OB_SPEC(main_dialog%,t_main_every%)}}
  IF STR$(every_value%)<>temp$ THEN
    CHAR{{OB_SPEC(main_dialog%,t_main_every%)}}=STR$(every_value%)
    object%=t_main_every%
    @get_offset
    @update_main
  ENDIF
  temp$=CHAR{{OB_SPEC(main_dialog%,t_main_size%)}}
  IF STR$(size_value%)<>temp$ THEN
    CHAR{{OB_SPEC(main_dialog%,t_main_size%)}}=STR$(size_value%)
    object%=t_main_size%
    @get_offset
    @update_main
  ENDIF
  IF width_value%<0 THEN
    width_value%=0
  ENDIF
  temp$=CHAR{{OB_SPEC(main_dialog%,t_main_width%)}}
  IF STR$(width_value%)<>temp$ THEN
    CHAR{{OB_SPEC(main_dialog%,t_main_width%)}}=STR$(width_value%)
    object%=t_main_width%
    @get_offset
    @update_main
  ENDIF
RETURN
> PROCEDURE set_free
  object%=t_main_free%
  test$=STR$(GEMDOS(72,L:-1))
  @do_set_main_text
RETURN
> PROCEDURE set_type
  bit%=0
  SELECT dat_type%
  CASE 0
    object%=t_main_ascii%
    state%=FALSE
    @do_set_main_button
    object%=t_main_hex%
    state%=TRUE
    @do_set_main_button
    object%=t_main_binary%
    state%=TRUE
    @do_set_main_button
  CASE 1
    object%=t_main_ascii%
    state%=TRUE
    @do_set_main_button
    object%=t_main_hex%
    state%=FALSE
    @do_set_main_button
    object%=t_main_binary%
    state%=TRUE
    @do_set_main_button
  CASE 2
    object%=t_main_ascii%
    state%=TRUE
    @do_set_main_button
    object%=t_main_hex%
    state%=TRUE
    @do_set_main_button
    object%=t_main_binary%
    state%=FALSE
    @do_set_main_button
  ENDSELECT
RETURN
> PROCEDURE set_case
  object%=b_main_case%
  bit%=0
  IF case%=0 THEN
    state%=TRUE
  ELSE
    state%=FALSE
  ENDIF
  @do_set_main_button
RETURN
> PROCEDURE set_match
  object%=b_main_match%
  bit%=0
  IF match%=0 THEN
    state%=TRUE
  ELSE
    state%=FALSE
  ENDIF
  @do_set_main_button
RETURN
> PROCEDURE do_set_main_button
  IF BTST(OB_STATE(main_dialog%,object%),bit%)=state% THEN
    OB_STATE(main_dialog%,object%)=BCHG(OB_STATE(main_dialog%,object%),bit%)
    @get_offset
    @update_main
  ENDIF
RETURN
> PROCEDURE do_set_main_text
  temp$=CHAR{{OB_SPEC(main_dialog%,object%)}}
  IF test$<>temp$ THEN
    CHAR{{OB_SPEC(main_dialog%,object%)}}=test$
    @get_offset
    @update_main
  ENDIF
RETURN
> PROCEDURE set_source
  IF source_file%<=last_used% AND source_file%>=0 THEN
    temp$=view_name$(source_file%)
    OB_STATE(main_dialog%,b_main_source_file%)=BCLR(OB_STATE(main_dialog%,b_main_source_file%),3)
    OB_STATE(main_dialog%,b_main_source_file_next%)=BCLR(OB_STATE(main_dialog%,b_main_source_file_next%),3)
  ELSE
    SELECT last_used%
    CASE -1
      temp$="<"+STR$(last_used%+1)+" files>"
      OB_STATE(main_dialog%,b_main_source_file%)=BSET(OB_STATE(main_dialog%,b_main_source_file%),3)
      OB_STATE(main_dialog%,b_main_source_file_next%)=BSET(OB_STATE(main_dialog%,b_main_source_file_next%),3)
    CASE 0
      temp$="<"+STR$(last_used%+1)+" file>"
      OB_STATE(main_dialog%,b_main_source_file%)=BCLR(OB_STATE(main_dialog%,b_main_source_file%),3)
      OB_STATE(main_dialog%,b_main_source_file_next%)=BCLR(OB_STATE(main_dialog%,b_main_source_file_next%),3)
    DEFAULT
      temp$="<"+STR$(last_used%+1)+" files>"
      OB_STATE(main_dialog%,b_main_source_file%)=BCLR(OB_STATE(main_dialog%,b_main_source_file%),3)
      OB_STATE(main_dialog%,b_main_source_file_next%)=BCLR(OB_STATE(main_dialog%,b_main_source_file_next%),3)
    ENDSELECT
  ENDIF
  temp%=LEN(temp$)
  IF LEN(temp$)<12 THEN
    temp$=temp$+SPACE$(12-temp%)
  ENDIF
  test$=CHAR{{OB_SPEC(main_dialog%,b_main_source_file%)}}
  IF test$<>temp$ THEN
    CHAR{{OB_SPEC(main_dialog%,b_main_source_file%)}}=temp$
    object%=b_main_source_file%
    @get_offset
    @update_main
  ENDIF
  object%=b_main_source_file_next%
  @get_offset
  @update_main
RETURN
> PROCEDURE set_dest
  IF dest_file%<=last_used% AND dest_file%>=0 THEN
    temp$=" "+view_name$(dest_file%)+" "
    OB_STATE(main_dialog%,b_main_dest_file%)=BCLR(OB_STATE(main_dialog%,b_main_dest_file%),3)
    OB_STATE(main_dialog%,b_main_dest_file_next%)=BCLR(OB_STATE(main_dialog%,b_main_dest_file_next%),3)
  ELSE
    SELECT last_used%
    CASE -1
      temp$=" <"+STR$(last_used%+1)+" files> "
      OB_STATE(main_dialog%,b_main_dest_file%)=BSET(OB_STATE(main_dialog%,b_main_dest_file%),3)
      OB_STATE(main_dialog%,b_main_dest_file_next%)=BSET(OB_STATE(main_dialog%,b_main_dest_file_next%),3)
    CASE 0
      temp$=" <"+STR$(last_used%+1)+" file> "
      OB_STATE(main_dialog%,b_main_dest_file%)=BCLR(OB_STATE(main_dialog%,b_main_dest_file%),3)
      OB_STATE(main_dialog%,b_main_dest_file_next%)=BCLR(OB_STATE(main_dialog%,b_main_dest_file_next%),3)
    DEFAULT
      temp$=" <"+STR$(last_used%+1)+" files> "
      OB_STATE(main_dialog%,b_main_dest_file%)=BCLR(OB_STATE(main_dialog%,b_main_dest_file%),3)
      OB_STATE(main_dialog%,b_main_dest_file_next%)=BCLR(OB_STATE(main_dialog%,b_main_dest_file_next%),3)
    ENDSELECT
  ENDIF
  temp%=LEN(temp$)
  IF LEN(temp$)<14 THEN
    temp$=temp$+SPACE$(14-temp%)
  ENDIF
  test$=CHAR{{OB_SPEC(main_dialog%,b_main_dest_file%)}}
  IF test$<>temp$ THEN
    CHAR{{OB_SPEC(main_dialog%,b_main_dest_file%)}}=temp$
    object%=b_main_dest_file%
    @get_offset
    @update_main
  ENDIF
  object%=b_main_dest_file_next%
  @get_offset
  @update_main
RETURN
> PROCEDURE set_shift
  pick_total%=0
  IF all%=1 THEN
    FOR x%=0 TO last_used%
      pick_total%=pick_total%+pick%(x%)
    NEXT x%
  ENDIF
  IF pick_total%<10 THEN
    t$="  "+STR$(pick_total%)+" selected    "
  ELSE
    t$="  "+STR$(pick_total%)+" selected   "
  ENDIF
  CHAR{{OB_SPEC(shift_dialog%,2)}}=t$
  object%=b_main_all%
  test$=CHAR{{OB_SPEC(shift_dialog%,all%+1)}}
  @do_set_main_text
RETURN
> PROCEDURE set_display
  object%=b_main_display%
  test$=CHAR{{OB_SPEC(display_dialog%,window_type%+1)}}
  @do_set_main_text
RETURN
> PROCEDURE set_open
  object%=b_main_open%
  test$=CHAR{{OB_SPEC(open_dialog%,init_open%+1)}}
  @do_set_main_text
RETURN
> PROCEDURE set_op
  object%=b_main_op%
  test$=CHAR{{OB_SPEC(op_dialog%,op%+1)}}
  @do_set_main_text
RETURN
> PROCEDURE set_size
  object%=b_main_bit_size%
  test$=CHAR{{OB_SPEC(bit_size_dialog%,bit_size%+1)}}
  @do_set_main_text
RETURN
> PROCEDURE set_windows
  object%=b_main_windows%
  test$=CHAR{{OB_SPEC(windows_dialog%,windows%+1)}}
  @do_set_main_text
RETURN
> PROCEDURE pick_file
  the_dialog%=file_dialog%
  max_pick%=11
  current_pick%=1
  @pick
  IF pick_exit%=2 THEN
    @do_pick_file
  ENDIF
RETURN
> PROCEDURE do_pick_file
  SELECT pick%
  CASE 1 ! ABOUT
    @about
  CASE 3 ! OPEN
    @do_open
  CASE 4 ! NEW
    @make_new
  CASE 5 ! MERGE
    IF all%>0 THEN
      @merge_all
    ELSE
      IF source_file%>-1 THEN
        current%=source_file%
        @merge
      ENDIF
    ENDIF
  CASE 6 ! CLOSE
    IF all%>0 THEN
      @close_all
    ELSE
      IF source_file%>-1 THEN
        current%=source_file%
        @close
      ENDIF
    ENDIF
  CASE 7 ! SAVE
    IF all%>0 THEN
      @save_all
    ELSE
      IF source_file%>-1 THEN
        current%=source_file%
        @save
      ENDIF
    ENDIF
  CASE 9 ! PRINT
    IF all%>0 THEN
      @dump_all
    ELSE
      IF source_file%>-1 THEN
        current%=source_file%
        @dump
      ENDIF
    ENDIF
  CASE 11 ! QUIT
    @trying_to_quit
  ENDSELECT
RETURN
> PROCEDURE pick_edit
  the_dialog%=edit_dialog%
  max_pick%=16
  current_pick%=1
  @pick
  IF pick_exit%=2 THEN
    @do_pick_edit
  ENDIF
RETURN
> PROCEDURE do_pick_edit
  SELECT pick%
  CASE 1 ! FIND
    IF all%>0 THEN
      @find_all
    ELSE
      IF source_file%>-1 THEN
        current%=source_file%
        @find
      ENDIF
    ENDIF
  CASE 2 ! NEXT
    IF all%>0 THEN
      @find_next_all
    ELSE
      IF source_file%>-1 THEN
        current%=source_file%
        @find_next
      ENDIF
    ENDIF
  CASE 3 ! SEARCH
    @search_file
  CASE 4 ! REPLACE
    IF all%>0 THEN
      @replace_all
    ELSE
      IF source_file%>-1 THEN
        current%=source_file%
        @replace
      ENDIF
    ENDIF
  CASE 5 ! REPLACE EVERY
    IF all%>0 THEN
      replace_all%=1
      @replace_all
    ELSE
      IF source_file%>-1 THEN
        replace_all%=1
        current%=source_file%
        @replace
      ENDIF
    ENDIF
  CASE 6 ! ADD
    IF all%>0 THEN
      @add_all
    ELSE
      IF source_file%>-1 THEN
        current%=source_file%
        @add
      ENDIF
    ENDIF
  CASE 7 ! ADD EVERY
    IF all%>0 THEN
      add_all%=1
      @add_all
      add_all%=0
    ELSE
      IF source_file%>-1 THEN
        current%=source_file%
        add_all%=1
        @add
        add_all%=0
      ENDIF
    ENDIF
  CASE 9 ! ASCII CHANGE
    IF all%>0 THEN
      @ascii_change_all
    ELSE
      IF source_file%>-1 THEN
        current%=source_file%
        @ascii_change
      ENDIF
    ENDIF
  CASE 10 ! BIT CHANGE
    IF all%>0 THEN
      @bit_change_all
    ELSE
      IF source_file%>-1 THEN
        current%=source_file%
        @bit_change
      ENDIF
    ENDIF
  CASE 12 ! COPY
    IF source_file%>-1 THEN
      copy_from%=source_file%
      @copy
    ENDIF
  CASE 13 ! INSERT
    IF all%>0 THEN
      @insert_all
    ELSE
      IF source_file%>-1 THEN
        current%=source_file%
        @insert
      ENDIF
    ENDIF
  CASE 14 ! DELETE
    IF all%>0 THEN
      @delete_all
    ELSE
      IF source_file%>-1 THEN
        current%=source_file%
        @delete
      ENDIF
    ENDIF
  CASE 16 ! GOTO
    IF all%>0 THEN
      @goto_all
    ELSE
      IF source_file%>-1 THEN
        current%=source_file%
        @goto
      ENDIF
    ENDIF
  ENDSELECT
RETURN
> PROCEDURE pick_options
  the_dialog%=options_dialog%
  max_pick%=6
  current_pick%=1
  @pick
  IF pick_exit%=2 THEN
    @do_pick_options
  ENDIF
RETURN
> PROCEDURE do_pick_options
  SELECT pick%
  CASE 1 ! TILE
    @tile
  CASE 3 ! HELP
    @multi_check
    help%=0
    @do_help
  CASE 5 ! SET PREF
    @pref_open
  CASE 6 ! LOAD PREF
    @settings_load
    @all_set
    IF main_nwx%<>-1 OR main_nwy%<>-1 THEN
      IF main_nwx%<>-1 AND main_nwx%<mww% THEN
        wx%(max_window%)=main_nwx%
      ENDIF
      IF main_nwy%<>-1 AND main_nwy%>=mwy% AND main_nwy%<mwy%+mwh% THEN
        wy%(max_window%)=main_nwy%
      ENDIF
      flag%=WIND_SET(win%(current%),5,wx%(current%),wy%(current%),ww%(current%),wh%(current%))
      flag%=WIND_GET(win%(current%),4,iwx%(current%),iwy%(current%),iww%(current%),iwh%(current%))
      OB_X(main_dialog%,0)=iwx%(max_window%)
      OB_Y(main_dialog%,0)=iwy%(max_window%)
      OB_X(alt_dialog%,0)=iwx%(max_window%)
      OB_Y(alt_dialog%,0)=iwy%(max_window%)
    ENDIF
  CASE 7 ! SAVE PREF
    @settings_save
  ENDSELECT
RETURN
> PROCEDURE pick_shift
  shift_view%=shift_file%
  IF shift_view%>last_used%-9 THEN
    shift_view%=last_used%-9
  ENDIF
  IF shift_view%<0 THEN
    shift_view%=0
  ENDIF
  pick%=1
  ~OBJC_OFFSET(main_dialog%,dialog_button%,tx%,ty%)
  rx%=tx%
  ry%=ty%-((pick%-1)*pick_height%)
  rw%=OB_W(shift_dialog%,0)+1
  rh%=OB_H(shift_dialog%,0)+1
  ok%=0
  DO
    IF ry%+rh%>mwy%+mwh% THEN
      ry%=ry%-pick_height%
    ELSE
      ok%=1
    ENDIF
  LOOP UNTIL ok%=1
  IF ry%+rh%<ty%+pick_height% THEN
    ry%=ry%+pick_height%
  ENDIF
  ok%=0
  DO
    IF ry%<mwy% THEN
      ry%=ry%+pick_height%
    ELSE
      ok%=1
    ENDIF
  LOOP UNTIL ok%=1
  IF ry%>ty% THEN
    ry%=ty%
  ENDIF
  OB_X(shift_dialog%,0)=rx%
  OB_Y(shift_dialog%,0)=ry%
  @set_shift_text
  @set_shift_arrows
  pick%=0
  the_dialog%=shift_dialog%
  old_pick%=-1
  new_pick%=-1
  er%=WIND_UPDATE(1)
  er%=WIND_UPDATE(3)
  ~FORM_DIAL(0,0,0,0,0,rx%-2,ry%-2,rw%+4,rh%+4)
  ~OBJC_DRAW(shift_dialog%,0,4,rx%-2,ry%-2,rw%+4,rh%+4)
  DO
  LOOP UNTIL MOUSEK=0
  DO
    exit%=0
    DO
      event_type&=EVNT_MULTI(&X100111,2,1,1,0,rx%,ry%,rw%,rh%,0,0,0,0,0,buffer%,1,mx&,my&,button&,key_state&,key&,clicks&)
      IF event_type& AND &X100 THEN ! IN
        button%=OBJC_FIND(shift_dialog%,0,4,mx&,my&)
        IF event_type& AND &X1 THEN
          IF SHR(key& AND &HFF00,8)=98 THEN
            exit%=3
          ENDIF
        ENDIF
        IF event_type& AND &X10 THEN ! BUTTON
          button%=OBJC_FIND(shift_dialog%,0,4,mx&,my&)
          IF button%=0 THEN
            pick%=0
            exit%=0
          ELSE
            IF BTST(OB_STATE(shift_dialog%,button%),3)=0 THEN
              pick%=button%
              IF pick%<4 OR pick%>14 THEN
                IF pick%<>16 AND pick%<>17 THEN
                  OB_STATE(shift_dialog%,pick%)=BSET(OB_STATE(shift_dialog%,pick%),0)
                  ~OBJC_DRAW(shift_dialog%,pick%,4,rx%,ry%,rw%,rh%)
                ENDIF
              ELSE
                new_pick%=pick%
                IF new_pick%<>old_pick% THEN
                  old_pick%=pick%
                  OB_STATE(shift_dialog%,pick%)=BSET(OB_STATE(shift_dialog%,pick%),0)
                  ~OBJC_DRAW(shift_dialog%,pick%,4,rx%,ry%,rw%,rh%)
                ELSE
                  pick%=0
                ENDIF
              ENDIF
              exit%=1
            ELSE
              pick%=0
            ENDIF
          ENDIF
        ELSE
          pick%=0
          old_pick%=-1
        ENDIF
      ELSE
        pick%=0
        exit%=2
      ENDIF
    LOOP UNTIL exit%>0
    IF pick% THEN
      IF exit%=1 THEN
        SELECT pick%
        CASE 5 TO 14
          IF pick%(shift_view%+pick%-5) THEN
            pick%(shift_view%+pick%-5)=0
          ELSE
            pick%(shift_view%+pick%-5)=1
          ENDIF
          @set_shift_text
          @set_shift_arrows
        CASE 1
          all%=0
          @set_shift_text
          @set_shift_arrows
          DO
          LOOP UNTIL MOUSEK=0
        CASE 2
          all%=1
          @set_shift_text
          @set_shift_arrows
          DO
          LOOP UNTIL MOUSEK=0
        CASE 3
          all%=2
          @set_shift_text
          @set_shift_arrows
          DO
          LOOP UNTIL MOUSEK=0
        CASE 15
          shift_view%=shift_view%-1
          IF shift_view%<0 THEN
            shift_view%=0
          ENDIF
          @set_shift_text
          @set_shift_arrows
          PAUSE 5
          OB_STATE(shift_dialog%,pick%)=BCLR(OB_STATE(shift_dialog%,pick%),0)
          ~OBJC_DRAW(shift_dialog%,pick%,4,rx%,ry%,rw%,rh%)
          exit%=0
        CASE 17
          IF MOUSEK=1 THEN
            pos%=GRAF_SLIDEBOX(shift_dialog%,16,17,1)
            old_view%=shift_view%
            shift_view%=(last_used%-9)*pos%/1000
            IF shift_view%<>old_view% THEN
              @set_shift_text
              @set_shift_arrows
            ENDIF
          ENDIF
        CASE 16
          IF my&<OB_Y(shift_dialog%,0)+OB_Y(shift_dialog%,17)+OB_Y(shift_dialog%,16) THEN
            shift_view%=shift_view%-10
            IF shift_view%<0 THEN
              shift_view%=0
            ENDIF
          ELSE
            shift_view%=shift_view%+10
            IF shift_view%>last_used%-9 THEN
              shift_view%=last_used%-9
            ENDIF
            IF shift_view%<0 THEN
              shift_view%=0
            ENDIF
          ENDIF
          @set_shift_text
          @set_shift_arrows
          PAUSE 5
        CASE 18
          shift_view%=shift_view%+1
          IF shift_view%>last_used%-9 THEN
            shift_view%=last_used%-9
          ENDIF
          IF shift_view%<0 THEN
            shift_view%=0
          ENDIF
          @set_shift_text
          @set_shift_arrows
          PAUSE 5
          OB_STATE(shift_dialog%,pick%)=BCLR(OB_STATE(shift_dialog%,pick%),0)
          ~OBJC_DRAW(shift_dialog%,pick%,4,rx%,ry%,rw%,rh%)
        CASE 19
          IF last_used%>-1 THEN
            FOR x%=0 TO last_used%
              pick%(x%)=1
            NEXT x%
            @set_shift_text
            @set_shift_arrows
          ENDIF
          DO
          LOOP UNTIL MOUSEK=0
          OB_STATE(shift_dialog%,pick%)=BCLR(OB_STATE(shift_dialog%,pick%),0)
          ~OBJC_DRAW(shift_dialog%,pick%,4,rx%,ry%,rw%,rh%)
        CASE 20
          IF last_used%>-1 THEN
            FOR x%=0 TO last_used%
              pick%(x%)=edit%(x%)
            NEXT x%
            @set_shift_text
            @set_shift_arrows
          ENDIF
          DO
          LOOP UNTIL MOUSEK=0
          OB_STATE(shift_dialog%,pick%)=BCLR(OB_STATE(shift_dialog%,pick%),0)
          ~OBJC_DRAW(shift_dialog%,pick%,4,rx%,ry%,rw%,rh%)
        CASE 21
          IF last_used%>-1 THEN
            FOR x%=0 TO last_used%
              pick%(x%)=0
            NEXT x%
            @set_shift_text
            @set_shift_arrows
          ENDIF
          DO
          LOOP UNTIL MOUSEK=0
          OB_STATE(shift_dialog%,pick%)=BCLR(OB_STATE(shift_dialog%,pick%),0)
          ~OBJC_DRAW(shift_dialog%,pick%,4,rx%,ry%,rw%,rh%)
        ENDSELECT
      ENDIF
    ENDIF
  LOOP UNTIL exit%=2
  ~FORM_DIAL(3,0,0,0,0,rx%-2,ry%-2,rw%+4,rh%+4)
  er%=WIND_UPDATE(2)
  er%=WIND_UPDATE(0)
  shift_file%=shift_view%
  @set_shift
  IF exit%=3 THEN
    @multi_check
    @pick_help
  ENDIF
RETURN
> PROCEDURE set_shift_text
  FOR set%=0 TO 9
    flag%=0
    IF win%(shift_view%+set%)<0 THEN
      IF CHAR{{OB_SPEC(shift_dialog%,set%+5)}}<>"" THEN
        CHAR{{OB_SPEC(shift_dialog%,set%+5)}}=""
        flag%=1
      ENDIF
      IF BTST(OB_STATE(shift_dialog%,set%+5),0)=TRUE! THEN
        OB_STATE(shift_dialog%,set%+5)=BCLR(OB_STATE(shift_dialog%,set%+5),0)
        flag%=1
      ENDIF
      IF BTST(OB_STATE(shift_dialog%,set%+5),3)=0 THEN
        OB_STATE(shift_dialog%,set%+5)=BSET(OB_STATE(shift_dialog%,set%+5),3)
        flag%=1
      ENDIF
    ELSE
      temp$=" "+view_name$(shift_view%+set%)+" "
      temp%=LEN(view_name$(shift_view%+set%))
      IF LEN(temp$)<14 THEN
        temp$=temp$+SPACE$(14-temp%)
      ENDIF
      test$=CHAR{{OB_SPEC(shift_dialog%,set%+5)}}
      IF temp$<>test$ THEN
        CHAR{{OB_SPEC(shift_dialog%,set%+5)}}=temp$
        flag%=1
      ENDIF
      IF pick%(shift_view%+set%) THEN
        IF BTST(OB_STATE(shift_dialog%,set%+5),0)=0 THEN
          OB_STATE(shift_dialog%,set%+5)=BSET(OB_STATE(shift_dialog%,set%+5),0)
          flag%=1
        ENDIF
      ELSE
        IF BTST(OB_STATE(shift_dialog%,set%+5),0) THEN
          OB_STATE(shift_dialog%,set%+5)=BCLR(OB_STATE(shift_dialog%,set%+5),0)
          flag%=1
        ENDIF
      ENDIF
      IF BTST(OB_STATE(shift_dialog%,set%+5),3) THEN
        OB_STATE(shift_dialog%,set%+5)=BCLR(OB_STATE(shift_dialog%,set%+5),3)
        flag%=1
      ENDIF
    ENDIF
    IF flag%=1 THEN
      ~OBJC_DRAW(shift_dialog%,set%+5,4,rx%-2,ry%-2,rw%+4,rh%+4)
    ENDIF
  NEXT set%
  flag%=0
  FOR x%=0 TO 2
    IF x%=all% THEN
      IF BTST(OB_STATE(shift_dialog%,x%+1),0)=0 THEN
        OB_STATE(shift_dialog%,x%+1)=BSET(OB_STATE(shift_dialog%,x%+1),0)
        flag%=1
      ENDIF
    ELSE
      IF BTST(OB_STATE(shift_dialog%,x%+1),0) THEN
        OB_STATE(shift_dialog%,x%+1)=BCLR(OB_STATE(shift_dialog%,x%+1),0)
        flag%=1
      ENDIF
    ENDIF
    IF flag%=1 THEN
      ~OBJC_DRAW(shift_dialog%,x%+1,4,rx%-2,ry%-2,rw%+4,rh%+4)
    ENDIF
  NEXT x%
  pick_total%=0
  FOR x%=0 TO last_used%
    pick_total%=pick_total%+pick%(x%)
  NEXT x%
  IF pick_total%<10 THEN
    t$="  "+STR$(pick_total%)+" selected    "
  ELSE
    t$="  "+STR$(pick_total%)+" selected   "
  ENDIF
  test$=CHAR{{OB_SPEC(shift_dialog%,2)}}
  IF test$<>t$ THEN
    CHAR{{OB_SPEC(shift_dialog%,2)}}=t$
    ~OBJC_DRAW(shift_dialog%,2,4,rx%-2,ry%-2,rw%+4,rh%+4)
  ENDIF
  IF last_used%>-1 THEN
    IF BTST(OB_STATE(shift_dialog%,19),3)=TRUE! THEN
      OB_STATE(shift_dialog%,19)=BCLR(OB_STATE(shift_dialog%,19),3)
      ~OBJC_DRAW(shift_dialog%,19,4,rx%-2,ry%-2,rw%+4,rh%+4)
    ENDIF
    IF BTST(OB_STATE(shift_dialog%,20),3)=TRUE! THEN
      OB_STATE(shift_dialog%,20)=BCLR(OB_STATE(shift_dialog%,20),3)
      ~OBJC_DRAW(shift_dialog%,20,4,rx%-2,ry%-2,rw%+4,rh%+4)
    ENDIF
    IF BTST(OB_STATE(shift_dialog%,21),3)=TRUE! THEN
      OB_STATE(shift_dialog%,21)=BCLR(OB_STATE(shift_dialog%,21),3)
      ~OBJC_DRAW(shift_dialog%,21,4,rx%-2,ry%-2,rw%+4,rh%+4)
    ENDIF
  ELSE
    IF BTST(OB_STATE(shift_dialog%,19),3)=0 THEN
      OB_STATE(shift_dialog%,19)=BSET(OB_STATE(shift_dialog%,19),3)
      ~OBJC_DRAW(shift_dialog%,19,4,rx%-2,ry%-2,rw%+4,rh%+4)
    ENDIF
    IF BTST(OB_STATE(shift_dialog%,20),3)=0 THEN
      OB_STATE(shift_dialog%,20)=BSET(OB_STATE(shift_dialog%,20),3)
      ~OBJC_DRAW(shift_dialog%,20,4,rx%-2,ry%-2,rw%+4,rh%+4)
    ENDIF
    IF BTST(OB_STATE(shift_dialog%,21),3)=0 THEN
      OB_STATE(shift_dialog%,21)=BSET(OB_STATE(shift_dialog%,21),3)
      ~OBJC_DRAW(shift_dialog%,21,4,rx%-2,ry%-2,rw%+4,rh%+4)
    ENDIF
  ENDIF
RETURN
> PROCEDURE set_shift_arrows
  IF shift_view%=0 THEN
    IF BTST(OB_STATE(shift_dialog%,15),3)=0 THEN
      OB_STATE(shift_dialog%,15)=BSET(OB_STATE(shift_dialog%,15),3)
    ENDIF
  ELSE
    IF BTST(OB_STATE(shift_dialog%,15),3) THEN
      OB_STATE(shift_dialog%,15)=BCLR(OB_STATE(shift_dialog%,15),3)
    ENDIF
  ENDIF
  IF shift_view%<last_used%-9 THEN
    IF BTST(OB_STATE(shift_dialog%,18),3) THEN
      OB_STATE(shift_dialog%,18)=BCLR(OB_STATE(shift_dialog%,18),3)
    ENDIF
  ELSE
    IF BTST(OB_STATE(shift_dialog%,18),3)=0 THEN
      OB_STATE(shift_dialog%,18)=BSET(OB_STATE(shift_dialog%,18),3)
    ENDIF
  ENDIF
  IF last_used%<10 THEN
    IF BTST(OB_STATE(shift_dialog%,16),3)=0 THEN
      OB_STATE(shift_dialog%,16)=BSET(OB_STATE(shift_dialog%,16),3)
    ENDIF
    IF BTST(OB_FLAGS(shift_dialog%,17),7)=0 THEN
      OB_FLAGS(shift_dialog%,17)=BSET(OB_FLAGS(shift_dialog%,17),7)
    ENDIF
    IF BTST(OB_STATE(shift_dialog%,17),3)=0 THEN
      OB_STATE(shift_dialog%,17)=BSET(OB_STATE(shift_dialog%,17),3)
    ENDIF
  ELSE
    IF BTST(OB_STATE(shift_dialog%,16),3)=TRUE! THEN
      OB_STATE(shift_dialog%,16)=BCLR(OB_STATE(shift_dialog%,16),3)
    ENDIF
    box_height%=slider_height%*(10/(last_used%+1))
    temp%=OB_H(shift_dialog%,17)
    IF temp%<>box_height% THEN
      OB_H(shift_dialog%,17)=box_height%
    ENDIF
    temp%=OB_Y(shift_dialog%,17)
    test%=(slider_height%-box_height%)*(shift_view%/(last_used%-9))
    IF temp%<>test% THEN
      OB_Y(shift_dialog%,17)=test%
    ENDIF
    IF BTST(OB_FLAGS(shift_dialog%,17),7)=TRUE! THEN
      OB_FLAGS(shift_dialog%,17)=BCLR(OB_FLAGS(shift_dialog%,17),7)
    ENDIF
    IF BTST(OB_STATE(shift_dialog%,17),3)=TRUE! THEN
      OB_STATE(shift_dialog%,17)=BCLR(OB_STATE(shift_dialog%,17),3)
    ENDIF
  ENDIF
  ~OBJC_DRAW(shift_dialog%,15,4,rx%,ry%,rw%,rh%)
  ~OBJC_DRAW(shift_dialog%,16,4,rx%,ry%,rw%,rh%)
  ~OBJC_DRAW(shift_dialog%,18,4,rx%,ry%,rw%,rh%)
RETURN
> PROCEDURE pick_the_file
  IF pick_file_type%=0 THEN
    the_view%=source_view%
    the_file%=source_file%
  ELSE
    the_view%=dest_view%
    the_file%=dest_file%
  ENDIF
  old_the_file%=the_file%
  IF the_view%=max_window% THEN
    the_view%=0
  ELSE
    the_view%=the_file%
  ENDIF
  IF the_view%>last_used%-15 THEN
    the_view%=last_used%-15
  ENDIF
  IF the_view%<0 THEN
    the_view%=0
  ENDIF
  IF the_file%=-1 THEN
    pick%=1
  ELSE
    pick%=the_file%+1-the_view%
  ENDIF
  ~OBJC_OFFSET(main_dialog%,dialog_button%,tx%,ty%)
  rx%=tx%
  ry%=ty%-((pick%-1)*pick_height%)
  rw%=OB_W(source_dialog%,0)+1
  rh%=OB_H(source_dialog%,0)+1
  ok%=0
  DO
    IF ry%+rh%>mwy%+mwh% THEN
      ry%=ry%-pick_height%
    ELSE
      ok%=1
    ENDIF
  LOOP UNTIL ok%=1
  IF ry%+rh%<ty%+pick_height% THEN
    ry%=ry%+pick_height%
  ENDIF
  ok%=0
  DO
    IF ry%<mwy% THEN
      ry%=ry%+pick_height%
    ELSE
      ok%=1
    ENDIF
  LOOP UNTIL ok%=1
  IF ry%>ty% THEN
    ry%=ty%
  ENDIF
  OB_X(source_dialog%,0)=rx%
  OB_Y(source_dialog%,0)=ry%
  @set_the_text
  @set_the_arrows
  the_dialog%=source_dialog%
  er%=WIND_UPDATE(1)
  ~FORM_DIAL(0,0,0,0,0,rx%-2,ry%-2,rw%+4,rh%+4)
  DO
  LOOP UNTIL MOUSEK=0
  ~OBJC_DRAW(source_dialog%,0,4,rx%-2,ry%-2,rw%+4,rh%+4)
  DO
    exit%=0
    DO
      event_type&=EVNT_MULTI(&X100111,2,1,1,0,rx%,ry%,rw%,rh%,0,0,0,0,0,buffer%,1,mx&,my&,button&,key_state&,key&,clicks&)
      IF event_type& AND &X100 THEN ! IN
        button%=OBJC_FIND(source_dialog%,0,4,mx&,my&)
        IF event_type& AND &X1 THEN
          IF SHR(key& AND &HFF00,8)=98 THEN
            exit%=3
          ENDIF
        ENDIF
        IF event_type& AND &X10 THEN ! BUTTON
          button%=OBJC_FIND(source_dialog%,0,4,mx&,my&)
          IF button%=0 THEN
            exit%=2
          ELSE
            IF BTST(OB_STATE(source_dialog%,button%),3)=0 THEN
              IF button%<18 OR button%>19 THEN
                OB_STATE(source_dialog%,button%)=BSET(OB_STATE(source_dialog%,button%),0)
                ~OBJC_DRAW(source_dialog%,button%,4,rx%,ry%,rw%,rh%)
              ENDIF
            ELSE
              button%=0
            ENDIF
            exit%=1
          ENDIF
        ENDIF
      ELSE
        exit%=2
      ENDIF
    LOOP UNTIL exit%>0
    IF button% THEN
      IF exit%=1 THEN
        SELECT button%
        CASE 1 TO 16
          DO
          LOOP UNTIL MOUSEK=0
          IF exit%=1 THEN
            the_file%=the_view%+button%-1
            exit%=2
          ENDIF
        CASE 17
          IF the_view%>0 THEN
            the_view%=the_view%-1
            IF the_view%<0 THEN
              the_view%=0
            ENDIF
            @set_the_text
            @set_the_arrows
            PAUSE 5
            OB_STATE(source_dialog%,button%)=BCLR(OB_STATE(source_dialog%,button%),0)
            ~OBJC_DRAW(source_dialog%,button%,4,rx%-2,ry%-2,rw%+4,rh%+4)
          ENDIF
          exit%=0
        CASE 18
          IF my&<OB_Y(source_dialog%,0)+OB_Y(source_dialog%,19)+OB_Y(source_dialog%,18) THEN
            the_view%=the_view%-16
            IF the_view%<0 THEN
              the_view%=0
            ENDIF
          ELSE
            the_view%=the_view%+16
            IF the_view%>last_used%-15 THEN
              the_view%=last_used%-15
            ENDIF
            IF the_view%<0 THEN
              the_view%=0
            ENDIF
          ENDIF
          @set_the_text
          @set_the_arrows
          PAUSE 5
        CASE 19
          IF MOUSEK=1 THEN
            pos%=GRAF_SLIDEBOX(source_dialog%,18,19,1)
            old_view%=the_view%
            the_view%=(last_used%-15)*pos%/1000
            IF the_view%<>old_view% THEN
              @set_the_text
              @set_the_arrows
            ENDIF
          ENDIF
        CASE 20
          IF the_view%<last_used%-15 THEN
            the_view%=the_view%+1
            IF the_view%>last_used%-15 THEN
              the_view%=last_used%-15
            ENDIF
            IF the_view%<0 THEN
              the_view%=0
            ENDIF
            @set_the_text
            @set_the_arrows
          ENDIF
          PAUSE 5
          OB_STATE(source_dialog%,button%)=BCLR(OB_STATE(source_dialog%,button%),0)
          ~OBJC_DRAW(source_dialog%,button%,4,rx%-2,ry%-2,rw%+4,rh%+4)
        ENDSELECT
      ENDIF
    ENDIF
  LOOP UNTIL exit%>1
  ~FORM_DIAL(3,0,0,0,0,rx%-2,ry%-2,rw%+4,rh%+4)
  er%=WIND_UPDATE(0)
  IF pick_file_type%=0 THEN
    IF the_file%<=last_used% THEN
      source_view%=the_view%
      source_file%=the_file%
    ELSE
      source_view%=0
      source_file%=-1
    ENDIF
    @set_source
  ELSE
    IF the_file%<=last_used% THEN
      dest_view%=the_view%
      dest_file%=the_file%
    ELSE
      source_view%=0
      source_file%=-1
    ENDIF
    @set_dest
  ENDIF
  IF exit%=3 THEN
    @multi_check
    @pick_help
  ENDIF
RETURN
> PROCEDURE set_the_text
  FOR set%=0 TO 15
    flag%=0
    IF win%(the_view%+set%)<0 THEN
      IF the_view%+set%<max_window%
        IF CHAR{{OB_SPEC(source_dialog%,set%+1)}}<>"" THEN
          CHAR{{OB_SPEC(source_dialog%,set%+1)}}=""
          flag%=1
        ENDIF
        IF BTST(OB_STATE(source_dialog%,set%+1),0)=TRUE! then
          OB_STATE(source_dialog%,set%+1)=BCLR(OB_STATE(source_dialog%,set%+1),0)
          flag%=1
        ENDIF
        IF BTST(OB_STATE(source_dialog%,set%+1),3)=TRUE! then
          OB_STATE(source_dialog%,set%+1)=BSET(OB_STATE(source_dialog%,set%+1),3)
          flag%=1
        ENDIF
      ENDIF
    ELSE
      IF the_view%+set%<max_window%
        temp$=" "+view_name$(the_view%+set%)+" "
        temp%=LEN(view_name$(the_view%+set%))
        IF LEN(temp$)<14 THEN
          temp$=temp$+SPACE$(14-temp%)
        ENDIF
        IF CHAR{{OB_SPEC(source_dialog%,set%+1)}}<>temp$ THEN
          CHAR{{OB_SPEC(source_dialog%,set%+1)}}=temp$
          flag%=1
        ENDIF
        IF BTST(OB_STATE(source_dialog%,set%+1),0)=TRUE! then
          OB_STATE(source_dialog%,set%+1)=BCLR(OB_STATE(source_dialog%,set%+1),0)
          flag%=1
        ENDIF
        IF BTST(OB_STATE(source_dialog%,set%+1),3)=TRUE! then
          OB_STATE(source_dialog%,set%+1)=BCLR(OB_STATE(source_dialog%,set%+1),3)
          flag%=1
        ENDIF
      ENDIF
      IF the_view%+set%=the_file%
        IF BTST(OB_STATE(source_dialog%,set%+1),0)=0 THEN
          OB_STATE(source_dialog%,set%+1)=BSET(OB_STATE(source_dialog%,set%+1),0)
          flag%=1
        ENDIF
      ENDIF
    ENDIF
    IF flag%=1 THEN
      ~OBJC_DRAW(source_dialog%,set%+1,4,rx%,ry%,rw%,rh%)
    ENDIF
  NEXT set%
RETURN
> PROCEDURE set_the_arrows
  IF the_view%=0 THEN
    IF BTST(OB_STATE(source_dialog%,17),3)=0 THEN
      OB_STATE(source_dialog%,17)=BSET(OB_STATE(source_dialog%,17),3)
    ENDIF
  ELSE
    IF BTST(OB_STATE(source_dialog%,17),3)=TRUE! THEN
      OB_STATE(source_dialog%,17)=BCLR(OB_STATE(source_dialog%,17),3)
    ENDIF
  ENDIF
  IF the_view%<last_used%-15 THEN
    IF BTST(OB_STATE(source_dialog%,20),3)=TRUE! THEN
      OB_STATE(source_dialog%,20)=BCLR(OB_STATE(source_dialog%,20),3)
    ENDIF
  ELSE
    IF BTST(OB_STATE(source_dialog%,20),3)=0 THEN
      OB_STATE(source_dialog%,20)=BSET(OB_STATE(source_dialog%,20),3)
    ENDIF
  ENDIF
  IF last_used%<16 THEN
    IF BTST(OB_STATE(source_dialog%,18),3)=0 THEN
      OB_STATE(source_dialog%,18)=BSET(OB_STATE(source_dialog%,18),3)
    ENDIF
    IF BTST(OB_FLAGS(source_dialog%,19),7)=0 THEN
      OB_FLAGS(source_dialog%,19)=BSET(OB_FLAGS(source_dialog%,19),7)
    ENDIF
    IF BTST(OB_STATE(source_dialog%,19),3)=0 THEN
      OB_STATE(source_dialog%,19)=BSET(OB_STATE(source_dialog%,19),3)
    ENDIF
  ELSE
    IF BTST(OB_STATE(source_dialog%,18),3)=TRUE! THEN
      OB_STATE(source_dialog%,18)=BCLR(OB_STATE(source_dialog%,18),3)
    ENDIF
    box_height%=source_height%*(16/(last_used%+1))
    temp%=OB_H(source_dialog%,19)
    IF temp%<>box_height% THEN
      OB_H(source_dialog%,19)=box_height%
    ENDIF
    temp%=OB_Y(source_dialog%,19)
    test%=(source_height%-box_height%)*(the_view%/(last_used%-15))
    IF temp%<>test% THEN
      OB_Y(source_dialog%,19)=test%
    ENDIF
    IF BTST(OB_FLAGS(source_dialog%,19),7)=TRUE! THEN
      OB_FLAGS(source_dialog%,19)=BCLR(OB_FLAGS(source_dialog%,19),7)
    ENDIF
    IF BTST(OB_STATE(source_dialog%,19),3)=TRUE! THEN
      OB_STATE(source_dialog%,19)=BCLR(OB_STATE(source_dialog%,19),3)
    ENDIF
  ENDIF
  ~OBJC_DRAW(source_dialog%,17,4,rx%,ry%,rw%,rh%)
  ~OBJC_DRAW(source_dialog%,18,4,rx%,ry%,rw%,rh%)
  ~OBJC_DRAW(source_dialog%,20,4,rx%,ry%,rw%,rh%)
RETURN
> PROCEDURE pick_display
  the_dialog%=display_dialog%
  max_pick%=4
  current_pick%=window_type%+1
  @pick
  IF old_pick%<>pick% AND pick_exit%=2 THEN
    window_type%=pick%-1
    @set_display
  ENDIF
RETURN
> PROCEDURE pick_open
  the_dialog%=open_dialog%
  max_pick%=2
  current_pick%=init_open%+1
  @pick
  IF old_pick%<>pick% AND pick_exit%=2 THEN
    init_open%=pick%-1
    @set_open
  ENDIF
RETURN
> PROCEDURE pick_op
  the_dialog%=op_dialog%
  max_pick%=9
  current_pick%=op%+1
  @pick
  IF old_pick%<>pick% AND pick_exit%=2 THEN
    op%=pick%-1
    @set_op
  ENDIF
RETURN
> PROCEDURE pick_bit_size
  the_dialog%=bit_size_dialog%
  max_pick%=3
  current_pick%=bit_size%+1
  @pick
  IF old_pick%<>pick% AND pick_exit%=2 THEN
    bit_size%=pick%-1
    @set_size
  ENDIF
RETURN
> PROCEDURE pick_windows
  the_dialog%=windows_dialog%
  max_pick%=3
  current_pick%=windows%+1
  @pick
  IF old_pick%<>pick% AND pick_exit%=2 THEN
    windows%=pick%-1
    @set_windows
  ENDIF
RETURN
> PROCEDURE pick
  rw%=OB_W(the_dialog%,0)+1
  rh%=OB_H(the_dialog%,0)+1
  IF current%>-1 AND current%<max_window% THEN
    rx%=mx&-(edit_width%/2)
    ry%=my&-(edit_height%/2)
    ty%=my&
  ELSE
    ~OBJC_OFFSET(main_dialog%,dialog_button%,tx%,ty%)
    rx%=tx%
    ry%=ty%-((current_pick%-1)*pick_height%)
  ENDIF
  ok%=0
  DO
    IF ry%+rh%>mwy%+mwh% THEN
      ry%=ry%-pick_height%
    ELSE
      ok%=1
    ENDIF
  LOOP UNTIL ok%=1
  IF ry%+rh%<ty%+pick_height% THEN
    ry%=ry%+pick_height%
  ENDIF
  ok%=0
  DO
    IF ry%<mwy% THEN
      ry%=ry%+pick_height%
    ELSE
      ok%=1
    ENDIF
  LOOP UNTIL ok%=1
  IF ry%>ty% THEN
    ry%=ty%
  ENDIF
  OB_X(the_dialog%,0)=rx%
  OB_Y(the_dialog%,0)=ry%
  pick%=current_pick%
  old_pick%=pick%
  IF BTST(OB_STATE(the_dialog%,pick%),3)=0 THEN
    OB_STATE(the_dialog%,pick%)=BSET(OB_STATE(the_dialog%,pick%),0)
  ENDIF
  pick_exit%=0
  er%=WIND_UPDATE(1)
  er%=WIND_UPDATE(3)
  ~FORM_DIAL(0,0,0,0,0,rx%-2,ry%-2,rw%+4,rh%+4)
  ~OBJC_DRAW(the_dialog%,0,4,rx%-2,ry%-2,rw%+4,rh%+4)
  DO
  LOOP UNTIL MOUSEK=0
  DO
    event_type&=EVNT_MULTI(&X100111,2,1,1,0,rx%,ry%,rw%,rh%,0,0,0,0,0,buffer%,1,mx&,my&,button&,key_state&,key&,clicks&)
    IF event_type& AND &X100 THEN ! IN
      button%=OBJC_FIND(the_dialog%,0,4,mx&,my&)
      IF event_type& AND &X1 THEN
        IF SHR(key& AND &HFF00,8)=98 THEN
          pick_exit%=3
        ENDIF
      ENDIF
      IF button%>0 THEN
        IF button%<>pick% THEN
          IF pick%>0 THEN
            IF BTST(OB_STATE(the_dialog%,pick%),0)=TRUE! THEN
              OB_STATE(the_dialog%,pick%)=BCLR(OB_STATE(the_dialog%,pick%),0)
              ~OBJC_DRAW(the_dialog%,pick%,4,rx%,ry%,rw%,rh%)
            ENDIF
          ENDIF
          IF BTST(OB_STATE(the_dialog%,button%),3)=0 THEN
            IF BTST(OB_STATE(the_dialog%,button%),0)=0 THEN
              OB_STATE(the_dialog%,button%)=BSET(OB_STATE(the_dialog%,button%),0)
              ~OBJC_DRAW(the_dialog%,button%,4,rx%,ry%,rw%,rh%)
              pick%=button%
            ENDIF
          ELSE
            pick%=0
          ENDIF
        ENDIF
      ENDIF
    ELSE
      pick_exit%=1
    ENDIF
    IF event_type& AND &X10 THEN ! BUTTON
      button%=OBJC_FIND(the_dialog%,0,4,mx&,my&)
      IF button%=0 THEN
        pick_exit%=2
      ELSE
        IF BTST(OB_STATE(the_dialog%,button%),3)=0 THEN
          pick_exit%=2
        ELSE
          pick_exit%=1
        ENDIF
      ENDIF
    ENDIF
  LOOP UNTIL pick_exit%>0
  DO
  LOOP UNTIL MOUSEK=0
  OB_STATE(the_dialog%,pick%)=BCLR(OB_STATE(the_dialog%,pick%),0)
  ~FORM_DIAL(3,0,0,0,0,rx%-2,ry%-2,rw%+4,rh%+4)
  er%=WIND_UPDATE(2)
  er%=WIND_UPDATE(0)
  IF pick_exit%=3 THEN
    @multi_check
    @pick_help
  ENDIF
RETURN
> PROCEDURE pick_popup
  max_pick%=23
  current_pick%=12
  rw%=OB_W(popup_dialog%,0)+1
  rh%=OB_H(popup_dialog%,0)+1
  rx%=mx&-(popup_width%/2)
  ry%=my&-(popup_height%/2)
  ok%=0
  DO
    IF ry%+rh%>mwy%+mwh% THEN
      ry%=ry%-pick_height%
    ELSE
      ok%=1
    ENDIF
  LOOP UNTIL ok%=1
  ok%=0
  DO
    IF ry%<mwy% THEN
      ry%=ry%+pick_height%
    ELSE
      ok%=1
    ENDIF
  LOOP UNTIL ok%=1
  IF ry%>my& THEN
    ry%=my&
  ENDIF
  ok%=0
  DO
    IF rx%+rw%>mwx%+mww% THEN
      rx%=rx%-8
    ELSE
      ok%=1
    ENDIF
  LOOP UNTIL ok%=1
  ok%=0
  DO
    IF rx%<mwx% THEN
      rx%=rx%+8
    ELSE
      ok%=1
    ENDIF
  LOOP UNTIL ok%=1
  IF rx%>mx& THEN
    rx%=mx&
  ENDIF
  OB_X(popup_dialog%,0)=rx%
  OB_Y(popup_dialog%,0)=ry%
  pick%=current_pick%
  old_pick%=pick%
  IF BTST(OB_STATE(popup_dialog%,pick%),3)=0 THEN
    OB_STATE(popup_dialog%,pick%)=BSET(OB_STATE(popup_dialog%,pick%),0)
  ENDIF
  pick_exit%=0
  er%=WIND_UPDATE(1)
  er%=WIND_UPDATE(3)
  ~FORM_DIAL(0,0,0,0,0,rx%-2,ry%-2,rw%+4,rh%+4)
  ~OBJC_DRAW(popup_dialog%,0,4,rx%-2,ry%-2,rw%+4,rh%+4)
  DO
  LOOP UNTIL MOUSEK=0
  DO
    event_type&=EVNT_MULTI(&X100111,2,1,1,0,rx%,ry%,rw%,rh%,0,0,0,0,0,buffer%,1,mx&,my&,button&,key_state&,key&,clicks&)
    IF event_type& AND &X100 THEN ! IN
      button%=OBJC_FIND(popup_dialog%,0,4,mx&,my&)
      IF event_type& AND &X1 THEN
        IF SHR(key& AND &HFF00,8)=98 THEN
          pick_exit%=3
        ENDIF
      ENDIF
      IF button%>0 THEN
        IF button%<>pick% THEN
          IF pick%>0 THEN
            IF BTST(OB_STATE(popup_dialog%,pick%),0)=TRUE! THEN
              OB_STATE(popup_dialog%,pick%)=BCLR(OB_STATE(popup_dialog%,pick%),0)
              ~OBJC_DRAW(popup_dialog%,pick%,4,rx%,ry%,rw%,rh%)
            ENDIF
          ENDIF
          IF BTST(OB_STATE(popup_dialog%,button%),3)=0 THEN
            IF BTST(OB_STATE(popup_dialog%,button%),0)=0 THEN
              OB_STATE(popup_dialog%,button%)=BSET(OB_STATE(popup_dialog%,button%),0)
              ~OBJC_DRAW(popup_dialog%,button%,4,rx%,ry%,rw%,rh%)
              pick%=button%
            ENDIF
          ELSE
            pick%=0
          ENDIF
        ENDIF
      ENDIF
    ELSE
      pick_exit%=1
    ENDIF
    IF event_type& AND &X10 THEN ! BUTTON
      button%=OBJC_FIND(popup_dialog%,0,4,mx&,my&)
      IF button%=0 THEN
        pick_exit%=2
      ELSE
        IF BTST(OB_STATE(popup_dialog%,button%),3)=0 THEN
          pick_exit%=2
        ELSE
          pick_exit%=1
        ENDIF
      ENDIF
    ENDIF
  LOOP UNTIL pick_exit%>0
  DO
  LOOP UNTIL MOUSEK=0
  OB_STATE(popup_dialog%,pick%)=BCLR(OB_STATE(popup_dialog%,pick%),0)
  ~FORM_DIAL(3,0,0,0,0,rx%-2,ry%-2,rw%+4,rh%+4)
  er%=WIND_UPDATE(2)
  er%=WIND_UPDATE(0)
  IF pick_exit%=3 THEN
    @multi_check
    ' @pick_help
  ENDIF
  IF pick_exit%=2 THEN
    @do_popup
  ENDIF
RETURN
> PROCEDURE do_popup
  SELECT pick%
  CASE 1 ! MERGE
    @merge
  CASE 2 ! CLOSE
    @close
  CASE 3 ! SAVE
    @save
  CASE 4 ! PRINT
    @dump
  CASE 6 ! FIND
    @find
  CASE 7 ! NEXT
    @find_next
  CASE 8 ! REPLACE
    @replace
  CASE 9 ! REPLACE EVERY
    replace_all%=1
    @replace
  CASE 10 ! ADD
    @add
  CASE 11 ! ADD EVERY
    add_all%=1
    @add
    add_all%=0
  CASE 13 ! ASCII CHANGE
    @ascii_change
  CASE 14 ! BIT CHANGE
    @bit_change
  CASE 16 ! COPY
    IF source_file%>-1 THEN
      copy_from%=source_file%
      @copy
    ENDIF
  CASE 17 ! INSERT
    @insert
  CASE 18 ! DELETE
    @delete
  CASE 20 ! GOTO
    @goto
  CASE 21 ! QUIT
    @trying_to_quit
  ENDSELECT
RETURN
> PROCEDURE make_new
  IF last_used%<max_window%-1 THEN
    current%=last_used%+1
    temp%=1
    IF last_used%>-1 THEN
      FOR test%=0 TO last_used%
        IF MID$(view_name$(test%),1,3)="NEW" THEN
          temp_value%=VAL(MID$(view_name$(test%),4,2))
          IF temp_value%>=temp% THEN
            temp%=temp_value%+1
          ENDIF
        ENDIF
      NEXT test%
    ENDIF
    view_name$="NEW"+STR$(temp%)
    size%(current%)=0
    byte_buffer%(current%)=0
    @window_setup
    @set_source
    @set_dest
  ELSE
    @alert_window
  ENDIF
RETURN
> PROCEDURE edit_values
  er%=WIND_UPDATE(1)
  exit%=FORM_DO(main_dialog%,edit%)
  exit%=exit% AND &H7FFF
  IF exit%=b_main_set% THEN
    OB_STATE(main_dialog%,exit%)=BCLR(OB_STATE(main_dialog%,exit%),0)
  ENDIF
  er%=WIND_UPDATE(0)
  @get_text
  @set_text
  object%=exit%
  @get_offset
  @update_main
RETURN
> PROCEDURE ascii_change_all
  IF last_used%>-1 THEN
    SELECT all%
    CASE 0
      IF source_file%<>max_window% THEN
        @ascii_change
      ENDIF
    CASE 1
      FOR current_ascii_change%=0 TO last_used%
        current%=current_ascii_change%
        IF pick%(current%) THEN
          @ascii_change
        ENDIF
        IF abort%=1 THEN
          current_ascii_change%=max_window%
        ENDIF
      NEXT current_ascii_change%
    CASE 2
      FOR current_ascii_change%=0 TO last_used%
        current%=current_ascii_change%
        @ascii_change
        IF abort%=1 THEN
          current_ascii_change%=max_window%
        ENDIF
      NEXT current_ascii_change%
    ENDSELECT
  ENDIF
RETURN
> PROCEDURE ascii_change
  IF size%(current%)>0 AND find$<>"" AND replace$<>"" THEN
    ascii_change_place%=start_value%
    IF ascii_change_place%>size%(current%) THEN
      ascii_change_place%=0
    ENDIF
    IF stop_value%=0 THEN
      ascii_change_stop%=size%(current%)
    ELSE
      ascii_change_stop%=MIN(stop_value%,size%(current%))
    ENDIF
    @do_ascii_change
  ENDIF
RETURN
> PROCEDURE do_ascii_change
  DEFMOUSE 2
  change_flag%=0
  IF match%=1 THEN
    length%=MIN(LEN(find$),LEN(replace$))
    DO WHILE ascii_change_place%<ascii_change_stop%
      temp$=CHR$(PEEK(byte_buffer%(current%)+ascii_change_place%))
      FOR test%=1 TO length%
        test$=MID$(find$,test%,1)
        IF test$=temp$ THEN
          temp2$=MID$(replace$,test%,1)
          IF temp$<>temp2$ THEN
            POKE byte_buffer%(current%)+ascii_change_place%,ASC(temp2$)
            edit%(current%)=1
            change_flag%=1
          ENDIF
          test%=length%
        ENDIF
      NEXT test%
      INC ascii_change_place%
      @abort
      IF abort%=1 THEN
        ascii_change_place%=ascii_change_stop%
      ENDIF
    LOOP
  ELSE
    length%=LEN(find$)
    change_to$=MID$(replace$,1,1)
    DO WHILE ascii_change_place%<ascii_change_stop%
      temp$=CHR$(PEEK(byte_buffer%(current%)+ascii_change_place%))
      FOR test%=1 TO length%
        test$=MID$(find$,test%,1)
        IF test$=temp$ THEN
          IF temp$<>change_to$ THEN
            POKE byte_buffer%(current%)+ascii_change_place%,ASC(change_to$)
            edit%(current%)=1
            change_flag%=1
          ENDIF
          test%=length%
        ENDIF
      NEXT test%
      INC ascii_change_place%
      @abort
      IF abort%=1 THEN
        ascii_change_place%=ascii_change_stop%
      ENDIF
    LOOP
  ENDIF
  IF change_flag% THEN
    @fix_slider
  ENDIF
  DEFMOUSE 0
RETURN
> PROCEDURE bit_change_all
  IF last_used%>-1 THEN
    SELECT all%
    CASE 0
      IF source_file%>-1 THEN
        current%=source_file%
        @bit_change
      ENDIF
    CASE 1
      FOR current_ascii_change%=0 TO last_used%
        current%=current_ascii_change%
        IF pick%(current%) THEN
          @bit_change
        ENDIF
        IF abort%=1 THEN
          current_ascii_change%=max_window%
        ENDIF
      NEXT current_ascii_change%
    CASE 2
      FOR current_ascii_change%=0 TO last_used%
        current%=current_ascii_change%
        @bit_change
        IF abort%=1 THEN
          current_ascii_change%=max_window%
        ENDIF
      NEXT current_ascii_change%
    ENDSELECT
  ENDIF
RETURN
> PROCEDURE bit_change
  IF size%(current%)>0 AND source_text$<>"" THEN
    DEFMOUSE 2
    SELECT dat_type%
    CASE 0
      temp$=source_text$
      @change_ascii_to_hex
      temp$=change$
      @change_hex_to_binary
      bit_change_data$=change$
      temp$=dest_text$
      @change_ascii_to_hex
      temp$=change$
      @change_hex_to_binary
      bit_change_mask$=change$
    CASE 1
      temp$=source_text$
      @change_hex_to_binary
      bit_change_data$=change$
      temp$=dest_text$
      @change_hex_to_binary
      bit_change_mask$=change$
    CASE 2
      bit_change_data$=source_text$
      bit_change_mask$=dest_text$
    ENDSELECT
    bit_change_start%=start_value%
    IF stop_value%=0 THEN
      bit_change_stop%=size%(current%)
    ELSE
      bit_change_stop%=MIN(stop_value%,size%(current%))
    ENDIF
    SELECT bit_size%
    CASE 0
      bit_change_step%=1
      bit_change_width%=8
    CASE 1
      bit_change_step%=2
      bit_change_width%=16
    CASE 2
      bit_change_step%=4
      bit_change_width%=32
    ENDSELECT
    @bit_setup
    @do_bit_change
    IF bit_change_flag% THEN
      @update_display
    ENDIF
    DEFMOUSE 0
  ENDIF
RETURN
> PROCEDURE bit_setup
  dat_size%=MIN(LEN(bit_change_data$),bit_change_width%)
  wild%=0
  wild_check%=0
  bit_change%=0
  FOR set%=0 TO bit_change_width%-1
    IF set%<dat_size%
      con%=ASC(MID$(bit_change_data$,dat_size%-set%,1))-48
      SELECT con%
      CASE 0
        bits%(set%)=con%
        wild_check%=MAX(wild_check%,set%+1)
      CASE 1
        bits%(set%)=con%
        wild_check%=MAX(wild_check%,set%+1)
        bit_change%=BSET(bit_change%,set%)
      DEFAULT
        bits%(set%)=-1
        wild%=1
      ENDSELECT
    ELSE
      wild%=1
      bits%(set%)=-1
    ENDIF
  NEXT set%
  match_0%=0
  match_1%=0
  mask_size%=MIN(LEN(bit_change_mask$),bit_change_width%)
  FOR set%=0 TO 31
    IF set%<mask_size%
      temp%=ASC(MID$(bit_change_mask$,set%+1,1))
    ELSE
      temp%=0
    ENDIF
    SELECT temp%
    CASE 48
      match_0%=BSET(match_0%,mask_size%-(set%+1))
    CASE 49
      match_1%=BSET(match_1%,mask_size%-(set%+1))
    ENDSELECT
  NEXT set%
RETURN
> PROCEDURE do_bit_change
  bit_change_flag%=0
  bit_change_place%=bit_change_start%
  DO WHILE bit_change_place%+bit_change_step%<=bit_change_stop%
    SELECT bit_change_width%
    CASE 8
      temp%=PEEK(byte_buffer%(current%)+bit_change_place%)
    CASE 16
      temp%=DPEEK(byte_buffer%(current%)+bit_change_place%)
    CASE 32
      temp%=LPEEK(byte_buffer%(current%)+bit_change_place%)
    ENDSELECT
    old_temp%=temp%
    test_1%=AND(match_1%,temp%)
    test_0%=AND(match_0%,NOT temp%)
    IF test_0%=match_0% AND test_1%=match_1% THEN
      SELECT op%
      CASE 0 ! AND
        IF wild%=1 THEN
          IF wild_check%>0 THEN
            FOR bit%=1 TO wild_check%
              SELECT bits%(bit%-1)
              CASE 1
                IF BTST(temp%,bit%-1) THEN
                  temp%=BSET(temp%,bit%-1)
                ENDIF
              CASE 0
                temp%=BCLR(temp%,bit%-1)
              ENDSELECT
            NEXT bit%
          ENDIF
        ELSE
          temp%=AND(temp%,bit_change%)
        ENDIF
      CASE 1 ! OR
        IF wild%=1 THEN
          IF wild_check%>0 THEN
            FOR bit%=1 TO wild_check%
              SELECT bits%(bit%-1)
              CASE 1
                temp%=BSET(temp%,bit%-1)
              ENDSELECT
            NEXT bit%
          ENDIF
        ELSE
          temp%=OR(temp%,bit_change%)
        ENDIF
      CASE 2 ! XOR
        IF wild%=1 THEN
          IF wild_check%>0 THEN
            FOR bit%=1 TO wild_check%
              SELECT bits%(bit%-1)
              CASE 1
                IF BTST(temp%,bit%-1)=0 THEN
                  temp%=BSET(temp%,bit%-1)
                ENDIF
              CASE 0
                IF BTST(temp%,bit%-1) THEN
                  temp%=BCLR(temp%,bit%-1)
                ENDIF
              ENDSELECT
            NEXT bit%
          ENDIF
        ELSE
          temp%=XOR(temp%,bit_change%)
        ENDIF
      CASE 3 ! FLIP
        FOR flip%=0 TO bit_change_width%-1
          temp%=BCHG(temp%,flip%)
        NEXT flip%
      CASE 4 ! L SHIFT
        SELECT bit_change_width%
        CASE 8
          temp%=SHL|(temp%,1)
        CASE 16
          temp%=SHL&(temp%,1)
        CASE 32
          temp%=SHL(temp%,1)
        ENDSELECT
      CASE 5 ! R SHIFT
        SELECT bit_change_width%
        CASE 8
          temp%=SHR|(temp%,1)
        CASE 16
          temp%=SHR&(temp%,1)
        CASE 32
          temp%=SHR(temp%,1)
        ENDSELECT
      CASE 6 ! REVERSE
        temp_2%=temp%
        FOR reverse%=0 TO bit_change_width%-1
          IF BTST(temp_2%,bit_change_width%-(reverse%+1)) THEN
            temp%=BSET(temp%,reverse%)
          ELSE
            temp%=BCLR(temp%,reverse%)
          ENDIF
        NEXT reverse%
      CASE 7 ! L ROTATE
        SELECT bit_change_width%
        CASE 8
          temp%=ROL|(temp%,1)
        CASE 16
          temp%=ROL&(temp%,1)
        CASE 32
          temp%=ROL(temp%,1)
        ENDSELECT
      CASE 8 ! R ROTATE
        SELECT bit_change_width%
        CASE 8
          temp%=ROR|(temp%,1)
        CASE 16
          temp%=ROR&(temp%,1)
        CASE 32
          temp%=ROR(temp%,1)
        ENDSELECT
      ENDSELECT
      IF old_temp%<>temp% THEN
        SELECT bit_change_width%
        CASE 8
          POKE byte_buffer%(current%)+bit_change_place%,temp%
        CASE 16
          DPOKE byte_buffer%(current%)+bit_change_place%,temp%
        CASE 32
          LPOKE byte_buffer%(current%)+bit_change_place%,temp%
        ENDSELECT
        edit%(current%)=1
        bit_change_flag%=1
      ENDIF
    ENDIF
    bit_change_place%=bit_change_place%+bit_change_step%
    @abort
    IF abort%=1 THEN
      bit_change_place%=bit_change_stop%
    ENDIF
  LOOP
RETURN
> PROCEDURE copy
  current%=copy_from%
  IF size%(copy_from%)>0 THEN
    IF dest_file%=-1 THEN
      IF last_used%<max_window%-1 THEN
        @make_new
        copy_to%=current%
      ELSE
        copy_to%=-1
      ENDIF
    ELSE
      copy_to%=dest_file%
    ENDIF
    IF copy_to%>-1 THEN
      @copy_to
    ENDIF
  ENDIF
RETURN
> PROCEDURE copy_to
  copy_start%=start_value%
  IF stop_value%=0 THEN
    copy_stop%=size%(copy_from%)
  ELSE
    copy_stop%=MIN(stop_value%,size%(copy_from%))
  ENDIF
  copy_at%=view%(copy_to%)
  IF copy_stop%+copy_start%=0 THEN
    copy_block%=0
  ELSE
    copy_block%=copy_stop%+1-copy_start%
    IF copy_start%+copy_block%>size%(copy_from%) THEN
      copy_block%=size%(copy_from%)-copy_start%
    ENDIF
  ENDIF
  IF copy_start%<=size%(copy_from%) THEN
    IF copy_block%<1 THEN
      copy_start%=0
      copy_block%=size%(copy_from%)
    ENDIF
    need%=size%(copy_to%)+copy_block%
    temp_buffer%=GEMDOS(72,L:need%)
    IF temp_buffer%>0 THEN
      top_copy_size%=copy_at%
      bottom_copy_size%=size%(copy_to%)-copy_at%
      IF top_copy_size% THEN
        BMOVE byte_buffer%(copy_to%),temp_buffer%,top_copy_size%
        copy_at%=top_copy_size%
      ENDIF
      BMOVE byte_buffer%(copy_from%)+copy_start%,temp_buffer%+copy_at%,copy_block%
      copy_at%=copy_at%+copy_block%
      IF bottom_copy_size%>0 THEN
        BMOVE byte_buffer%(copy_to%)+top_copy_size%,temp_buffer%+copy_at%,bottom_copy_size%
      ENDIF
      IF byte_buffer%(copy_to%) THEN
        d%=GEMDOS(73,L:byte_buffer%(copy_to%)) ! RELEASE MEMORY
      ENDIF
      byte_buffer%(copy_to%)=temp_buffer%
      size%(copy_to%)=need%
      current%=copy_to%
      IF top_copy_size%+bottom_copy_size%>0 THEN
        edit%(current%)=1
      ENDIF
      @title
      @size_slider
      @update_display
    ELSE
      @alert_copy
    ENDIF
  ENDIF
RETURN
> PROCEDURE insert_all
  IF last_used%>-1 THEN
    old_current%=current%
    SELECT all%
    CASE 0
      IF source_file%>-1 THEN
        current%=source_file%
        @insert
      ENDIF
    CASE 1
      FOR current_insert%=0 TO last_used%
        current%=current_insert%
        IF pick%(current%) THEN
          @insert
        ENDIF
        IF abort%=1 THEN
          current_insert%=max_window%
        ENDIF
      NEXT current_insert%
    CASE 2
      FOR current_insert%=0 TO last_used%
        current%=current_insert%
        @insert
        IF abort%=1 THEN
          current_insert%=max_window%
        ENDIF
      NEXT current_insert%
    ENDSELECT
    current%=old_current%
  ENDIF
RETURN
> PROCEDURE insert
  IF source_text$<>"" THEN
    insert_start%=start_value%
    IF stop_value%=0 THEN
      insert_stop%=size%(current%)
    ELSE
      insert_stop%=MIN(stop_value%,size%(current%))
    ENDIF
    insert_every%=every_value%
    IF insert_start%<=size%(current%)
      SELECT dat_type%
      CASE 0 ! ASCII
        temp_text$=source_text$
      CASE 1 ! HEX
        temp$=source_text$
        @change_hex_to_ascii
        temp_text$=change$
      CASE 2 ! BINARY
        temp$=source_text$
        @change_binary_to_ascii
        temp_text$=change$
      ENDSELECT
      IF size_value%=0 THEN
        insert_value$=temp_text$
        insert_size%=LEN(insert_value$)
        insert_length%=LEN(insert_value$)
      ELSE
        insert_value$=STRING$(MIN(size_value%,32000),MID$(temp_text$,1,1))
        insert_size%=size_value%
        insert_length%=LEN(insert_value$)
      ENDIF
      insert%=insert_start%
      insert_times%=0
      IF insert_every%>0 AND insert_stop%>0 THEN
        DO WHILE insert%<insert_stop%
          INC insert_times%
          insert%=insert%+insert_every%
        LOOP
      ELSE
        insert_times%=1
      ENDIF
      free%=GEMDOS(72,L:-1)
      need%=size%(current%)+insert_size%*insert_times%
      IF need%<=free% THEN
        temp_buffer%=GEMDOS(72,L:need%)
        DEFMOUSE 2
        edit%(current%)=1
        IF insert_start%>0 THEN
          BMOVE byte_buffer%(current%),temp_buffer%,insert_start%
        ENDIF
        insert_at%=insert_start%
        insert_on%=0
        insert_value%=V:insert_value$
        insert_point%=insert_start%
        DO WHILE insert_on%<=insert_times%
          temp%=need%-insert_at%
          IF temp%>=insert_size% THEN
            IF insert_length%<insert_size% THEN
              insert_add%=0
              DO
                temp2%=MIN(insert_size%-insert_add%,32000)
                BMOVE insert_value%,temp_buffer%+insert_at%,temp2%
                insert_at%=insert_at%+temp2%
                insert_add%=insert_add%+temp2%
              LOOP UNTIL insert_add%>=insert_size%
            ELSE
              BMOVE insert_value%,temp_buffer%+insert_at%,insert_length%
              insert_at%=insert_at%+insert_length%
            ENDIF
          ENDIF
          temp%=size%(current%)-(insert_start%+insert_on%*insert_every%)
          IF temp%>=insert_every% AND insert_every%>0 THEN
            BMOVE byte_buffer%(current%)+insert_point%,temp_buffer%+insert_at%,insert_every%
            insert_at%=insert_at%+insert_every%
            insert_point%=insert_point%+insert_every%
          ENDIF
          INC insert_on%
          @abort
          IF abort%=1 THEN
            insert_on%=insert_times%
          ENDIF
        LOOP UNTIL insert_on%>=insert_times%
        temp%=size%(current%)-insert_point%
        IF temp%>0 THEN
          BMOVE byte_buffer%(current%)+insert_point%,temp_buffer%+insert_at%,temp%
        ENDIF
        IF byte_buffer%(current%) THEN
          d%=GEMDOS(73,L:byte_buffer%(current%)) ! RELEASE MEMORY
        ENDIF
        byte_buffer%(current%)=temp_buffer%
        size%(current%)=need%
        @title
        @size_slider
        @update_display
        DEFMOUSE 0
      ELSE
        alert$(0)=""
        alert$(1)="Sorry, not enough free memory to"
        alert$(2)="complete insert."
        alert$(3)=""
        alert$(4)=""
        alert$(5)=""
        alert$(6)="OK"
        alert$(7)=""
        alert_button%=1
        @alert
      ENDIF
    ENDIF
  ENDIF
RETURN
> PROCEDURE delete_all
  IF last_used%>-1 THEN
    old_current%=current%
    SELECT all%
    CASE 0
      IF source_file%>-1 THEN
        current%=source_file%
        @delete
      ENDIF
    CASE 1
      FOR current_delete%=0 TO last_used%
        current%=current_delete%
        IF size%(current%)>0 THEN
          IF pick%(current%) THEN
            @delete
          ENDIF
        ENDIF
        IF abort%=1 THEN
          current_delete%=max_window%
        ENDIF
      NEXT current_delete%
    CASE 2
      FOR current_delete%=0 TO last_used%
        current%=current_delete%
        IF size%(current%)>0 THEN
          @delete
        ENDIF
        IF abort%=1 THEN
          current_delete%=max_window%
        ENDIF
      NEXT current_delete%
    ENDSELECT
    current%=old_current%
  ENDIF
RETURN
> PROCEDURE delete
  delete_start%=start_value%
  IF stop_value%=0 THEN
    delete_stop%=size%(current%)
  ELSE
    delete_stop%=MIN(stop_value%,size%(current%))
  ENDIF
  delete_every%=every_value%
  old_size%=size%(current%)
  IF delete_start%<size%(current%)
    DEFMOUSE 2
    delete_at%=delete_start%
    IF match% AND source_text$<>"" THEN
      SELECT dat_type%
      CASE 0 ! ASCII
        delete_value$=source_text$
      CASE 1 ! HEX
        temp$=source_text$
        @change_hex_to_ascii
        delete_value$=source_text$
      CASE 2 ! BINARY
        temp$=source_text$
        @change_binary_to_ascii
        delete_value$=source_text$
      ENDSELECT
      delete_size%=LEN(delete_value$)
      DO WHILE delete_at%<delete_stop%
        old_at%=old_size%
        temp$=CHR$(PEEK(byte_buffer%(current%)+delete_at%))
        FOR test%=1 TO delete_size%
          test$=MID$(delete_value$,test%,1)
          IF test$=temp$ THEN
            delete_move%=old_size%-(delete_at%+1)
            IF delete_move%>0 THEN
              BMOVE byte_buffer%(current%)+delete_at%+1,byte_buffer%(current%)+delete_at%,delete_move%
            ENDIF
            DEC old_size%
            DEC delete_stop%
            edit%(current%)=1
            test%=delete_size%
          ENDIF
        NEXT test%
        IF old_at%=old_size% THEN
          INC delete_at%
        ENDIF
        @abort
        IF abort%=1 THEN
          delete_at%=delete_stop%
        ENDIF
      LOOP
    ELSE
      IF delete_every%=0 THEN
        delete_block%=delete_stop%+1-delete_start%
        delete_move%=size%(current%)-(delete_block%+delete_start%)
        IF delete_move%>0 THEN
          BMOVE byte_buffer%(current%)+delete_start%+delete_block%,byte_buffer%(current%)+delete_start%,delete_move%
        ENDIF
        old_size%=old_size%-delete_block%
        edit%(current%)=1
      ELSE
        delete_size%=size_value%
        IF delete_size%>0 AND delete_size%<delete_every% THEN
          DO WHILE delete_at%<delete_stop%-delete_size%
            delete_move%=old_size%-(delete_at%+delete_size%)
            BMOVE byte_buffer%(current%)+delete_at%+delete_size%,byte_buffer%(current%)+delete_at%,delete_move%
            delete_at%=delete_at%+delete_every%-delete_size%
            old_size%=old_size%-delete_size%
            delete_stop%=delete_stop%-delete_size%
            edit%(current%)=1
          LOOP
        ENDIF
      ENDIF
    ENDIF
    IF old_size%<size%(current%) THEN
      size%(current%)=old_size%
      IF size%(current%)>0 THEN
        free%=GEMDOS(72,L:-1)
        IF free%>size%(current%) THEN
          temp_buffer%=GEMDOS(72,L:size%(current%))
          IF temp_buffer%>0 THEN
            BMOVE byte_buffer%(current%),temp_buffer%,size%(current%)
            IF byte_buffer%(current%) THEN
              d%=GEMDOS(73,L:byte_buffer%(current%)) ! RELEASE MEMORY
            ENDIF
            byte_buffer%(current%)=temp_buffer%
          ENDIF
        ENDIF
      ELSE
        IF byte_buffer%(current%)>0 THEN
          d%=GEMDOS(73,L:byte_buffer%(current%)) ! RELEASE MEMORY
        ENDIF
        size%(current%)=0
      ENDIF
      @title
      @size_slider
      @update_display
    ENDIF
    DEFMOUSE 0
  ENDIF
RETURN
> PROCEDURE search_file
  IF find$<>"" THEN
    @hide_mouse
    FILESELECT #"Select file to search",search_path$+"*.*",search_name$,search_name$
    @show_mouse
    @load_search_file
  ENDIF
RETURN
> PROCEDURE load_search_file
  IF search_name$<>"" THEN
    search_test%=RINSTR(search_name$,"\")
    IF search_test% THEN
      search_path$=MID$(search_name$,1,search_test%)
      search_name$=MID$(search_name$,search_test%+1)
    ELSE
      search_path$="\"
    ENDIF
    IF search_name$<>""
      exit%=0
      search_file$(0)=search_path$
      search_found%=0
      search_file$=search_path$+search_name$+CHR$(0)
      ' ~FSETDTA(dta%)
      finished%=GEMDOS(78,L:V:search_file$,&X100111)
      DEFMOUSE 2
      IF finished%=0 THEN
        search_show%=0
        finding$=find$
        IF case%=0 THEN
          finding$=UPPER$(finding$)
        ENDIF
        CHAR{{OB_SPEC(search_dialog%,t_search_find%)}}=finding$
        ~FORM_DIAL(0,0,0,0,0,search_x%,search_y%,search_w%,search_h%)
        ~OBJC_DRAW(search_dialog%,0,4,search_x%,search_y%,search_w%,search_h%)
        DO UNTIL finished%
          file$=CHAR{dta%+30}
          IF file$<>"." AND file$<>".."
            @get_search_file
          ENDIF
          ' ~FSETDTA(dta%)
          finished%=GEMDOS(79)
          @abort
          IF abort%=1 THEN
            exit%=1
          ENDIF
        LOOP UNTIL exit%=1
        ~FORM_DIAL(3,0,0,0,0,search_x%,search_y%,search_w%,search_h%)
      ENDIF
      IF search_found%>0 THEN
        alert$(0)=""
        alert$(1)=STR$(search_found%)+" files contain"
        alert$(2)=finding$
        alert$(3)="Would you like to save a list"
        alert$(4)="of the filenames?"
        alert$(5)="Save"
        alert$(6)=""
        alert$(7)="Cancel"
        alert_button%=2
        @alert
        button%=alert_exit%
        SELECT button%
        CASE 0
          @hide_mouse
          FILESELECT #"Save search file list",search_list_path$+"*.*",search_list_name$,search_list_name$
          @show_mouse
          search_test%=RINSTR(search_list_name$,"\")
          IF search_test% THEN
            search_list_path$=MID$(search_list_name$,1,search_test%)
            search_list_name$=MID$(search_list_name$,search_test%+1)
          ELSE
            search_list_path$="\"
          ENDIF
          search_file$=search_list_path$+search_list_name$+CHR$(0)
          ' ~FSETDTA(dta%)
          finished%=GEMDOS(78,L:V:search_file$,&X100111)
          DEFMOUSE 2
          button%=0
          IF finished%=0 THEN
            temp$=search_list_name$
            @alert_exists
          ENDIF
          IF button%=0 THEN
            temp$="PATH->"+search_file$(0)
            len%=MAX(LEN(temp$),20)
            OPEN "O",#1,search_list_path$+search_list_name$
            temp2$="FILE SPY SEARCH LIST"
            temp%=LEN(temp2$)
            IF temp%=len% THEN
              PRINT #1,temp2$
            ELSE
              PRINT #1,temp2$+SPACE$(len%-temp%)
            ENDIF
            temp%=LEN(temp$)
            IF temp%=len% THEN
              PRINT #1,temp$
            ELSE
              PRINT #1,temp$+SPACE$(len%-temp%)
            ENDIF
            FOR x%=1 TO search_found%
              temp%=LEN(search_file$(x%))
              IF temp%=len% THEN
                PRINT #1,search_file$(x%)
              ELSE
                PRINT #1,search_file$(x%)+SPACE$(len%-temp%)
              ENDIF
            NEXT x%
            PRINT #1,"FOUND->"+finding$
            CLOSE #1
          ENDIF
        ENDSELECT
      ENDIF
      DEFMOUSE 0
    ENDIF
  ENDIF
RETURN
> PROCEDURE get_search_file
  CHAR{{OB_SPEC(search_dialog%,t_search_file%)}}=file$
  ~OBJC_DRAW(search_dialog%,t_search_file%,4,search_x%,search_y%,search_w%,search_h%)
  temp$=search_path$+file$
  CHAR{file_name_buffer%}=temp$
  file_handle&=GEMDOS(61,L:file_name_buffer%,0)
  size%=LPEEK(dta%+26)
  search_done%=0
  IF size%>32000 THEN
    search_file_size%=32000
    searching%=0
    DO
      SEEK #1,searching%
      ~GEMDOS(63,W:file_handle&,L:serach_file_size%,L:search_file_buffer%)
      ~GEMDOS(62,W:file_handle&)
      @do_search_file
      searching%=searching%+31900
      IF searching%+search_file_size%>size% THEN
        search_file_size%=size%-searching%
      ENDIF
    LOOP UNTIL searching%>size% OR search_done%=1
  ELSE
    search_file_size%=size%
    temp$=search_path$+file$
    CHAR{file_name_buffer%}=temp$
    file_handle&=GEMDOS(61,L:file_name_buffer%,0)
    ~GEMDOS(63,W:file_handle&,L:search_file_size%,L:search_file_buffer%)
    @do_search_file
  ENDIF
  ~GEMDOS(62,W:file_handle&)
  IF search_done%=1 THEN
    INC search_found%
    search_file$(search_found%)=file$
    IF search_show%=0 THEN
      alert$(0)=""
      alert$(1)=file$+" contains"
      alert$(2)=finding$
      alert$(3)=""
      alert$(4)="What should I do now?"
      alert$(5)="Continue"
      alert$(6)="No alert"
      alert$(7)="Cancel"
      alert_button%=0
      @alert
      button%=alert_exit%
      SELECT button%
      CASE 0
      CASE 1
        search_show%=1
      CASE 2
        exit%=1
      ENDSELECT
      ~OBJC_DRAW(search_dialog%,0,4,search_x%,search_y%,search_w%,search_h%)
    ENDIF
    DEFMOUSE 2
  ENDIF
RETURN
> PROCEDURE do_search_file
  search_buffer$=SPACE$(search_file_size%)
  search_buffer%=VARPTR(search_buffer$)
  BMOVE search_file_buffer%,search_buffer%,search_file_size%
  IF case%=0 THEN
    search_buffer$=UPPER$(search_buffer$)
  ENDIF
  test%=INSTR(search_buffer$,finding$)
  IF test%>0 THEN
    search_done%=1
  ENDIF
RETURN
> PROCEDURE find
  IF size%(current%)>0 AND find$<>"" THEN
    replace%=0
    search_place%=start_value%
    IF search_place%>size%(current%) THEN
      search_place%=0
    ENDIF
    IF stop_value%=0 THEN
      search_stop%=size%(current%)
    ELSE
      search_stop%=MIN(stop_value%,size%(current%))
    ENDIF
    @do_search
  ENDIF
RETURN
> PROCEDURE find_all
  IF last_used%>-1 THEN
    IF find$<>"" THEN
      old_current%=current%
      SELECT all%
      CASE 0
        IF source_file%>-1 THEN
          current%=source_file%
          IF size%(current%)>0 THEN
            replace%=0
            search_place%=start_value%
            IF search_place%>size%(current%) THEN
              search_place%=0
            ENDIF
            IF stop_value%=0 THEN
              search_stop%=size%(current%)
            ELSE
              search_stop%=MIN(stop_value%,size%(current%))
            ENDIF
            @do_search
          ENDIF
        ENDIF
      CASE 1
        FOR current_finding%=0 TO last_used%
          current%=current_finding%
          IF size%(current%)>0 THEN
            replace%=0
            search_place%=start_value%
            IF search_place%>size%(current%) THEN
              search_place%=0
            ENDIF
            IF stop_value%=0 THEN
              search_stop%=size%(current%)
            ELSE
              search_stop%=MIN(stop_value%,size%(current%))
            ENDIF
            IF pick%(current%) THEN
              @do_search
            ENDIF
          ENDIF
          IF abort%=1 THEN
            current_finding%=max_window%
          ENDIF
        NEXT current_finding%
      CASE 2
        FOR current_finding%=0 TO last_used%
          current%=current_finding%
          IF size%(current%)>0 THEN
            replace%=0
            search_place%=start_value%
            IF search_place%>size%(current%) THEN
              search_place%=0
            ENDIF
            IF stop_value%=0 THEN
              search_stop%=size%(current%)
            ELSE
              search_stop%=MIN(stop_value%,size%(current%))
            ENDIF
            @do_search
          ENDIF
          IF abort%=1 THEN
            current_finding%=max_window%
          ENDIF
        NEXT current_finding%
      ENDSELECT
      current%=old_current%
    ENDIF
  ENDIF
RETURN
> PROCEDURE replace
  IF size%(current%)>0 AND find$<>"" AND replace$<>"" THEN
    search_place%=start_value%
    IF search_place%>size%(current%) THEN
      search_place%=0
    ENDIF
    IF stop_value%=0 THEN
      search_stop%=size%(current%)
    ELSE
      search_stop%=MIN(stop_value%,size%(current%))
    ENDIF
    replace%=1
    @do_search
  ENDIF
RETURN
> PROCEDURE replace_all
  IF last_used%>-1 THEN
    IF find$<>"" AND replace$<>"" THEN
      old_current%=current%
      SELECT all%
      CASE 0
        IF source_file%>-1 THEN
          current%=source_file%
          IF size%(current%)>0 THEN
            replace%=1
            search_place%=start_value%
            IF search_place%>size%(current%) THEN
              search_place%=0
            ENDIF
            IF stop_value%=0 THEN
              search_stop%=size%(current%)
            ELSE
              search_stop%=MIN(stop_value%,size%(current%))
            ENDIF
            @do_search
          ENDIF
        ENDIF
      CASE 1
        FOR current_finding%=0 TO last_used%
          current%=current_finding%
          IF size%(current%)>0 THEN
            replace%=1
            search_place%=start_value%
            IF search_place%>size%(current%) THEN
              search_place%=0
            ENDIF
            IF stop_value%=0 THEN
              search_stop%=size%(current%)
            ELSE
              search_stop%=MIN(stop_value%,size%(current%))
            ENDIF
            IF pick%(current%) THEN
              @do_search
            ENDIF
          ENDIF
          IF abort%=1 THEN
            current_finding%=max_window%
          ENDIF
        NEXT current_finding%
      CASE 2
        FOR current_finding%=0 TO last_used%
          current%=current_finding%
          IF size%(current%)>0 THEN
            replace%=1
            search_place%=start_value%
            IF search_place%>size%(current%) THEN
              search_place%=0
            ENDIF
            IF stop_value%=0 THEN
              search_stop%=size%(current%)
            ELSE
              search_stop%=MIN(stop_value%,size%(current%))
            ENDIF
            @do_search
          ENDIF
          IF abort%=1 THEN
            current_finding%=max_window%
          ENDIF
        NEXT current_finding%
      ENDSELECT
      old_current%=current%
    ENDIF
  ENDIF
RETURN
> PROCEDURE add
  IF source_text$<>"" THEN
    DEFMOUSE 2
    finding$=find$
    IF case%=0 THEN
      finding$=UPPER$(finding$)
    ENDIF
    length%=LEN(finding$)
    err_flag%=0
    add_start%=start_value%
    IF stop_value%=0 THEN
      add_stop%=size%(current%)
    ELSE
      add_stop%=MIN(stop_value%,size%(current%))
    ENDIF
    IF add_start%<=size%(current%)
      SELECT dat_type%
      CASE 0 ! ASCII
        temp_text$=dest_text$
      CASE 1 ! HEX
        temp$=dest_text$
        @change_hex_to_ascii
        temp_text$=change$
      CASE 2 ! BINARY
        temp$=dest_text$
        @change_binary_to_ascii
        temp_text$=change$
      ENDSELECT
      IF size_value%=0 THEN
        add_value$=temp_text$
        add_size%=LEN(add_value$)
      ELSE
        add_value$=MID$(temp_text$,1,1)
        add_size%=size_value%
      ENDIF
      add_value%=V:add_value$
      find_flag%=0
      add_place%=add_start%
      temp_stop%=add_stop%
      temp_size%=size%(current%)
      DO WHILE abort%=0
        search_size%=32000
        temp%=add_place%+32000-size%(current%)
        IF temp%>0 THEN
          search_size%=search_size%-temp%
        ENDIF
        search_buffer$=SPACE$(search_size%)
        search_buffer%=V:search_buffer$
        BMOVE byte_buffer%(current%)+add_place%,search_buffer%,search_size%
        IF case%=0 THEN
          search_buffer$=UPPER$(search_buffer$)
        ENDIF
        test%=INSTR(search_buffer$,finding$)
        IF test%>0 THEN
          add_place%=add_place%+test%-1
          IF add_place%<=temp_stop% THEN
            temp_size%=temp_size%+add_size%
            temp_stop%=temp_stop%+length%
            add_place%=add_place%+length%
            find_flag%=1
          ENDIF
        ELSE
          add_place%=add_place%+32000-length%
        ENDIF
        @abort
        IF abort%=1 THEN
          add_place%=add_stop%+1
        ENDIF
      LOOP WHILE (add_all%=1 OR find_flag%=0) AND add_place%<=temp_stop%
      IF abort%=0 THEN
        IF find_flag%=1 THEN
          free%=GEMDOS(72,L:-1)
          IF free%>temp_size% THEN
            temp_buffer%=GEMDOS(72,L:temp_size%)
            IF temp_buffer%>0 THEN
              BMOVE byte_buffer%(current%),temp_buffer%,size%(current%)
              IF byte_buffer%(current%) THEN
                d%=GEMDOS(73,L:byte_buffer%(current%)) ! RELEASE MEMORY
              ENDIF
              byte_buffer%(current%)=temp_buffer%
            ELSE
              err_flag%=1
            ENDIF
          ELSE
            err_flag%=1
          ENDIF
        ENDIF
      ENDIF
      find_flag%=0
      add_place%=add_start%
      IF abort%=0 THEN
        DO
          search_size%=32000
          temp%=add_place%+32000-size%(current%)
          IF temp%>0 THEN
            search_size%=search_size%-temp%
          ENDIF
          search_buffer$=SPACE$(search_size%)
          search_buffer%=V:search_buffer$
          BMOVE byte_buffer%(current%)+add_place%,search_buffer%,search_size%
          IF case%=0 THEN
            search_buffer$=UPPER$(search_buffer$)
          ENDIF
          test%=INSTR(search_buffer$,finding$)
          IF test%>0 THEN
            add_place%=add_place%+test%-1
            IF add_place%<=add_stop% THEN
              temp%=size%(current%)-add_place%
              IF temp%>0 THEN
                BMOVE byte_buffer%(current%)+add_place%,byte_buffer%(current%)+add_place%+add_size%,temp%
              ENDIF
              IF add_size%=LEN(add_value$) THEN
                BMOVE add_value%,byte_buffer%(current%)+add_place%,add_size%
              ELSE
                FOR x%=0 TO add_size%-1
                  BMOVE add_value%,byte_buffer%(current%)+add_place%+x%,1
                NEXT x%
              ENDIF
              size%(current%)=size%(current%)+add_size%
              add_stop%=add_stop%+add_size%
              add_place%=add_place%+add_size%+length%
              find_flag%=1
              @bell
            ELSE
              add_place%=add_stop%+1
            ENDIF
          ELSE
            add_place%=add_place%+32000-length%
          ENDIF
          @abort
          IF abort%=1 THEN
            add_place%=add_stop%+1
          ENDIF
        LOOP WHILE (add_all%=1 OR find_flag%=0) AND add_place%<=add_stop%
      ENDIF
      IF abort%=0 THEN
        IF err_flag% THEN
          alert$(0)=""
          alert$(1)="Sorry, not enough free memory to"
          alert$(2)="complete add."
          alert$(3)=""
          alert$(4)=""
          alert$(5)=""
          alert$(6)="OK"
          alert$(7)=""
          alert_button%=1
          @alert
        ENDIF
        IF find_flag%>0 THEN
          edit%(current%)=1
          @size_slider
          @title
          @fix_slider
        ENDIF
      ENDIF
    ENDIF
    DEFMOUSE 0
  ENDIF
RETURN
> PROCEDURE add_all
  IF last_used%>-1 THEN
    old_current%=current%
    SELECT all%
    CASE 0
      IF source_file%>-1 THEN
        current%=source_file%
        @add
      ENDIF
    CASE 1
      FOR current_add%=0 TO last_used%
        current%=current_add%
        IF size%(current%)>0 THEN
          IF pick%(current%) THEN
            @add
          ENDIF
        ENDIF
        IF abort%=1 THEN
          current_add%=max_window%
        ENDIF
      NEXT current_add%
    CASE 2
      FOR current_add%=0 TO last_used%
        current%=current_add%
        IF size%(current%)>0 THEN
          @add
        ENDIF
        IF abort%=1 THEN
          current_add%=max_window%
        ENDIF
      NEXT current_add%
    ENDSELECT
    current%=old_current%
  ENDIF
RETURN
> PROCEDURE find_next
  IF size%(current%)>0 AND find$<>"" THEN
    replace%=0
    search_place%=search%(current%)
    IF stop_value%=0 THEN
      search_stop%=size%(current%)
    ELSE
      search_stop%=MIN(stop_value%,size%(current%))
    ENDIF
    @do_search
  ENDIF
RETURN
> PROCEDURE find_next_all
  IF last_used%>-1 THEN
    IF find$<>"" THEN
      old_current%=current%
      SELECT all%
      CASE 0
        IF source_file%>-1 THEN
          current%=source_file%
          IF size%(current%)>0 THEN
            search_place%=search%(current%)
            search_stop%=size%(current%)
            replace%=0
            @do_search
          ENDIF
        ENDIF
      CASE 1
        FOR current_finding%=0 TO last_used%
          current%=current_finding%
          IF size%(current%)>0 THEN
            search_place%=search%(current%)
            search_stop%=size%(current%)
            replace%=0
            IF pick%(current%) THEN
              @do_search
            ENDIF
          ENDIF
          IF abort%=1 THEN
            current_finding%=max_window%
          ENDIF
        NEXT current_finding%
      CASE 2
        FOR current_finding%=0 TO last_used%
          current%=current_finding%
          IF size%(current%)>0 THEN
            search_place%=search%(current%)
            search_stop%=size%(current%)
            replace%=0
            @do_search
          ENDIF
          IF abort%=1 THEN
            current_finding%=max_window%
          ENDIF
        NEXT current_finding%
      ENDSELECT
      old_current%=current%
    ENDIF
  ENDIF
RETURN
> PROCEDURE do_search
  DEFMOUSE 2
  finding$=find$
  length%=LEN(finding$)
  find_flag%=0
  DO
    found%(current%)=-1
    DO
      search_size%=32000
      temp%=search_place%+32000-size%(current%)
      IF temp%>0 THEN
        search_size%=search_size%-temp%
      ENDIF
      search_buffer$=SPACE$(search_size%)
      search_buffer%=VARPTR(search_buffer$)
      BMOVE byte_buffer%(current%)+search_place%,search_buffer%,search_size%
      IF case%=0 THEN
        search_buffer$=UPPER$(search_buffer$)
        finding$=UPPER$(finding$)
      ENDIF
      test%=INSTR(search_buffer$,finding$)
      IF test%>0 THEN
        found%(current%)=search_place%+test%-1
        search%(current%)=found%(current%)+1
        search_place%=search_place%+test%
        IF replace%=1 THEN
          @do_replace
        ENDIF
      ELSE
        search_place%=search_place%+32000-length%
      ENDIF
      @abort
      IF abort%=1 THEN
        search_place%=size%(current%)+1
      ENDIF
    LOOP UNTIL (found%(current%)>-1 AND replace_all%=0) OR search_place%>size%(current%)
    IF search_place%>size%(current%) THEN
      find_flag%=1
      search_place%=0
    ENDIF
    IF found%(current%)>-1 THEN
      IF replace%=0 THEN
        view%(current%)=found%(current%)
      ENDIF
      find_flag%=2
      @bell
    ENDIF
  LOOP UNTIL find_flag%>0
  IF find_flag%>1 THEN
    @info_line
    @fix_slider
  ENDIF
  replace_all%=0
  DEFMOUSE 0
RETURN
> PROCEDURE do_replace
  replace_size%=MIN(LEN(find$),LEN(replace$))
  replace_place%=found%(current%)
  replace_address%=VARPTR(replace$)
  IF replace_place%+replace_size%<=size%(current%) THEN
    BMOVE replace_address%,byte_buffer%(current%)+replace_place%,replace_size%
    edit%(current%)=1
  ENDIF
RETURN
> PROCEDURE dump_all
  IF last_used%>-1 THEN
    old_current%=current%
    SELECT all%
    CASE 0
      IF source_file%>-1 THEN
        current%=source_file%
        @dump
      ENDIF
    CASE 1
      FOR current_dump%=0 TO last_used%
        current%=current_dump%
        IF pick%(current%) THEN
          @dump
        ENDIF
        IF abort%=1 THEN
          current_dump%=max_window%
        ENDIF
      NEXT current_dump%
    CASE 2
      FOR current_dump%=0 TO last_used%
        current%=current_dump%
        @dump
        IF abort%=1 THEN
          current_dump%=max_window%
        ENDIF
      NEXT current_dump%
    ENDSELECT
    current%=old_current%
  ENDIF
RETURN
> PROCEDURE dump
  IF size%(current%)>0 THEN
    prn_place%=start_value%
    IF prn_place%>size%(current%) THEN
      prn_place%=0
    ENDIF
    IF stop_value%=0 THEN
      prn_stop%=size%(current%)
    ELSE
      prn_stop%=MIN(stop_value%,size%(current%))
    ENDIF
    IF where%=0 THEN
      IF OUT?(0)
        @printer_dump
      ELSE
        DO
          alert$(0)=""
          alert$(1)="Sorry, but your printer will not"
          alert$(2)="talk to me. What should I do ?"
          alert$(3)=""
          alert$(4)=""
          alert$(5)="Try again"
          alert$(6)=""
          alert$(7)="Cancel"
          alert_button%=0
          @alert
          button%=alert_exit%
        LOOP UNTIL OUT?(0) OR button%=2
        IF button%=2 THEN
          abort%=1
        ELSE
          @printer_dump
        ENDIF
      ENDIF
    ELSE
      @file_dump
    ENDIF
  ENDIF
RETURN
> PROCEDURE printer_dump
  DEFMOUSE 2
  SELECT type%(current%)
  CASE 0 ! TEXT
    IF width_value%=0 THEN
      temp_width%=INT(iww%(current%)/8)
    ELSE
      temp_width%=width_value%
    ENDIF
  CASE 1 ! ASCII
    IF width_value%=0 THEN
      temp_width%=INT(iww%(current%)/8)
    ELSE
      temp_width%=width_value%
    ENDIF
  CASE 2 ! HEX
    IF width_value%=0 THEN
      temp_width%=INT((iww%(current%)-8)/8)
    ELSE
      temp_width%=width_value%*3-1
    ENDIF
  CASE 3 ! GRAPHICS
    IF width_value%=0 THEN
      temp_width%=INT((iww%(current%)-8)/8)
    ELSE
      temp_width%=width_value%*3-1
    ENDIF
  ENDSELECT
  IF temp_width%>80 THEN
    IF temp_width%>160 THEN
      width%=160
    ELSE
      width%=temp_width%
    ENDIF
  ELSE
    width%=temp_width%
  ENDIF
  OUT 0,27,69
  SELECT width%
  CASE 1 TO 40
    OUT 0,27,40,115,48,53,72 ! PITCH(CPI) = 5
  CASE 40 TO 80
    OUT 0,27,40,115,49,48,72 ! PITCH(CPI) = 10
  CASE 80 TO 133
    OUT 0,27,40,115,49,54,46,54,55,72 ! PITCH(CPI) = 16.67
  CASE 134 TO 160
    OUT 0,27,40,115,50,48,72 ! PITCH(CPI) = 20
  ENDSELECT
  IF type%(current%)>1 THEN
    width%=INT((width%+1)/3)
  ENDIF
  FOR byte%=1 TO LEN(view_name$(current%))
    OUT 0,ASC(MID$(view_name$(current%),byte%,1))
  NEXT byte%
  OUT 0,32
  size$=STR$(size%(current%))
  FOR byte%=1 TO LEN(size$)
    OUT 0,ASC(MID$(size$,byte%,1))
  NEXT byte%
  OUT 0,10,13
  IF type%(current%)=0 THEN
    place%=prn_start%
    DO
      IF place%<size%(current%) THEN
        search_size%=width%
        temp%=place%+search_size%-size%(current%)
        IF temp%>0 THEN
          search_size%=search_size%-temp%
        ENDIF
        search_buffer$=SPACE$(search_size%)
        search_buffer%=VARPTR(search_buffer$)
        BMOVE byte_buffer%(current%)+place%,search_buffer%,search_size%
        test%=INSTR(search_buffer$,CHR$(0))
        IF test%<1 THEN
          test%=INSTR(search_buffer$,CHR$(13))
          IF test%<1 THEN
            test%=INSTR(search_buffer$,CHR$(10))
            IF test%<1 THEN
              test%=search_size%
            ENDIF
          ELSE
            IF MID$(search_buffer$,test%+1,1)=CHR$(10) THEN
              INC test%
            ENDIF
          ENDIF
        ENDIF
        dat$=MID$(search_buffer$,1,test%)
        FOR x%=1 TO LEN(dat$)
          IF ASC(MID$(dat$,x%,1))<32 THEN
            MID$(dat$,x%,1)=" "
          ENDIF
        NEXT x%
        FOR byte%=1 TO LEN(dat$)
          OUT 0,ASC(MID$(dat$,byte%,1))
        NEXT byte%
        place%=place%+test%
      ENDIF
      OUT 0,10,13
      @abort
      IF abort%=1 THEN
        row%=prn_stop%
      ENDIF
    LOOP UNTIL place%>=prn_stop%
  ELSE
    FOR row%=prn_start% TO prn_stop% STEP width%
      SELECT type%(current%)
      CASE 0
        FOR byte%=0 TO width%-1
          place%=row%+byte%
          IF place%<prn_stop% THEN
            dat%=PEEK(byte_buffer%(current%)+place%)
            IF dat%<32 THEN
              dat%=32
            ENDIF
            OUT 0,dat%
          ENDIF
        NEXT byte%
      CASE 1
        FOR byte%=0 TO width%-1
          place%=row%+byte%
          IF place%<prn_stop% THEN
            dat%=PEEK(byte_buffer%(current%)+place%)
            IF dat%<32 THEN
              dat%=32
            ENDIF
            OUT 0,dat%
          ENDIF
        NEXT byte%
      CASE 2,3
        FOR byte%=0 TO width%-1
          place%=row%+byte%
          IF place%<prn_stop% THEN
            dat$=HEX$(PEEK(byte_buffer%(current%)+place%),2)+" "
            FOR part%=1 TO 3
              OUT 0,ASC(MID$(dat$,part%,1))
            NEXT part%
          ENDIF
        NEXT byte%
      ENDSELECT
      OUT 0,10,13
      @abort
      IF abort%=1 THEN
        row%=prn_stop%
      ENDIF
    NEXT row%
  ENDIF
  OUT 0,12
  DEFMOUSE 0
RETURN
> PROCEDURE file_dump
  @hide_mouse
  FILESELECT #"Dump to file",view_path$+"*.*",view_name$(current%),view_name$
  @show_mouse
  IF view_name$<>"" THEN
    test%=RINSTR(view_name$,"\")
    IF test%>0 THEN
      temp$=MID$(view_name$,test%+1)
      temp2$=MID$(view_name$,1,test%)
    ELSE
      temp$=view_name$
      temp2$="\"
    ENDIF
    search_file$=view_name$+CHR$(0)
    ' ~FSETDTA(dta%)
    test%=GEMDOS(78,L:V:search_file$,&X100111)
    IF test%=0 THEN
      @alert_exists
      IF button%=0 THEN
        view_path$=temp2$
        view_name$=temp$
        @print_to_file
      ENDIF
    ELSE
      view_path$=temp2$
      view_name$=temp$
      @print_to_file
    ENDIF
  ENDIF
RETURN
> PROCEDURE print_to_file
  SELECT type%(current%)
  CASE 0 ! TEXT
    IF width_value%=0 THEN
      temp_width%=INT(iww%(current%)/8)
    ELSE
      temp_width%=width_value%
    ENDIF
  CASE 1 ! ASCII
    IF width_value%=0 THEN
      temp_width%=INT(iww%(current%)/8)
    ELSE
      temp_width%=width_value%
    ENDIF
  CASE 2 ! HEX
    IF width_value%=0 THEN
      temp_width%=INT((iww%(current%)-8)/24)
    ELSE
      temp_width%=width_value%*3-1
    ENDIF
  CASE 3 ! GRAPHICS
    IF width_value%=0 THEN
      temp_width%=iww%(current%)
    ELSE
      temp_width%=width_value%*3-1
    ENDIF
  ENDSELECT
  width%=temp_width%
  IF type%(current%)>1 THEN
    width%=INT((width%+1)/3)
  ENDIF
  test%=INSTR(view_path$,":")
  IF test% THEN
    drive%=ASC(MID$(UPPER$(view_path$),1,1))-64
  ELSE
    drive%=0
  ENDIF
  er%=GEMDOS(54,L:free_buffer%,drive%)
  free_space%=free_buffer%(0)*free_buffer%(2)*free_buffer%(3)
  temp$=view_name$(current%)+" "+STR$(size%(current%))
  temp_size%=prn_stop%+1-prn_start%
  total_size%=temp_size%+temp_size%*(type%(current%)>1)*-1*2+INT(temp_size%/width%)*2+LEN(temp$)+4
  IF free_space%>=total_size% THEN
    DEFMOUSE 2
    OPEN "O",#1,view_path$+view_name$
    PRINT #1,view_name$(current%);" ";STR$(size%(current%))
    IF type%(current%)=0 THEN
      place%=prn_start%
      DO
        IF place%<size%(current%) THEN
          search_size%=width%
          temp%=place%+search_size%-size%(current%)
          IF temp%>0 THEN
            search_size%=search_size%-temp%
          ENDIF
          search_buffer$=SPACE$(search_size%)
          search_buffer%=VARPTR(search_buffer$)
          BMOVE byte_buffer%(current%)+place%,search_buffer%,search_size%
          test%=INSTR(search_buffer$,CHR$(0))
          IF test%<1 THEN
            test%=INSTR(search_buffer$,CHR$(13))
            IF test%<1 THEN
              test%=INSTR(search_buffer$,CHR$(10))
              IF test%<1 THEN
                test%=search_size%
              ENDIF
            ELSE
              IF MID$(search_buffer$,test%+1,1)=CHR$(10) THEN
                INC test%
              ENDIF
            ENDIF
          ENDIF
          dat$=MID$(search_buffer$,1,test%)
          FOR x%=1 TO LEN(dat$)
            IF ASC(MID$(dat$,x%,1))<32 THEN
              MID$(dat$,x%,1)=" "
            ENDIF
          NEXT x%
          PRINT #1,dat$
          place%=place%+test%
        ENDIF
      LOOP UNTIL place%>=prn_stop%
    ELSE
      FOR row%=prn_start% TO prn_stop% STEP width%
        IF row%+width%<prn_stop% THEN
          temp_width%=width%
        ELSE
          temp_width%=prn_stop%-row%
        ENDIF
        SELECT type%(current%)
        CASE 1
          dat$=SPACE$(temp_width%)
          BMOVE byte_buffer%(current%)+row%,V:dat$,temp_width%
          FOR test%=1 TO temp_width%
            IF MID$(dat$,test%,1)<CHR$(32) THEN
              MID$(dat$,test%,1)=CHR$(32)
            ENDIF
          NEXT test%
        CASE 2,3
          dat$=""
          FOR hex%=0 TO temp_width%-1
            dat$=dat$+HEX$(PEEK(byte_buffer%(current%)+row%+hex%),2)+" "
          NEXT hex%
        ENDSELECT
        PRINT #1,dat$
      NEXT row%
    ENDIF
    CLOSE #1
    DEFMOUSE 0
  ELSE
    @alert_free_disk
  ENDIF
RETURN
> PROCEDURE merge_all
  IF last_used%>-1 THEN
    @merge
    DEFMOUSE 2
    SELECT all%
    CASE 0
      IF source_file%>-1 THEN
        current%=source_file%
        @do_merge
      ENDIF
    CASE 1
      FOR current_merge%=0 TO last_used%
        current%=current_merge%
        IF pick%(current%) THEN
          @do_merge
        ENDIF
        IF abort%=1 THEN
          current_merge%=max_window%
        ENDIF
      NEXT current_merge%
    CASE 2
      FOR current_merge%=0 TO last_used%
        current%=current_merge%
        @do_merge
        IF abort%=1 THEN
          current_merge%=max_window%
        ENDIF
      NEXT current_merge%
    ENDSELECT
    DEFMOUSE 0
  ENDIF
RETURN
> PROCEDURE merge
  @hide_mouse
  FILESELECT #"Merge file",view_path$+"*.*",view_name$(current%),merge_name$
  @show_mouse
  search_file$=merge_name$+CHR$(0)
  ' ~FSETDTA(dta%)
  test%=GEMDOS(78,L:V:search_file$,&X100111)
  IF test%=0 THEN
    DEFMOUSE 2
    merge_test%=RINSTR(merge_name$,"\")
    IF merge_test% THEN
      view_path$=MID$(merge_name$,1,merge_test%)
      merge_name$=MID$(merge_name$,merge_test%+1)
    ELSE
      view_path$="\"
    ENDIF
    @do_merge
  ENDIF
RETURN
> PROCEDURE do_merge
  search_file$=view_path$+merge_name$+CHR$(0)
  ' ~FSETDTA(dta%)
  finished%=GEMDOS(78,L:V:search_file$,&X100111)
  free%=GEMDOS(72,L:-1)
  @check_merge
  IF abort%=0 THEN
    IF mem_flag%=1 THEN
      alert$(0)=""
      alert$(1)="Sorry, there was not enough free"
      alert$(2)="memory to complete this merge"
      alert$(3)="operation."
      alert$(4)=""
      alert$(5)=""
      alert$(6)="OK"
      alert$(7)=""
      alert_button%=1
      @alert
      abort%=1
    ELSE
      @multi_merge
    ENDIF
  ENDIF
RETURN
> PROCEDURE check_merge
  DEFMOUSE 2
  need%=size%(current%)
  mem_flag%=0
  search_file$=view_path$+merge_name$+CHR$(0)
  ' ~FSETDTA(dta%)
  finished%=GEMDOS(78,L:V:search_file$,&X100111)
  DO UNTIL finished% OR abort%=1 OR mem_flag%=1
    file$=CHAR{dta%+30}
    IF file$<>"." AND file$<>".."
      temp$=view_path$+file$
      CHAR{file_name_buffer%}=temp$
      file_handle&=GEMDOS(61,L:file_name_buffer%,0)
      IF stop_value%+start_value%=0 THEN
        need%=need%+LPEEK(dta%+26)
      ELSE
        part_start%=MIN(start_value%,LPEEK(dta%+26))
        part_stop%=MIN(stop_value%,LPEEK(dta%+26))
        part_size%=part_stop%+1-part_start%
        part_size%=MIN(part_size%,LPEEK(dta%+26)-part_start%)
        need%=need%+part_size%
      ENDIF
      IF free%<need% THEN
        mem_flag%=1
      ENDIF
      ~GEMDOS(62,W:file_handle&)
    ENDIF
    @abort
    ' ~FSETDTA(dta%)
    finished%=GEMDOS(79)
  LOOP
  DEFMOUSE 0
RETURN
> PROCEDURE multi_merge
  DEFMOUSE 2
  temp_buffer%=GEMDOS(72,L:need%)
  search_file$=view_path$+merge_name$+CHR$(0)
  ' ~FSETDTA(dta%)
  finished%=GEMDOS(78,L:V:search_file$,&X100111)
  top_merge_size%=view%(current%)
  IF top_merge_size%>0
    BMOVE byte_buffer%(current%),temp_buffer%,top_merge_size%
  ENDIF
  bottom_merge_size%=size%(current%)-top_merge_size%
  merge_at%=top_merge_size%
  DO UNTIL finished% OR abort%=1
    file$=CHAR{dta%+30}
    IF file$<>"." AND file$<>".."
      temp$=view_path$+file$
      CHAR{file_name_buffer%}=temp$
      file_handle&=GEMDOS(61,L:file_name_buffer%,0)
      IF stop_value%+start_value%=0 THEN
        merge_start%=0
        merge_stop%=LPEEK(dta%+26)
      ELSE
        merge_start%=MIN(start_value%,LPEEK(dta%+26))
        merge_stop%=MIN(stop_value%,LPEEK(dta%+26))
      ENDIF
      merge_size%=merge_stop%+1-merge_start%
      merge_size%=MIN(merge_size%,LPEEK(dta%+26)-merge_start%)
      SEEK #1,merge_start%
      IF merge_size%>0 THEN
        ~GEMDOS(63,W:file_handle&,L:merge_size%,L:temp_buffer%+merge_at%)
        merge_at%=merge_at%+merge_size%
        edit%(current%)=1
      ENDIF
      ~GEMDOS(62,W:file_handle&)
    ENDIF
    @abort
    ' ~FSETDTA(dta%)
    finished%=GEMDOS(79)
  LOOP
  IF bottom_merge_size%>0 THEN
    BMOVE byte_buffer%(current%)+top_merge_size%,temp_buffer%+merge_at%,bottom_merge_size%
    merge_at%=merge_at%+bottom_merge_size%
  ENDIF
  d%=GEMDOS(73,L:byte_buffer%(current%)) ! RELEASE MEMORY
  byte_buffer%(current%)=temp_buffer%
  size%(current%)=merge_at%
  @title
  @size_slider
  @update_display
  @set_free
  DEFMOUSE 0
RETURN
> PROCEDURE do_open
  @hide_mouse
  FILESELECT #"Select file to view",view_path$+"*.*",view_name$,view_name$
  @show_mouse
  @load
RETURN
> PROCEDURE load
  IF view_name$<>"" THEN
    view_test%=RINSTR(view_name$,"\")
    IF view_test% THEN
      view_path$=MID$(view_name$,1,view_test%)
      view_name$=MID$(view_name$,view_test%+1)
    ELSE
      view_path$="\"
    ENDIF
    IF view_name$<>""
      exit%=0
      search_file$=view_path$+view_name$+CHR$(0)
      ' ~FSETDTA(dta%)
      finished%=GEMDOS(78,L:V:search_file$,&X100111)
      DEFMOUSE 2
      IF finished%=0 THEN
        new_flag%=0
        DO UNTIL finished% OR exit% OR abort%=1
          file$=CHAR{dta%+30}
          IF file$<>"." AND file$<>".."
            @get_file
          ENDIF
          ~FSETDTA(dta%)
          finished%=GEMDOS(79)
          @abort
        LOOP
      ELSE
        file$=view_name$
        test_1%=INSTR(file$,"*")
        test_2%=INSTR(file$,"?")
        IF test_1%=0 AND test_2%=0 THEN
          new_flag%=1
          @get_file
        ENDIF
      ENDIF
      DEFMOUSE 0
    ENDIF
  ENDIF
RETURN
> PROCEDURE get_file
  IF last_used%<max_window%-1 THEN
    current%=last_used%+1
    view_name$=file$
    IF new_flag%=0 THEN
      temp$=view_path$+file$
      CHAR{file_name_buffer%}=temp$
      file_handle&=GEMDOS(61,L:file_name_buffer%,0)
      size%=LPEEK(dta%+26)
      ~GEMDOS(62,W:file_handle&)
    ELSE
      size%=0
    ENDIF
    IF size%>0 THEN
      byte_buffer%(current%)=GEMDOS(72,L:size%)
      IF byte_buffer%(current%)>0 THEN
        size%(current%)=size%
        '
        temp$=view_path$+file$
        CHAR{file_name_buffer%}=temp$
        file_handle&=GEMDOS(61,L:file_name_buffer%,0)
        ~GEMDOS(63,W:file_handle&,L:size%,L:byte_buffer%(current%))
        ~GEMDOS(62,W:file_handle&)
        '
        @window_setup
      ELSE
        exit%=1
        alert$(0)=""
        alert$(1)="Sorry, I could not load"
        alert$(2)=view_name$+" as it is "
        alert$(3)="larger than the free memory."
        alert$(4)=""
        alert$(5)=""
        alert$(6)="OK"
        alert$(7)=""
        alert_button%=1
        @alert
      ENDIF
    ELSE
      size%(current%)=0
      byte_buffer%(current%)=0
      @window_setup
    ENDIF
    @set_source
    @set_dest
    @set_free
  ELSE
    exit%=1
    @alert_window
  ENDIF
RETURN
> PROCEDURE save_all
  IF last_used%>-1 THEN
    DEFMOUSE 2
    SELECT all%
    CASE 0
      IF source_file%>-1 THEN
        current%=source_file%
        @save
      ENDIF
    CASE 1
      view_save$=""
      FOR current_save%=0 TO last_used%
        current%=current_save%
        IF pick%(current%) THEN
          @save
        ENDIF
        IF view_save$="" AND current_save%<>last_used% THEN
          @alert_stop_save
          button%=alert_exit%
          IF button%=2 THEN
            abort%=1
          ENDIF
        ENDIF
        IF abort%=1 THEN
          current_save%=max_window%
        ENDIF
      NEXT current_save%
    CASE 2
      view_save$=""
      FOR current_save%=0 TO last_used%
        current%=current_save%
        @save
        IF view_save$="" AND current_save%<>last_used% THEN
          @alert_stop_save
          button%=alert_exit%
          IF button%=2 THEN
            abort%=1
          ENDIF
        ENDIF
        IF abort%=1 THEN
          current_save%=max_window%
        ENDIF
      NEXT current_save%
    ENDSELECT
    DEFMOUSE 0
  ENDIF
RETURN
> PROCEDURE save
  @hide_mouse
  FILESELECT #"Save as",view_path$(current%)+"*.*",view_name$(current%),view_save$
  @show_mouse
  IF view_save$<>"" THEN
    search_file$=view_save$+CHR$(0)
    ' ~FSETDTA(dta%)
    test%=GEMDOS(78,L:V:search_file$,&X100111)
    view_test%=RINSTR(view_save$,"\")
    IF view_test%>0 THEN
      view_save_name$=MID$(view_save$,view_test%+1)
    ELSE
      view_save_name$=view_save$
    ENDIF
    IF test%=0 THEN
      temp$=view_save_name$
      @alert_exists
      IF button%=0 THEN
        @do_save
      ENDIF
    ELSE
      @do_save
    ENDIF
  ENDIF
RETURN
> PROCEDURE do_save
  test%=INSTR(view_save$,":")
  IF test% THEN
    drive%=ASC(MID$(UPPER$(view_save$),1,1))-64
  ELSE
    drive%=0
  ENDIF
  er%=GEMDOS(54,L:free_buffer%,drive%)
  free_space%=free_buffer%(0)*free_buffer%(2)*free_buffer%(3)
  IF free_space%>=size%(current%) THEN
    DEFMOUSE 2
    temp$=view_save$
    CHAR{file_name_buffer%}=temp$
    file_handle&=GEMDOS(61,L:file_name_buffer%,1)
    ~GEMDOS(64,W:file_handle&,L:size%(current%),L:byte_buffer%(current%))
    ~GEMDOS(62,W:file_handle&)
    edit%(current%)=0
    DEFMOUSE 0
  ELSE
    total_size%=size%(current%)
    @alert_free_disk
  ENDIF
RETURN
> PROCEDURE close_all
  IF last_used%>-1 THEN
    DEFMOUSE 2
    flag%=WIND_SET(win%(max_window%),10,0,0,0,0)
    @multi_check
    SELECT all%
    CASE 0
      IF source_file%>-1 THEN
        current%=source_file%
        @close
      ENDIF
    CASE 1
      current_close%=0
      DO
        current%=current_close%
        IF pick%(current%) THEN
          @close
        ELSE
          INC current_close%
        ENDIF
        IF abort%=1 THEN
          current_close%=max_window%
        ENDIF
      LOOP UNTIL current_close%>last_used%
    CASE 2
      DO WHILE last_used%>-1 AND abort%=0
        current%=last_used%
        @close
      LOOP
    ENDSELECT
    DEFMOUSE 0
  ENDIF
RETURN
> PROCEDURE close
  IF edit%(current%)=1 AND size%(current%)>0 THEN
    IF alert_deleting%=1 THEN
      alert$(0)=""
      alert$(1)="Changes to "+view_name$(current%)
      alert$(2)="have NOT been saved."
      alert$(3)="Should I close it?"
      alert$(4)=""
      alert$(5)="Close"
      alert$(6)="Save"
      alert$(7)="Abort"
      alert_button%=1
      @alert
      button%=alert_exit%
    ELSE
      button%=0
    ENDIF
    SELECT button%
    CASE 0
      @clear
    CASE 1
      @save
      @clear
    CASE 2
      abort%=1
    ENDSELECT
  ELSE
    @clear
  ENDIF
RETURN
> PROCEDURE clear
  IF source_file%>-1 AND source_file%<>current% THEN
    temp_source$=view_name$(source_file%)
  ELSE
    temp_source$=""
  ENDIF
  IF source_file%>-1 AND dest_file%>-1 THEN
    temp_dest$=view_name$(dest_file%)
  ELSE
    temp_dest$=""
  ENDIF
  IF source_file%=current% THEN
    source_file%=-1
  ENDIF
  IF dest_file%=current% THEN
    dest_file%=-1
  ENDIF
  IF current%<max_window% AND current%>-1 THEN
    @window_kill
  ENDIF
  IF temp_source$<>"" AND last_used%>-1 THEN
    FOR name_check%=0 TO last_used%
      IF view_name$(name_check%)=temp_source$ THEN
        source_file%=name_check%
      ENDIF
    NEXT name_check%
  ENDIF
  IF temp_dest$<>"" AND last_used%>-1 THEN
    FOR name_check%=0 TO last_used%
      IF view_name$(name_check%)=temp_dest$ THEN
        dest_file%=name_check%
      ENDIF
    NEXT name_check%
  ENDIF
  @set_source
  @set_dest
  @set_shift
  @set_free
RETURN
> PROCEDURE window_kill
  flag%=WIND_CLOSE(win%(current%))
  flag%=WIND_DELETE(win%(current%))
  status%(current%)=-1
  IF byte_buffer%(current%)>0 THEN
    d%=GEMDOS(73,L:byte_buffer%(current%)) ! RELEASE MEMORY
  ENDIF
  byte_buffer%(current%)=-1
  win%(current%)=-1
  found%(current%)=-1
  search%(current%)=-1
  DEC last_used%
  DO WHILE current%<=last_used%+1
    IF current%=max_window%-1 THEN
      byte_buffer%(current%)=-1
      win%(current%)=-1
      found%(current%)=-1
      search%(current%)=-1
    ELSE
      win%(current%)=win%(current%+1)
      status%(current%)=status%(current%+1)
      type%(current%)=type%(current%+1)
      wx%(current%)=wx%(current%+1)
      wy%(current%)=wy%(current%+1)
      ww%(current%)=ww%(current%+1)
      wh%(current%)=wh%(current%+1)
      iwx%(current%)=iwx%(current%+1)
      iwy%(current%)=iwy%(current%+1)
      iww%(current%)=iww%(current%+1)
      iwh%(current%)=iwh%(current%+1)
      slider_size%(current%)=slider_size%(current%+1)
      slider_position%(current%)=slider_position%(current%+1)
      view%(current%)=view%(current%+1)
      the_width%(current%)=the_width%(current%+1)
      size%(current%)=size%(current%+1)
      max_row%(current%)=max_row%(current%+1)
      max_window_line%(current%)=max_window_line%(current%+1)
      max_char%(current%)=max_char%(current%+1)
      byte_buffer%(current%)=byte_buffer%(current%+1)
      view_name$(current%)=view_name$(current%+1)
      view_path$(current%)=view_path$(current%+1)
      found%(current%)=found%(current%+1)
      search%(current%)=search%(current%+1)
      edit%(current%)=edit%(current%+1)
      pick%(current%)=pick%(current%+1)
    ENDIF
    INC current%
  LOOP
RETURN
> PROCEDURE edit
  er%=WIND_UPDATE(1)
  er%=WIND_UPDATE(3)
  HIDEM
  SELECT type%(current%)
  CASE 0
  CASE 1
    @edit_ascii
  CASE 2
    @edit_hex
  CASE 3
  ENDSELECT
  er%=WIND_UPDATE(2)
  er%=WIND_UPDATE(0)
  SHOWM
RETURN
> PROCEDURE edit_hex
  edit_col%=INT(((mx&-iwx%(current%))/8)/3)
  IF edit_col%>-1 AND edit_col%<max_char%(current%) AND edit_col%<size%(current%) AND edit_row%<max_window_line%(current%) THEN
    byte%=view%(current%)+edit_col%+edit_row%*the_width%(current%)
    IF byte%<size%(current%)
      CLIP iwx%(current%),iwy%(current%),iww%(current%),iwh%(current%)
      exit%=0
      the_letter%=0
      byte$=""
      DO
        IF INP?(2) THEN
          the_key%=INP(2)
          SELECT the_key%
          CASE 200 ! UP
            IF the_letter%=0 THEN
              byte%=view%(current%)+edit_col%+edit_row%*the_width%(current%)
              value$=HEX$(PEEK(byte_buffer%(current%)+byte%),2)
              TEXT edit_col%*3*8+iwx%(current%),edit_row%*16+16*0.9+iwy%(current%),value$
              DEC edit_row%
              IF edit_row%=-1 THEN
                edit_row%=0
                IF view%(current%)>0 THEN
                  view%(current%)=view%(current%)-the_width%(current%)
                  IF view%(current%)<0 THEN
                    view%(current%)=0
                  ENDIF
                  @fix_slider
                ENDIF
              ENDIF
              byte%=view%(current%)+edit_col%+edit_row%*the_width%(current%)
            ENDIF
          CASE 208 ! DOWN
            IF the_letter%=0 THEN
              value$=HEX$(PEEK(byte_buffer%(current%)+byte%),2)
              byte%=view%(current%)+edit_col%+edit_row%*the_width%(current%)
              TEXT edit_col%*3*8+iwx%(current%),edit_row%*16+16*0.9+iwy%(current%),value$
              INC edit_row%
              IF edit_row%=max_window_line%(current%) THEN
                DEC edit_row%
                IF view%(current%)<size%(current%)-the_width%(current%) THEN
                  view%(current%)=view%(current%)+the_width%(current%)
                  IF view%(current%)>size%(current%)-the_width%(current%) THEN
                    view%(current%)=size%(current%)-the_width%(current%)
                  ENDIF
                  @fix_slider
                ENDIF
              ENDIF
              byte%=view%(current%)+edit_col%+edit_row%*the_width%(current%)
              DO WHILE byte%>=size%(current%)
                IF edit_col%>0 THEN
                  DEC edit_col%
                ELSE
                  DEC edit_row%
                  edit_col%=the_width%(current%)-1
                ENDIF
                byte%=view%(current%)+edit_col%+edit_row%*the_width%(current%)
              LOOP
            ENDIF
          CASE 205 ! RIGHT
            IF the_letter%=0 THEN
              byte%=view%(current%)+edit_col%+edit_row%*the_width%(current%)
              value$=HEX$(PEEK(byte_buffer%(current%)+byte%),2)
              TEXT edit_col%*3*8+iwx%(current%),edit_row%*16+16*0.9+iwy%(current%),value$
              INC edit_col%
              IF edit_col%=the_width%(current%)
                edit_col%=0
              ENDIF
              byte%=view%(current%)+edit_col%+edit_row%*the_width%(current%)
              IF byte%>=size%(current%)
                edit_col%=0
                byte%=view%(current%)+edit_col%+edit_row%*the_width%(current%)
              ENDIF
            ENDIF
          CASE 203 ! LEFT
            IF the_letter%=0 THEN
              byte%=view%(current%)+edit_col%+edit_row%*the_width%(current%)
              value$=HEX$(PEEK(byte_buffer%(current%)+byte%),2)
              TEXT edit_col%*3*8+iwx%(current%),edit_row%*16+16*0.9+iwy%(current%),value$
              DEC edit_col%
              IF edit_col%=-1 THEN
                edit_col%=the_width%(current%)-1
                byte%=view%(current%)+edit_col%+edit_row%*the_width%(current%)
                IF byte%>=size%(current%) THEN
                  DO
                    DEC edit_col%
                    byte%=view%(current%)+edit_col%+edit_row%*the_width%(current%)
                  LOOP UNTIL byte%<size%(current%)
                ENDIF
              ELSE
                byte%=view%(current%)+edit_col%+edit_row%*the_width%(current%)
              ENDIF
            ENDIF
          CASE 48 TO 57 ! 0-9
            @next_letter
          CASE 65 TO 70,97 TO 102 ! A-F
            IF the_key%>96 THEN
              the_key%=the_key%-32
            ENDIF
            @next_letter
          CASE 27 ! ESC
            exit%=1
            @update_display
          ENDSELECT
        ELSE
          INC flag%
          PAUSE 1
        ENDIF
        IF flag%=10 THEN
          DEFTEXT 2,1,,13
          GRAPHMODE 4
          TEXT ((edit_col%*3)+the_letter%)*8+iwx%(current%),edit_row%*16+16*0.9+iwy%(current%)," "
          GRAPHMODE 1
          DEFTEXT 1,0,,13
        ENDIF
        IF flag%=20 THEN
          z%=view%(current%)+edit_col%+edit_row%*the_width%(current%)
          z$=HEX$(PEEK(byte_buffer%(current%)+z%),2)
          TEXT ((edit_col%*3)+the_letter%)*8+iwx%(current%),edit_row%*16+16*0.9+iwy%(current%),MID$(z$,the_letter%+1,1)
          flag%=0
        ENDIF
        IF flag%=30 THEN
          TEXT ((edit_col%*3)+the_letter%)*8+iwx%(current%),edit_row%*16+16*0.9+iwy%(current%)," "
          flag%=0
        ENDIF
      LOOP UNTIL exit%
    ENDIF
  ENDIF
RETURN
> PROCEDURE next_letter
  TEXT ((edit_col%*3)+the_letter%)*8+iwx%(current%),edit_row%*16+16*0.9+iwy%(current%),CHR$(the_key%)
  byte$=byte$+CHR$(the_key%)
  INC the_letter%
  IF the_letter%=2 THEN
    @hex_to_dec
    byte$=""
    the_letter%=0
    INC edit_col%
    IF edit_col%=the_width%(current%)
      edit_col%=0
      INC edit_row%
      IF edit_row%>max_window_line%(current%) THEN
        edit_row%=0
      ENDIF
    ENDIF
    byte%=view%(current%)+edit_col%+edit_row%*the_width%(current%)
    IF byte%>=size%(current%) THEN
      edit_col%=0
      edit_row%=0
      byte%=view%(current%)+edit_col%+edit_row%*the_width%(current%)
    ENDIF
  ENDIF
RETURN
> PROCEDURE hex_to_dec
  hi%=ASC(MID$(byte$,1,1))-48
  lo%=ASC(MID$(byte$,2,1))-48
  IF hi%>9 THEN
    hi%=hi%-7
  ENDIF
  IF lo%>9 THEN
    lo%=lo%-7
  ENDIF
  value%=hi%*16+lo%
  POKE byte_buffer%(current%)+byte%,value%
  edit%(current%)=1
RETURN
> PROCEDURE edit_ascii
  offset%=MIN(the_width%(current%),size%(current%))
  edit_col%=INT((mx&-iwx%(current%))/8)
  IF edit_col%>-1 AND edit_col%<offset% AND edit_row%<max_window_line%(current%) THEN
    byte%=view%(current%)+edit_col%+edit_row%*the_width%(current%)
    IF byte%<size%(current%)
      CLIP iwx%(current%),iwy%(current%),iww%(current%),iwh%(current%)
      exit%=0
      DO
        IF INP?(2) THEN
          the_key%=INP(2)
          SELECT the_key%
          CASE 200 ! UP
            byte%=view%(current%)+edit_col%+edit_row%*the_width%(current%)
            temp%=PEEK(byte_buffer%(current%)+byte%)
            TEXT edit_col%*8+iwx%(current%),edit_row%*16+16*0.9+iwy%(current%),CHR$(temp%)
            DEC edit_row%
            IF edit_row%=-1 THEN
              edit_row%=0
              IF view%(current%)>0 THEN
                view%(current%)=view%(current%)-the_width%(current%)
                IF view%(current%)<0 THEN
                  view%(current%)=0
                ENDIF
                @fix_slider
              ENDIF
            ENDIF
            byte%=view%(current%)+edit_col%+edit_row%*the_width%(current%)
          CASE 208 ! DOWN
            byte%=view%(current%)+edit_col%+edit_row%*the_width%(current%)
            temp%=PEEK(byte_buffer%(current%)+byte%)
            TEXT edit_col%*8+iwx%(current%),edit_row%*16+16*0.9+iwy%(current%),CHR$(temp%)
            INC edit_row%
            IF edit_row%=max_window_line%(current%) THEN
              DEC edit_row%
              IF view%(current%)<size%(current%)-the_width%(current%) THEN
                view%(current%)=view%(current%)+the_width%(current%)
                IF view%(current%)>size%(current%)-the_width%(current%) THEN
                  view%(current%)=size%(current%)-the_width%(current%)
                ENDIF
                @fix_slider
              ENDIF
            ENDIF
            byte%=view%(current%)+edit_col%+edit_row%*the_width%(current%)
            DO WHILE byte%>=size%(current%)
              IF edit_col%>0 THEN
                DEC edit_col%
              ELSE
                DEC edit_row%
                edit_col%=the_width%(current%)-1
              ENDIF
              byte%=view%(current%)+edit_col%+edit_row%*the_width%(current%)
            LOOP
          CASE 205 ! RIGHT
            byte%=view%(current%)+edit_col%+edit_row%*the_width%(current%)
            temp%=PEEK(byte_buffer%(current%)+byte%)
            TEXT edit_col%*8+iwx%(current%),edit_row%*16+16*0.9+iwy%(current%),CHR$(temp%)
            INC edit_col%
            IF edit_col%=the_width%(current%)
              edit_col%=0
            ENDIF
            byte%=view%(current%)+edit_col%+edit_row%*the_width%(current%)
            IF byte%>=size%(current%)
              edit_col%=0
              byte%=view%(current%)+edit_col%+edit_row%*the_width%(current%)
            ENDIF
          CASE 203 ! LEFT
            byte%=view%(current%)+edit_col%+edit_row%*the_width%(current%)
            temp%=PEEK(byte_buffer%(current%)+byte%)
            TEXT edit_col%*8+iwx%(current%),edit_row%*16+16*0.9+iwy%(current%),CHR$(temp%)
            DEC edit_col%
            IF edit_col%=-1 THEN
              edit_col%=the_width%(current%)-1
              byte%=view%(current%)+edit_col%+edit_row%*the_width%(current%)
              IF byte%>=size%(current%) THEN
                DO
                  DEC edit_col%
                  byte%=view%(current%)+edit_col%+edit_row%*the_width%(current%)
                LOOP UNTIL byte%<size%(current%)
              ENDIF
            ELSE
              byte%=view%(current%)+edit_col%+edit_row%*the_width%(current%)
            ENDIF
          CASE 27 ! ESC
            exit%=1
            @update_display
          DEFAULT
            @next_ascii
          ENDSELECT
        ELSE
          INC flag%
          PAUSE 1
        ENDIF
        IF flag%=10 THEN
          DEFTEXT 2,1,,13
          GRAPHMODE 4
          TEXT edit_col%*8+iwx%(current%),edit_row%*16+16*0.9+iwy%(current%)," "
          GRAPHMODE 1
          DEFTEXT 1,0,,13
        ENDIF
        IF flag%=20 THEN
          z%=PEEK(byte_buffer%(current%)+byte%)
          TEXT edit_col%*8+iwx%(current%),edit_row%*16+16*0.9+iwy%(current%),CHR$(z%)
          flag%=0
        ENDIF
        IF flag%=30 THEN
          TEXT edit_col%*8+iwx%(current%),edit_row%*16+16*0.9+iwy%(current%)," "
          flag%=0
        ENDIF
      LOOP UNTIL exit%
    ENDIF
  ENDIF
RETURN
> PROCEDURE next_ascii
  TEXT edit_col%*8+iwx%(current%),edit_row%*16+16*0.9+iwy%(current%),CHR$(the_key%)
  POKE byte_buffer%(current%)+byte%,the_key%
  edit%(current%)=1
  INC edit_col%
  IF edit_col%=the_width%(current%)
    edit_col%=0
    INC edit_row%
    IF edit_row%>max_window_line%(current%) THEN
      edit_row%=0
    ENDIF
  ENDIF
  byte%=view%(current%)+edit_col%+edit_row%*the_width%(current%)
  IF byte%>=size%(current%) THEN
    edit_col%=0
    edit_row%=0
    byte%=view%(current%)+edit_col%+edit_row%*the_width%(current%)
  ENDIF
RETURN
> PROCEDURE goto_all
  IF last_used%>-1 THEN
    old_current%=current%
    SELECT all%
    CASE 0
      IF source_file%>-1 THEN
        current%=source_file%
        @goto
      ENDIF
    CASE 1
      FOR current_goto%=0 TO last_used%
        current%=current_goto%
        IF size%(current%)>0 THEN
          IF pick%(current%) THEN
            @goto
          ENDIF
        ENDIF
        @abort
        IF abort%=1 THEN
          current_goto%=max_window%
        ENDIF
      NEXT current_goto%
    CASE 2
      FOR current_goto%=0 TO last_used%
        current%=current_goto%
        IF size%(current%)>0 THEN
          @goto
        ENDIF
        @abort
        IF abort%=1 THEN
          current_goto%=max_window%
        ENDIF
      NEXT current_goto%
    ENDSELECT
    current%=old_current%
  ENDIF
RETURN
> PROCEDURE goto
  IF size%(current%) THEN
    IF start_value%<>view%(current%)
      view%(current%)=MIN(start_value%,size%(current%)-1)
      @fix_slider
    ENDIF
  ENDIF
RETURN
> PROCEDURE home_all
  IF last_used%>-1 THEN
    old_current%=current%
    SELECT all%
    CASE 0
      IF source_file%>-1 THEN
        current%=source_file%
        @home
      ENDIF
    CASE 1
      FOR current_home%=0 TO last_used%
        current%=current_home%
        IF size%(current%)>0 THEN
          IF pick%(current%) THEN
            @home
          ENDIF
        ENDIF
        @abort
        IF abort%=1 THEN
          current_home%=max_window%
        ENDIF
      NEXT current_home%
    CASE 2
      FOR current_home%=0 TO last_used%
        current%=current_home%
        IF size%(current%)>0 THEN
          @home
        ENDIF
        @abort
        IF abort%=1 THEN
          current_home%=max_window%
        ENDIF
      NEXT current_home%
    ENDSELECT
    current%=old_current%
  ENDIF
RETURN
> PROCEDURE home
  IF size%(current%)>0 THEN
    IF home%=-1 THEN
      temp%=size%(current%)
    ELSE
      temp%=0
    ENDIF
    IF view%(current%)<>temp%
      view%(current%)=temp%
      @fix_slider
    ENDIF
  ENDIF
RETURN
> PROCEDURE settings_save
  FOR name_check%=1 TO LEN(source_text$)
    test%=ASC(MID$(source_text$,name_check%,1))
    IF test%<>10 AND test%<>13 THEN
      temp_source$=temp_source$+CHR$(test%)
    ENDIF
  NEXT name_check%
  FOR name_check%=1 TO LEN(dest_text$)
    test%=ASC(MID$(dest_text$,name_check%,1))
    IF test%<>10 AND test%<>13 THEN
      temp_dest$=temp_dest$+CHR$(test%)
    ENDIF
  NEXT name_check%
  search_file$(0)="FILE SPY setup"
  search_file$(1)="----"
  search_file$(2)="DATA TYPE:"+STR$(dat_type%)
  search_file$(3)="          ASCII, Hex, Binary"
  search_file$(4)="----"
  search_file$(5)="DATA:"+temp_source$
  search_file$(6)="     32 characters of ASCII, Hex or Binary text"
  search_file$(7)="----"
  search_file$(8)="MASK:"+temp_dest$
  search_file$(9)="     32 characters of ASCII, Hex or Binary text"
  search_file$(10)="----"
  search_file$(11)="START:"+STR$(start_value%)
  search_file$(12)="      any positive numerical value"
  search_file$(13)="----"
  search_file$(14)="STOP:"+STR$(stop_value%)
  search_file$(15)="     any positive numerical value"
  search_file$(16)="----"
  search_file$(17)="EVERY:"+STR$(every_value%)
  search_file$(18)="      any positive numerical value"
  search_file$(19)="----"
  search_file$(20)="SIZE:"+STR$(size_value%)
  search_file$(21)="     any positive numerical value"
  search_file$(22)="----"
  search_file$(23)="OPEN:"+init_open$(init_open%)
  search_file$(24)="     Full, Min."
  search_file$(25)="----"
  search_file$(26)="WIDTH:"+STR$(width_value%)
  search_file$(27)="      Display/print width, 0=use window width"
  search_file$(28)="----"
  search_file$(29)="MENU/SHIFT:"+shift$(all%)
  search_file$(30)="           Off, Selected, All"
  search_file$(31)="----"
  search_file$(32)="CASE SENSITIVE:"+STR$(case%)
  search_file$(33)="               0=No, 1=Yes"
  search_file$(34)="----"
  search_file$(35)="MATCH:"+STR$(match%)
  search_file$(36)="      0=No, 1=Yes"
  search_file$(37)="----"
  search_file$(38)="DISPLAY:"+type$(window_type%)
  search_file$(39)="        Text, ASCII, HEX, Graphics"
  search_file$(40)="----"
  search_file$(41)="BIT OPERATION:"+op$(op%)
  search_file$(42)="              AND, OR, XOR, Flip, Left shift"
  search_file$(43)="              Right shift, Reverse"
  search_file$(44)="              Left rotate ,Right rotate"
  search_file$(45)="----"
  search_file$(46)="OP SIZE:"+bit_size$(bit_size%)
  search_file$(47)="        Byte, Word, Long"
  search_file$(48)="----"
  search_file$(49)="DUMP TO:"+where$(where%)
  search_file$(50)="        Printer, File"
  search_file$(51)="----"
  search_file$(52)="TILE:"+windows$(windows%)
  search_file$(53)="     Stack, Tile, Full"
  search_file$(54)="----"
  search_file$(55)="ALERTS:"+alerts$(alerts%)
  search_file$(56)="          Center, Mouse, Last"
  search_file$(57)="----"
  search_file$(58)="ALERTS AT:"+STR$(alert_x%)+" "+STR$(alert_y%)
  search_file$(59)="               0 to screen size"
  search_file$(60)="----"
  search_file$(61)="ALERT WHEN LEAVING:"+STR$(alert_leaving%)
  search_file$(62)="                   0=OFF, 1=ON"
  search_file$(63)="----"
  search_file$(64)="ALERT WHEN DELETING:"+STR$(alert_deleting%)
  search_file$(65)="                   0=OFF, 1=ON"
  search_file$(66)="----"
  search_file$(67)="MAIN WINDOW AT:"+STR$(wx%(max_window%))+" "+STR$(wy%(max_window%))
  search_file$(68)="               0 to screen size"
  search_file$(69)="----"
  search_file$(70)="CURRENT VIEWER:"+STR$(viewer%+1)
  search_file$(71)="               1-10"
  search_file$(72)="----"
  on%=73
  FOR x%=0 TO 9
    search_file$(on%)="VIEWER "+STR$(x%+1)+":"+TRIM$(viewer$(0,x%))
    INC on%
    search_file$(on%)="VIEWER PATH "+STR$(x%+1)+":"+viewer$(1,0)
    INC on%
  NEXT x%
  search_file$(on%)="    Any valid filename/path"
  INC on%
  search_file$(on%)="END"
  OPEN "O",#1,my_inf$
  x%=0
  DO
    PRINT #1,search_file$(x%)
    INC x%
  LOOP UNTIL search_file$(x%)="END"
  CLOSE #1
  @bell
RETURN
> PROCEDURE settings_load
  search_file$=my_inf$+CHR$(0)
  ' ~FSETDTA(dta%)
  test%=GEMDOS(78,L:V:search_file$,&X100111)
  IF test%=0 THEN
    main_nwx%=-1
    main_nwy%=-1
    OPEN "I",#1,my_inf$
    DO WHILE EOF(#1)=FALSE
      INPUT #1,temp$
      test%=RINSTR(temp$,":")
      IF test%>1 THEN
        command$=MID$(temp$,1,test%-1)
        inf_set$=MID$(temp$,test%+1)
        IF VAL(inf_set$)>-1 THEN
          IF command$="DATA"
            source_text$=MID$(inf_set$,1,32)
          ENDIF
          IF command$="MASK"
            dest_text$=MID$(inf_set$,1,32)
          ENDIF
          IF command$="START"
            IF VAL(inf_set$)<1000000000 THEN
              start_value%=VAL(inf_set$)
            ENDIF
          ENDIF
          IF command$="STOP"
            IF VAL(inf_set$)<1000000000 THEN
              stop_value%=VAL(inf_set$)
            ENDIF
          ENDIF
          IF command$="EVERY"
            IF VAL(inf_set$)<1000000000 THEN
              every_value%=VAL(inf_set$)
            ENDIF
          ENDIF
          IF command$="SIZE"
            IF VAL(inf_set$)<1000000000 THEN
              size_value%=VAL(inf_set$)
            ENDIF
          ENDIF
          IF command$="WIDTH"
            IF VAL(inf_set$)<1000000000 THEN
              width_value%=VAL(inf_set$)
            ENDIF
          ENDIF
          IF command$="DATA TYPE"
            IF VAL(inf_set$)<3 THEN
              dat_type%=VAL(inf_set$)
            ENDIF
          ENDIF
          IF command$="MATCH"
            match%=VAL(inf_set$)
          ENDIF
          IF command$="CASE SENSITIVE"
            case%=VAL(inf_set$)
          ENDIF
          IF command$="OPEN"
            FOR x%=0 TO 1
              IF init_open$(x%)=inf_set$ THEN
                init_open%=x%
              ENDIF
            NEXT x%
          ENDIF
          IF command$="MENU/SHIFT"
            FOR x%=0 TO 2
              IF shift$(x%)=inf_set$ THEN
                all%=x%
              ENDIF
            NEXT x%
          ENDIF
          IF command$="DISPLAY"
            FOR x%=0 TO 3
              IF type$(x%)=inf_set$ THEN
                window_type%=x%
              ENDIF
            NEXT x%
          ENDIF
          IF command$="BIT OPERATION"
            FOR x%=0 TO 8
              IF op$(x%)=inf_set$ THEN
                op%=x%
              ENDIF
            NEXT x%
          ENDIF
          IF command$="OP SIZE"
            FOR x%=0 TO 2
              IF bit_size$(x%)=inf_set$ THEN
                bit_size%=x%
              ENDIF
            NEXT x%
          ENDIF
          IF command$="DUMP TO"
            FOR x%=0 TO 1
              IF where$(x%)=inf_set$ THEN
                where%=x%
              ENDIF
            NEXT x%
          ENDIF
          IF command$="TILE"
            FOR x%=0 TO 2
              IF windows$(x%)=inf_set$ THEN
                windows%=x%
              ENDIF
            NEXT x%
          ENDIF
          IF command$="CURRENT VIEWER"
            IF VAL(inf_set$)>0 AND VAL(inf_set$)<11 THEN
              viewer%=VAL(inf_set$)-1
            ENDIF
          ENDIF
          IF command$="MAIN WINDOW AT"
            main_nwx%=VAL(inf_set$)
            test%=INSTR(inf_set$," ")
            IF test%>1 THEN
              main_nwy%=VAL(MID$(inf_set$,test%+1))
            ENDIF
          ENDIF
          IF command$="ALERTS"
            FOR x%=0 TO 2
              IF alerts$(x%)=inf_set$ THEN
                alerts%=x%
              ENDIF
            NEXT x%
          ENDIF
          IF command$="ALERTS AT"
            temp%=VAL(inf_set$)
            IF temp%>-1 THEN
              alert_x%=temp%
            ENDIF
            test%=INSTR(inf_set$," ")
            IF test%>1 THEN
              temp%=VAL(MID$(inf_set$,test%+1))
              IF temp%>-1 THEN
                alert_y%=temp%
              ENDIF
            ENDIF
          ENDIF
          IF command$="ALERT WHEN LEAVING"
            alert_leaving%=VAL(inf_set$)
            IF alert_leaving%<>0 AND alert_leaving%<>1 THEN
              alert_leaving%=0
            ENDIF
          ENDIF
          IF command$="ALERT WHEN DELETING"
            alert_deleting%=VAL(inf_set$)
            IF alert_deleting%<>0 AND alert_deleting%<>1 THEN
              alert_deleting%=0
            ENDIF
          ENDIF
          FOR x%=0 TO 9
            temp$="VIEWER "+STR$(x%+1)
            IF command$=temp$ THEN
              viewer$(0,x%)=MID$(inf_set$,1,12)
            ENDIF
            temp$="VIEWER PATH"+STR$(x%+1)
            IF command$=temp$ THEN
              viewer$(1,x%)=inf_set$
            ENDIF
          NEXT x%
        ENDIF
      ENDIF
    LOOP UNTIL EOF(#1)=TRUE
    CLOSE #1
  ENDIF
RETURN
> PROCEDURE bell
  ' FOR x%=1 TO 7
  ' SOUND 0,15-x%,10,5,1
  ' NEXT x%
  ' SOUND 0,0,0,0,0
RETURN
> PROCEDURE hide_mouse
  CONTRL(0)=123
  CONTRL(1)=0
  CONTRL(3)=0
  CONTRL(6)=my_handle&
  VDISYS
RETURN
> PROCEDURE show_mouse
  CONTRL(0)=122
  CONTRL(1)=0
  CONTRL(3)=0
  CONTRL(6)=my_handle&
  VDISYS
RETURN
> PROCEDURE trying_to_quit
  flag%=0
  FOR x%=0 TO last_used%
    IF edit%(x%)=1 AND size%(x%)>0 THEN
      flag%=1
    ENDIF
  NEXT x%
  IF flag%=1 AND alert_deleting%=1 THEN
    alert$(0)=""
    alert$(1)="Some of the files have been changed,"
    alert$(2)="should I save the changed files ?"
    alert$(3)=""
    alert$(4)=""
    alert$(5)="Quit"
    alert$(6)="Save"
    alert$(7)="Cancel"
    alert_button%=1
    @alert
    button%=alert_exit%
  ELSE
    IF alert_leaving%=1 THEN
      alert$(0)=""
      alert$(1)=""
      alert$(2)="Sure you want to quit ?"
      alert$(3)=""
      alert$(4)=""
      alert$(5)="Quit"
      alert$(6)=""
      alert$(7)="Cancel"
      alert_button%=0
      @alert
      button%=alert_exit%
    ELSE
      button%=0
    ENDIF
  ENDIF
  IF button%=1 THEN
    all%=1
    IF last_used%>-1 THEN
      all%=1
      FOR x%=0 TO last_used%
        pick%(x%)=edit%(x%)
      NEXT x%
      @save_all
    ENDIF
    button%=0
  ENDIF
  IF button%=0 THEN
    DEFMOUSE 2
    FOR x%=0 TO last_used%
      edit%(x%)=0
    NEXT x%
    @close_all
    FOR current_close%=0 TO max_window%-1
      current%=current_close%
      IF win%(current_close%)>-1 THEN
        flag%=WIND_CLOSE(win%(current_close%))
        flag%=WIND_DELETE(win%(current_close%))
      ELSE
        current_close%=max_window%-1
      ENDIF
      IF byte_buffer%(current_close%)>0 THEN
        d%=GEMDOS(73,L:byte_buffer%(current_close%)) ! RELEASE MEMORY
      ENDIF
      @multi_check
    NEXT current_close%
    DEFMOUSE 0
    flag%=WIND_CLOSE(win%(max_window%))
    flag%=WIND_DELETE(win%(max_window%))
    flag%=WIND_CLOSE(win%(max_window%+2))
    flag%=WIND_DELETE(win%(max_window%+2))
    flag%=WIND_DELETE(win%(max_window%+1))
    ~FSETDTA(old_dta%)
    IF file_name_buffer%>0 THEN
      d%=GEMDOS(73,L:file_name_buffer%) ! RELEASE MEMORY
    ENDIF
    IF search_file_buffer%>0 THEN
      d%=GEMDOS(73,L:search_file_buffer%) ! RELEASE MEMORY
    ENDIF
    IF window_buffer%>0 THEN
      d%=GEMDOS(73,L:window_buffer%) ! RELEASE MEMORY
    ENDIF
    IF mint_os%=1 OR magic_os%=1 THEN
    ELSE
      ~MENU_BAR(menu%,0)
    ENDIF
    ~RSRC_FREE() ! FREE RSC MEMORY
    END
  ENDIF
RETURN
> PROCEDURE alert_start
  IF alert_done%=2 THEN
    @about_close
  ENDIF
  alert_done%=0
  DEFMOUSE 2
  current%=max_window%+1
  old_swx%=wx%(current%)
  old_swy%=wy%(current%)
  @set_alert_text
  SELECT alerts%
  CASE 0 ! CENTER
    ~FORM_CENTER(alert_dialog%,alert_x%,alert_y%,alert_w%,alert_h%)
  CASE 1 ! MOUSE
    alert_x%=mx&-(alert_w%/2)
    alert_y%=my&-(alert_h%-(OB_Y(alert_dialog%,t_alert_1%)+OB_H(alert_dialog%,t_alert_1%)))
  CASE 2 ! LAST
  ENDSELECT
  ~WIND_CALC(0,&X1001,alert_x%,alert_y%,alert_w%,alert_h%,alert_wx%,alert_wy%,alert_ww%,alert_wh%)
  IF alert_wx%<mwx% THEN
    alert_wx%=mwx%
  ENDIF
  IF alert_wx%>mww%-alert_ww% THEN
    alert_wx%=mww%-alert_ww%
  ENDIF
  IF alert_wy%<mwy% THEN
    alert_wy%=mwy%
  ENDIF
  IF alert_wy%>mwh%+mwy%-alert_wh% THEN
    alert_wy%=mwh%+mwy%-alert_wh%
  ENDIF
  ~WIND_CALC(1,&X1001,alert_wx%,alert_wy%,alert_ww%,alert_wh%,alert_x%,alert_y%,d%,d%)
  OB_X(alert_dialog%,0)=alert_x%
  OB_Y(alert_dialog%,0)=alert_y%
  wx%(current%)=alert_wx%
  wy%(current%)=alert_wy%
  ww%(current%)=alert_ww%
  wh%(current%)=alert_wh%
  IF help_exit%=1 THEN
    window_title$="Alert (File Spy)"+CHR$(0)
  ELSE
    window_title$="Help (File Spy)"+CHR$(0)
  ENDIF
  CHAR{window_title%+(max_window%+1)*128}=window_title$
  flag%=WIND_SET(win%(max_window%+1),2,CARD(SWAP(window_title%+(max_window%+1)*128)),CARD(window_title%+(max_window%+1)*128),0,0)
  flag%=WIND_OPEN(win%(current%),wx%(current%),wy%(current%),ww%(current%),wh%(current%))
  flag%=WIND_SET(win%(current%),5,wx%(current%),wy%(current%),ww%(current%),wh%(current%))
  flag%=WIND_GET(win%(current%),4,iwx%(current%),iwy%(current%),iww%(current%),iwh%(current%))
  OB_X(alert_dialog%,0)=iwx%(max_window%+1)
  OB_Y(alert_dialog%,0)=iwy%(max_window%+1)
  @update_alert
  DEFMOUSE 0
RETURN
> PROCEDURE alert_end
  DO
  LOOP UNTIL MOUSEK=0
  current%=max_window%+1
  flag%=WIND_CLOSE(win%(current%))
  @multi_check
RETURN
> PROCEDURE alert
  @alert_start
  DO
    @check_alert_event
  LOOP UNTIL alert_done%=1
  @alert_end
RETURN
> PROCEDURE check_alert_event
  c_type&=EVNT_MULTI(&X110011,2,1,1,0,0,0,0,0,0,0,0,0,0,buffer%,10,mx&,my&,button&,key_state&,key&,clicks&)
  IF c_type& AND &X1 THEN
    code&=SHR(key& AND &HFF00,8)
    IF code&=28 OR code&=114 THEN ! 'RETURN', 'ENTER'
      @alert_default
    ENDIF
  ENDIF
  IF c_type& AND &X10 THEN
    @which_window
    IF current%=max_window%+1 THEN
      clicked_on%=WIND_FIND(mx&,my&)
      IF win%(current%)=clicked_on% THEN
        alert_pick%=OBJC_FIND(alert_dialog%,0,4,mx&,my&)
        @alert_button
      ENDIF
    ENDIF
  ENDIF
  IF c_type& AND &X10000 THEN
    command%=buffer&(0)
    IF command%=10 THEN
      tit%=buffer&(3)
      ~MENU_TNORMAL(menu%,tit%,1)
    ELSE
      top%=buffer&(3)
      current%=-1
      IF win%(max_window%)=top% THEN
        current%=max_window%
      ELSE
        IF win%(max_window%+1)=top% THEN
          current%=max_window%+1
        ELSE
          IF win%(max_window%+2)=top% THEN
            current%=max_window%+2
          ELSE
            FOR x%=0 TO last_used%
              IF win%(x%)=top% THEN
                current%=x%
                x%=max_window%
              ENDIF
            NEXT x%
          ENDIF
        ENDIF
      ENDIF
      IF current%>-1 THEN
        command%=buffer&(0)
        SELECT command%
        CASE 20 ! WIND UPDATE
          @repair
        CASE 22 ! CLOSE WINDOW
          IF current%=max_window%+1 THEN
            @alert_default
          ENDIF
        CASE 28 ! WINDOW MOVED
          IF current%=max_window%+1 THEN
            wx%(current%)=buffer&(4)
            wy%(current%)=buffer&(5)
            flag%=WIND_SET(win%(current%),5,wx%(current%),wy%(current%),ww%(current%),wh%(current%))
            flag%=WIND_GET(win%(current%),4,iwx%(current%),iwy%(current%),iww%(current%),iwh%(current%))
            OB_X(alert_dialog%,0)=iwx%(current%)
            OB_Y(alert_dialog%,0)=iwy%(current%)
          ENDIF
        ENDSELECT
      ENDIF
    ENDIF
  ENDIF
RETURN
> PROCEDURE alert_default
  alert_pick%=alert_button%
  SELECT alert_button%
  CASE 0
    alert_pick%=t_alert_1%
  CASE 1
    alert_pick%=t_alert_2%
  CASE 2
    alert_pick%=t_alert_3%
  ENDSELECT
  @alert_button
RETURN
> PROCEDURE alert_button
  IF alert_pick%=t_alert_1% OR alert_pick%=t_alert_2% OR alert_pick%=t_alert_3% THEN
    OB_STATE(alert_dialog%,alert_pick%)=BSET(OB_STATE(alert_dialog%,alert_pick%),0)
    SELECT alert_pick%
    CASE t_alert_1%
      ' @update_alert
      alert_exit%=0
    CASE t_alert_2%
      ' @update_alert
      alert_exit%=1
    CASE t_alert_3%
      ' @update_alert
      alert_exit%=2
    ENDSELECT
    CLIP alert_x%,alert_y%,alert_w%,alert_h%
    ~OBJC_DRAW(alert_dialog%,alert_pick%,4,alert_x%,alert_y%,alert_w%,alert_h%)
    OB_STATE(alert_dialog%,alert_pick%)=BCLR(OB_STATE(alert_dialog%,alert_pick%),0)
    alert_done%=1
    DO
    LOOP UNTIL MOUSEK=0
  ENDIF
RETURN
> PROCEDURE update_alert
  ~OBJC_OFFSET(alert_dialog%,alert_pick%,rx%,ry%)
  rw%=OB_W(alert_dialog%,alert_pick%)
  rh%=OB_H(alert_dialog%,alert_pick%)
  my_buffer&(0)=20
  my_buffer&(3)=win%(max_window%+1)
  my_buffer&(4)=rx%-2
  my_buffer&(5)=ry%-2
  my_buffer&(6)=rw%+4
  my_buffer&(7)=rh%+4
  ~APPL_WRITE(handle&,16,my_buffer%)
RETURN
> PROCEDURE set_alert_text
  FOR x%=0 TO 4
    CHAR{{OB_SPEC(alert_dialog%,t_alert_text%+x%)}}=MID$(alert$(x%),1,38)
  NEXT x%
  IF alert$(5)="" THEN
    OB_FLAGS(alert_dialog%,b_alert_1%)=BSET(OB_FLAGS(alert_dialog%,b_alert_1%),7)
  ELSE
    OB_FLAGS(alert_dialog%,b_alert_1%)=BCLR(OB_FLAGS(alert_dialog%,b_alert_1%),7)
    CHAR{{OB_SPEC(alert_dialog%,t_alert_1%)}}=alert$(5)
  ENDIF
  IF alert$(6)="" THEN
    OB_FLAGS(alert_dialog%,b_alert_2%)=BSET(OB_FLAGS(alert_dialog%,b_alert_2%),7)
  ELSE
    OB_FLAGS(alert_dialog%,b_alert_2%)=BCLR(OB_FLAGS(alert_dialog%,b_alert_2%),7)
    CHAR{{OB_SPEC(alert_dialog%,t_alert_2%)}}=alert$(6)
  ENDIF
  IF alert$(7)="" THEN
    OB_FLAGS(alert_dialog%,b_alert_3%)=BSET(OB_FLAGS(alert_dialog%,b_alert_3%),7)
  ELSE
    OB_FLAGS(alert_dialog%,b_alert_3%)=BCLR(OB_FLAGS(alert_dialog%,b_alert_3%),7)
    CHAR{{OB_SPEC(alert_dialog%,t_alert_3%)}}=alert$(7)
  ENDIF
  OB_FLAGS(alert_dialog%,t_alert_1%)=BCLR(OB_FLAGS(alert_dialog%,t_alert_1%),1)
  OB_STATE(alert_dialog%,t_alert_1%)=BCLR(OB_STATE(alert_dialog%,t_alert_1%),5)
  OB_FLAGS(alert_dialog%,t_alert_2%)=BCLR(OB_FLAGS(alert_dialog%,t_alert_2%),1)
  OB_STATE(alert_dialog%,t_alert_2%)=BCLR(OB_STATE(alert_dialog%,t_alert_2%),5)
  OB_FLAGS(alert_dialog%,t_alert_3%)=BCLR(OB_FLAGS(alert_dialog%,t_alert_3%),1)
  OB_STATE(alert_dialog%,t_alert_3%)=BCLR(OB_STATE(alert_dialog%,t_alert_3%),5)
  SELECT alert_button%
  CASE 0
    OB_FLAGS(alert_dialog%,t_alert_1%)=BSET(OB_FLAGS(alert_dialog%,t_alert_1%),1)
    OB_STATE(alert_dialog%,t_alert_1%)=BSET(OB_STATE(alert_dialog%,t_alert_1%),5)
  CASE 1
    OB_FLAGS(alert_dialog%,t_alert_2%)=BSET(OB_FLAGS(alert_dialog%,t_alert_2%),1)
    OB_STATE(alert_dialog%,t_alert_2%)=BSET(OB_STATE(alert_dialog%,t_alert_2%),5)
  CASE 2
    OB_FLAGS(alert_dialog%,t_alert_3%)=BSET(OB_FLAGS(alert_dialog%,t_alert_3%),1)
    OB_STATE(alert_dialog%,t_alert_3%)=BSET(OB_STATE(alert_dialog%,t_alert_3%),5)
  ENDSELECT
RETURN
> PROCEDURE alert_window
  alert$(0)=""
  alert$(1)="Sorry, I can not open another window"
  alert$(2)="at this time. Try closing a window"
  alert$(3)="that in not in use."
  alert$(4)=""
  alert$(5)=""
  alert$(6)="OK"
  alert$(7)=""
  alert_button%=1
  @alert
RETURN
> PROCEDURE alert_copy
  alert$(0)=""
  alert$(1)="Sorry, not enough free memory to"
  alert$(2)="complete copy."
  alert$(3)=""
  alert$(4)=""
  alert$(5)=""
  alert$(6)="OK"
  alert$(7)=""
  alert_button%=1
  @alert
RETURN
> PROCEDURE alert_exists
  alert$(0)="Important..."
  alert$(1)=""
  alert$(2)=temp$+" exists,"
  alert$(3)="should I overwrite it?"
  alert$(4)=""
  alert$(5)="Overwrite"
  alert$(6)=""
  alert$(7)="Cancel"
  alert_button%=2
  @alert
  button%=alert_exit%
RETURN
> PROCEDURE alert_free_disk
  alert$(0)=""
  alert$(1)="Sorry, only "+STR$(free_space%)
  alert$(2)="free bytes on drive "+CHR$(drive%+64)+"."
  alert$(3)="You need "+STR$(total_size%)+" bytes"
  alert$(4)="to save '"+view_save_name$+"'."
  alert$(5)=""
  alert$(6)="OK"
  alert$(7)=""
  alert_button%=1
  @alert
RETURN
> PROCEDURE alert_stop_save
  alert$(0)=""
  alert$(1)="Would you like to continue saving"
  alert$(2)="files or stop saving all files now ?"
  alert$(3)=""
  alert$(4)=""
  alert$(5)="Continue"
  alert$(6)=""
  alert$(7)="Stop"
  alert_button%=0
  @alert
RETURN
> PROCEDURE about
  IF alert_done%=1 THEN
    current%=max_window%+1
    SELECT alerts%
    CASE 0 ! CENTER
      ~FORM_CENTER(about_dialog%,about_x%,about_y%,about_w%,about_h%)
    CASE 1 ! MOUSE
      about_x%=mx&-(about_w%/2)
      about_y%=my&-(about_h%/2)
    CASE 2 ! LAST
    ENDSELECT
    ~WIND_CALC(0,&X1001,about_x%,about_y%,about_w%,about_h%,about_wx%,about_wy%,about_ww%,about_wh%)
    IF about_wx%<mwx% THEN
      about_wx%=mwx%
    ENDIF
    IF about_wx%>mww%-about_ww% THEN
      about_wx%=mww%-about_ww%
    ENDIF
    IF about_wy%<mwy% THEN
      about_wy%=mwy%
    ENDIF
    IF about_wy%>mwh%+mwy%-about_wh% THEN
      about_wy%=mwh%+mwy%-about_wh%
    ENDIF
    ~WIND_CALC(1,&X1001,about_wx%,about_wy%,about_ww%,about_wh%,about_x%,about_y%,d%,d%)
    wx%(current%)=about_wx%
    wy%(current%)=about_wy%
    ww%(current%)=about_ww%
    wh%(current%)=about_wh%
    window_title$="About File Spy"+CHR$(0)
    CHAR{window_title%+(max_window%+1)*128}=window_title$
    flag%=WIND_SET(win%(max_window%+1),2,CARD(SWAP(window_title%+(max_window%+1)*128)),CARD(window_title%+(max_window%+1)*128),0,0)
    flag%=WIND_OPEN(win%(current%),wx%(current%),wy%(current%),ww%(current%),wh%(current%))
    flag%=WIND_SET(win%(current%),5,wx%(current%),wy%(current%),ww%(current%),wh%(current%))
    flag%=WIND_GET(win%(current%),4,iwx%(current%),iwy%(current%),iww%(current%),iwh%(current%))
    OB_X(about_dialog%,0)=iwx%(max_window%+1)
    OB_Y(about_dialog%,0)=iwy%(max_window%+1)
    OB_STATE(about_dialog%,about_button%)=BCLR(OB_STATE(about_dialog%,about_button%),0)
    alert_done%=2
  ELSE
    flag%=WIND_SET(win%(max_window%+1),10,0,0,0,0)
  ENDIF
RETURN
> PROCEDURE about_close
  OB_STATE(about_dialog%,about_button%)=BSET(OB_STATE(about_dialog%,about_button%),0)
  ~OBJC_OFFSET(about_dialog%,about_button%,rx%,ry%)
  rw%=OB_W(about_dialog%,about_button%)
  rh%=OB_H(about_dialog%,about_button%)
  @update_about
  @multi_check
  DO
  LOOP UNTIL MOUSEK=0
  alert_done%=1
  flag%=WIND_CLOSE(win%(max_window%+1))
RETURN
> PROCEDURE update_about
  my_buffer&(0)=20
  my_buffer&(3)=win%(max_window%+1)
  my_buffer&(4)=rx%
  my_buffer&(5)=ry%
  my_buffer&(6)=rw%
  my_buffer&(7)=rh%
  ~APPL_WRITE(handle&,16,my_buffer%)
RETURN
> PROCEDURE help
  under%=WIND_FIND(mx&,my&)
  IF under%>0 THEN
    IF win%(max_window%)=under% THEN
      SELECT iconify%
      CASE 0
        help_button%=OBJC_FIND(main_dialog%,0,4,mx&,my&)
        @main_help
      CASE 1
        help_button%=OBJC_FIND(alt_dialog%,0,4,mx&,my&)
        SELECT help_button%
        CASE t_alt_iconify%
          help%=45
        CASE t_alt_icon%
          help%=46
        DEFAULT
          help%=0
        ENDSELECT
        @do_help
      ENDSELECT
    ELSE
      on%=-1
      FOR x%=0 TO last_used%
        IF win%(x%)=under% THEN
          on%=x%
          x%=max_window%
        ENDIF
      NEXT x%
      IF on%>-1 THEN
        IF mx&>iwx%(on%) AND mx&<iwx%(on%)+iww%(on%) AND my&>iwy%(on%) AND my&<iwy%(on%)+iwh%(on%) THEN
          help%=1
          @do_help
        ELSE
          help%=2
          @do_help
        ENDIF
      ELSE
        help%=0
        @do_help
      ENDIF
    ENDIF
  ELSE
    help%=0
    @do_help
  ENDIF
RETURN
> PROCEDURE main_help
  SELECT help_button%
  CASE t_main_iconify%
    help%=3
  CASE t_main_file%
    help%=4
  CASE t_main_edit%
    help%=5
  CASE t_main_options%
    help%=6
  CASE t_main_ascii% TO t_main_binary%
    help%=7
  CASE t_main_data% TO t_main_mask%
    help%=83
  CASE t_main_start% TO t_main_width%
    help%=8
  CASE b_main_case%
    help%=9
  CASE b_main_match%
    help%=10
  CASE b_main_set%
    help%=11
  CASE b_main_all%,b_main_all_next%
    help%=12
  CASE b_main_source_file%,b_main_source_file_next%
    help%=13
  CASE b_main_dest_file%,b_main_dest_file_next%
    help%=14
  CASE b_main_display%,b_main_display_next%
    help%=15
  CASE b_main_open%,b_main_open_next%
    help%=16
  CASE b_main_windows%,b_main_windows_next%
    help%=18
  CASE b_main_op%,b_main_op_next%
    help%=19
  CASE b_main_bit_size%,b_main_bit_size_next%
    help%=20
  CASE b_main_viewer%,b_main_viewer_next%
    help%=21
  CASE b_main_view%
    help%=22
  DEFAULT
    help%=82
  ENDSELECT
  @do_help
RETURN
> PROCEDURE file_help
  SELECT button%
  CASE 1 ! ABOUT
    help%=84
  CASE 3 ! OPEN
    help%=23
  CASE 4 ! NEW
    help%=24
  CASE 5 ! MERGE
    help%=25
  CASE 6 ! CLOSE
    help%=26
  CASE 7 ! SAVE
    help%=27
  CASE 9 ! PRINT
    help%=28
  CASE 11 ! QUIT
    help%=29
  DEFAULT
    help%=0
  ENDSELECT
  @do_help
RETURN
> PROCEDURE edit_help
  SELECT button%
  CASE 1 ! FIND
    help%=30
  CASE 2 ! NEXT
    help%=31
  CASE 3 ! SEARCH
    help%=32
  CASE 4 ! REPLACE
    help%=33
  CASE 5 ! REPLACE EVERY
    help%=34
  CASE 6 ! ADD
    help%=35
  CASE 7 ! ADD EVERY
    help%=36
  CASE 9 ! ASCII CHANGE
    help%=37
  CASE 10 ! BIT CHANGE
    help%=38
  CASE 12 ! COPY
    help%=39
  CASE 13 ! INSERT
    help%=40
  CASE 14 ! DELETE
    help%=41
  CASE 16 ! GOTO
    help%=42
  DEFAULT
    help%=0
  ENDSELECT
  @do_help
RETURN
> PROCEDURE options_help
  SELECT button%
  CASE 1 ! TILE
    help%=43
  CASE 3 ! HELP
    help%=0
  CASE 5,6 ! LOAD/SAVE PREF
    help%=44
  DEFAULT
    help%=0
  ENDSELECT
  @do_help
RETURN
> PROCEDURE pick_help
  IF event_type& AND &X1 THEN
    IF SHR(key& AND &HFF00,8)=98 THEN
      help%=button%
      SELECT the_dialog%
      CASE file_dialog%
        @file_help
      CASE edit_dialog%
        @edit_help
      CASE options_dialog%
        @options_help
      CASE shift_dialog%
        @shift_help
      CASE source_dialog%
        @source_help
      CASE display_dialog%
        @display_help
      CASE open_dialog%
        @open_help
      CASE op_dialog%
        @op_help
      CASE bit_size_dialog%
        @bit_size_help
      CASE windows_dialog%
        @windows_help
      ENDSELECT
      @multi_check
      DO
      LOOP UNTIL MOUSEK=0
    ENDIF
  ENDIF
RETURN
> PROCEDURE shift_help
  SELECT button%
  CASE 1 ! OFF
    help%=47
  CASE 2 ! SELECTED
    help%=48
  CASE 3 ! ALL
    help%=49
  CASE 17 ! UP
    help%=50
  CASE 4 TO 13 ! FILENAME
    help%=51
  CASE 20 ! DOWN
    help%=52
  CASE 14 ! SELECT ALL
    help%=53
  CASE 15 ! SELECT CHANGED
    help%=54
  CASE 16 ! DESELECT ALL
    help%=55
  DEFAULT
    help%=0
  ENDSELECT
  @do_help
RETURN
> PROCEDURE source_help
  SELECT button%
  CASE 17 ! UP
    help%=56
  CASE 1 TO 16 ! FILENAME
    help%=57
  CASE 20 ! DOWN
    help%=58
  DEFAULT
    help%=0
  ENDSELECT
  @do_help
RETURN
> PROCEDURE display_help
  SELECT button%
  CASE 1 ! TEXT
    help%=59
  CASE 2 ! ASCII
    help%=60
  CASE 3 ! HEX
    help%=61
  CASE 4 ! GRAPHICS
    help%=62
  DEFAULT
    help%=0
  ENDSELECT
  @do_help
RETURN
> PROCEDURE open_help
  SELECT button%
  CASE 1 ! FULL
    help%=63
  CASE 2 ! MIN.
    help%=64
  DEFAULT
    help%=0
  ENDSELECT
  @do_help
RETURN
> PROCEDURE op_help
  SELECT button%
  CASE 1 ! AND
    help%=67
  CASE 2 ! OR
    help%=68
  CASE 3 ! XOR
    help%=69
  CASE 4 ! FLIP
    help%=70
  CASE 5 ! LEFT SHIFT
    help%=71
  CASE 6 ! RIGHT SHIFT
    help%=72
  CASE 7 ! REVERSE
    help%=73
  CASE 8 ! LEFT ROTATE
    help%=74
  CASE 9 ! RIGHT ROTATE
    help%=75
  DEFAULT
    help%=0
  ENDSELECT
  @do_help
RETURN
> PROCEDURE bit_size_help
  SELECT button%
  CASE 1 ! BYTE
    help%=76
  CASE 2 ! WORD
    help%=77
  CASE 3 ! LONG
    help%=78
  CASE 18 ! DOWN
    help%=58
  DEFAULT
    help%=0
  ENDSELECT
  @do_help
RETURN
> PROCEDURE windows_help
  SELECT button%
  CASE 1 ! STACK
    help%=79
  CASE 2 ! TILE
    help%=80
  CASE 3 ! FULL
    help%=81
  DEFAULT
    help%=0
  ENDSELECT
  @do_help
RETURN
> PROCEDURE do_help
  help_exit%=0
  help_on%=0
  button_default%=2
  DO
    IF help$(help%,help_on%+5)="" THEN
      FOR x%=0 TO 4
        alert$(x%)=help$(help%,help_on%+x%)
      NEXT x%
      alert$(5)=""
      alert$(6)="Exit"
      alert$(7)=""
      button_default%=1
      alert_button%=button_default%
      @alert
      help_exit%=1
    ELSE
      FOR x%=0 TO 4
        alert$(x%)=help$(help%,help_on%+x%)
      NEXT x%
      alert$(5)="Exit"
      alert$(6)=""
      alert$(7)="Next"
      button_default%=2
      alert_button%=button_default%
      @alert
      IF alert_exit%=0 THEN
        help_exit%=1
      ELSE
        help_on%=help_on%+5
      ENDIF
    ENDIF
  LOOP UNTIL help_exit%=1
RETURN
> PROCEDURE init_help
  '           ------------------------------------
  help$(0,0)="General"
  help$(0,1)="Place the mouse pointer over"
  help$(0,2)="something and press the HELP key for"
  help$(0,3)="help on that object. Like a button,"
  help$(0,4)="text, meun item, window gadget, ect."
  '
  help$(0,5)="You must exit HELP or an ALERT to"
  help$(0,6)="access other windows that belong to"
  help$(0,7)="this program, but you can still"
  help$(0,8)="assess DAs and other programs(under"
  help$(0,9)="a multitasking OS)."
  '
  help$(0,10)=""
  '           ------------------------------------
  help$(1,0)="Data window"
  help$(1,1)="Click the left mouse button for the"
  help$(1,2)="data window pop-up menu."
  help$(1,3)="Double click to edit the data in a"
  help$(1,4)="window(see next help text)."
  '
  help$(1,0)="Data window Edit mode"
  help$(1,1)="The 'E' key will initate edit mode,"
  help$(1,2)="then the arrow keys move the cursor"
  help$(1,3)=",the 'Esc' key exits edit mode and"
  help$(1,4)="any other key will change the data."
  '
  help$(1,5)=""
  '           ------------------------------------
  help$(2,0)="Data window gadgets"
  help$(2,1)=""
  help$(2,2)="The title shows the file name/size."
  help$(2,3)="The infoline shows view position,"
  help$(2,4)="display width and the display type."
  '
  help$(2,5)="Data window gadgets"
  help$(2,6)=""
  help$(2,7)="up/down or keys+shift move 1 char."
  help$(2,8)="Up/down or keys move 1 line."
  help$(2,9)="Above/below or keys+ctrl move 1 page"
  '
  help$(2,10)="Data window gadgets"
  help$(2,11)=""
  help$(2,12)="left/right or keys = width -/+ 1."
  help$(2,13)="left/right or keys+shift = +/- 16."
  help$(2,14)="CirHome moves to 0 or end."
  '
  help$(2,15)=""
  '           ------------------------------------
  help$(3,0)="Iconify gadget"
  help$(3,1)=""
  help$(3,2)="Close all windows used by this"
  help$(3,3)="program and open one small iconifyed"
  help$(3,4)="window."
  '           ------------------------------------
  help$(4,0)="File menu"
  help$(4,5)=""
  '           ------------------------------------
  help$(5,0)="Edit menu"
  help$(5,5)=""
  '           ------------------------------------
  help$(6,0)="Options menu"
  help$(6,5)=""
  '           ------------------------------------
  help$(7,0)="ASCII/Hex/Binary"
  help$(7,1)=""
  help$(7,2)="Change the 'Data' and 'Mask' fields"
  help$(7,3)="to ASCII, Hex or binary."
  help$(7,4)=""
  '
  help$(7,5)=""
  '           ------------------------------------
  '
  help$(8,0)="Editable fields"
  help$(8,1)="'Start', 'Stop', 'Every', 'Size',"
  help$(8,2)="'Width' Values can range from 0 to"
  help$(8,3)="999999999. Each field can have "
  help$(8,4)="different uses(see each function)."
  '
  help$(8,5)=""
  '           ------------------------------------
  help$(9,0)="Case"
  help$(9,1)=""
  help$(9,2)="If selected upper and lower case"
  help$(9,3)="letters must match during any"
  help$(9,4)="operation that uses 'CASE'."
  '
  help$(9,5)=""
  '            ------------------------------------
  help$(10,0)="Match"
  help$(10,1)=""
  help$(10,2)="When selected, 'match' effects how"
  help$(10,3)="'ASCII change' and 'Delete' work."
  help$(10,4)=""
  '
  help$(10,5)=""
  '            ------------------------------------
  help$(11,0)="Set button"
  help$(11,1)="The display of the top, selected or"
  help$(11,2)="all windows(see 'SHIFT') are changed"
  help$(11,3)="using the 'Display' type, 'Start'"
  help$(11,4)="settings, and the window is fulled."
  '
  help$(11,5)=""
  '            ------------------------------------
  help$(12,0)="Shift list"
  help$(12,5)=""
  '            ------------------------------------
  help$(13,0)="Source file list"
  help$(13,1)=""
  help$(13,2)="'Source file' and 'Destenation file'"
  help$(13,3)="are used during some operations when"
  help$(13,4)="the 'MENU/Shift' list is off."
  '
  help$(13,5)=""
  '            ------------------------------------
  help$(14,0)="Dest file list"
  help$(14,5)=""
  '            ------------------------------------
  help$(15,0)="Display list"
  help$(15,5)=""
  '            ------------------------------------
  help$(16,0)="Open list"
  help$(16,5)=""
  '            ------------------------------------
  help$(17,0)="Where list"
  help$(17,5)=""
  '            ------------------------------------
  help$(18,0)="Windows list"
  help$(18,5)=""
  '            ------------------------------------
  help$(19,0)="Op list"
  help$(19,1)=""
  help$(19,2)="'Bit operation' Type of operation"
  help$(19,3)="preformed with the 'Bit change'"
  help$(19,4)="function."
  '
  help$(19,5)=""
  '            ------------------------------------
  help$(20,0)="Op size list"
  help$(20,1)=""
  help$(20,2)="'Bit change' can be applied as"
  help$(20,3)="byte(8 bits), as word(16 bits)"
  help$(20,4)="or as long word(32 bits)."
  '
  help$(20,5)=""
  '            ------------------------------------
  help$(21,0)="Viewer list"
  help$(21,5)=""
  '            ------------------------------------
  help$(22,0)="View button"
  help$(22,5)=""
  '            ------------------------------------
  help$(23,0)="Open"
  help$(23,1)=""
  help$(23,2)="Wildcards(*,?) can be used. A valid"
  help$(23,3)="filename that is not on the disk will"
  help$(23,4)="be used as the name of a new window."
  '
  help$(23,5)=""
  '            ------------------------------------
  help$(24,0)="New"
  help$(24,1)=""
  help$(24,2)=" Open an empty window."
  help$(24,3)=""
  help$(24,4)=""
  '
  help$(24,5)=""
  '            ------------------------------------
  help$(25,0)="Merge"
  help$(25,1)="The data is inserted at the view"
  help$(25,2)="position. The data from 'Start'"
  help$(25,3)="field value to the 'Stop' field"
  help$(25,4)="value will be copied."
  '
  help$(25,5)=""
  '            ------------------------------------
  help$(26,0)="Close"
  help$(26,1)=" Close top window."
  help$(26,5)=""
  '            ------------------------------------
  help$(27,0)="Save"
  help$(27,1)=" Save the top window to disk."
  help$(27,5)=""
  '            ------------------------------------
  help$(28,0)="Print"
  help$(28,1)="From 'Start' field value to 'Stop'"
  help$(28,2)="field value will be print."
  help$(28,3)="Each line in the printout will be"
  help$(28,4)="'Width' width value characters wide."
  '
  help$(2,5)=""
  '            ------------------------------------
  help$(29,0)="Quit"
  help$(29,1)=""
  help$(29,2)="Exit the program."
  '
  help$(29,5)=""
  '            ------------------------------------
  help$(30,0)="Find"
  help$(30,1)=""
  help$(30,2)="If found the window view is changed"
  help$(30,3)="to the first occrance of the find"
  help$(30,4)="data."
  '
  help$(30,5)="Fields used by Find"
  help$(30,6)=""
  help$(30,7)="'Data' is what is searched for."
  help$(30,8)="'Start' search begins at this byte."
  help$(30,9)="'Stop' search ends at this byte."
  '
  help$(30,10)="Buttons used by Find"
  help$(30,11)=""
  help$(30,12)="'Case' upper/lower case letters"
  help$(30,13)="must match find string."
  help$(30,14)=""
  '
  help$(30,15)=""
  '            ------------------------------------
  help$(31,0)="Next"
  help$(31,1)=""
  help$(31,2)="Same as 'Find' except that the next"
  help$(31,3)="ocurrance of the find data is found."
  help$(31,4)=""
  '
  help$(31,5)=""
  '            ------------------------------------
  help$(32,0)="Search"
  help$(32,1)=""
  help$(32,2)="Search file(s) on disk. Wildcards"
  help$(32,3)="can be used in the filename."
  help$(32,4)=""
  '
  help$(32,5)="Fields used by Search"
  help$(32,6)=""
  help$(32,7)="'Data' is what is searched for."
  help$(32,8)="'Start' search begins at this byte."
  help$(32,9)="'Stop' search ends at this byte."
  '
  help$(32,10)="Buttons used by Search"
  help$(32,11)=""
  help$(32,12)="'Case' upper/lower case letters"
  help$(32,13)="must match search string."
  help$(32,14)=""
  '
  help$(32,15)=""
  '            ------------------------------------
  help$(33,0)="Replace"
  help$(33,1)=""
  help$(33,2)="The next occrrance of the find data"
  help$(33,3)="is replaced."
  '
  help$(33,5)="Fields used by Replace"
  help$(33,6)="'Data' is what is searched for."
  help$(33,7)="'Mask' is the replace data."
  help$(33,8)="'Start' replace begins at this byte."
  help$(33,9)="'Stop' replace ends here."
  '
  help$(33,10)="Buttons used by Replace"
  help$(33,12)="'Case' upper/lower case letters"
  help$(33,13)="must match find string."
  '
  help$(33,15)=""
  '            ------------------------------------
  help$(34,0)="Replace every"
  help$(34,1)=""
  help$(34,2)="Same as 'Replace' except every"
  help$(34,3)="occurance of the find data is"
  help$(34,4)="replaced."
  '
  help$(34,5)=""
  '            ------------------------------------
  help$(35,0)="Add"
  help$(35,1)=""
  help$(35,2)="At the next occrrance of the find"
  help$(35,3)="data the mask data will be inserted"
  help$(35,4)="into the window."
  '
  help$(35,5)="Fields used by Add"
  help$(35,6)="'Data' what is searched for."
  help$(35,7)="'Mask' is the insert data."
  help$(35,8)="'Start' search begins at this byte."
  help$(35,9)="'Stop' search ends here."
  '
  help$(35,10)="Fields and Buttons used by Add"
  help$(35,11)="'SIZE' If >0 then first character"
  help$(35,12)="in 'Mask' is added 'SIZE' times."
  help$(35,13)="'Case' upper/lower case letters"
  help$(35,14)="must match find string."
  '
  help$(35,10)=""
  '            ------------------------------------
  help$(36,0)="Add every"
  help$(36,1)=""
  help$(36,2)="Same as 'Add' except that at every"
  help$(36,3)="ocurance of the find data the mask"
  help$(36,4)="data will be inserted."
  '
  help$(36,5)=""
  '            ------------------------------------
  help$(37,0)="ASCII change"
  help$(37,1)=""
  help$(37,2)="The next occurance of the search"
  help$(37,3)="data is replaced width the mask data."
  help$(37,4)=""
  '
  help$(37,5)="Fields used by ASCII change"
  help$(37,6)=" 'Data' to look for(see 'Match')."
  help$(37,7)=" 'Mask' is the replace data."
  help$(37,8)=" 'Start' replace begins at this byte."
  help$(37,9)=" 'Stop' replace ends here."
  '
  help$(37,10)="Buttons used by ASCII change"
  help$(37,11)=""
  help$(37,12)="'Case' upper/lower case letters"
  help$(37,13)="must match find string."
  '
  help$(37,15)="Buttons used by ASCII change"
  help$(37,16)="'Match' If selected each char in"
  help$(37,17)="'Data' is replaced with each char"
  help$(37,18)="in 'Mask'. Else each char in 'Data'"
  help$(37,19)="is replaced with 1st char in 'Mask'"
  '
  help$(37,20)=""
  '            ------------------------------------
  help$(38,0)="Bit change"
  help$(38,1)=""
  help$(38,2)="The next match has a logical bit"
  help$(38,3)="operation preformed on it."
  help$(38,4)=""
  '
  help$(38,5)="Fields used by Bit change"
  help$(38,6)="'Data' bit pattern used to preform"
  help$(38,7)="some of the logical bit operations"
  help$(38,8)="'Start' search begins at this byte."
  help$(38,9)="'Stop' search ends here."
  '
  help$(38,10)="Fields used by Bit change"
  help$(38,11)="'Mask' bit pattern searched for. The"
  help$(38,12)="1s and 0s must match before the bit"
  help$(38,13)="operation is preformed. Any chars"
  help$(38,14)="other than 1s/0s automaticly match."
  '
  help$(38,15)=""
  '            ------------------------------------
  help$(39,0)="Copy"
  help$(39,1)=""
  help$(39,2)="Copy all or part of one window to"
  help$(39,3)="another."
  help$(39,4)=""
  '
  help$(39,5)="Fields used by Copy"
  help$(39,6)="'Source file' window to copy from."
  help$(39,7)="'Destenation file'  window to copy"
  help$(39,8)="to, if this window does not exist"
  help$(39,9)="a new window will be opened."
  '
  help$(39,10)="Fields used by Copy"
  help$(39,11)=""
  help$(39,12)="'Start' first byte to copy."
  help$(39,13)="'End' last byte to copy."
  help$(39,14)=""
  '
  help$(39,15)=""
  '            ------------------------------------
  help$(40,0)="Insert"
  help$(40,1)=""
  help$(40,2)="Insert bytes into a file."
  '
  help$(40,5)="Fields used by Insert"
  help$(40,6)=""
  help$(40,7)="'Data' data to insert."
  help$(40,8)="'Start' start inserting here."
  help$(40,9)="'Stop' stop insert here."
  '
  help$(40,10)="Fields used by Insert"
  help$(40,11)="'Size' bytes will be added if 'Data'"
  help$(40,12)="is only one char."
  help$(40,13)="'Every' insert byte(s) every 'Every'"
  help$(40,14)="bytes."
  '
  help$(40,15)=""
  '            ------------------------------------
  help$(41,0)="Delete"
  help$(41,1)=""
  help$(41,2)="Delete bytes from file."
  help$(41,3)=""
  help$(41,4)=""
  '
  help$(41,5)="Fields used by Delete"
  help$(41,6)="'Data' (see 'Match' below)."
  help$(41,7)="'Start' start deleting here."
  help$(41,8)="'End' stop deleting here."
  help$(41,9)="'Size' delete this many bytes."
  '
  help$(41,10)="Fields used by Delete"
  help$(41,11)=""
  help$(41,12)="'EVERY' delete bytes every 'Every'"
  help$(41,13)="bytes."
  help$(41,14)=""
  '
  help$(41,15)="Buttons used by Delete"
  help$(41,16)=""
  help$(41,17)="'Match' If selected any chars in"
  help$(41,18)="the 'Data' field are deleted."
  help$(41,19)=""
  '
  help$(41,20)=""
  '            ------------------------------------
  help$(42,0)="Goto"
  help$(42,1)=""
  help$(42,2)="Change display position to 'Start'"
  help$(42,3)="byte."
  help$(42,4)=""
  '
  help$(42,5)=""
  '            ------------------------------------
  help$(43,0)="Tile"
  help$(43,1)=""
  help$(43,2)="Tile windows(see 'Tile' list)."
  help$(43,3)=""
  help$(43,4)=""
  '
  help$(43,5)=""
  '            ------------------------------------
  help$(44,0)="Load/Save preferences"
  help$(44,5)=""
  '            ------------------------------------
  help$(45,0)="Uniconify"
  help$(45,5)=""
  '            ------------------------------------
  help$(46,0)="About"
  help$(46,5)=""
  '            ------------------------------------
  help$(47,0)="Off"
  help$(47,1)=""
  help$(47,2)="During most operations the top or"
  help$(47,3)="'Source file' (if main window is on"
  help$(47,4)="top) window is effected."
  '
  help$(47,5)=""
  '            ------------------------------------
  help$(48,0)="Selected"
  help$(48,1)="When a menu item selected or the"
  help$(48,2)="Shift key is used only the selected"
  help$(48,3)="files are effected during most"
  help$(48,4)="operations."
  '
  help$(48,5)=""
  '            ------------------------------------
  help$(49,0)="All"
  help$(49,1)=""
  help$(49,2)="Same as 'selected' except all"
  help$(49,3)="windows are effected."
  help$(49,4)=""
  '
  help$(49,5)=""
  '            ------------------------------------
  help$(50,0)="Up"
  help$(50,1)=""
  help$(50,2)="Used to scroll through the window"
  help$(50,3)="names so they can be selected or"
  help$(50,4)="deselected"
  '
  help$(50,5)=""
  '            ------------------------------------
  help$(51,0)="Filenames"
  help$(51,5)=""
  '            ------------------------------------
  help$(52,0)="Down"
  help$(52,1)=""
  help$(52,2)="Used to scroll through the window"
  help$(52,3)="names so they can be selected or"
  help$(52,4)="deselected"
  '
  help$(52,5)=""
  '            ------------------------------------
  help$(53,0)="Select all"
  help$(53,1)=""
  help$(53,2)="Select all windows."
  '
  help$(53,5)=""
  '            ------------------------------------
  help$(54,0)="Select changed"
  help$(54,1)=""
  help$(54,2)="Selected only the windows that the"
  help$(54,3)="data has been changed in any way."
  '
  help$(54,5)=""
  '            ------------------------------------
  help$(55,0)="Deselect all"
  help$(55,1)=""
  help$(55,2)="Deselect all selected windows."
  '
  help$(55,5)=""
  '            ------------------------------------
  help$(56,0)="Up"
  help$(56,5)=""
  '            ------------------------------------
  help$(57,0)="Filename"
  help$(57,5)=""
  '            ------------------------------------
  help$(58,0)="Down"
  help$(58,5)=""
  '            ------------------------------------
  help$(59,0)="Text"
  help$(59,1)=""
  help$(59,2)="Data in a window will be displayed"
  help$(59,3)="like ASCII text."
  '
  help$(59,5)=""
  '            ------------------------------------
  help$(60,0)="ASCII"
  help$(60,1)=""
  help$(60,2)="Data in a window will be displayed"
  help$(60,3)="as ASCII text characters."
  '
  help$(60,5)=""
  '            ------------------------------------
  help$(61,0)="Hex"
  help$(61,1)=""
  help$(61,2)="Data in a window will be displayed"
  help$(61,3)="as HEX bytes."
  '
  help$(61,5)=""
  '            ------------------------------------
  help$(62,0)="Graphics"
  help$(62,1)=""
  help$(62,2)="Data in a window will be displayed"
  help$(62,3)="as raster graphics."
  '
  help$(62,5)=""
  '            ------------------------------------
  help$(63,0)="Full"
  help$(63,1)=""
  help$(63,2)="Windows are opened at their maximum"
  help$(63,3)="size."
  '
  help$(63,5)=""
  '            ------------------------------------
  help$(64,0)="Min."
  help$(64,1)=""
  help$(64,2)="Windows are opened at the minimum"
  help$(64,3)="size."
  '
  help$(64,5)=""
  '            ------------------------------------
  help$(65,0)="Printer"
  help$(65,1)=""
  help$(65,2)="When selected the 'Print' function"
  help$(65,3)="will print to the Printer."
  '
  help$(65,5)=""
  '            ------------------------------------
  help$(66,0)="File"
  help$(66,1)=""
  help$(66,2)="When selected the 'Print' function"
  help$(66,3)="will print to a disk File"
  '
  help$(66,5)=""
  '            ------------------------------------
  help$(67,0)="AND"
  help$(67,1)=""
  help$(67,2)="Bits in 'Data' are ANDed with 'Mask'"
  '
  help$(67,5)=""
  '            ------------------------------------
  help$(68,0)="OR"
  help$(68,1)=""
  help$(68,2)="Bits in 'Data' are ORed with 'Mask'."
  '
  help$(68,5)=""
  '            ------------------------------------
  help$(69,0)="XOR"
  help$(69,1)=""
  help$(69,2)="Bits in 'Data' are XORed with 'Mask'"
  '
  help$(69,5)=""
  '            ------------------------------------
  help$(70,0)="Flip"
  help$(70,1)=""
  help$(70,2)="All 1s in 'Data' are changed to 0s"
  help$(70,3)="and 0s are changed to 1s."
  '
  help$(70,5)=""
  '            ------------------------------------
  help$(71,0)="Left shift"
  help$(71,1)=""
  help$(71,2)="Shift all bits in 'Data' to the Left"
  '
  help$(71,5)=""
  '            ------------------------------------
  help$(72,0)="Right shift"
  help$(72,1)=""
  help$(72,2)="Shift all bits in 'Data' to the"
  help$(72,3)="right."
  '
  help$(72,5)=""
  '            ------------------------------------
  help$(73,0)="Reverse"
  help$(73,1)=""
  help$(73,2)="Change the order of bits in 'Data'."
  '
  help$(73,5)=""
  '            ------------------------------------
  help$(74,0)="Left rotate"
  help$(74,1)=""
  help$(74,2)="Rotate bits in 'Data' left."
  '
  help$(74,5)=""
  '            ------------------------------------
  help$(75,0)="Right rotate"
  help$(75,1)=""
  help$(75,2)="Rotate bits in 'Data' right."
  '
  help$(75,5)=""
  '            ------------------------------------
  help$(76,0)="Byte"
  help$(76,1)=""
  help$(76,2)="When 'Byte' is selected bit"
  help$(76,3)="operations are preformed on each"
  help$(76,4)="byte."
  '
  help$(76,5)=""
  '            ------------------------------------
  help$(77,0)="Word"
  help$(77,1)=""
  help$(77,2)="When 'Word' is selected bit"
  help$(77,3)="operations are preformed on two"
  help$(77,4)="bytes at a time."
  '
  help$(77,5)=""
  '            ------------------------------------
  help$(78,0)="Long"
  help$(78,1)=""
  help$(78,2)="When 'Long' is selected bit"
  help$(78,3)="operations are preformed on four"
  help$(78,4)="bytes at a time."
  '
  help$(78,5)=""
  '            ------------------------------------
  help$(79,0)="Stack"
  help$(79,1)="The windows are arranged from top of"
  help$(79,2)="screen to  bottom and overlaped so"
  help$(79,3)="that only the title and infoline"
  help$(79,4)="show."
  '
  help$(79,5)=""
  '            ------------------------------------
  help$(80,0)="Tile"
  help$(80,1)=""
  help$(80,2)="The windows are arranged so that"
  help$(80,3)="they are all the same size and can"
  help$(80,4)="all be seen(if possible)."
  '
  help$(80,5)=""
  '            ------------------------------------
  help$(81,0)="Full"
  help$(81,1)=""
  help$(81,2)="All windows are placed at the top"
  help$(81,3)="left of the screen and set to full"
  help$(81,4)="size."
  '
  help$(81,5)=""
  '            ------------------------------------
  help$(82,0)="Main dialog"
  help$(82,1)=""
  help$(82,2)="If a file is dropped on the file spy"
  help$(82,3)="program file the program is run and"
  help$(82,4)="the dropped file will load."
  '
  help$(82,5)="Main dialog keys"
  help$(82,6)="1,2,3 DATA & MASK = ASCII, HEX, Bin."
  help$(82,7)="* top main window."
  help$(82,8)="TAB top next window."
  help$(82,9)="E edit fields."
  '
  help$(82,10)=""
  '
  '           ------------------------------------
  help$(83,0)="Editable fields"
  help$(83,1)="'Data' field - ASCII, Hex, or Binary"
  help$(83,2)="data used in most operations, see"
  help$(83,3)="each function for exact uses."
  help$(83,4)="'Mask' field - Same as 'Data' field."
  '
  help$(83,5)=""
  '
  '           ------------------------------------
  help$(84,0)="About"
  help$(84,1)=""
  help$(84,2)="Display information about this"
  help$(84,3)="program."
  help$(84,5)=""
RETURN
