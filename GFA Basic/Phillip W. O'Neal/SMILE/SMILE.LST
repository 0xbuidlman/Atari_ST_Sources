$m262144
@init_variables  ! SETUP
@new_game
GET 0,y_put,maxx%,200*offy%-1,screen$
'
DO
  ON MENU dla
  MOUSE x%,y%,k%             ! STATUS OF MOUSE
  IF WIND_FIND(x%,y%-wind_y)=my_window% AND y%>min% AND y%<max% AND big=1 THEN
    IF wflag%=0 THEN
      DEFMOUSE pointer$
      wflag%=1
    ENDIF
  ELSE
    IF wflag%=1
      DEFMOUSE 0
      wflag%=0
    ENDIF
  ENDIF
  ON MENU dla
  IF k%>0 AND y%>min% AND y%<max% AND start_game%=1 AND inuse%=0 THEN
    TOPW #1
    IF y_pl<>wind_y THEN
      FULLW #1
      VSYNC
      PUT 0,y_put,screen$
      big=1
      y_hi=wind_height
      y_pl=wind_y
    ENDIF
    IF my_sound THEN
      VOID XBIOS(32,L:VARPTR(effect2$))
    ENDIF
    @a_move
    GET 0,y_put,maxx%,200*offy%-1,screen$
    ttime$="     "
  ENDIF
  ON MENU dla
  @clock
  ON MENU dla
LOOP
'
> PROCEDURE init_variables
  DIM smiles$(3),smile_pos(6),fix%(1,9),fix$(9),pal%(15)
  pointer$=MKI$(7)+MKI$(7)+MKI$(1)+MKI$(0)+MKI$(15)
  FOR loop%=0 TO 31
    READ data%
    pointer$=pointer$+MKI$(data%)
  NEXT loop%
  DIM entry$(22) ! HOLDS MENU ITEMS
  FOR item%=0 TO 22
    READ entry$(item%)
  NEXT item%
  effect$=SPACE$(22)
  sad%=VARPTR(effect$)
  FOR b%=0 TO 21
    READ d%
    POKE sad%+b%,d%
  NEXT b%
  effect2$=SPACE$(36)
  sad%=VARPTR(effect2$)
  FOR b%=0 TO 35
    READ d%
    POKE sad%+b%,d%
  NEXT b%
  DIM sscreen%(8445) ! SCREEN
  sscreen%=(V:sscreen%(0)+1023) AND &HFFFF00
  DIM screen%(8445) ! SCREEN
  screen%=(V:screen%(0)+1023) AND &HFFFF00
  DIM fix_screen%(8445) ! SCREEN
  fix_screen%=(V:fix_screen%(0)+1023) AND &HFFFF00
  screen_loc%=XBIOS(2) ! ADDRESS OF REAL SCREEN
  graphx_mode%=XBIOS(4) ! GRAPHICS MODE 0=LOW REZ 1=MED REZ 2=HIGH REZ
  SELECT graphx_mode%
  CASE 0
    cols%=15
    xget%=0
    yget%=0
    min%=66
    max%=106
    minx%=0
    miny%=75
    maxx%=319
    maxy%=135
    offx%=1
    offy%=1
  CASE 1
    cols%=3
    xget%=1
    yget%=40
    min%=67
    max%=108
    minx%=0
    miny%=75
    maxx%=639
    maxy%=135
    offx%=2
    offy%=1
  CASE 2
    cols%=1
    xget%=1
    yget%=160
    min%=136
    max%=216
    minx%=0
    miny%=150
    maxx%=639
    maxy%=270
    offx%=2
    offy%=2
  ENDSELECT
  stp%=(maxx%+1)/7 ! SIZE OF 1 SCREEN STRIP
  size_y=maxy%
  FOR i%=0 TO cols%
    pal%(i%)=XBIOS(7,W:i%,W:-1)
  NEXT i%
  @get_smiles
  moves%=0
  games%=0
  ave%=0
  big=1
  allmoves%=0
  clock%=1
  inuse%=0
  dla=10
  my_sound=1
  COLOR 1
  DEFFILL 0,2,8
  DEFTEXT 1,0,0,6
  GRAPHMODE 1
  DEFMOUSE 0
  MENU entry$()           ! TURN DROP-DOWN MENU ON
  OPENW #1,1,1,1,1,7
  FULLW 1
  CLEARW 1
  my_window%=W_HAND(#1)
  er=WIND_GET(my_window%,5,wind_x,wind_y,wind_width,wind_height)
  er=WIND_GET(my_window%,4,x,y_put,h,t)
  y_hi=wind_height
  y_pl=wind_y
  MENU 14,clock%
  MENU 17,my_sound
  ON MENU MESSAGE GOSUB mnu
  ON MENU KEY GOSUB check2
  ON MENU GOSUB mnu     ! IF DROP-DOWN USED THEN GOSUB check
RETURN
'
> PROCEDURE m_off
  er=WIND_UPDATE(1)
  centerx%=offx%*160
  centery%=offy%*89-y_pl
  TOPW #1
  GET 0,y_put,maxx%,200*offy%-1,set$
  inuse%=1
RETURN
'
> PROCEDURE m_on
  PUT 0,y_put,set$
  inuse%=0
  er=WIND_UPDATE(0)
  DO
  LOOP WHILE MOUSEK<>0
RETURN
'
> PROCEDURE check2
  key=MENU(14) MOD 256
  entry%=0
  SELECT key
  CASE 67,99
    entry%=14
  CASE 72,104
    entry%=18
  CASE 78,110
    entry%=17
  CASE 81,113
    entry%=19
  CASE 82,114
    entry%=12
  CASE 83,115
    entry%=11
  CASE 84,116
    entry%=15
  ENDSELECT
  IF entry%>0 THEN
    @check
  ENDIF
RETURN
'
> PROCEDURE get_smiles
  cd%=GEMDOS(25)
  prg_path$=DIR$(cd%+1)
  file$=prg_path$+"\SMILE.RSC"
  IF NOT EXIST(file$) THEN
    file$=""
  ENDIF
  IF EXIST("\SMILE\SMILE.RSC")=-1 THEN
    file$="\SMILE\SMILE.RSC"
  ENDIF
  IF EXIST("\SMILE.RSC")=-1 THEN
    file$="\SMILE.RSC"
  ENDIF
  IF file$<>"" THEN
    ~XBIOS(5,L:sscreen%,L:-1,-1)
    CLS
    BLOAD file$,sscreen%-34
    FOR x%=0 TO 3
      GET x%*stp%-x%*xget%,yget%,(x%+1)*stp%-(x%*xget%+2),yget%+39*offy%,smiles$(x%)
    NEXT x%
    ~XBIOS(5,L:screen_loc%,L:-1,-1)
    VOID XBIOS(6,L:sscreen%+(graphx_mode%*6400-32))
  ELSE
    ALERT 0,"I CAN'T FIND 'SMILE.RSC'.  |BE SURE IT IS ON THE SAME|DISK AS THE PROGRAM FILE.",1,"BY BY",dummy%
    END
  ENDIF
RETURN
'
> PROCEDURE r_u_done
  flag%=1
  FOR l%=0 TO 6
    IF smile_pos(l%)<>3
      flag%=0
    ENDIF
  NEXT l%
  INC moves%
  IF flag%=1 THEN
    INC games%
    allmoves%=allmoves%+moves%
    ave%=INT(allmoves%/games%)
    start_game%=0
  ENDIF
  ttime$="     "
RETURN
'
> PROCEDURE reset_totals
  ALERT 0," ERASE TOTALS ?   ",1," YES | NO ",dummy%
  IF dummy%=1 THEN
    ttime$="     "
    allmoves%=0
    games%=0
    ave%=0
    @new_game
  ENDIF
RETURN
'
> PROCEDURE mnu
  sel=MENU(1)
  IF sel=10 THEN
    MENU OFF                    ! UNSELECT ITEM
    entry%=MENU(0)              ! WHAT ITEM WAS SELECTED ?
    @check
  ENDIF
  IF sel>20 AND sel<24 AND MENU(4)=my_window% THEN
    SELECT sel
    CASE 21
      TOPW #1
    CASE 22
      @trying_to_quit
    CASE 23
      IF y_hi<>wind_height THEN
        big=1
        y_hi=wind_height
        y_pl=wind_y
      ELSE
        big=0
        y_hi=(wind_height/(1.75*offy%))-(24*(offy%=2))
        y_pl=wind_y*4*offy%+(24*(offy%=2))
      ENDIF
      FULLW 1
      er=WIND_SET(my_window%,5,wind_x,y_pl,wind_width,y_hi)
    ENDSELECT
  ENDIF
  IF sel=20 AND MENU(4)=my_window% THEN
    er%=WIND_UPDATE(1)
    SGET temp$
    ~XBIOS(5,L:fix_screen%,L:-1,-1)
    PUT 0,y_put,screen$
    er%=WIND_GET(my_window%,11,fx%,fy%,fx2%,fy2%)
    count%=1
    GET fx%,fy%,fx%+fx2%,fy%+fy2%,fix$(count%)
    fix%(0,count%)=fx%
    fix%(1,count%)=fy%
    fix_done%=0
    DO
      er%=WIND_GET(my_window%,12,fx%,fy%,fx2%,fy2%)
      IF fx2%+fy2%=0 THEN
        fix_done%=1
      ELSE
        INC count%
        GET fx%,fy%,fx%+fx2%,fy%+fy2%,fix$(count%)
        fix%(0,count%)=fx%
        fix%(1,count%)=fy%
      ENDIF
    LOOP UNTIL fix_done%=1
    SPUT temp$
    FOR fix%=1 TO count%
      PUT fix%(0,fix%),fix%(1,fix%),fix$(fix%)
    NEXT fix%
    SGET temp$
    ~XBIOS(5,L:screen_loc%,L:-1,-1)
    VSYNC
    SPUT temp$
    er%=WIND_UPDATE(0)
    VOID XBIOS(6,L:sscreen%+(graphx_mode%*6400-32))
  ENDIF
RETURN
'
> PROCEDURE check
  SELECT entry%
  CASE 1                      ! CREDITS
    ALERT 0,". .    SMILE  ½ 1992    . .  | .   by Phillip O'Neal   . |\_/     *SHAREWARE*     \_/|  Programmed in GFA BASIC",1,"I'M DONE",dummy%
  CASE 11                     ! START
    IF start_game%=0 THEN
      @start_game
    ENDIF
  CASE 12                     ! RESET TOTALS
    @reset_totals
  CASE 14                     ! CLOCK
    clock%=clock%+(clock%=1)-(clock%=0)
    MENU 14,clock%
    ttime$="     "
  CASE 15                     ! SET TIME
    @m_off
    @settime
    @m_on
  CASE 17
    my_sound=my_sound+(my_sound=1)-(my_sound=0)
    MENU 17,my_sound
  CASE 18
    @m_off
    @help
    @m_on
  CASE 19
    IF my_sound THEN
      VOID XBIOS(32,L:VARPTR(effect$))
    ENDIF
    @trying_to_quit
  ENDSELECT
  DO
  LOOP WHILE MOUSEK<>0
RETURN
'
> PROCEDURE help
  BOX centerx%-151,centery%-45,centerx%+151,centery%+45
  BOX centerx%-151,centery%-45,centerx%+152,centery%+46
  PBOX centerx%-150,centery%-44,centerx%+150,centery%+44
  TEXT centerx%-16,centery%-32,"HELP"
  TEXT centerx%-140,centery%-22,"Start by getting 'all' of the faces"
  TEXT centerx%-140,centery%-12,"either 'upright'  or 'upside-down'."
  TEXT centerx%-140,centery%-2,"Then make 2 moves at a time for the"
  TEXT centerx%-140,centery%+8,"rest of the game(this will keep all"
  TEXT centerx%-140,centery%+18,"the faces either upright or upside-"
  TEXT centerx%-140,centery%+28,"down). This requires more moves but"
  TEXT centerx%-140,centery%+38,"is a much easier way to win."
  SHOWM
  DO
    @clock
  LOOP WHILE MOUSEK=0
  DO
  LOOP WHILE MOUSEK<>0
  ttime$="     "
  PAUSE 10
RETURN
'
> PROCEDURE clock
  IF MID$(ttime$,1,5)<>MID$(TIME$,1,5) THEN ! NEW MINUTE ?
    tt$=CHR$(ASC(MID$(TIME$,1,1))-((16*(ASC(MID$(TIME$,1,1))=48))+32))
    tt$=tt$+CHR$(ASC(MID$(TIME$,2,1))-32)   ! CHANGE TIME DIGITS TO
    tt$=tt$+":"                             ! 7-SEGMENT AND USE
    tt$=tt$+CHR$(ASC(MID$(TIME$,4,1))-32)   ! ONLY HOURS AND MINUTES
    tt$=tt$+CHR$(ASC(MID$(TIME$,5,1))-32)
    IF dfile$<>"" THEN
      title$=dfile$+"       "
    ELSE
      title$=""
    ENDIF
    title$=title$+"MOVES:"+STR$(moves%)+"  GAMES:"+STR$(games%)+"  AVE:"+STR$(ave%)
    IF clock%=1 THEN
      title$=title$+"  "+tt$
    ENDIF
    VSYNC
    TITLEW #my_window%,title$
    ttime$=TIME$                            ! NEW MINUTE
    VOID XBIOS(6,L:sscreen%+(graphx_mode%*6400-32))
  ENDIF
RETURN
'
> PROCEDURE settime
  DEFMOUSE 0
  BOX centerx%-81,centery%-41,centerx%+81,centery%+41
  BOX centerx%-81,centery%-41,centerx%+82,centery%+42
  PBOX centerx%-80,centery%-40,centerx%+80,centery%+40
  TEXT centerx%+8,centery%+3,"SET TIME"
  TEXT centerx%+8,centery%+31," CANCEL"
  BOX centerx%+6,centery%-8,centerx%+74,centery%+8
  BOX centerx%+6,centery%-8,centerx%+75,centery%+9
  BOX centerx%+6,centery%+20,centerx%+74,centery%+36
  BOX centerx%+6,centery%+20,centerx%+75,centery%+37
  arrow$=CHR$(1)+"   "+CHR$(1)
  TEXT centerx%-61,centery%+3,arrow$
  arrow$=CHR$(2)+"   "+CHR$(2)
  TEXT centerx%-61,centery%+31,arrow$
  BOX centerx%-66,centery%-8,centerx%-50,centery%+8
  BOX centerx%-66,centery%-8,centerx%-49,centery%+9
  BOX centerx%-66,centery%+20,centerx%-50,centery%+36
  BOX centerx%-66,centery%+20,centerx%-49,centery%+37
  BOX centerx%-34,centery%-8,centerx%-18,centery%+8
  BOX centerx%-34,centery%-8,centerx%-17,centery%+9
  BOX centerx%-34,centery%+20,centerx%-18,centery%+36
  BOX centerx%-34,centery%+20,centerx%-17,centery%+37
  ctime$=MID$(TIME$,1,5)
  hour=VAL(MID$(ctime$,1,2))
  min=VAL(MID$(ctime$,4,2))
  done_time=0
  TEXT centerx%-61,centery%-29,"SET:      TIME:"
  TEXT centerx%-61,centery%-16,ctime$
  TEXT centerx%+19,centery%-16,ctime$
  DO
    @clock
    MOUSE x,y,k
    IF k=1 AND x>centerx%-66 AND x<centerx%+74 AND y>centery%-36 AND y<centery%+36 THEN
      IF y>centery%-8 AND y<centery%+8 THEN
        IF x<centerx%-50 THEN
          INC hour
          IF hour=24 THEN
            hour=0
          ENDIF
        ENDIF
        IF x>centerx%-34 AND x<centerx%-18
          INC min
          IF min=60 THEN
            min=0
            INC hour
            IF hour=24 THEN
              hour=0
            ENDIF
          ENDIF
        ENDIF
        IF x>centerx%+6 THEN
          done_time=1
        ENDIF
      ENDIF
      IF y>centery%+20 THEN
        IF x<centerx%-50 THEN
          DEC hour
          IF hour=-1 THEN
            hour=23
          ENDIF
        ENDIF
        IF x<centerx%-18 AND x>centerx%-34
          DEC min
          IF min=-1 THEN
            min=59
            DEC hour
            IF hour=-1 THEN
              hour=23
            ENDIF
          ENDIF
        ENDIF
        IF x>centerx%+6 THEN
          done_time=2 !CANCLE
        ENDIF
      ENDIF
      PAUSE 10
      IF hour<10 THEN
        ctime$="0"
      ELSE
        ctime$=""
      ENDIF
      ctime$=ctime$+STR$(hour)+":"
      IF min<10 THEN
        ctime$=ctime$+"0"
      ENDIF
      ctime$=ctime$+STR$(min)
      TEXT centerx%-61,centery%-16,ctime$
      SHOWM
    ENDIF
  LOOP UNTIL done_time>0
  IF done_time=1 THEN
    ctime$=ctime$+":00"
    TIME$=ctime$
  ENDIF
RETURN
'
> PROCEDURE trying_to_quit
  '                   ! ALERT TEXT
  txt$="YOU MUST HAVE 'ACCIDENTLY'  |     CHOOSE ON QUIT."
  ALERT 0,txt$,1,"QUIT|STAY",button%
  DO WHILE MOUSEK<>0  ! BE SURE MOUSE BUTTON WAS RELEASED
  LOOP
  IF button%=1 THEN   !  QUIT SELECTED IF button%=1
    MENU OFF              ! USELECT ITEM
    MENU KILL             ! TELL GEM TO TURN MENU OFF
    CLOSEW #1
    FOR i%=0 TO cols%
      ~XBIOS(7,W:i%,W:pal%(i%))
    NEXT i%
    CLS
    END
  ENDIF
RETURN
'
> PROCEDURE new_game
  start_game%=0
  TOPW #1
  FULLW #1
  CLEARW 1
  big=1
  y_hi=wind_height
  y_pl=wind_y
  FOR loop%=0 TO 6
    smile_pos(loop%)=3
  NEXT loop%
  FOR faces%=0 TO 6
    VSYNC
    PUT faces%*stp%+3,miny%+(11*offy%),smiles$(smile_pos(faces%))
  NEXT faces%
  moves%=0
  GET 0,y_put,maxx%,200*offy%-1,screen$
  ttime$="     "
RETURN
'
> PROCEDURE start_game
  start_game%=1
  TOPW #1
  FULLW #1
  CLEARW 1
  big=1
  y_hi=wind_height
  y_pl=wind_y
  FOR loop%=0 TO 6
    smile_pos(loop%)=INT(RND(0)*4)
  NEXT loop%
  FOR faces%=0 TO 6
    VSYNC
    PUT faces%*stp%+3,miny%+(11*offy%),smiles$(smile_pos(faces%))
  NEXT faces%
  GET 0,y_put,maxx%,200*offy%-1,screen$
  moves%=0
  ttime$="     "
RETURN
'
> PROCEDURE a_move
  IF k%=1
    x%=INT(x%/stp%)
    IF x%>6
      x%=6
    ENDIF
    IF x%<0 THEN
      x%=0
    ENDIF
    FOR loop%=-1 TO 1
      current%=loop%+x%
      IF current%=-1
        current%=6
      ENDIF
      IF current%=7
        current%=0
      ENDIF
      temp%=smile_pos(current%)-1
      IF temp%=-1
        temp%=3
      ENDIF
      smile_pos(current%)=temp%
      VSYNC
      PUT current%*stp%+3,miny%+(11*offy%),smiles$(smile_pos(current%))
    NEXT loop%
    DO WHILE MOUSEK=1
    LOOP
    @r_u_done
  ENDIF
  IF k%=2
    x%=INT(x%/stp%)
    IF x%>6
      x%=6
    ENDIF
    FOR loop%=-1 TO 1
      current%=loop%+x%
      IF current%=-1
        current%=6
      ENDIF
      IF current%=7
        current%=0
      ENDIF
      temp%=smile_pos(current%)+1
      IF temp%=4
        temp%=0
      ENDIF
      smile_pos(current%)=temp%
      VSYNC
      PUT current%*stp%+3,miny%+(11*offy%),smiles$(smile_pos(current%))
    NEXT loop%
    DO WHILE MOUSEK=2
    LOOP
    @r_u_done
  ENDIF
RETURN
'
' MOUSE POINTER DATA
DATA 7224,7800,32766,65535,65535,65151,64575,30750
DATA 65535,65535,65535,65535,65535,65535,65535,65535
DATA 0,2064,1056,15996,25638,18450,16386,12300
DATA 0,32382,32382,32382,32382,32382,32382,0
'
' DROPDOWN MENU DATA
DATA  DESK,  SMILE,--------------------,1,2,3,4,5,6,""
DATA FILE,  START        (S),  RESET TOTALS (R),-------------------
DATA   CLOCK    	   (C),  SET TIME     (T)
DATA -------------------,  NOISE       (N),  HELP         (H)
DATA   QUIT         (Q),"","",""
'   SOUNDS DATA
DATA 0,64,1,0,2,120,3,0,8,16,9,16,12,20,13,0,11,20,7,252,255,0
DATA 0,52,1,0,2,0,3,0,4,0,5,0,6,0,7,254,8,16,9,0,10,0,11,0,12,16,13,9
DATA 130,100,7,255,8,0,255,0
'
' ----------------------------------------------------------------------------
' ----------------------------------------------------------------------------
' ----------------------------------------------------------------------------
' ----------------------------------------------------------------------------
