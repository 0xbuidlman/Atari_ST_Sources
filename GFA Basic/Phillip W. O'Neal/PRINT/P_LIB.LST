.he \009\009Library Packer 1.2 \d \t
'
' Object Files consist of information about relocatable data.
' The first part of these object files are usually filled with zero bytes.
' With relocatable data (Routines, Strings...) there are a lot of zero bytes.
' The GFA basic Compiler creates packed object files where these zero bytes
' have been already been deleted.
'
' The Linker is able to read the standard DR-Format O files and is also able
' to read the object files created by the GFA Basic Compiler.
'
' This Library Packer provides packing resulting in a space saving of about 30%.
'
' This program works in conjunction with the program UNPACK, with which the
' standard DR-Format can be created.
'
.ll 140
.pl100
.lr20
DIM a%(9)
OPEN "i",#1,"GFA3BLIB"            !Original lib
OPEN "i",#2,"GFA3BLIB.ndx"        !Original ndx
OPEN "o",#3,"GFA3PLIB"            !Copy  2
OPEN "o",#4,"GFA3PLIB.NDX"
t00%=TIMER
x&=INP&(#2)                             !NDX id
n_s&=INP&(#2)                           !number of symbols
n_o&=INP&(#2)                           !number of object-files
OUT& #4,x&,n_s&,n_o&                    !
OUT& #3,INP&(#1)                        !id in Library
FOR i_o&=1 TO n_o&                      !Go thrugh all O-Files
  n$=INPUT$(14,#2)                      !name
  x&=INP&(#2)                           !dummy
  o%=INP%(#2)                           !offset
  PRINT #4,n$;MKI$(0);MKL$(LOC(#3));    !NAME 0000 new Offset
  SEEK #1,o%                            !in Library seek
  packit                                !
  PRINT STR$(LOC(#1),8)'STR$(LOC(#3),8)''STR$(LOC(#1)/LOC(#3)*100,6,2)
NEXT i_o&
l%=LOF(#2)-LOC(#2)
WHILE l%>32000
  PRINT #4,INPUT$(32000,#2);
  SUB l%,32000
WEND
PRINT #4,INPUT$(l%,#2);                 !Rest of NDX-Files (dependency)
PRINT (TIMER-t00%)/200
END
PROCEDURE packit                        !Pack in O-File
  ~LEN(INPUT$(28,#1))                   !Header NOT copied
  aa1%=LOC(#1)                          !Libray O-File start
  aa3%=LOC(#3)
  x&=INP&(#1)                           !0x601a
  ts%=INP%(#1)                          !text size
  ds%=INP%(#1)                          !data size
  bs%=INP%(#1)                          !bss size
  ss%=INP%(#1)                          !symbol size
  l%=ts%+ds%+ss%+28                     !length reloc info
  PRINT HEX$(x&,4)' !l%'                !601A (optic)
  SEEK #1,aa1%                          !header, text, data, symbols copy
  WHILE l%>32000
    PRINT #3,INPUT$(32000,#1);
    SUB l%,32000
  WEND
  a$=INPUT$(l%,#1)
  PRINT #3,a$;
  SEEK #1,ts%+ds%+ss%+28+aa1%           !Start reloc info
  chk(ts%)                              !text reloc pack
  tts%=xs%                              !text reloc size
  chk(ds%)                              !data reloc packen
  dds%=xs%                              !data reloc size
  SEEK #3,18+aa3%                       !header change
  PRINT #3,MKL$(tts%);MKL$(dds%);
  SEEK #3,LOF(#3)
RETURN
PROCEDURE chk(xx%)                      !text or data pack
  i%=0
  j0%=0
  j1%=0
  WHILE i%<xx%
    j%=0                                  !count Null word
    a%=INP&(#1)                           !read word
    ADD i%,2                              !byte count
    WHILE ((a%=0) OR a%=7) AND (i%<xx%)   !Null word
      INC j%
      a%=INP&(#1)
      ADD i%,2                            !bytes not forgotten
    WEND
    IF (a%=0 OR a%=7) AND i%>=xx%
      INC j%
    ENDIF
    IF j%                               !When  Nullen
      INC j0%                             !statistic
      OUT& #3,j%*8+7                      !New reloc j% Null word
    ENDIF
    IF a%                               !When not end
      OUT& #3,a%
      INC j1%                             !statistic
    ENDIF
  WEND                                  !to end-of-segment
  ADD x0%,xx%                             !statistic
  xs%=(j0%+j1%)*2                       !Size of  reloc info
  ADD x1%,xs%                             !statistic
RETURN
