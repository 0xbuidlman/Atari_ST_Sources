' CONVERTER
$m50000
'
@main
'
> PROCEDURE main
  '
  ' COMMAND LINE, COMMAND$ IS PATH+FILENAME OF PROCESS THAT
  ' STARTED PROGRAM. TAIL$ IS FILENAME THAT WAS DROPED ON ME
  shell%=SHEL_READ(command$,tail$)
  '
  ' GET VDI HANDLE OF PROGRAMS WORKSTATION
  handle&=V~H
  '
  ' GET CURRENT DIRECTORY
  current_drive%=GEMDOS(25)
  from_path$=DIR$(current_drive%+1)+"\"
  '
  ' ADD DRIVE LETTER IF NOT PRESENT
  IF MID$(from_path$,1,1)="\" THEN
    from_path$=CHR$(current_drive%+65)+":"+from_path$
    '
  ELSE
    IF MID$(from_path$,2,1)<>":" THEN
      from_path$=CHR$(current_drive%+65)+":\"+from_path$
      '
    ENDIF
    '
  ENDIF
  '
  ' STRIP FILENAME FROM PATH
  test%=RINSTR(command$,"\")
  IF test% THEN
    my_path$=MID$(command$,1,test%)
  ELSE
    my_path$=from_path$
  ENDIF
  '
  @check_for_mint
  '
  ' GET PRG ID
  ap_id&=APPL_INIT()
  '
  ' SEE IF WE WERE RUN AS PRG OR ACC
  IF mint% THEN
    '
    acc%=0
    @prg
    '
  ELSE
    '
    IF ap_id&>0
      acc%=1
      @acc
    ELSE
      acc%=0
      @prg
    ENDIF
    '
  ENDIF
  '
RETURN
'
> PROCEDURE acc
  '
  @pre_init
  '
  ' PUT PRG NAME IN MENU
  me_id&=MENU_REGISTER(ap_id&,"  "+prg_title$)
  '
  DO
    ~EVNT_MESAG(buffer%)
    IF buffer&(0)=40 THEN ! 40=OPEN ACC
      done%=0
      DEFMOUSE 0
      @window_setup
      '
      DO
        c_type%=EVNT_MULTI(&X10010,1,1,1,0,0,0,0,0,0,0,0,0,0,buffer%,100,mx%,my%,b%,key_state%,key%,d%)
        @check_event
        '
      LOOP UNTIL done%
      '
    ENDIF
    '
  LOOP
  '
RETURN
'
> PROCEDURE prg
  '
  @pre_init
  IF mint% THEN
    '
    ' PUT PRG NAME IN MENU
    me_id&=MENU_REGISTER(ap_id&,"  "+prg_title$)
    '
  ENDIF
  '
  @window_setup
  DEFMOUSE 0
  c_type%=EVNT_MULTI(&X10010,1,1,1,0,0,0,0,0,0,0,0,0,0,buffer%,100,mx%,my%,b%,key_state%,key%,d%)
  @check_event
  '
  ' CHECK FOR FILE FROM COMMAND LINE
  IF tail$<>"" THEN
    temp$=from_path$+MID$(tail$,2)
    @all
    '
  ENDIF
  '
  DO
    c_type%=EVNT_MULTI(&X10010,1,1,1,0,0,0,0,0,0,0,0,0,0,buffer%,100,mx%,my%,b%,key_state%,key%,d%)
    @check_event
    '
  LOOP
  '
RETURN
'
> PROCEDURE check_for_mint
  '
  ' CHECK FOR MINT COOKIE
  '
  INLINE cookie%,6
  CHAR{cookie%}="    "+CHR$(0)+CHR$(0)
  '
  ' GET ADDRESS OF COOKIE JAR
  jar%=LPEEK(1440)
  '
  mint%=0
  '
  IF jar% THEN
    DO
      IF LPEEK(jar%) THEN
        LPOKE cookie%,LPEEK(jar%)
        cookie$=CHAR{cookie%}
        jar%=jar%+8
        IF cookie$="MiNT" THEN
          mint%=1
          jar%=0
        ENDIF
        '
      ELSE
        jar%=0
        '
      ENDIF
      '
    LOOP UNTIL jar%=0
    '
  ENDIF
  '
RETURN
'
> PROCEDURE pre_init
  '
  dummy$="0123456789"
  ' ***********************
  ' THIS WILL BE THE FORM TITLE (34 CHARS. MAX)
  prg_title$="CVG to TEXT"
  '
  ' THIS WILL BE THE EXTENSION THAT IS LOOKED FOR
  extension_read$="CVG"
  '
  ' THIS WILL BE THE EXTENSION USED WHEN CREATING NEW FILES
  extension_write$="TXT"
  ' ***********************
  '
  path_read$=my_path$
  path_write$=my_path$
  set$=my_path$+"CVG2TXT.INF"         ! INF FILENAME
  rsc$=my_path$+"CVG2TXT.RSC"         ! RSC FILENAME
  convert_filename$=""
  '
  ' BUFFER FOR WINDOW TITLE
  window_title%=GEMDOS(72,L:256)
  '
  @set_load
  @rsc_setup
  '
  ' SAVE OLD DTA AND SET NEW DTA ADDRESS
  dta%=GEMDOS(72,L:1024)
  old_dta%=FGETDTA()
  ~FSETDTA(dta%)
  ABSOLUTE attrib|,dta%+21
  '
  ' CALC SIZE OF WINDOW FROM RSC FORM SIZE
  ~WIND_CALC(0,&X1011,main_x%,main_y%,main_w%,main_h%,main_wx%,main_wy%,main_ww%,main_wh%)
  '
  ' MESSAGE BUFFER FOR EVENT CALL
  DIM buffer&(15)
  buffer%=VARPTR(buffer&(0))
  '
  ' MESSAGE BUFFER FOR ME TO SEND EVENT MESSAGES
  DIM my_buffer&(15)
  my_buffer%=VARPTR(my_buffer&(0))
  '
RETURN
'
> PROCEDURE rsc_setup
  '
  IF EXIST(rsc$) THEN
    rsc%=RSRC_LOAD(rsc$)
    @rsc_do
    '
  ELSE
    ' CANT FIND RSC FILE
    END
    '
  ENDIF
  '
RETURN
'
> PROCEDURE rsc_do
  '
  ' GET ADDRESS TREE
  ~RSRC_GADDR(0,0,main%)
  '
  ' SET VARS TO OBJ NUMBERS
  b_title%=1
  t_title%=2
  b_read%=3
  b_set_read%=5
  t_read_path%=6
  b_write%=7
  b_set_write%=9
  t_write_path%=10
  b_load_paths%=11
  b_save_paths%=12
  b_ok%=13
  b_all%=14
  b_cancel%=15
  '
  ' GET SIZE OF FORM
  ~FORM_CENTER(main%,main_x%,main_y%,main_w%,main_h%)
  '
  ' SET TEXT IN FORM
  CHAR{{OB_SPEC(main%,t_title%)}}=prg_title$
  CHAR{{OB_SPEC(main%,t_read_path%)}}=path_read$+"*."+extension_read$
  CHAR{{OB_SPEC(main%,t_write_path%)}}=path_write$+"*."+extension_write$
  '
  ' USE MENU IF RUN AS PRG AND NO MINT
  IF mint%=0 AND acc%=0 THEN
    '
    ~RSRC_GADDR(0,1,menu%)
    ~MENU_BAR(menu%,1)
    '
  ENDIF
  '
RETURN
'
> PROCEDURE window_setup
  '
  ' CREATE WINDOW WITH TITLE, MOVE, AND CLOSE BOX
  main_win%=WIND_CREATE(&X1011,main_wx%,main_wy%,main_ww%,main_wh%)
  '
  ' SET TITLE
  CHAR{window_title%}="File Converter"
  flag%=WIND_SET(main_win%,2,CARD(SWAP(window_title%)),CARD(window_title%),0,0)
  '
  flag%=WIND_OPEN(main_win%,main_wx%,main_wy%,main_ww%,main_wh%)
  flag%=WIND_GET(main_win%,4,main_iwx%,main_iwy%,main_iww%,main_iwh%)
  '
RETURN
'
> PROCEDURE check_event
  '
  IF c_type% AND &X10 THEN
    '
    ' MOUSE EVENT
    @button
    '
  ENDIF
  '
  ' MENU/WINDOW EVENT
  IF c_type% AND &X10000 THEN
    '
    ' TYPE OF EVENT
    command%=buffer&(0)
    IF command%=10 THEN
      '
      ' MENU ITEM
      @the_menu
      '
    ELSE
      '
      ' WINDOW EVENT
      @a_window
      '
    ENDIF
    '
  ENDIF
  '
RETURN
'
> PROCEDURE the_menu
  '
  ' WHICH MENU TITLE ?
  tit%=buffer&(3)
  '
  ' MAKE MENU TITLE NORMAL AGAIN
  ~MENU_TNORMAL(menu%,tit%,1)
  '
  ' WHICH MENU ITEM WAS SELECTED
  item%=buffer&(4)
  '
  IF item%=6
    '
    ' PRG CREDITS
    ALERT 0," |File Converter  |By Phillip  | ",0," OK ",d%
    '
  ENDIF
  '
RETURN
'
> PROCEDURE button
  '
  window_over%=WIND_FIND(mx%,my%)
  IF main_win%=window_over% THEN
    '
    main_found%=OBJC_FIND(main%,0,2,mx%,my%)
    ' DID MOUSE CLICK ON A DESKTOP BUTTON ?
    '
    SELECT main_found%
    CASE b_set_read%
      @main_select
      path$=path_read$
      @set_read_path
      IF path$<>"" THEN
        path_read$=path$
        CHAR{{OB_SPEC(main%,t_read_path%)}}=path_read$+"*."+extension_read$
        main_obj%=b_read%
        @repair
      ENDIF
      '
    CASE b_set_write%
      @main_select
      path$=path_write$
      @set_write_path
      IF path$<>"" THEN
        path_write$=path$
        CHAR{{OB_SPEC(main%,t_write_path%)}}=path_write$+"*."+extension_write$
        main_obj%=b_write%
        @repair
      ENDIF
      '
    CASE b_load_paths%
      @main_select
      @set_load
      CHAR{{OB_SPEC(main%,t_read_path%)}}=path_read$+"*."+extension_read$
      CHAR{{OB_SPEC(main%,t_write_path%)}}=path_write$+"*."+extension_write$
      main_obj%=b_read%
      @repair
      main_obj%=b_write%
      @repair
      '
    CASE b_save_paths%
      @main_select
      @set_save
      '
    CASE b_ok%
      @main_select
      FILESELECT #"Select "+extension_read$+" file to convert",path_read$+"*."+extension_read$,convert_filename$,temp$
      IF temp$<>"" THEN
        @all
      ENDIF
      '
    CASE b_all%
      @main_select
      temp$=path_read$+"*."+extension_read$
      @all
      '
    CASE b_cancel%
      @main_select
      flag%=WIND_CLOSE(main_win%)       ! CLOSE WINDOW
      flag%=WIND_DELETE(main_win%)      ! DELETE WINDOW
      IF acc%=1 THEN
        done%=1
      ELSE
        @prg_exit
      ENDIF
      '
    ENDSELECT
    '
  ENDIF
  '
RETURN
'
> PROCEDURE a_window
  '
  ' HANDLE OF WINDOW THAT TRIGGERED EVENT
  win%=buffer&(3)
  '
  ' BE SURE IT WAS OUR WINDOW
  IF win%=main_win% THEN
    SELECT command%
      '
      ' WIND UPDATE
    CASE 20
      main_obj%=0
      @repair
      '
      ' WINDOW CLICKED ON
    CASE 21
      ' WINDOW SET TO TOP
      flag%=WIND_SET(main_win%,10,0,0,0,0)
      DEFMOUSE 0
      '
      ' CLOSE WINDOW
    CASE 22
      flag%=WIND_CLOSE(main_win%)
      flag%=WIND_DELETE(main_win%)
      IF acc%=1 THEN
        done%=1
      ELSE
        @prg_exit
      ENDIF
      '
      ' WINDOW MOVED
    CASE 28
      main_wx%=buffer&(4)
      main_wy%=buffer&(5)
      flag%=WIND_SET(main_win%,5,main_wx%,main_wy%,main_ww%,main_wh%)
      flag%=WIND_GET(main_win%,4,main_iwx%,main_iwy%,main_iww%,main_iwh%)
      '
      ' SET FORM POS TO WINDOW POS
      OB_X(main%,0)=main_iwx%
      OB_Y(main%,0)=main_iwy%
      '
    ENDSELECT
    '
  ENDIF
  '
RETURN
'
> PROCEDURE main_select
  '
  ' MAKE BUTTON SELECTED / DRAW IT
  OB_STATE(main%,main_found%)=BSET(OB_STATE(main%,main_found%),0)
  main_obj%=main_found%
  @repair
  '
  DO
  LOOP UNTIL MOUSEK=0
  '
  ' MAKE BUTTON UNSELECTED / DRAW IT
  OB_STATE(main%,main_found%)=BCLR(OB_STATE(main%,main_found%),0)
  main_obj%=main_found%
  @repair
  '
RETURN
'
> PROCEDURE prg_exit
  '
  ' KILL MENU IF NO MINT
  IF mint%=0 THEN
    ~MENU_BAR(menu%,0)
  ENDIF
  '
  ' RESTORE DTA, FREE MEMORY AND RSC
  ~FSETDTA(old_dta%)
  d%=GEMDOS(73,L:dta%)
  d%=GEMDOS(73,L:window_title%)
  ~RSRC_FREE()
  END
  '
RETURN
'
> PROCEDURE set_read_path
  '
  FILESELECT #"Select path",path$+"*."+extension_read$,"",temp$
  '
  IF temp$<>"" THEN
    '
    ' EXTRACT PATH
    path$=temp$
    test%=RINSTR(path$,"\")
    IF test% THEN
      path$=MID$(path$,1,test%)
      '
    ENDIF
    '
  ENDIF
  '
RETURN
'
> PROCEDURE set_write_path
  '
  FILESELECT #"Select path",path$+"*."+extension_write$,"",temp$
  '
  IF temp$<>"" THEN
    '
    ' EXTRACT PATH
    path$=temp$
    test%=RINSTR(path$,"\")
    IF test% THEN
      path$=MID$(path$,1,test%)
      '
    ENDIF
    '
  ENDIF
  '
RETURN
'
> PROCEDURE repair
  '
  ' TELL GEM WE ARE TAKING OVER SCREEN AND MOUSE
  er%=WIND_UPDATE(1)
  er%=WIND_UPDATE(3)
  '
  ' GET FIRST RECTANGLE FROM LIST
  er%=WIND_GET(main_win%,11,fx%,fy%,fx2%,fy2%)
  '
  ' GET DIRTY AREA
  fix_wx%=buffer&(4)
  fix_wy%=buffer&(5)
  fix_ww%=buffer&(6)
  fix_wh%=buffer&(7)
  '
  ' CALC AREA THAT OVERLAPS DIRTY AREA
  fix_flag%=RC_INTERSECT(fix_wx%,fix_wy%,fix_ww%,fix_wh%,fx%,fy%,fx2%,fy2%)
  '
  IF fix_flag% THEN
    ~OBJC_DRAW(main%,main_obj%,2,fx%,fy%,fx2%,fy2%)
    '
  ENDIF
  '
  fix_done%=0
  '
  ' SAME AS ABOVE FOR THE OTHER RECTANGLES FROM LIST
  DO
    er%=WIND_GET(main_win%,12,fx%,fy%,fx2%,fy2%)
    '
    IF fx2%+fy2%=0 THEN
      fix_done%=1
    ELSE
      fix_wx%=buffer&(4)
      fix_wy%=buffer&(5)
      fix_ww%=buffer&(6)
      fix_wh%=buffer&(7)
      fix_flag%=RC_INTERSECT(fix_wx%,fix_wy%,fix_ww%,fix_wh%,fx%,fy%,fx2%,fy2%)
      IF fix_flag% THEN
        ~OBJC_DRAW(main%,main_obj%,2,fx%,fy%,fx2%,fy2%)
      ENDIF
    ENDIF
    '
  LOOP UNTIL fix_done%=1
  '
  er%=WIND_UPDATE(2)
  er%=WIND_UPDATE(0)                      !  DONE!
  '
RETURN
'
> PROCEDURE set_save
  '
  ' SAVE PATHS TO INF FILE
  OPEN "O",#3,set$
  PRINT #3,path_read$
  PRINT #3,path_write$
  CLOSE #3
  '
RETURN
'
> PROCEDURE set_load
  '
  ' LOAD PATHS FROM INF FILE
  IF EXIST(set$) THEN
    OPEN "I",#3,set$
    LINE INPUT #3,path_read$
    LINE INPUT #3,path_write$
    CLOSE #3
  ENDIF
  '
RETURN
'
> PROCEDURE all
  '
  search$=temp$
  '
  test%=RINSTR(temp$,"\")
  '
  ' STRIP FILENAME
  IF test% THEN
    path_read$=MID$(temp$,1,test%)
  ENDIF
  '
  ' ADD FILENAME/EXT
  CHAR{{OB_SPEC(main%,t_read_path%)}}=path_read$+"*."+extension_read$
  '
  ' DISPLAY CURRENT FILE BEING PROCESSED
  main_obj%=b_read%
  @repair
  '
  ' SEARCH FOR FILE
  finished%=GEMDOS(78,L:V:search$,&X111111)
  '
  DO UNTIL finished%
    convert_filename$=CHAR{dta%+30}
    '
    IF convert_filename$<>"." AND convert_filename$<>".."
      '
      ' DON'T DO FOLDERS
      IF BTST(attrib|,4)=0
        @convert
        '
      ENDIF
      '
    ENDIF
    '
    ' SEARCH FOR NEXT FILE
    finished%=GEMDOS(79)
    '
  LOOP
  '
  ' RESTORE RESTORE PRG TITLE
  CHAR{{OB_SPEC(main%,t_title%)}}=prg_title$
  main_obj%=b_title%
  @repair
  @bell
  '
RETURN
'
PROCEDURE convert
  '
  CHAR{{OB_SPEC(main%,t_title%)}}="Converting "+convert_filename$+" ..."
  main_obj%=b_title%
  @repair
  l%=LEN(convert_filename$)
  convert_out$=MID$(convert_filename$,1,l%-3)+"TXT"
  OPEN "I",#1,path_read$+convert_filename$
  '
  size%=LOF(#1)
  IF size%>9 THEN
    '
    OPEN "O",#2,path_write$+convert_out$
    '
    test$=""
    FOR x%=0 TO 9
      y%=INP(#1)
      test$=test$+CHR$(y%)
    NEXT x%
    '
    IF test$="CALAMUSCVG" THEN
      version%=INP&(#1)
      '
      SELECT version%
      CASE 1000
        PRINT #2,convert_filename$;" 1.09 ";STR$(size%)
        '
      CASE 1100
        PRINT #2,convert_filename$;" SL ";STR$(size%)
        '
      DEFAULT
        PRINT #2,convert_filename$;" UNKNOWN:";STR$(version%);" ";STR$(size%)
        '
      ENDSELECT
      '
      xit%=0
      DO
        instruction%=INP&(#1)
        SELECT instruction%
        CASE 0   ! START POINT : X,Y
          x%=INP&(#1)
          y%=INP&(#1)
          '
          PRINT #2,"START POINT:";STR$(x%);",";STR$(y%)
          '
        CASE 1   ! LINE TO : X,Y
          x%=INP&(#1)
          y%=INP&(#1)
          '
          PRINT #2,"LINE TO:";STR$(x%);",";STR$(y%)
          '
        CASE 2   ! CURVE TO : CX1,CY1,CX2,CY2,X,Y
          cx1%=INP&(#1)
          cy1%=INP&(#1)
          cx2%=INP&(#1)
          cy2%=INP&(#1)
          x%=INP&(#1)
          y%=INP&(#1)
          '
          PRINT #2,"CURVE TO:";STR$(x%);",";STR$(y%);" ";
          PRINT #2," CONTROL POINTS:";STR$(cx1%);",";STR$(cy1%);" ";STR$(cx2%);",";STR$(cy2%)
          '
        CASE 3   ! SET SIZE : MIN_X,MIN_Y,MAX_X,MAX_Y
          d0%=INP(#1)
          d1%=INP(#1)
          d2%=INP(#1)
          d3%=INP(#1)
          d4%=INP(#1)
          d5%=INP(#1)
          d6%=INP(#1)
          d7%=INP(#1)
          '
          PRINT #2,"INIT ?:";STR$(d0%);" ?:";STR$(d1%);" ?:";STR$(d2%);" ?:";STR$(d3%);
          PRINT #2," ?:";STR$(d4%);" ?:";STR$(d5%);" ?:";STR$(d6%);" ?:";STR$(d7%)
          '
        CASE 4   ! SET INFO : 12 WORDS
          d0%=INP(#1)
          d1%=INP(#1)
          '
          d2%=INP(#1)
          d3%=INP(#1)
          '
          min_x%=INP&(#1)
          min_y%=INP&(#1)
          max_x%=INP&(#1)
          max_y%=INP&(#1)
          '
          d12%=INP(#1)
          d13%=INP(#1)
          '
          d14%=INP(#1)
          cvg_fill_gray_scale%=INP(#1)
          '
          d16%=INP(#1)
          d17%=INP(#1)
          '
          d18%=INP(#1)
          cvg_line_gray_scale%=INP(#1)
          '
          cvg_line_ends%=INP(#1)
          cvg_line_type%=INP(#1)
          '
          d22%=INP(#1)
          cvg_line_width%=INP(#1)
          '
          PRINT #2,"OBJECT PARM. ?:";STR$(d0%);
          PRINT #2," ?:";STR$(d1%);
          '
          PRINT #2," ?:";STR$(d2%);
          PRINT #2," ?:";STR$(d3%)
          '
          PRINT #2,"X:";STR$(min_x%);" Y:";STR$(min_y%);
          PRINT #2," WIDTH:";STR$(max_x%);" HEIGHT:";STR$(max_y%)
          '
          PRINT #2,"?:";STR$(d12%);
          PRINT #2," ?:";STR$(d13%);
          '
          PRINT #2," ?:";STR$(d14%);
          PRINT #2," FILL%:";STR$(cvg_fill_gray_scale%)
          '
          PRINT #2,"?:";STR$(d16%);
          PRINT #2," ?:";STR$(d17%);
          '
          PRINT #2," ?:";STR$(d18%);
          PRINT #2," LINE%:";STR$(cvg_line_gray_scale%)
          '
          PRINT #2,"LINE ENDS:";STR$(cvg_line_ends%);
          PRINT #2," TYPE:";STR$(cvg_line_type%);
          '
          PRINT #2," ?:";STR$(d22%);
          PRINT #2," WIDTH:";STR$(cvg_line_width%)
          '
        CASE 15  ! END OF OBJECT
          PRINT #2,"END OF OBJECT."
          '
        CASE 48  ! END OF FILE
          PRINT #2,"END OF FILE."
          PRINT #2
          '
          xit%=1
          '
        DEFAULT
          PRINT "WHAT:";HEX$(instruction%,4)
        ENDSELECT
      LOOP UNTIL xit%
      '
    ENDIF
    CLOSE #2
    '
  ENDIF
  '
  CLOSE #1
  '
RETURN
'
> PROCEDURE bell
  '
  FOR x%=1 TO 7
    SOUND 0,15-x%,10,5,1
  NEXT x%
  SOUND 0,0,0,0,0
  '
RETURN
