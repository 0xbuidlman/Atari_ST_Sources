$m400000  ! PROGRAM WILL ONLY USE 400000 BYTES OF MEMORY
$%3       ! ONLY USE INTERGER DIVITION, IS FASTER
$N+       ! TEST MAX VAR VALUE
$F<       ! NO ENDFUNC
$P<       ! 68000 SUBROUTINES
$S>       ! OPTIMISE CASE FOR SPEED
'
rez%=XBIOS(4) ! GRAPHICS MODE 0=LOW REZ 1=MED REZ 2=HIGH REZ
'
@init_variables
@setup
'
ON MENU KEY GOSUB key_board        ! GO HERE ON KEY EVENT
ON MENU MESSAGE GOSUB check_menu   ! GO HERE ON WINDOW EVENT
ON MENU GOSUB check_menu           ! GO HERE ON MENU EVENT
SETMOUSE crx%,cry%                 ! PLACE MOUSE IN CENTER OF SCREEN
'
DO
  ON MENU 100  ! WAIT FOR AN EVENT
LOOP
'
> PROCEDURE init_variables
  '
  IF rez%>2 THEN     ! >2 IS NOT ST REZ
    @dong
    ALERT 0,"THIS PROGRAM  WILL ONLY|RUN IN A ST RESOLUTION.",1,"OK",dummy
    END
  ENDIF
  '
  INLINE init_title%,200
  ' THE INLINE MEMORY IS TO HOLD THE WINDOW TITLE TEXT, FOR SOME REASON
  ' GFA MOVES STRINGS AROUND IN MEMORY AND THEN GEM CAN NOT FIND THEM ANY MORE
  '
  title%=init_title%  ! WINDOW 1 TITLE TEXT ADDRESS
  title2%=title%+100  !   "    2   "    "     "
  tmaxx%=319-(320*(rez%>0))   ! MAX X PIXEL
  tmaxy%=199-(200*(rez%=2))   ! MAX Y PIXEL
  tmaxx=319-(320*(rez%>0))    ! SAME FOR FP
  tmaxy=199-(200*(rez%=2))    !  "   "   "
  fmaxx%=tmaxx%+1
  fmaxy%=tmaxy%+1
  fmaxx=fmaxx%
  fmaxy=fmaxy%
  centerx%=192-(192*(rez%>0)) ! X CENTER OF STIS SCREEN
  centery%=100-(100*(rez%=2)) ! Y    "    "    "    "
  crx%=160-(160*(rez%>0))     ! X CENTER OF SCREEN
  cry%=100-(100*(rez%=2))     ! Y    "    "    "
  '
  CLS
  blank%=1
  SGET blank$
  SGET degas_screen$
  '
  GET 0,0,0,tmaxy%,comp_line$   ! USED TO TEST FOR BLANK
  '
  ' INTO SCREEN *****************************
  temp$="STIS ½ 1993 by Phillip O'Neal"
  l%=(LEN(temp$)/2)*8
  l2%=l%+16
  l3%=10-(10*(rez%=2))
  DEFFILL 1,0,0
  GRAPHMODE 1
  PBOX crx%-l2%,cry%-l3%,crx%+l2%,cry%+l3%
  BOX crx%-l2%,cry%-l3%,crx%+l2%-1,cry%+l3%-1
  TEXT crx%-l%,cry%+3-(3*(rez%=2)),temp$
  temp$="WORKING...."
  l%=(LEN(temp$)/2)*8
  TEXT crx%-l%,cry%+39-(3*(rez%=2)),temp$
  ' ******************************************
  '
  minx%=0                    ! LEFT MIN POSITION OF A WINDOW
  miny%=11-(8*(rez%=2))      ! TOP   "       "      "     "
  maxx%=tmaxx%               ! MAX RIGHT EDGE OF WINDOW
  maxy%=tmaxy%-miny%         ! MAX BOTTOM EDGE OF WINDOW
  page%=0                    ! RIGHT SLIDER POSITION
  column%=1                  ! LOWER    "      "
  cols%=1-(2*(rez%<2))-(12*(rez%=0))   ! MAX NUMBER OF COLORS-1
  degas_window%=0
  stis_window%=1
  toped%=1
  stis_new%=0
  '
  xstp%=(tmaxx%+1)/5      ! X SIZE OF 1 SCREEN STRIP
  ystp%=(tmaxy%+1)/4      ! Y SIZE OF 1 SCREEN STRIP
  IF rez%=2 THEN
    xsize%=tmaxx*0.21    ! SMALEST X SIZE OF WINDOW
    ysize%=tmaxy*0.335   !    "    Y  "   "    "
  ELSE
    xsize%=tmaxx*0.265   ! SMALEST X SIZE OF WINDOW
    ysize%=tmaxy*0.39    !    "    Y  "   "    "
  ENDIF
  '
  DIM win$(1),fix$(10),fix%(1,10)  ! USED FOR WIND_UPDATE
  '
  DIM entry$(30)        ! HOLDS MENU ITEMS
  FOR item%=0 TO 30
    READ entry$(item%)
  NEXT item%
  IF rez%=0 THEN
    entry$(18)="VIEW"   ! DON'T USE
    entry$(26)=""       ! PLANE +,-
    entry$(27)=""       ! IN LOW REZ
  ENDIF
  '
  ' WINDOW STUFF ***********************************************
  DIM win%(1,21),wfix$(1)
  FOR win%=0 TO 1
    win%(win%,0)=minx%                    ! X WINDOW POS
    win%(win%,1)=miny%                    ! Y   "    "
    win%(win%,2)=minx%+maxx%-1            ! WIDTH OF WINDOW
    win%(win%,3)=maxy%                    ! HEIGHT  "    "
    win%(win%,4)=win%(win%,0)             ! OLD X
    win%(win%,5)=win%(win%,1)-((maxy%/2)*(win%=1)) ! OLD Y
    win%(win%,6)=win%(win%,2)             ! OLD W
    win%(win%,7)=win%(win%,3)-(maxy%/2)   ! OLD H
    win%(win%,8)=0                        ! RIGHT SLIDER POS
    win%(win%,9)=0                        ! LOWER    "    "
    win%(win%,13)=0                       ! WHICH WINDOW POSITION/SIZE
    win%(win%,18)=win%(win%,0)            ! USER X
    win%(win%,19)=win%(win%,1)-((maxy%/2)*(win%=1)) ! USER Y
    win%(win%,20)=xsize%                  ! USER W
    win%(win%,21)=ysize%                  ! USER H
  NEXT win%
  ' ************************************************************
  '
  DIM screen%(9000)    ! HOLDS SCREEN BEING TRACED
  screen%(9000)=0
  screen%=V:screen%(550) AND &HFFFF00
  DIM screen2%(9000)    ! HOLDS SCREEN BEING TRACED
  screen2%(9000)=0
  screen2%=V:screen2%(550) AND &HFFFF00
  '
  screen_loc%=XBIOS(2) ! ADDRESS OF REAL SCREEN
  '
  DIM pal1%(15),pal2%(15) ! PALETTE BUFFERS
  FOR i%=0 TO cols%    ! SET PALETTES TO SYSTEM VALUES
    pal1%(i%)=XBIOS(7,W:i%,W:-1)
    pal2%(i%)=XBIOS(7,W:i%,W:-1)
  NEXT i%
  '
  ' TRANSLATE COLORS TO WORK WITH DEGAS COLORS **********
  DIM col_fix%(2,15)
  FOR fix%=0 TO 15
    READ col_fix%(0,fix%)
  NEXT fix%
  FOR fix%=0 TO 3
    READ col_fix%(1,fix%)
  NEXT fix%
  READ col_fix%(2,0)
  READ col_fix%(2,1)
  ' *****************************************************
  '
  ' PUT DEGAS HEADER IN BUFFER *********************
  POKE screen%-34,0
  POKE screen%-33,rez%
  SELECT rez%
  CASE 0
    FOR loop%=0 TO 31
      READ temp%
      POKE screen%+loop%-32,temp%
    NEXT loop%
    FOR loop%=0 TO 11
      READ temp%
    NEXT loop%
  CASE 1
    FOR loop%=0 TO 31
      READ temp%
    NEXT loop%
    FOR loop%=0 TO 7
      READ temp%
      POKE screen%+loop%-32,temp%
    NEXT loop%
    FOR loop%=0 TO 3
      READ temp%
    NEXT loop%
  CASE 2
    FOR loop%=0 TO 39
      READ temp%
    NEXT loop%
    FOR loop%=0 TO 3
      READ temp%
      POKE screen%+loop%-32,temp%
    NEXT loop%
  ENDSELECT
  ' ************************************************
  '
  pic_path$="\STIS.3D\*."+"PI"+STR$(rez%+1)
  IF EXIST(pic_path$)=0 THEN
    cd%=GEMDOS(25)
    pic_path$=DIR$(cd%+1)
    pic_path$=pic_path$+"\*.PI"+STR$(rez%+1)
  ENDIF
  '
  screen_save%=1
  stis_ready%=0
  degas_ready%=0
  elevation%=0
  whole%=0      ! IF =1 THEN MAKE FULL CIRCLE
  '
  IF rez%>0 THEN ! PUT VALUE BY VIEW MENU IF NOT LOW REZ
    MID$(entry$(18),6,1)=CHR$(48+elevation%)
  ENDIF
  '
  GRAPHMODE 1   ! REPLACE MODE
  '
RETURN
'
> PROCEDURE setup
  '
  @make_popup
  '
  first%=0    ! SO ESC KEY WILL NOT ABORT ON INIT SETUP
  @make_blank
  first%=1
  '
  CLS
  '
  MENU entry$()           ! TURN DROP-DOWN MENU ON
  '
  ' CREATE WINDOW WITH ALL ATTRIBUTES *************************
  ' CREATE WINDOW
  win%=0
  win%(win%,10)=WIND_CREATE(&X111111101111,0,miny%,maxx%,maxy%)
  ' TITLE
  CHAR{title%}=" DEGAS PICTURE, EMPTY (D) "+CHR$(0)+CHR$(0)
  flag%=WIND_SET(win%(win%,10),2,CARD(SWAP(title%)),CARD(title%),0,0)
  ' OPEN
  flag%=WIND_OPEN(win%(win%,10),win%(win%,4),win%(win%,5),win%(win%,6),win%(win%,7))
  ' SET SLIDERS
  @calc_slide
  flag%=WIND_SET(win%(win%,10),15,vslide,0,0,0)
  flag%=WIND_SET(win%(win%,10),16,hslide,0,0,0)
  win%=1
  win%(win%,10)=WIND_CREATE(&X111111101111,0,miny%,maxx%,maxy%)
  ' TITLE
  CHAR{title2%}=" STIS IMAGE, EMPTY (I) "+CHR$(0)+CHR$(0)
  flag%=WIND_SET(win%(win%,10),2,CARD(SWAP(title2%)),CARD(title2%),0,0)
  ' OPEN
  flag%=WIND_OPEN(win%(win%,10),win%(win%,4),win%(win%,5),win%(win%,6),win%(win%,7))
  ' SET SLIDERS
  @calc_slide
  flag%=WIND_SET(win%(win%,10),15,vslide,0,0,0)
  flag%=WIND_SET(win%(win%,10),16,hslide,0,0,0)
  ' ***********************************************************
  '
  FOR win%=0 TO 1
    @view
    @slide
  NEXT win%
  DEFMOUSE 0
  '
RETURN
'
> PROCEDURE key_board
  key%=MENU(14) DIV 256  ! USE SCAN CODES
  ' TEXT xstp%*3,miny%-3,STR$(key%)
  '
  SELECT key%
  CASE 38  !L
    @screen_load
    '
  CASE 31  !S
    @screen_save
    '
  CASE 46  !C
    @trace
    '
  CASE 49  !N
    @stis_new
    '
  CASE 16  !Q
    @trying_to_quit
    '
  CASE 17 !W
    @full_screen
    '
  CASE 32  !D
    IF toped%<>degas_window% THEN
      win%=degas_window%
      toped%=degas_window%
      @view
    ENDIF
    '
  CASE 23  !I
    IF toped%<>stis_window% THEN
      win%=stis_window%
      toped%=stis_window%
      @view
    ENDIF
    '
  CASE 25  !P
    @dump_stis
    '
  CASE 19  !R
    @restore_colors
    '
  CASE 13,78  !+
    IF rez%>0 THEN
      @ele_plus
    ENDIF
    '
  CASE 12,74  !-
    IF rez%>0 THEN
      @ele_minus
    ENDIF
    '
  CASE 33   !F
    win%=toped%
    @window_full
    '
  CASE 72 ! UP
    win%=toped%
    IF win%(win%,9)<>0 THEN
      win%(win%,9)=0
      flag%=WIND_SET(win%(win%,10),9,win%(win%,9),0,0,0) ! SET SLIDER
      @slide
    ENDIF
    '
  CASE 80 ! DOWN
    win%=toped%
    IF win%(win%,9)<>1000 THEN
      win%(win%,9)=1000
      flag%=WIND_SET(win%(win%,10),9,win%(win%,9),0,0,0) ! SET SLIDER
      @slide
    ENDIF
    '
  CASE 75,115 ! LEFT
    win%=toped%
    IF win%(win%,8)<>0 THEN
      win%(win%,8)=0
      flag%=WIND_SET(win%(win%,10),8,win%(win%,8),0,0,0) ! SET SLIDER
      @slide
    ENDIF
    '
  CASE 77,116 ! RIGHT
    win%=toped%
    IF win%(win%,8)<>1000 THEN
      win%(win%,8)=1000
      flag%=WIND_SET(win%(win%,10),8,win%(win%,8),0,0,0) ! SET SLIDER
      @slide
    ENDIF
    '
  CASE 59 TO 68         !F1-F10 = DEMOS
    demo%=key%-58
    @pdemo
  ENDSELECT
  '
RETURN
'
> PROCEDURE check_menu
  '
  command%=MENU(1)
  '
  entry%=MENU(0)
  '
  IF MENU(4)=win%(0,10) THEN  ! WHICH WINDOW ?
    win%=0
  ELSE
    win%=1
  ENDIF
  '
  MENU OFF
  '
  IF command%=10  ! MENU ITEM
    '
    SELECT entry%
      '
    CASE 1                      ! CREDITS
      credit$="STREOSCOPIC IMAGE SYSTEM|½ 1993 by Phillip O'Neal|"
      credit$=credit$+"       *SHAREWARE*|Programmed in  GFA Basic"
      SETMOUSE crx%,cry%
      ALERT 0,credit$,1,"I'M DONE",dummy%
      '
    CASE 11                     ! LOAD
      @screen_load
      '
    CASE 12                     ! SAVE
      @screen_save
      '
    CASE 13                     ! TRACE
      @trace
      '
    CASE 16                     ! QUIT
      @trying_to_quit
      '
    CASE 20                     ! VIEW DEGAS
      IF toped%<>degas_window% THEN
        win%=degas_window%
        toped%=degas_window%
        @view
      ENDIF
      '
    CASE 21                     ! VIEW STIS
      IF toped%<>stis_window% THEN
        win%=stis_window%
        toped%=stis_window%
        @view
      ENDIF
      '
    CASE 25
      @restore_colors
      '
    CASE 14
      @dump_stis
      '
    CASE 19
      DO
      LOOP UNTIL MOUSEK=0
      @full_screen
      '
    CASE 22
      @stis_new
      '
    CASE 24
      DO
      LOOP UNTIL MOUSEK=0
      @wdemo
      '
    CASE 26
      @ele_plus
      '
    CASE 27
      @ele_minus
      '
    ENDSELECT
    '
  ENDIF
  '
  IF command%=20 AND MENU(4)=win%(win%,10) THEN    ! WIND UPDATE
    @repair
  ENDIF
  '
  IF command%>20 AND MENU(4)=win%(win%,10) THEN    ! WINDOW ITEM
    '
    fx%=0
    '
    SELECT command%
      '
    CASE 21 ! WINDOW CLICKED ON
      flag%=WIND_SET(win%(win%,10),10,0,0,0,0) ! WINDOW SET TO TOP
      toped%=win%
      @view
      '
    CASE 22 ! CLOSE WINDOW
      @trying_to_quit
      '
    CASE 23 ! FULL WINDOW
      @window_full
      '
    CASE 24 ! ARROWS / SLIDERS CLICKED ON
      SELECT MENU(5)
        '
      CASE 0 ! TOP HALF OF SLIDER
        IF win%(win%,9)<>0 THEN  ! IF NOT ALREADY AT FAR LEFT
          win%(win%,9)=win%(win%,9)-pstp
          IF win%(win%,9)<0 THEN
            win%(win%,9)=0
          ENDIF
          flag%=WIND_SET(win%(win%,10),9,win%(win%,9),0,0,0) ! SET SLIDER
          fx%=1
        ENDIF
        '
      CASE 1 ! BOTTOM HALF OF SLIDER
        IF win%(win%,9)<>1000 THEN   ! IF NOT ALREADY AT FAR RIGHT
          win%(win%,9)=win%(win%,9)+pstp
          IF win%(win%,9)>1000 THEN
            win%(win%,9)=1000
          ENDIF
          flag%=WIND_SET(win%(win%,10),9,win%(win%,9),0,0,0) ! SET SLIDER
          fx%=1
        ENDIF
        '
      CASE 2 ! UP ARROW
        IF win%(win%,9)<>0 THEN    ! IF NOT ALREADY AT TOP
          win%(win%,9)=win%(win%,9)-100
          IF win%(win%,9)<0 THEN
            win%(win%,9)=0
          ENDIF
          flag%=WIND_SET(win%(win%,10),9,win%(win%,9),0,0,0) ! SET SLIDER
          fx%=1
        ENDIF
        '
      CASE 3 ! DOWN ARROW
        IF win%(win%,9)<>1000 THEN    ! IF NOT ALREADY AT BOTTOM
          win%(win%,9)=win%(win%,9)+100
          IF win%(win%,9)>1000 THEN
            win%(win%,9)=1000
          ENDIF
          flag%=WIND_SET(win%(win%,10),9,win%(win%,9),0,0,0) ! SET SLIDER
          fx%=1
        ENDIF
        '
      CASE 4 ! LEFT OF SLIDER
        IF win%(win%,8)<>0 THEN
          win%(win%,8)=win%(win%,8)-cstp
          IF win%(win%,8)<0 THEN
            win%(win%,8)=0
          ENDIF
          flag%=WIND_SET(win%(win%,10),8,win%(win%,8),0,0,0) ! SET SLIDER
          fx%=1
        ENDIF
        '
      CASE 5 ! RIGHT OF SLIDER
        IF win%(win%,8)<>1000 THEN
          win%(win%,8)=win%(win%,8)+cstp
          IF win%(win%,8)>1000 THEN
            win%(win%,8)=1000
          ENDIF
          flag%=WIND_SET(win%(win%,10),8,win%(win%,8),0,0,0) ! SET SLIDER
          fx%=1
        ENDIF
        '
      CASE 6 ! LEFT ARROW
        IF win%(win%,8)<>0 THEN
          win%(win%,8)=win%(win%,8)-100
          IF win%(win%,8)<0 THEN
            win%(win%,8)=0
          ENDIF
          flag%=WIND_SET(win%(win%,10),8,win%(win%,8),0,0,0) ! SET SLIDER
          fx%=1
        ENDIF
        '
      CASE 7 ! RIGHT ARROW
        IF win%(win%,8)<>1000 THEN
          win%(win%,8)=win%(win%,8)+100
          IF win%(win%,8)>1000 THEN
            win%(win%,8)=1000
          ENDIF
          flag%=WIND_SET(win%(win%,10),8,win%(win%,8),0,0,0) ! SET SLIDER
          fx%=1
        ENDIF
        '
      ENDSELECT
      '
      IF fx%=1 THEN
        @slide
      ENDIF
      '
    CASE 25 ! HORZ SLIDER MOVED
      column2%=MENU(5)
      IF column2%<>win%(win%,8) THEN
        win%(win%,8)=column2%
        flag%=WIND_SET(win%(win%,10),8,win%(win%,8),0,0,0) ! SET SLIDER
        @slide
      ENDIF
      '
    CASE 26 ! VERT SLIDER MOVED
      page2%=MENU(5)
      IF page2%<>win%(win%,9) THEN
        win%(win%,9)=page2%
        flag%=WIND_SET(win%(win%,10),9,win%(win%,9),0,0,0) ! SET SLIDER
        @slide
      ENDIF
      '
    CASE 27 ! WINDOW SIZED
      x%=MENU(5)
      y%=MENU(6)
      w%=MENU(7)
      h%=MENU(8)
      IF w%<xsize% THEN ! WINDOW WIDTH WILL BE XSIZE% OR WIDER
        w%=xsize%
      ENDIF
      IF h%<ysize% THEN ! WINDOW HEIGHT WILL BE YSIZE% OR TALLER
        h%=ysize%
      ENDIF
      flag%=WIND_SET(win%(win%,10),5,x%,y%,w%,h%)      ! SIZE WINDOW
      flag%=WIND_GET(win%(win%,10),5,win%(win%,18),win%(win%,19),win%(win%,20),win%(win%,21))  ! OUTSIDE POS,SIZE
      win%(win%,13)=0
      @calc_slide
      @slide
      '
    CASE 28 ! WINDOW MOVED
      x%=MENU(5)
      y%=MENU(6)
      w%=MENU(7)
      h%=MENU(8)
      IF y%<miny% THEN
        y%=miny%
      ENDIF
      IF x%>maxx%-xsize% THEN  ! KEEP WHOLE WINDOW ON SCREEN
        x%=maxx%-xsize%
      ENDIF
      IF y%>maxy%+miny%-ysize% ! "     "      "    "    "
        y%=maxy%+miny%-ysize%
      ENDIF
      IF x%>maxx%-w%           ! IF SIZE TO BIG THEN MAKE SMALLER
        w%=maxx%-x%
        IF w%<xsize% THEN
          w%=xsize%
        ENDIF
      ENDIF
      IF y%>maxy%-h%           !  "   "   "  "   "     "      "
        h%=maxy%+miny%-y%
        IF h%<ysize% THEN
          h%=ysize%
        ENDIF
      ENDIF
      flag%=WIND_SET(win%(win%,10),5,x%,y%,w%,h%)     ! MOVE (SIZE ?) WINDOW
      flag%=WIND_GET(win%(win%,10),5,win%(win%,18),win%(win%,19),win%(win%,20),win%(win%,21)) ! OUTSIDE POS,SIZE
      win%(win%,13)=0
      @calc_slide
      @slide
    ENDSELECT
    '
  ENDIF
  '
RETURN
'
> PROCEDURE ding
  FOR v%=15 TO 0 STEP -5
    SOUND 0,v%,v%,4,1
    SOUND 1,v%,v%,5,1
  NEXT v%
RETURN
'
> PROCEDURE dong
  FOR v%=14 TO 0 STEP -7
    SOUND 0,v%,v%/7,2,1
    SOUND 1,v%,v%/7,3,2
  NEXT v%
RETURN
'
> PROCEDURE dump_stis
  '
  IF stis_ready%=1 THEN
    button%=1
    '
    DO
      ready%=OUT?(0)                  ! IS PRINTER ON ?
      '
      IF ready%=0 THEN                ! IF PRINTER WAS OFF THEN ALERT
        SETMOUSE crx%,cry%
        @dong
        ALERT 0,"TURN PRINTER ON PLEASE !",1,"PRINT|CANCEL",button%
        DO WHILE MOUSEK<>0            ! STAY HERE UNTIL MOUSE BUTTON RELEASED
        LOOP
      ENDIF
      '
    LOOP UNTIL ready%=-1 OR button%=2 ! IS PRINTER ON OR WAS CANCEL SELECTED
    '
    IF button%=1 THEN                 ! IS PRINTER ON OR WAS CANCEL SELECTED
      ~XBIOS(33,12)
      SGET temp$
      SPUT stis_screen$
      SETMOUSE tmaxx%,tmaxy%
      HARDCOPY                        ! PRINT THE SCREEN
      SPUT temp$
    ENDIF
  ELSE
    SETMOUSE crx%,cry%
    @dong
    ALERT 0," NO STIS IMAGE  TO PRINT.|YOU MUST CREATE IT FIRST.",1,"I'L MAKE",dummy%
  ENDIF
  '
RETURN
'
> PROCEDURE window_full
  SELECT win%(win%,13)
  CASE 0
    we%=0
    '
  CASE 1
    we%=4
    '
  CASE 2
    we%=18
    '
  ENDSELECT
  '
  flag%=WIND_SET(win%(win%,10),5,win%(win%,we%),win%(win%,we%+1),win%(win%,we%+2),win%(win%,we%+3))
  win%(win%,13)=win%(win%,13)+1+(3*(we%=18))
  '
  ' GET POSITION AND SIZE OF INSIDE OF WINDOW
  flag%=WIND_GET(win%(win%,10),4,win%(win%,14),win%(win%,15),win%(win%,16),win%(win%,17))
  '
  @slide
  '
RETURN
'
> PROCEDURE title
  ' PUT TEXT IN WINDOW TITLE
  flag%=WIND_SET(win%(0,10),2,CARD(SWAP(title%)),CARD(title%),0,0)
  flag%=WIND_SET(win%(1,10),2,CARD(SWAP(title2%)),CARD(title2%),0,0)
RETURN
'
> PROCEDURE calc_slide
  flag%=WIND_GET(win%(win%,10),4,win%(win%,14),win%(win%,15),win%(win%,16),win%(win%,17)) ! OUTSIDE POS,SIZE
  vslide=1000*(win%(win%,17)/fmaxy)
  hslide=1000*(win%(win%,16)/fmaxx)
  pstp=1000*win%(win%,17)/(fmaxy-win%(win%,17))
  cstp=1000*win%(win%,16)/(fmaxx-win%(win%,16))
RETURN
'
> PROCEDURE repair
  '
  ' FIX INSIDE OF WINDOW
  ~XBIOS(5,L:screen%,L:-1,-1)
  count%=0
  '
  ' GET FIRST RECTANGLE TO FIX
  flag%=WIND_GET(win%(win%,10),4,win%(win%,14),win%(win%,15),win%(win%,16),win%(win%,17))
  PUT win%(win%,14),win%(win%,15),wfix$(win%)
  '
  er%=WIND_UPDATE(1)  ! TELL GEM WE ARE TAKING OVER
  '
  er%=WIND_GET(win%(win%,10),11,fx%,fy%,fx2%,fy2%)
  GET fx%,fy%,fx%+fx2%-1,fy%+fy2%-1,fix$(count%)
  fix%(0,count%)=fx%
  fix%(1,count%)=fy%
  fix_done%=0
  '
  DO
    er%=WIND_GET(win%(win%,10),12,fx%,fy%,fx2%,fy2%)
    IF fx2%+fy2%=0 THEN  ! ANY MORE RECTANGLES ?
      fix_done%=1
    ELSE
      INC count%
      ' GET A RECTANGLE
      GET fx%,fy%,fx%+fx2%-1,fy%+fy2%-1,fix$(count%)
      fix%(0,count%)=fx%   ! X POS OF RECTANGLE
      fix%(1,count%)=fy%   ! Y  "    "       "
    ENDIF
  LOOP UNTIL fix_done%=1
  '
  ~XBIOS(5,L:screen_loc%,L:-1,-1)
  '
  FOR temp%=0 TO count%  ! PUT THE RECTANGLES ON THE SCREEN
    PUT fix%(0,temp%),fix%(1,temp%),fix$(temp%)
  NEXT temp%
  '
  er%=WIND_UPDATE(0)   !  DONE!
  '
RETURN
'
> PROCEDURE fix
  '
  ' FIX INSIDE OF WINDOW
  flag%=WIND_SET(win%(win%,10),10,0,0,0,0) ! WINDOW SET TO TOP
  flag%=WIND_GET(win%(win%,10),4,win%(win%,14),win%(win%,15),win%(win%,16),win%(win%,17))
  '
  ~XBIOS(5,L:screen%,L:-1,-1)               ! HIDE SCREEN BEING USED
  '
  IF win%=0 THEN  ! WHICH WINDOW TO FIX ?
    SPUT degas_screen$
  ELSE
    IF blank%=0 THEN
      SPUT stis_screen$
    ELSE
      SPUT blank$
    ENDIF
  ENDIF
  '
  px%=(tmaxx%-win%(win%,16))*(win%(win%,8)/1000)  ! SLIDER POSITIONS
  py%=(tmaxy%-win%(win%,17))*(win%(win%,9)/1000)
  '
  GET px%,py%,win%(win%,16)+px%-1,win%(win%,17)+py%-1,wfix$(win%)
  '
  ~XBIOS(5,L:screen_loc%,L:-1,-1)                 ! HIDE SCREEN BEING USED
  '
  PUT win%(win%,14),win%(win%,15),wfix$(win%)
  '
RETURN
'
> PROCEDURE stis_new
  '
  mes$="Creating STIS image buffer."
  '
  @popup
  @make_blank
  '
  PUT crx%-l2%,cry%-l3%,fix_box$
  '
  IF flag%=0 THEN
    win%=stis_window%
    toped%=stis_window%
    @fix
  ENDIF
  '
RETURN
'
> PROCEDURE slide
  '
  ' POSITION SLIDERS
  @calc_slide
  '
  px%=1000*(win%(win%,16)/fmaxx%)
  py%=1000*(win%(win%,17)/fmaxy%)
  '
  flag%=WIND_SET(win%(win%,10),16,vslide,0,0,0)
  flag%=WIND_SET(win%(win%,10),15,hslide,0,0,0)
  '
  @fix
  '
RETURN
'
> PROCEDURE ele_plus
  '
  INC elevation%
  IF elevation%=7 THEN
    elevation%=0
  ENDIF
  '
  @ele_done
  '
RETURN
'
> PROCEDURE ele_minus
  '
  DEC elevation%
  '
  IF elevation%=-1 THEN
    elevation%=6
  ENDIF
  '
  @ele_done
  '
RETURN
'
> PROCEDURE ele_done
  '
  MID$(entry$(18),6,1)=" "
  MID$(entry$(18),6,1)=STR$(elevation%)
  MENU entry$()
  '
RETURN
'
> PROCEDURE restore_colors
  '
  FOR i%=0 TO cols%
    ~XBIOS(7,W:i%,W:pal1%(i%))
    pal2%(i%)=pal1%(i%)
  NEXT i%
  '
RETURN
'
> PROCEDURE make_blank
  '
  ~XBIOS(5,L:screen%,L:-1,-1)
  '
  CLS
  flag%=0
  '
  FOR x%=0 TO xstp%-1
    tystp%=SINQ(x%*(180/xstp%))*10+ystp%
    '
    FOR y%=0 TO tystp%-1
      COLOR INT(RND(0)*(cols%+1))
      '
      IF RND(0)>0.6 THEN
        COLOR 1
      ENDIF
      '
      IF RND(0)>0.6 THEN
        COLOR 0
      ENDIF
      '
      PLOT x%,y%
      '
    NEXT y%
    '
    GET x%,0,x%,tystp%-1,temp$
    '
    FOR y%=0 TO tmaxy%-1 STEP tystp%
      PUT x%,y%,temp$
    NEXT y%
    '
    IF INP?(2)=-1 THEN
      '
      IF INP(2)=27 AND first%=1 THEN
        x%=xstp%
        flag%=1
      ENDIF
      '
    ENDIF
    '
  NEXT x%
  '
  IF flag%=0 OR first%=0 THEN
    '
    GET 0,0,xstp%-1,tmaxy%,pat$
    '
    FOR x%=0 TO 4
      PUT xstp%*x%,0,pat$
    NEXT x%
    '
    SGET stis$
    '
    IF stis_ready%=0 THEN
      stis_screen$=stis$
    ENDIF
    '
  ENDIF
  '
  ~XBIOS(5,L:screen_loc%,L:-1,-1)
  '
RETURN
'
> PROCEDURE make_popup
  '
  ~XBIOS(5,L:screen%,L:-1,-1)
  '
  CLS
  '
  pyz=10-(10*(rez%=2))           ! HEIGHT OF BOX 10 OR 20
  pfx%=0                          ! LEFT SIDE OF BOX
  pfx2%=80                       ! RIGHT SIDE OF BOX
  pfy%=cry%+(-tmaxy%/4)           ! TOP OF BOX
  pfy2%=cry%+(-tmaxy%/4)+11*pyz+2  ! BOTTOM OF BOX
  '
  DEFFILL 1,0,0
  '
  BOX pfx%,pfy%,pfx2%-1,pfy2%-1           ! BIG BOX
  BOX pfx%,pfy%,pfx2%,pfy2%               ! BIG BOX
  '
  FOR y%=0 TO 9  ! 20 LITTLE BOXES
    boffset%=cry%+(-tmaxy%/4)+y%*pyz+1
    BOX 0,boffset%,80,boffset%+pyz
  NEXT y%
  '
  DEFTEXT 1
  '
  FOR y%=1 TO 10  ! PUT TEXT IN BOXES
    boffset%=cry%+(-tmaxy%/4)+y%*pyz+1
    TEXT (4*(y%=10))+12,boffset%+(2*(rez%=2))-2,"DEMO #"+STR$(y%)
  NEXT y%
  '
  DEFTEXT 2
  boffset%=cry%+(-tmaxy%/4)+y%*pyz+1
  TEXT 16,boffset%+(2*(rez%=2))-2,"CANCEL"
  '
  DEFTEXT 1
  '
  GET pfx%,pfy%,pfx2%,pfy2%,popup$  ! STORE POPUP MENU FOR USE LATER
  '
  ~XBIOS(5,L:screen_loc%,L:-1,-1)
  '
RETURN
'
> PROCEDURE clip_file
  '
  ' FIND FILENAME
  FOR test%=LEN(file$) TO 1 STEP -1
    '
    IF MID$(file$,test%,1)="\" THEN
      tfile$=MID$(file$,test%+1)
      test2%=test%
      test%=0
    ENDIF
    '
  NEXT test%
  '
  pic_path$=MID$(file$,1,test2%)+"*.PI"+STR$(rez%+1)
  '
RETURN
'
> PROCEDURE tit
  BMOVE V:win$(0),title%,LEN(win$(0))
  BMOVE V:win$(1),title2%,LEN(win$(1))
  @title
RETURN
'
> PROCEDURE screen_load
  '
  FILESELECT #"LOAD SCREEN",pic_path$,"",file$ ! file$ SELECTED
  '
  DO WHILE MOUSEK<>0                           ! BE SURE BUTTON RELEASED
  LOOP
  '
  IF EXIST(file$)=-1 THEN                      ! IS file$ THERE ?
    '
    @clip_file
    BLOAD file$,screen%-34           ! LOAD PIC
    ~XBIOS(5,L:screen%,L:-1,-1)
    SGET degas_screen$
    ~XBIOS(5,L:screen_loc%,L:-1,-1)
    ~XBIOS(6,L:screen%-32)     ! SET COLOR PALETTE
    '
    IF tfile$="" THEN
      lfile$=file$    ! IF NO FILE WAS SELECTED THEN USE OLD FILENAME
    ELSE
      lfile$=tfile$
      win$(degas_window%)=" "+lfile$+" (D) "+CHR$(0)+CHR$(0)
      @tit
    ENDIF
    '
    degas_ready%=1
    win%=degas_window%
    toped%=degas_window%
    @fix
    '
    FOR i%=0 TO cols% ! STORE NEW PALETTE
      pal2%(i%)=XBIOS(7,W:i%,W:-1)
    NEXT i%
    '
  ENDIF
  '
RETURN
'
> PROCEDURE screen_save
  '
  good%=1
  '
  IF stis_ready%=0 THEN
    good%=0
    SETMOUSE crx%,cry%
    @dong
    ALERT 0," NO STIS IMAGE  TO SAVE.|YOU MUST CREATE IT FIRST.",1,"I'L MAKE",dummy%
  ELSE
    win%=stis_window%
    toped%=stis_window%
    @view
  ENDIF
  '
  IF good%=1 THEN
    '
    FILESELECT #"SAVE SCREEN",pic_path$,lfile$,file$  ! SELECTED FILE$
    '
    DO WHILE MOUSEK<>0                            ! MAKE SURE BUTTON RELEASED
    LOOP
    '
    IF file$<>"" THEN                             ! IF A FILE WAS SELECTED
      ' IF NOT PI? EXTENTION THEN ADD PI?
      dummy$=".PI"+CHR$(49+rez%)
      IF RIGHT$(file$,4)<>dummy$ THEN
        FOR test%=LEN(file$) TO LEN(file$)-3 STEP -1
          IF MID$(file$,test%,1)="." THEN
            file$=MID$(file$,1,test%-1)
          ENDIF
        NEXT test%
        file$=file$+dummy$
      ENDIF
      '
      @clip_file
      button%=1                                   ! MOUSE BUTTON STATUS
      '
      IF EXIST(file$)=-1 THEN
        SETMOUSE crx%,cry%
        @dong
        ll%=LEN(tfile$)
        afile$=MID$(tfile$,1,ll%-4)
        ALERT 0,file$+"|ALREADY EXIST. REPLACE IT ?",1,"REPLACE|CANCEL",button%
        DO WHILE MOUSEK<>0                        ! MAKE SURE BUTTON RELEASED
        LOOP
      ENDIF
      '
      IF button%=1 THEN                           ! GOOD FILE OR OK TO REPLACE
        ~XBIOS(5,L:screen%,L:-1,-1)               ! HIDE SCREEN BEING USED
        SPUT stis_screen$
        COLOR 1
        DEFFILL 1
        BOX 0,0,tmaxx%,tmaxy%
        BSAVE file$,screen%-34,32034              ! SAVE PIC
        ~XBIOS(5,L:screen_loc%,L:-1,-1)           ! UNHIDE SCREEN
        screen_save%=1                            ! FILE WAS SAVED
        lfile$=""
      ENDIF
      '
    ENDIF
    '
  ENDIF
  '
RETURN
'
> PROCEDURE full_screen
  '
  IF blank%=0 THEN
    SGET temp$
    SPUT stis_screen$
    DEFFILL 1
    COLOR 1
    BOX 0,0,tmaxx%,tmaxy%
    SETMOUSE tmaxx%,tmaxy%
    @stay
    SETMOUSE crx%,cry%
  ELSE
    SETMOUSE crx%,cry%
    ALERT 0,"NO STIS IMAGE TO VIEW.",1,"I'L MAKE",dummy%
  ENDIF
  '
RETURN
'
> PROCEDURE stay
  '
  flag%=0
  '
  DO
    '
    IF INP?(2)=-1 THEN
      dummy%=INP(2)
      flag%=1
    ENDIF
    '
    IF MOUSEK<>0 THEN
      flag%=1
    ENDIF
    '
  LOOP UNTIL flag%=1
  '
  SPUT temp$
  '
RETURN
'
> PROCEDURE view
  '
  flag%=WIND_SET(win%(win%,10),10,0,0,0,0) ! WINDOW SET TO TOP
  @fix
  '
RETURN
'
> PROCEDURE trying_to_quit
  '
  button%=0
  DO
    txt$="SURE YOU WANT TO QUIT?"
    but$="QUIT|STAY"
    '
    IF screen_save%=0 THEN
      txt$=txt$+"| |*STIS IMAGE NOT SAVED*| "
      but$=but$+"|SAVE"
    ENDIF
    '
    SETMOUSE crx%,cry%
    @dong
    ALERT 0,txt$,1,but$,button%
    '
    DO WHILE MOUSEK<>0  ! BE SURE MOUSE BUTTON WAS RELEASED
    LOOP
    '
    IF button%=3 THEN
      @screen_save
    ENDIF
    '
    IF button%=1 THEN   !  QUIT SELECTED IF button%=1
      '
      FOR win%=0 TO 1
        flag%=WIND_CLOSE(win%(win%,10))
        flag%=WIND_DELETE(win%(win%,10))
      NEXT win%
      '
      MENU OFF              ! USELECT ITEM
      MENU KILL             ! TELL GEM TO TURN MENU OFF
      @restore_colors
      CLS
      END
      '
    ENDIF
    '
  LOOP UNTIL button%=2
  '
RETURN
'
> PROCEDURE trace
  '
  win%=stis_window%
  toped%=stis_window%
  @view
  '
  IF degas_ready%=1 THEN
    '
    flag%=1
    '
    IF screen_save%=1 THEN
      @good_trace
    ELSE
      SETMOUSE crx%,cry%
      @ding
      ALERT 0," A STIS IMAGE IN THE|BUFFER WAS NOT SAVED.",1,"KILL|SAVE|CANCEL",button%
      IF button%<>3 THEN
        IF button%=2 THEN
          @screen_save
        ENDIF
        @good_trace
      ENDIF
    ENDIF
    '
  ELSE
    '
    SETMOUSE crx%,cry%
    @dong
    ALERT 0," NO DEGAS PICTURE TO USE|WHEN CREATING STIS IMAGE.",1," OK ",dummy%
    '
  ENDIF
  '
RETURN
'
> PROCEDURE good_trace
  '
  button%=1
  '
  IF stis_ready%=1 THEN
    SETMOUSE crx%,cry%
    @ding
    ALERT 0,"   USE A BLANK SCREEN|OR MERGE WITH OLD IMAGE?",1,"NEW|OLD|CANCEL",button%
  ENDIF
  '
  offx%=tmaxx%/320
  osc%=screen_save%
  osr%=stis_ready%
  '
  IF button%<>3
    '
    mes$="CREATING STIS IMAGE ("+lfile$+")."
    @popup
    ~XBIOS(5,L:screen%,L:-1,-1)
    IF button%=1 THEN
      SPUT stis$
    ELSE
      SPUT stis_screen$
    ENDIF
    GET 0,0,xstp%-1,tmaxy%,pat2$
    '
    flag%=1
    ~XBIOS(5,L:screen2%,L:-1,-1)
    SPUT degas_screen$
    @flipper
    ~XBIOS(5,L:screen%,L:-1,-1)
    PUT 0,0,pat2$
    '
    IF flag%=1 THEN
      '
      ~XBIOS(5,L:screen_loc%,L:-1,-1)
      PUT crx%-l2%,cry%-l3%,fix_box$
      SETMOUSE crx%,cry%
      @ding
      ALERT 0,"PUT ALIGNMENT DOTS| ON THIS  IMAGE ?",1," YES | NO ",dots%
      '
      DO
      LOOP WHILE MOUSEK<>0
      '
      IF dots%=1 THEN
        ALERT 0,"PUT ALIGNMENT DOTS|ON TOP OR BOTTOM ?",1," TOP | BOT. ",place%
      ENDIF
      '
      DO
      LOOP WHILE MOUSEK<>0
      '
      ~XBIOS(5,L:screen%,L:-1,-1)
      IF dots%=1 THEN
        @dots
      ENDIF
      '
      SGET stis_screen$
      ~XBIOS(5,L:screen_loc%,L:-1,-1)
      screen_save%=0
      stis_ready%=1
      blank%=0
      win$(stis_window%)=" STIS IMAGE, "+lfile$+" (I) "+CHR$(0)+CHR$(0)
      @tit
      '
    ELSE
      ~XBIOS(5,L:screen_loc%,L:-1,-1)
      PUT crx%-l2%,cry%-l3%,fix_box$
      screen_save%=osc%
      stis_ready%=osr%
    ENDIF
    '
    place%=-1
    win%=stis_window%
    toped%=stis_window%
    @view
    '
  ENDIF
  '
RETURN
'
> PROCEDURE flipper
  '
  '
  FOR x%=xstp%-1 TO fmaxx%-1
    @flip
  NEXT x%
  '
RETURN
'
> PROCEDURE flip
  '
  GET x%,0,x%,fmaxy%-1,test$
  '
  IF test$<>comp_line$ THEN
    '
    FOR y%=0 TO tmaxy%-1
      c%=POINT(x%,y%)
      '
      IF c%>0 THEN
        row%=0
        rflag%=0
        '
        DO
          '
          c2%=POINT(x%,y%+row%+1)
          '
          IF c2%=c% THEN
            INC row%
          ELSE
            rflag%=1
          ENDIF
          '
        LOOP UNTIL rflag%=1
        '
        c%=col_fix%(rez%,c%)+elevation%
        ~XBIOS(5,L:screen%,L:-1,-1)
        '
        yr%=y%+row%
        FOR loop%=x% TO fmaxx%+xstp% STEP xstp%
          '
          tloop%=loop%+(fmaxx%*(loop%>=fmaxx%))
          GET tloop%,y%,tloop%,yr%,copy$
          IF loop%-c%<fmaxx% THEN
            PUT loop%-c%,y%,copy$
          ELSE
            PUT tloop%-c%,y%,copy$
          ENDIF
          '
        NEXT loop%
        '
        y%=y%+row%
        ~XBIOS(5,L:screen2%,L:-1,-1)
        '
      ENDIF
      '
    NEXT y%
    '
  ENDIF
  '
  IF INP?(2)=-1 THEN
    IF INP(2)=27 THEN
      x%=fmaxx%+xstp%
      x2%=fmaxx%+xstp%
      flag%=0
    ENDIF
  ENDIF
  '
RETURN
'
> PROCEDURE popup
  '
  l%=(LEN(mes$)/2)*8
  l2%=l%+8
  l3%=16-(16*(rez%=2))
  GET crx%-l2%,cry%-l3%,crx%+l2%,cry%+l3%,fix_box$
  DEFFILL 1,0,0
  COLOR 1
  GRAPHMODE 1
  PBOX crx%-l2%,cry%-l3%,crx%+l2%,cry%+l3%
  BOX crx%-l2%,cry%-l3%,crx%+l2%-1,cry%+l3%-1
  TEXT crx%-l%,cry%+(3*(rez%=2))-3,mes$
  mes$="ESC TO ABORT."
  l%=(LEN(mes$)/2)*8
  DEFTEXT 2
  TEXT crx%-l%,cry%+9-(9*(rez%=2)),mes$
  DEFTEXT 1
  '
RETURN
'
> PROCEDURE wdemo
  '
  pfx%=crx%-40
  pfx2%=crx%+40
  GET pfx%,pfy%,pfx2%,pfy2%,mfix$
  SETMOUSE crx%,cry%
  PUT pfx%,pfy%,popup$
  pick%=0
  boffset1%=cry%+(-tmaxy%/4)
  boffset2%=cry%+(-tmaxy%/4)+(11*pyz)
  '
  DO
    MOUSE dx%,dy%,dk%
    IF dk%=1 AND dx%>pfx% AND dx%<pfx2% AND dy%>pfy% AND dy%<pfy2% THEN
      pick%=1
    ENDIF
  LOOP UNTIL pick%=1
  '
  demo%=((dy%-pfy%)/pyz)+1
  PUT pfx%,pfy%,mfix$
  '
  IF demo%>0 AND demo%<11 THEN
    @pdemo
  ENDIF
  '
RETURN
'
> PROCEDURE pdemo
  '
  @demo
  '
  IF button%<>3 THEN
    flag%=0
    '
    SELECT demo%
    CASE 1      !1
      @demo1
    CASE 2      !2
      @demo2
    CASE 3      !3
      @demo3
    CASE 4      !4
      @demo4
    CASE 5      !5
      @demo5
    CASE 6      !6
      @demo6
    CASE 7      !7
      @demo7
    CASE 8      !8
      @demo8
    CASE 9      !9
      @demo9
    CASE 10    !10
      @demo10
    ENDSELECT
    '
    IF demo%<>0 THEN
      @demo_end
    ENDIF
    '
  ENDIF
  '
RETURN
'
> PROCEDURE demo
  '
  button%=0
  '
  IF screen_save%=0 THEN
    SETMOUSE crx%,cry%
    @ding
    ALERT 0,"THE STIS IMAGE WAS NOT SAVED.",1,"KILL|SAVE|CANCEL",button%
  ENDIF
  '
  IF button%<>3 THEN
    IF button%=2 THEN
      @screen_save
    ENDIF
    oss%=screen_save%
    osr%=stis_ready%
    mes$="Creating STIS demo image #"+STR$(demo%)+"."
    @popup
    ~XBIOS(5,L:screen%,L:-1,-1)
    SPUT stis$
    screen_save%=1
    stis_ready%=1
  ENDIF
  '
RETURN
'
> PROCEDURE demo1
  level%=-1
  cx%=xstp%*2.25
  FOR rads%=xstp%*0.5 TO 2 STEP -2
    '
    radius%=rads%
    cy%=ystp%
    @disc
    '
    radius%=rads%
    cy%=ystp%*3
    @disc
    '
    IF INP?(2)=-1 THEN
      IF INP(2)=27 THEN
        rads%=0
        flag%=1
      ENDIF
    ENDIF
  NEXT rads%
  '
  IF flag%=0 THEN
    cx%=xstp%*3
    cy%=ystp%*2
    FOR rads%=xstp%*0.3 TO 2 STEP -2
      '
      radius%=rads%
      @disc
      '
      IF INP?(2)=-1 THEN
        IF INP(2)=27 THEN
          rads%=0
          flag%=1
        ENDIF
      ENDIF
    NEXT rads%
  ENDIF
  '
  IF flag%=0 THEN
    cx%=xstp%*3.75
    FOR rads%=xstp%*0.5 TO 2 STEP -2
      '
      radius%=rads%
      cy%=ystp%
      @disc
      '
      radius%=rads%
      cy%=ystp%*3
      @disc
      '
      IF INP?(2)=-1 THEN
        IF INP(2)=27 THEN
          rads%=0
          flag%=1
        ENDIF
      ENDIF
    NEXT rads%
  ENDIF
RETURN
'
> PROCEDURE demo2
  maze$=""
  maze$=maze$+"000000000000000000000000000000000"
  maze$=maze$+"000000000222002222002220000000000"
  maze$=maze$+"000000000222002222002220000000000"
  maze$=maze$+"000000000222002222002220000000000"
  maze$=maze$+"000000000222002222002220000000000"
  maze$=maze$+"000000000222002222002220000000000"
  maze$=maze$+"000000000222002222002220000000000"
  maze$=maze$+"000000000222002222002220000000000"
  maze$=maze$+"111110000222002222002220000111110"
  maze$=maze$+"100000000222002222002220000001000"
  maze$=maze$+"100000000222002222002220000001000"
  maze$=maze$+"111110000222002222002220000001000"
  maze$=maze$+"000010000222002222002220000001000"
  maze$=maze$+"000010000222002222002220000001000"
  maze$=maze$+"111110000222002222002220000001000"
  maze$=maze$+"000000000222002222002220000000000"
  maze$=maze$+"000000000222002222002220000000000"
  maze$=maze$+"000000000222002222002220000000000"
  maze$=maze$+"000000000222002222002220000000000"
  maze$=maze$+"000000000222002222002220000000000"
  maze$=maze$+"000000000222002222002220000000000"
  maze$=maze$+"000000000222002222002220000000000"
  maze$=maze$+"000000002220002222000222000000000"
  maze$=maze$+"000000002220002222000222000000000"
  maze$=maze$+"000000022200002222000022200000000"
  maze$=maze$+"000000222000002222000002220000000"
  maze$=maze$+"000022220000002222000000222200000"
  maze$=maze$+"222222200000002222000000022222222"
  maze$=maze$+"222222000000002222000000002222222"
  maze$=maze$+"222200000000002222000000000022222"
  maze$=maze$+"000000000000000000000000000000000"
  FOR by%=0 TO 30
    FOR bx%=0 TO 32
      level%=-(ASC(MID$(maze$,by%*33+bx%+1,1))-48)
      IF rez%>0 THEN
        level%=level%*2
      ENDIF
      IF level%<>0 THEN
        level%=level%+(rez%>0)
        x1%=-level%+bx%*(6-(6*(rez%>0)))+93-(93*(rez%>0))
        x2%=x1%+5-(6*(rez%>0))
        y1%=by%*(6-(6*(rez%=2)))+10-(10*(rez%=2))
        y2%=y1%+5-(6*(rez%=2))
        @frame
      ENDIF
      IF INP?(2)=-1 THEN
        IF INP(2)=27 THEN
          bx%=33
          by%=31
          flag%=1
        ENDIF
      ENDIF
    NEXT bx%
  NEXT by%
RETURN
'
> PROCEDURE demo3
  level%=-1
  str%=9-(10*(rez%>0))
  FOR y1%=str% TO tmaxy%-str% STEP 3
    y2%=y1%+2
    xx%=SINQ(y1%+(180-str%)-(y1%*(rez%<>2)))*xstp%+(xstp%*3)
    FOR bx%=2 TO xstp%*0.4 STEP 3
      x1%=xx%-bx%
      x2%=xx%+bx%
      @frame
    NEXT bx%
    IF INP?(2)=-1 THEN
      IF INP(2)=27 THEN
        bx%=1000
        y1%=tmaxy%+1
        flag%=1
      ENDIF
    ENDIF
  NEXT y1%
RETURN
'
> PROCEDURE demo4
  level%=-1+(rez%=1)
  FOR bx%=2 TO 32-(32*(rez%=2)) STEP 2
    x1%=crx%-(xstp%*0.25)-(bx%-(bx%*(rez%=1)))
    x2%=crx%-(xstp%*0.25)+bx%-(bx%*(rez%=1))
    y1%=cry%-(bx%+ystp%)
    y2%=cry%+bx%-ystp%
    @frame
    y1%=cry%+ystp%-bx%
    y2%=cry%+ystp%+bx%
    @frame
    IF INP?(2)=-1 THEN
      IF INP(2)=27 THEN
        bx%=100
        flag%=1
      ENDIF
    ENDIF
  NEXT bx%
  IF flag%=0
    FOR bx%=2 TO 14-(14*(rez%=2)) STEP 2
      x1%=(xstp%*3)-(bx%-(bx%*(rez%=1)))
      x2%=-(bx%*(rez%=1))+(xstp%*3)+bx%
      y1%=cry%-bx%
      y2%=cry%+bx%
      @frame
      IF INP?(2)=-1 THEN
        IF INP(2)=27 THEN
          bx%=100
          flag%=1
        ENDIF
      ENDIF
    NEXT bx%
  ENDIF
  IF flag%=0
    FOR bx%=2 TO 32-(32*(rez%=2)) STEP 2
      x1%=crx%+(xstp%*1.25)-(bx%-(bx%*(rez%=1)))
      x2%=crx%+(xstp%*1.25)+bx%-(bx%*(rez%=1))
      y1%=cry%-(bx%+ystp%)
      y2%=cry%+bx%-ystp%
      @frame
      y1%=cry%+ystp%-bx%
      y2%=cry%+ystp%+bx%
      @frame
      IF INP?(2)=-1 THEN
        IF INP(2)=27 THEN
          bx%=100
          flag%=1
        ENDIF
      ENDIF
    NEXT bx%
  ENDIF
RETURN
'
> PROCEDURE demo5
  level%=-1+(rez%>0)
  radius%=11-(11*(rez%>0))
  FOR drx%=270 TO 425 STEP 22
    cx%=SINQ(drx%)*(70-(70*(rez%>0)))+crx%+(xstp%*0.625)-11
    cy%=COSQ(drx%)*(70-(70*(rez%=2)))+cry%
    @disc
    IF drx%<340 THEN
      level%=level%+(rez%>0)-1
    ELSE
      level%=level%+1-(rez%>0)
    ENDIF
    cx%=SINQ(514-drx%)*(70-(70*(rez%>0)))+crx%+(xstp%*0.625)-11
    cy%=COSQ(514-drx%)*(70-(70*(rez%=2)))+cry%+4-(4*(rez%=2))
    @disc
    IF INP?(2)=-1 THEN
      IF INP(2)=27 THEN
        drx%=500
        flag%=1
      ENDIF
    ENDIF
  NEXT drx%
RETURN
'
> PROCEDURE demo6
  maze$=""
  maze$=maze$+"044444444444444444444444444444440"
  maze$=maze$+"122242242242242222222242222242240"
  maze$=maze$+"122242242242242222222242222242240"
  maze$=maze$+"042242242242242244442244442242240"
  maze$=maze$+"042222242242222242242242242222240"
  maze$=maze$+"042222242242222242242242242222240"
  maze$=maze$+"042242242242244442242242242242240"
  maze$=maze$+"042242222242222222242222242242240"
  maze$=maze$+"042242222242222222242222244442240"
  maze$=maze$+"042244442244444442244442242222240"
  maze$=maze$+"042222242222222242242222242222240"
  maze$=maze$+"042222242222222242242222222242240"
  maze$=maze$+"044444442244442242242242222242240"
  maze$=maze$+"042242222222242242242242242242240"
  maze$=maze$+"042242222222242242242242242242240"
  maze$=maze$+"042244444442242242244442244444440"
  maze$=maze$+"042222222242242242222242222222240"
  maze$=maze$+"042222222242242242222242222222240"
  maze$=maze$+"044442242244442244442244442242240"
  maze$=maze$+"042222242222222222242222242242240"
  maze$=maze$+"042222242222222222242222242242240"
  maze$=maze$+"042244442244444444442244442244440"
  maze$=maze$+"042242222242222242222242222222240"
  maze$=maze$+"042242222242222242222242222222240"
  maze$=maze$+"042242244442242242244442244442240"
  maze$=maze$+"042242242222242222242242242222240"
  maze$=maze$+"042242242222242222242242242222240"
  maze$=maze$+"042242242242244444442242244444440"
  maze$=maze$+"042242222242222222222242222222221"
  maze$=maze$+"042242222242222222222242222222221"
  maze$=maze$+"044444444444444444444444444444440"
  FOR by%=0 TO 30
    FOR bx%=0 TO 32
      level%=-(ASC(MID$(maze$,by%*33+bx%+1,1))-48)
      IF rez%>0 THEN
        level%=level%*2
      ENDIF
      IF level%<>0 THEN
        x1%=-level%+bx%*(6-(6*(rez%>0)))+93-(93*(rez%>0))
        x2%=x1%+5-(6*(rez%>0))
        y1%=by%*(6-(6*(rez%=2)))+10-(10*(rez%=2))
        y2%=y1%+5-(6*(rez%=2))
        @frame
      ENDIF
      IF INP?(2)=-1 THEN
        IF INP(2)=27 THEN
          bx%=33
          by%=31
          flag%=1
        ENDIF
      ENDIF
    NEXT bx%
  NEXT by%
RETURN
'
> PROCEDURE demo7
  siz%=5-(5*(rez%=2))
  level%=-2
  by%=(siz%*3)
  DO
    siz%=siz%+2
    os%=by%/3
    x1%=xstp%*2.5+(os%*(rez%=1))-os%
    x2%=xstp%*3.5+os%-(os%*(rez%=1))
    y1%=by%
    y2%=by%+siz%-1
    @frame
    level%=level%-1+(rez%>0)
    IF INP?(2)=-1 THEN
      IF INP(2)=27 THEN
        by%=400
        flag%=1
      ENDIF
    ENDIF
    by%=by%+siz%
  LOOP UNTIL by%>tmaxy%
RETURN
'
> PROCEDURE demo8
  SELECT rez%
  CASE 0
    level%=-2
    wid1=0.25
    wid2=0.5
    ml%=4
    st%=2
  CASE 1
    level%=-4
    wid1=0.25
    wid2=0.75
    ml%=4
    st%=2
  CASE 2
    level%=-4
    wid1=0.25
    wid2=0.5
    ml%=2
    st%=4
  ENDSELECT
  FOR yy%=0 TO tmaxy%-miny% STEP st%
    y1%=yy%+miny%
    y2%=y1%+(st%-1)
    xx%=ABS(SINQ(yy%*ml%)*(xstp%*wid1))
    x1%=xstp%*3-(xx%+(yy%*wid2))
    x2%=xstp%*3+xx%+(yy%*wid2)
    @frame
    IF INP?(2)=-1 THEN
      IF INP(2)=27 THEN
        yy%=tmaxy%+1
        flag%=1
      ENDIF
    ENDIF
  NEXT yy%
RETURN
'
> PROCEDURE demo9
  SELECT rez%
  CASE 0
    lst%=90
    mal%=2
  CASE 1
    lst%=180
    mal%=1
  CASE 2
    lst%=180
    mal%=1
  ENDSELECT
  '
  level%=-1
  radius%=xstp%*0.125
  cx%=crx%+xstp%*0.15
  cy%=cry%-ystp%*0.4
  @disc
  cx%=crx%+xstp%*0.85
  @disc
  '
  FOR rad%=0 TO lst%-1
    x1%=rad%+crx%+(xstp%*0.5)-(lst%/2)
    x2%=x1%
    y1%=COSQ((rad%-(lst%/2))*mal%)*(ystp%*0.6)+cry%
    y2%=y1%+7-(8*(rez%=2))
    @frame
  NEXT rad%
  '
  level%=-2+(2*(rez%>0))
  radius%=xstp%*0.88
  cx%=crx%+xstp%*0.5
  cy%=cry%
  @disc
RETURN
'
> PROCEDURE demo10
  dmaxx%=tmaxx%+1
  dmaxy%=tmaxy%+1
  z%=xstp%
  '
  FOR y%=(dmaxy%*(1/4))-1 TO 0 STEP -1
    GET 0,y%,z%-1,y%+1,copy$
    GET 0,dmaxy%-y%,z%-1,dmaxy%+1-y%,copy2$
    FOR x%=0 TO dmaxx%/z%
      PUT x%*z%,y%,copy$
      PUT x%*z%,dmaxy%-y%,copy2$
    NEXT x%
    IF z%>1 THEN
      DEC z%
    ENDIF
    IF INP?(2)=-1 THEN
      IF INP(2)=27 THEN
        y%=0
        flag%=1
      ENDIF
    ENDIF
  NEXT y%
RETURN
'
> PROCEDURE demo_end
  IF flag%=0 THEN
    ~XBIOS(5,L:screen_loc%,L:-1,-1)
    dots%=0
    SETMOUSE crx%,cry%
    @ding
    ALERT 0,"PUT ALIGNMENT DOTS ON|  THIS STIS IMAGE ?",1," YES | NO ",dots%
    DO
    LOOP WHILE MOUSEK<>0
    ~XBIOS(5,L:screen%,L:-1,-1)
    IF dots%=1 THEN
      @dots
    ENDIF
    IF demo%<>10 THEN
      PUT 0,0,pat$
    ENDIF
    SGET stis_screen$
    blank%=0
    win$(stis_window%)=" STIS DEMO IMAGE #"+STR$(demo%)+" (I) "+CHR$(0)+CHR$(0)
    @tit
  ELSE
    screen_save%=oss%
    stis_ready%=osr%
  ENDIF
  ~XBIOS(5,L:screen_loc%,L:-1,-1)
  PUT crx%-l2%,cry%-l3%,fix_box$
  demo%=-1
  win%=stis_window%
  toped%=stis_window%
  @title
  @view
RETURN
'
> PROCEDURE dots
  y%=(-(rez%=2)*4)+5
  IF place%=2 THEN
    y%=tmaxy%+((rez%=2)*8)-5
  ENDIF
  IF demo%=10 THEN
    y%=tmaxy%*0.3
  ENDIF
  DEFFILL 0,0,0
  PCIRCLE xstp%*2,y%,-4*(rez%>0)+5
  PCIRCLE xstp%*3,y%,-4*(rez%>0)+5
  DEFFILL 1,2,8
  PCIRCLE xstp%*2,y%,-4*(rez%>0)+4
  PCIRCLE xstp%*3,y%,-4*(rez%>0)+4
  DEFFILL 1,0,0
  PCIRCLE xstp%*2+1,y%,-2*(rez%>0)+4
  PCIRCLE xstp%*3-1,y%,-2*(rez%>0)+4
RETURN
'
> PROCEDURE frame
  bin%=ABS((x1%>x2%)+2*(x1%<x2%)+4*(y1%>y2%)+8*(y1%<y2%))
  SELECT bin%
  CASE 5
    SWAP x1%,x2%
    SWAP y1%,y2%
  CASE 6
    SWAP y1%,y2%
  CASE 9
    SWAP x1%,x2%
  ENDSELECT
  IF x2%>tmaxx%-1 THEN
    x2%=tmaxx%-1
  ENDIF
  IF y1%<0 THEN
    y1%=0
  ENDIF
  IF y2%>tmaxy%-1 THEN
    y2%=tmaxy%-1
  ENDIF
  '
  FOR x%=x1% TO x2%
    FOR loop%=x% TO tmaxx%+xstp% STEP xstp%
      '
      tloop%=loop%+(fmaxx%*(loop%>=fmaxx%))
      GET tloop%,y1%,tloop%,y2%,copy$
      IF loop%+level%<fmaxx% THEN
        PUT loop%+level%,y1%,copy$
      ELSE
        PUT tloop%+level%,y1%,copy$
      ENDIF
    NEXT loop%
    '
  NEXT x%
RETURN
'
> PROCEDURE disc
  tox%=-1
  IF whole%=0 THEN
    dstart%=270
    dend%=449
  ENDIF
  skip%=-1
  FOR deg%=dstart% TO dend%
    x%=SINQ(deg%)*radius%+cx%
    y1%=(COSQ(deg%+180)*(radius%/(1-(rez%=1))))+cy%
    y2%=(COSQ(deg%)*(radius%/(1-(rez%=1))))+cy%
    IF y1%<1 THEN
      y1%=1
    ENDIF
    IF y2%>tmaxy% THEN
      y2%=tmaxy%
    ENDIF
    IF tox%<>x% THEN
      IF tox%<>x%+skip% THEN
        FOR z%=x%+skip% TO tmaxx%-1 STEP xstp%
          IF z%<tmaxx% THEN
            tloop%=z%+(fmaxx%*(z%>=fmaxx%))
            GET tloop%,y1%,tloop%,y2%,copy$
            IF z%+level%<fmaxx% THEN
              PUT z%+level%,y1%,copy$
            ELSE
              PUT tloop%+level%,y1%,copy$
            ENDIF
          ENDIF
        NEXT z%
      ENDIF
      FOR z%=x% TO tmaxx%+xstp% STEP xstp%
        tloop%=z%+(fmaxx%*(z%>=fmaxx%))
        GET tloop%,y1%,tloop%,y2%,copy$
        IF z%+level%<fmaxx% THEN
          PUT z%+level%,y1%,copy$
        ELSE
          PUT tloop%+level%,y1%,copy$
        ENDIF
      NEXT z%
    ENDIF
    tox%=x%
  NEXT deg%
RETURN
'
' DROPDOWN MENU DATA
DATA  DESK,  STIS VERSION 1.0,--------------------,1,2,3,4,5,6,""
DATA FILE, LOAD PICTURE      (L), SAVE STIS IMAGE   (S), CREATE STIS IMAGE (C)
DATA  PRINT STIS IMAGE  (P),-----------------------, QUIT              (Q),""
DATA VIEW 0, FULL SCREEN VIEW (W), TOP DEGAS PIC    (D) , TOP STIS IMAGE   (I)
DATA  MAKE NEW BLANK   (N),----------------------
DATA  DEMO        (F1-F10), RESTORE COLORS   (R), PLANE PLUS       (+)
DATA  PLANE MINUS      (-),"","",""
' COLOR FIX DATA
DATA 0,15,1,2,4,6,3,5,7,8,9,10,12,14,11,13
DATA 0,3,1,2,0,1
'
' BUILD DEGAS
DATA 7,119,7,0,0,112,7,112,0,7,7,7,0,119,5,95
DATA 3,51,7,51,3,115,7,115,3,55,7,55,3,119,0,0
DATA 7,119,7,0,0,112,0,0
DATA 7,119,0,0
