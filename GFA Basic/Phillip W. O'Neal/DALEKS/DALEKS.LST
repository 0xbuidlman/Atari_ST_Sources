$m200000
' DALEKS ½1994 BY PHILLIP O'NEAL
' RESERVE 4000000
@prg_setup
'
DO
  @check
LOOP
'
> PROCEDURE check
  '
  c_type&=EVNT_MULTI(&X10011,0,0,3,0,0,0,0,0,0,0,0,0,0,buffer%,0,mx&,my&,button&,key_state&,key&,clicks&)
  @check_event
  '
RETURN
'
> PROCEDURE prg_setup
  '
  my_handle&=V~H
  ap_id&=APPL_INIT()
  '
  screen_colors%=WORK_OUT(13)
  '
  CONTRL(0)=102  ! 'VQ_EXTND' - GET EXTRA INFO ABOUT WORKSTATION
  CONTRL(1)=0
  CONTRL(3)=1
  CONTRL(6)=my_handle&
  INTIN(0)=1
  VDISYS
  screen_bits%=INTOUT(4)  ! GET # OF SCREEN PLANES
  '
  @check_for_mint
  '
  DIM buffer&(15)
  buffer%=VARPTR(buffer&(0))
  '
  DIM my_buffer&(15)
  my_buffer%=VARPTR(my_buffer&(0))
  '
  current_drive%=GEMDOS(25)
  view_path$=DIR$(current_drive%+1)+"\"
  '
  dummy$="xxxxxxxxxxxxxxxxxxxxxxxx"
  my_rsc$=view_path$+"DALEKS.RSC"
  '
  @rsc_setup
  '
  window_buffer%=GEMDOS(72,L:256)
  window_title%=window_buffer%
  window_info%=window_buffer%+128
  '
  IF mint%=1 THEN
    ~MENU_REGISTER(ap_id&,"  Daleks")
  ELSE
    ~MENU_BAR(menu%,1)
  ENDIF
  '
  flag%=WIND_GET(0,4,mwx%,mwy%,mww%,mwh%)
  win%=-1
  diff%=2
  play_field%=12+diff%*4
  @set_window
  '
  max_level%=99
  hi_score%=0
  hi_level%=0
  '
  DIM grid(99,99)
  DIM dalek(max_level%*5+2,2),piles(max_level%*5+2,1)
  DIM pile2%(max_level%*5+2,1)
  DIM robot(1,99)
  '
  DIM source_mfdb%(8),destination_mfdb%(8),parameters%(8)
  '
  FOR zero%=4 TO 8
    source_mfdb%(zero%)=0
    destination_mfdb%(zero%)=0
  NEXT zero%
  '
  source_mfdb%(5)=screen_bits%
  destination_mfdb%(5)=screen_bits%
  parameters%(8)=3 ! REPLACE MODE
  '
  level%=1
  score%=0
  '
  win_stat%=1
  win%=WIND_CREATE(&X11111,mwx%,mwy%,mww%,mwh%)
  title$="Daleks"
  @title
  flag%=WIND_OPEN(win%,wx%,wy%,ww%,wh%)
  flag%=WIND_GET(win%,4,iwx%,iwy%,iww%,iwh%)
  OB_X(icons%,0)=iwx%
  OB_Y(icons%,0)=iwy%
  OB_W(icons%,0)=iww%
  '
  DEFFILL 0,2,8
  DEFTEXT ,,,6
  DEFMOUSE 0
  '
  rate%=XBIOS(35,-1,-1)
  key_rate%=rate% AND &HFF
  key_delay%=SHR(rate% AND &HFF00,8)
  ~XBIOS(35,20,4)
  '
  @sprite_make
  @sprite_set
  @grid_setup
  '
RETURN
'
> PROCEDURE check_event
  '
  IF c_type& AND &X1 THEN        ! KEY PRESS EVENT
    @event_keypress
    '
  ENDIF
  '
  IF c_type& AND &X10 THEN        ! BUTTON EVENT
    @event_button
    '
  ENDIF
  '
  IF c_type& AND &X10000 THEN ! MENU/WINDOW EVENT
    command%=buffer&(0) ! KIND OF EVENT
    '
    IF command%=10 THEN ! MENU ITEM
      @event_menu
      '
    ELSE !                         WINDOW EVENT
      @event_window
      '
    ENDIF
    '
  ENDIF
  '
RETURN
'
> PROCEDURE event_keypress
  '
  code&=SHR(key& AND &HFF00,8)
  ' UPPER BYTE OF WORD CONTAINS SCAN CODE
  '
  SELECT code&
    '
  CASE 103 TO 111 ! 'M'OVE
    IF win_stat%=1 THEN
      @move
    ENDIF
    '
  CASE 49         ! 'N'EW
    IF win_stat%=1 THEN
      @new
    ENDIF
    '
  CASE 20,102     ! 'T'ELEPORT
    IF win_stat%=1 THEN
      @teleport
    ENDIF
    '
  CASE 44,99     ! 'Z'AP
    IF win_stat%=1 THEN
      IF sonic%>0
        DEC sonic%
        @sonic
      ENDIF
    ENDIF
    '
  CASE 38,114     ! 'L'AST STAND
    IF win_stat%=1 THEN
      @last_stand
    ENDIF
    '
  CASE 32,113     ! 'D'IFFICULTY
    IF win_stat%=1 THEN
      @diff
    ENDIF
  CASE 16         ! 'Q'UIT
    @trying_to_quit
    '
  ENDSELECT
  '
RETURN
'
> PROCEDURE event_menu
  '
  tit%=buffer&(3)   ! WHICH MENU TITLE ?
  ~MENU_TNORMAL(menu%,tit%,1)  ! MAKE MENU TITLE NORMAL AGAIN
  item%=buffer&(4)  ! WHICH MENU ITEM WAS SELECTED
  '
  SELECT item%
    @credits
    '
  CASE m_about%
    '
  ENDSELECT
  '
RETURN
'
> PROCEDURE event_window
  '
  top%=buffer&(3)  ! HANDLE OF WINDOW THAT TRIGGERED EVENT
  '
  SELECT command%
    '
  CASE 20     ! WIND UPDATE
    @repair
    '
  CASE 21     ! WINDOW CLICKED ON
    flag%=WIND_SET(win%,10,0,0,0,0) ! WINDOW SET TO TOP
    DEFMOUSE 0
    '
  CASE 22 ! CLOSE WINDOW
    @trying_to_quit
    '
  CASE 23 ! FULL WINDOW
    IF win_stat%=1 THEN
      win_stat%=0
      swx%=wx%
      swy%=wy%
      flag%=WIND_SET(win%,5,swx%,swy%,sww%,swh%)
      flag%=WIND_GET(win%,4,siwx%,siwy%,siww%,siwh%)
      stat$=""
      @info_line
      my_buffer&(0)=20
      my_buffer&(3)=win%
      my_buffer&(4)=siwx%
      my_buffer&(5)=siwy%
      my_buffer&(6)=siww%
      my_buffer&(7)=siwh%
      ~APPL_WRITE(ap_id&,16,my_buffer%)
    ELSE
      win_stat%=1
      flag%=WIND_SET(win%,5,wx%,wy%,ww%,wh%)
      @update_display
      @stats
    ENDIF
    '
  CASE 28 ! WINDOW  MOVED
    IF win_stat%=1 THEN
      wx%=buffer&(4)
      wy%=buffer&(5)
      flag%=WIND_SET(win%,5,wx%,wy%,ww%,wh%)
      flag%=WIND_GET(win%,4,iwx%,iwy%,iww%,iwh%)
      OB_X(icons%,0)=iwx%
      OB_Y(icons%,0)=iwy%
    ELSE
      swx%=buffer&(4)
      swy%=buffer&(5)
      flag%=WIND_SET(win%,5,swx%,swy%,sww%,swh%)
      flag%=WIND_GET(win%,4,siwx%,siwy%,siww%,siwh%)
    ENDIF
    '
  ENDSELECT
  '
RETURN
'
> PROCEDURE event_button
  '
  clicked_on%=WIND_FIND(mx&,my&)
  IF win%=clicked_on% THEN
    IF mx&>=iwx% AND my&>=iwy% AND button&>0 THEN
      IF win_stat%=1 THEN
        IF button&=1 THEN
          @mouse_move
        ENDIF
        IF button&=2 THEN
          @teleport
        ENDIF
      ENDIF
    ENDIF
  ENDIF
RETURN
'
> PROCEDURE rsc_setup
  '
  IF EXIST(my_rsc$) THEN
    rsc%=RSRC_LOAD(my_rsc$)
    @rsc_do
    '
  ELSE ! CAN'T FIND RSC FILE
    txt$=" |Daleks could not find it's RSC file. | "
    ALERT 0,txt$,1," OK ",button%
    '
  ENDIF
  '
RETURN
'
> PROCEDURE rsc_do
  '
  ~RSRC_GADDR(0,0,menu%)
  ~RSRC_GADDR(0,1,icons%)
  ~FORM_CENTER(icons%,icons_x%,icons_y%,icons_w%,icons_h%)
  '
  m_about%=6
  '
  b_new%=1
  b_diff%=2
  b_quit%=3
  b_teleport%=4
  b_sonic%=5
  b_last_stand%=6
  '
  icon_height%=OB_H(icons%,0)+2
  '
RETURN
'
> PROCEDURE check_for_mint
  '
  INLINE cook%,6
  CHAR{cook%}="    "+CHR$(0)+CHR$(0)
  jar%=LPEEK(1440)
  mint%=0
  IF jar% THEN
    DO
      IF LPEEK(jar%) THEN
        LPOKE cook%,LPEEK(jar%)
        cookie$=CHAR{cook%}
        jar%=jar%+8
        IF cookie$="MiNT" OR cookie$="MagX" THEN
          mint%=1
          jar%=0
        ENDIF
      ELSE
        jar%=0
      ENDIF
    LOOP UNTIL jar%=0
  ENDIF
  '
RETURN
'
> PROCEDURE credits
  txt$=" |DELEKS c1996 By Phillip O'Neal.  | "
  but$="OK"
  ALERT 0,txt$,1,but$,button%
  '
RETURN
'
> PROCEDURE diff
  INC diff%
  IF diff%=7 THEN
    diff%=0
  ENDIF
  play_field%=12+diff%*4
  @set_window
  @sprite_make
  @sprite_set
  @new
RETURN
'
> PROCEDURE set_window
  ~WIND_CALC(1,&X11111,mwx%,mwy%,mww%,mwh%,iwx%,iwy%,iww%,iwh%)
  '
  sprite_width%=INT(INT(iww%/play_field%)/16)*16
  IF sprite_width%<16 THEN
    sprite_width%=16
  ENDIF
  sprite_height%=INT((iwh%-icon_height%)/play_field%)
  '
  width%=play_field%
  height%=play_field%
  '
  iww%=width%*sprite_width%
  iwh%=height%*sprite_height%+icon_height%
  '
  ~WIND_CALC(0,&X11111,iwx%,iwy%,iww%,iwh%,wx%,wy%,ww%,wh%)
  ~WIND_CALC(0,&X11111,iwx%,iwy%,MAX(sprite_width%,96),MAX(sprite_height%,64),swx%,swy%,sww%,swh%)
  '
  IF sprite1%>0 THEN
    d%=GEMDOS(73,L:sprite1%)
  ENDIF
  IF sprite2%>0 THEN
    d%=GEMDOS(73,L:sprite2%)
  ENDIF
  IF sprite3%>0 THEN
    d%=GEMDOS(73,L:sprite3%)
  ENDIF
  sprite1%=GEMDOS(72,L:screen_bits%*sprite_width%*sprite_height%/8)
  sprite2%=GEMDOS(72,L:screen_bits%*sprite_width%*sprite_height%/8)
  sprite3%=GEMDOS(72,L:screen_bits%*sprite_width%*sprite_height%/8)
  '
  IF win%>0 THEN
    flag%=WIND_SET(win%,5,wx%,wy%,ww%,wh%)
    flag%=WIND_GET(win%,4,iwx%,iwy%,iww%,iwh%)
    OB_X(icons%,0)=iwx%
    OB_Y(icons%,0)=iwy%
    OB_W(icons%,0)=iww%
  ENDIF
  '
RETURN
'
> PROCEDURE title
  window_title$=title$
  CHAR{window_title%}=window_title$
  flag%=WIND_SET(win%,2,CARD(SWAP(window_title%)),CARD(window_title%),0,0)
RETURN
'
> PROCEDURE info_line
  window_info$=stat$
  CHAR{window_info%}=window_info$
  flag%=WIND_SET(win%,3,CARD(SWAP(window_info%)),CARD(window_info%),0,0)
RETURN
'
> PROCEDURE repair
  '
  er%=WIND_UPDATE(1)
  er%=WIND_UPDATE(3)
  er%=WIND_GET(win%,11,fx%,fy%,fx2%,fy2%) ! GET FIRST RECTANGLE
  fix_wx%=buffer&(4)
  fix_wy%=buffer&(5)
  fix_ww%=buffer&(6)
  fix_wh%=buffer&(7)
  fix_flag%=RC_INTERSECT(fix_wx%,fix_wy%,fix_ww%,fix_wh%,fx%,fy%,fx2%,fy2%)
  IF fix_flag% THEN
    @display
  ENDIF
  fix_done%=0
  '
  DO
    er%=WIND_GET(win%,12,fx%,fy%,fx2%,fy2%)      ! GET NEXT RECTANGLE
    '
    IF fx2%+fy2%=0 THEN                          ! ANY MORE RECTANGLES ?
      fix_done%=1
    ELSE
      fix_wx%=buffer&(4)
      fix_wy%=buffer&(5)
      fix_ww%=buffer&(6)
      fix_wh%=buffer&(7)
      fix_flag%=RC_INTERSECT(fix_wx%,fix_wy%,fix_ww%,fix_wh%,fx%,fy%,fx2%,fy2%)
      IF fix_flag% THEN
        @display
      ENDIF
    ENDIF
    '
  LOOP UNTIL fix_done%=1
  '
  er%=WIND_UPDATE(2)
  er%=WIND_UPDATE(0)
  CLIP iwx%,iwy%,iww%,iwh%
  '
RETURN
'
> PROCEDURE display
  '
  CLIP fx%,fy%,fx2%,fy2%
  PBOX fx%,fy%,fx%+fx2%-1,fy%+fy2%-1
  IF win_stat%=1 THEN
    ~OBJC_DRAW(icons%,0,2,fx%,fy%,fx2%,fy2%)
    '
    @stats
    '
    FOR sprite%=0 TO daleks%-1
      IF dalek(sprite%,0) THEN
        x%=iwx%+dalek(sprite%,1)*sprite_width%
        y%=iwy%+icon_height%+dalek(sprite%,2)*sprite_height%
        source_mfdb%(0)=sprite2%
        @sprite_draw
      ENDIF
    NEXT sprite%
    '
    x%=iwx%+man_x%*sprite_width%
    y%=iwy%+icon_height%+man_y%*sprite_height%
    source_mfdb%(0)=sprite1%
    @sprite_draw
    '
    IF piles% THEN
      FOR sprite%=1 TO piles%
        x%=iwx%+piles(sprite%,0)*sprite_width%
        y%=iwy%+icon_height%+piles(sprite%,1)*sprite_height%
        source_mfdb%(0)=sprite3%
        @sprite_draw
      NEXT sprite%
    ENDIF
  ELSE
    x%=siwx%+MAX(0,(siww%-sprite_width%)/2)
    y%=siwy%+MAX(0,(siwh%-sprite_height%)/2)
    source_mfdb%(0)=sprite2%
    @sprite_draw
  ENDIF
  '
RETURN
'
> PROCEDURE update_display
  '
  my_buffer&(0)=20
  my_buffer&(3)=win%
  my_buffer&(4)=iwx%
  my_buffer&(5)=iwy%
  my_buffer&(6)=iww%
  my_buffer&(7)=iwh%
  ~APPL_WRITE(ap_id&,16,my_buffer%)
  '
RETURN
'
> PROCEDURE mouse_move
  '
  IF my&-iwy%<=icon_height% THEN
    button%=OBJC_FIND(icons%,0,2,mx&,my&)
    SELECT button%
    CASE b_new%
      @new
    CASE b_teleport%
      @teleport
    CASE b_sonic%
      IF sonic%>0
        DEC sonic%
        @sonic
      ENDIF
    CASE b_last_stand%
      @last_stand
    CASE b_diff%
      @diff
    CASE b_quit%
      @trying_to_quit
    DEFAULT
      @credits
    ENDSELECT
  ELSE
    x%=INT((mx&-iwx%)/sprite_width%)
    y%=INT((my&-(iwy%+icon_height%))/sprite_height%)
    code&=0
    '
    IF x%<man_x% AND y%<man_y% THEN
      code&=103
    ENDIF
    '
    IF x%=man_x% AND y%<man_y% THEN
      code&=104
    ENDIF
    '
    IF x%>man_x% AND y%<man_y% THEN
      code&=105
    ENDIF
    '
    IF x%<man_x% AND y%=man_y% THEN
      code&=106
    ENDIF
    '
    IF x%=man_x% AND y%=man_y% THEN
      code&=107
    ENDIF
    '
    IF x%>man_x% AND y%=man_y% THEN
      code&=108
    ENDIF
    '
    IF x%<man_x% AND y%>man_y% THEN
      code&=109
    ENDIF
    '
    IF x%=man_x% AND y%>man_y% THEN
      code&=110
    ENDIF
    '
    IF x%>man_x% AND y%>man_y% THEN
      code&=111
    ENDIF
    '
    IF code& THEN
      @move
    ENDIF
    '
  ENDIF
  t%=TIMER
  DO
  LOOP UNTIL MOUSEK=0 OR TIMER>t%+20
  '
RETURN
'
> PROCEDURE move
  '
  SELECT code&
  CASE 103 ! 7
    IF man_x%>0 AND man_y%>0 THEN
      @erace_man
      DEC man_x%
      DEC man_y%
      @make_move
    ENDIF
    '
  CASE 104 ! 8
    IF man_y%>0 THEN
      @erace_man
      DEC man_y%
      @make_move
    ENDIF
    '
  CASE 105 ! 9
    IF man_x%<width%-1 AND man_y%>0 THEN
      @erace_man
      INC man_x%
      DEC man_y%
      @make_move
    ENDIF
    '
  CASE 106 ! 4
    IF man_x%>0 THEN
      @erace_man
      DEC man_x%
      @make_move
    ENDIF
    '
  CASE 107 ! 5
    @daleks_move
    '
  CASE 108 ! 6
    IF man_x%<width%-1 THEN
      @erace_man
      INC man_x%
      @make_move
    ENDIF
    '
  CASE 109 ! 1
    IF man_x%>0 AND man_y%<height%-1 THEN
      @erace_man
      DEC man_x%
      INC man_y%
      @make_move
    ENDIF
    '
  CASE 110 ! 2
    IF man_y%<height%-1 THEN
      @erace_man
      INC man_y%
      @make_move
    ENDIF
    '
  CASE 111 ! 3
    IF man_x%<width%-1 AND man_y%<height%-1 THEN
      @erace_man
      INC man_x%
      INC man_y%
      @make_move
    ENDIF
    '
  ENDSELECT
  '
RETURN
'
> PROCEDURE erace_man
  '
  grid(man_x%,man_y%)=0
  x%=iwx%+man_x%*sprite_width%
  y%=iwy%+icon_height%+man_y%*sprite_height%
  PBOX x%,y%,x%+sprite_width%-1,y%+sprite_height%-1
  '
RETURN
'
> PROCEDURE make_move
  '
  IF grid(man_x%,man_y%)=0 THEN
    grid(man_x%,man_y%)=1
    x%=iwx%+man_x%*sprite_width%
    y%=iwy%+icon_height%+man_y%*sprite_height%
    source_mfdb%(0)=sprite1%
    @sprite_draw
    @daleks_move
    '
  ELSE
    x%=iwx%+man_x%*sprite_width%
    y%=iwy%+icon_height%+man_y%*sprite_height%
    source_mfdb%(0)=sprite3%
    @sprite_draw
    @game_over
    @new
    '
  ENDIF
  '
RETURN
'
> PROCEDURE teleport
  '
  @erace_man
  grid(man_x%,man_y%)=0
  ok%=0
  DO
    x%=RND(0)*width%
    y%=RND(0)*height%
    IF grid(x%,y%)=0 THEN
      man_x%=x%
      man_y%=y%
      ok%=1
    ENDIF
  LOOP UNTIL ok%
  @make_move
  PAUSE 5
  '
RETURN
'
> PROCEDURE sonic
  '
  IF man_x%>0 AND man_y%>0 THEN
    sonic_x%=-1
    sonic_y%=-1
    @do_sonic
  ENDIF
  '
  IF man_y%>0 THEN
    sonic_x%=0
    sonic_y%=-1
    @do_sonic
  ENDIF
  '
  IF man_x%<width% AND man_y%>0 THEN
    sonic_x%=1
    sonic_y%=-1
    @do_sonic
  ENDIF
  '
  IF man_x%>0 THEN
    sonic_x%=-1
    sonic_y%=0
    @do_sonic
  ENDIF
  '
  IF man_x%<width% THEN
    sonic_x%=1
    sonic_y%=0
    @do_sonic
  ENDIF
  '
  IF man_x%>0 AND man_y%<height% THEN
    sonic_x%=-1
    sonic_y%=1
    @do_sonic
  ENDIF
  '
  IF man_y%<height% THEN
    sonic_x%=0
    sonic_y%=1
    @do_sonic
  ENDIF
  '
  IF man_x%<width% AND man_y%<height% THEN
    sonic_x%=1
    sonic_y%=1
    @do_sonic
  ENDIF
  '
  @daleks_move
  '
RETURN
'
> PROCEDURE do_sonic
  '
  test%=grid(man_x%+sonic_x%,man_y%+sonic_y%)
  IF test%>2 THEN
    x%=iwx%+(man_x%+sonic_x%)*sprite_width%
    y%=iwy%+icon_height%+(man_y%+sonic_y%)*sprite_height%
    PBOX x%,y%,x%+sprite_width%-1,y%+sprite_height%-1
    grid(man_x%+sonic_x%,man_y%+sonic_y%)=0
    dalek(test%-3,0)=0
    DEC robots%
    INC score%
    @sound
  ENDIF
  '
RETURN
'
> PROCEDURE last_stand
  '
  last_stand%=0
  DO
    @daleks_move
  LOOP UNTIL last_stand%
  '
RETURN
'
> PROCEDURE daleks_move
  '
  FOR bot%=0 TO daleks%-1
    IF dalek(bot%,0)=1 THEN
      x%=iwx%+dalek(bot%,1)*sprite_width%
      y%=iwy%+icon_height%+dalek(bot%,2)*sprite_height%
      '
      IF man_x%>dalek(bot%,1) THEN
        go_x%=1
      ELSE
        IF man_x%<dalek(bot%,1) THEN
          go_x%=-1
        ELSE
          go_x%=0
        ENDIF
      ENDIF
      '
      IF man_y%>dalek(bot%,2) THEN
        go_y%=1
      ELSE
        IF man_y%<dalek(bot%,2) THEN
          go_y%=-1
        ELSE
          go_y%=0
        ENDIF
      ENDIF
      '
      tx%=dalek(bot%,1)
      ty%=dalek(bot%,2)
      '
      IF grid(tx%,ty%)=bot%+3
        grid(dalek(bot%,1),dalek(bot%,2))=0
        PBOX x%,y%,x%+sprite_width%-1,y%+sprite_height%-1
      ENDIF
      '
      dalek(bot%,1)=dalek(bot%,1)+go_x%
      dalek(bot%,2)=dalek(bot%,2)+go_y%
      '
      x%=iwx%+dalek(bot%,1)*sprite_width%
      y%=iwy%+icon_height%+dalek(bot%,2)*sprite_height%
      '
      test%=grid(dalek(bot%,1),dalek(bot%,2))
      '
      SELECT test%
      CASE 0
        grid(dalek(bot%,1),dalek(bot%,2))=bot%+3
        source_mfdb%(0)=sprite2%
        @sprite_draw
        '
      CASE 1
        @game_over
        bot%=daleks%
        '
      CASE 2
        dalek(bot%,0)=0
        DEC robots%
        INC score%
        @sound
        '
      DEFAULT
        '
        IF test%-3<bot% THEN
          INC piles%
          piles(piles%,0)=dalek(bot%,1)
          piles(piles%,1)=dalek(bot%,2)
          '
          grid(dalek(bot%,1),dalek(bot%,2))=2
          dalek(test%-3,0)=0
          DEC robots%
          INC score%
          '
          dalek(bot%,0)=0
          DEC robots%
          INC score%
          '
          source_mfdb%(0)=sprite3%
          @sprite_draw
          @sound
          '
        ELSE
          grid(dalek(bot%,1),dalek(bot%,2))=bot%+3
          '
        ENDIF
        '
      ENDSELECT
      '
    ENDIF
  NEXT bot%
  '
  IF robots%=0 THEN
    INC level%
    IF level%>max_level%
      level%=max_level%
    ENDIF
    @grid_setup
    last_stand%=1
  ENDIF
  '
  IF robots%<0 THEN
    @new
    last_stand%=1
  ENDIF
  '
  @stats
  '
RETURN
'
> PROCEDURE stats
  stat$="*:"+STR$(robots%)
  stat$=stat$+"  Zap:"+STR$(sonic%)
  stat$=stat$+"  L:"+STR$(level%)
  stat$=stat$+"  S:"+STR$(score%)
  stat$=stat$+"  Hi:"+STR$(hi_score%)
  stat$=stat$+"  "+STR$(width%)+"x"+STR$(height%)
  @info_line
RETURN
'
> PROCEDURE new
  '
  IF score%>hi_score% THEN
    hi_score%=score%
    hi_level%=level%
  ENDIF
  level%=1
  score%=0
  sonic%=0
  @grid_setup
  '
RETURN
'
> PROCEDURE sprite_make
  ' MAN
  CLIP iwx%,iwy%,iww%,iwh%
  DEFFILL 0
  PBOX iwx%,iwy%,iwx%+sprite_width%,iwy%+sprite_height%
  cx%=sprite_width%/2
  cy%=sprite_height%/2
  x1%=sprite_width%/3
  y1%=sprite_height%/3
  cx1%=sprite_width%/10
  cy1%=sprite_height%/10
  cx2%=sprite_width%/3
  cy2%=sprite_height%/3
  cx3%=sprite_width%/2.75
  cy3%=sprite_height%/2.75
  COLOR 6
  DEFFILL 6
  PELLIPSE iwx%+cx%,iwy%+cy%,cx%*0.95,cy%*0.95
  IF screen_colors%>15 THEN
    COLOR 1
    ELLIPSE iwx%+cx%,iwy%+cy%,cx%*0.95,cy%*0.95
    COLOR 4
    DEFFILL 4
  ELSE
    COLOR 0
    DEFFILL 0
  ENDIF
  PELLIPSE iwx%+x1%,iwy%+y1%,cx1%,cy1%
  PELLIPSE iwx%+cx%*2-x1%,iwy%+y1%,cx1%,cy1%
  IF screen_colors%>15 THEN
    COLOR 2
    DEFFILL 2
  ELSE
    COLOR 0
    DEFFILL 0
  ENDIF
  ELLIPSE iwx%+cx%,iwy%+cy%,cx2%,cy2%,1800,3600
  ELLIPSE iwx%+cx%,iwy%+cy%,cx3%,cy3%,1800,3600
  '
  destination_mfdb%(0)=sprite1%
  @sprite_store
  ' ROBOT
  DEFFILL 0
  PBOX iwx%,iwy%,iwx%+sprite_width%,iwy%+sprite_height%
  cx1%=sprite_width%/2
  cy1%=sprite_height%/2
  cx2%=sprite_width%/4
  cy2%=sprite_height%/4
  arc%=0
  SELECT diff%
  CASE 0
    tips%=18
    degrees%=20
  CASE 1,2
    tips%=12
    degrees%=30
  CASE 3,4
    tips%=8
    degrees%=45
  CASE 5,6
    tips%=4
    degrees%=90
  ENDSELECT
  FOR x%=0 TO 359 STEP degrees%
    robot(0,arc%)=SINQ(x%)*cx1%
    robot(1,arc%)=COSQ(x%)*cy1%
    INC arc%
    robot(0,arc%)=SINQ(x%)*cx2%
    robot(1,arc%)=COSQ(x%)*cy2%
    INC arc%
    robot(0,arc%)=SINQ(x%+(degrees%/2))*cx2%
    robot(1,arc%)=COSQ(x%+(degrees%/2))*cy2%
    INC arc%
  NEXT x%
  COLOR 1
  DEFFILL 1
  LINE iwx%+cx1%+robot(0,tips%*3-1),iwy%+cy1%+robot(1,tips%*3-1),iwx%+cx1%+robot(0,0),iwy%+cy1%+robot(1,0)
  LINE iwx%+cx1%+robot(0,tips%*3-1),iwy%+cy1%+robot(1,tips%*3-1),iwx%+cx1%,iwy%+cy1%
  LINE iwx%+cx1%+robot(0,2),iwy%+cy1%+robot(1,2),iwx%+cx1%+robot(0,0),iwy%+cy1%+robot(1,0)
  LINE iwx%+cx1%+robot(0,2),iwy%+cy1%+robot(1,2),iwx%+cx1%,iwy%+cy1%
  IF POINT(iwx%+cx1%+robot(0,1),iwy%+cy1%+robot(1,1))=0 THEN
    FILL iwx%+cx1%+robot(0,1),iwy%+cy1%+robot(1,1)
  ENDIF
  ribbon%=1
  FOR x%=0 TO tips%*3-6 STEP 3
    SELECT screen_colors%
    CASE 2
      IF ribbon%=1 THEN
        ribbon%=0
      ELSE
        ribbon%=1
      ENDIF
    CASE 4
      INC ribbon%
      IF ribbon%=3 THEN
        ribbon%=0
      ENDIF
    CASE 16
      INC ribbon%
      IF ribbon%=16 THEN
        ribbon%=0
      ENDIF
    CASE 256
      INC ribbon%
    ENDSELECT
    COLOR 1
    DEFFILL ribbon%
    LINE iwx%+cx1%+robot(0,x%+2),iwy%+cy1%+robot(1,x%+2),iwx%+cx1%+robot(0,x%+3),iwy%+cy1%+robot(1,x%+3)
    LINE iwx%+cx1%+robot(0,x%+2),iwy%+cy1%+robot(1,x%+2),iwx%+cx1%,iwy%+cy1%
    LINE iwx%+cx1%+robot(0,x%+5),iwy%+cy1%+robot(1,x%+5),iwx%+cx1%+robot(0,x%+3),iwy%+cy1%+robot(1,x%+3)
    LINE iwx%+cx1%+robot(0,x%+5),iwy%+cy1%+robot(1,x%+5),iwx%+cx1%,iwy%+cy1%
    IF POINT(iwx%+cx1%+robot(0,x%+4),iwy%+cy1%+robot(1,x%+4))=0 THEN
      FILL iwx%+cx1%+robot(0,x%+4),iwy%+cy1%+robot(1,x%+4)
    ENDIF
  NEXT x%
  '
  destination_mfdb%(0)=sprite2%
  @sprite_store
  ' PILEUP
  DEFFILL 0
  PBOX iwx%,iwy%,iwx%+sprite_width%,iwy%+sprite_height%
  COLOR 1
  DEFFILL 1
  cx%=sprite_width%/2
  cy%=sprite_height%/2
  PELLIPSE iwx%+cx%,iwy%+cy%,cx%,cy%
  PBOX iwx%,iwy%+cy%,iwx%+cx%*2,iwy%+cy%*2
  last%=sprite_width%*sprite_height%/8
  FOR dot%=0 TO last%
    x%=RND(0)*sprite_width%
    y%=RND(0)*sprite_height%
    IF POINT(iwx%+x%,iwy%+y%)=1 THEN
      IF screen_colors%>2 THEN
        COLOR RND(0)*screen_colors%
      ELSE
        COLOR 0
      ENDIF
      PLOT iwx%+x%,iwy%+y%
    ENDIF
  NEXT dot%
  '
  destination_mfdb%(0)=sprite3%
  @sprite_store
  DEFFILL 0
  PBOX iwx%,iwy%,iwx%+sprite_width%,iwy%+sprite_height%
  '
RETURN
'
> PROCEDURE sprite_store
  '
  source_mfdb%(0)=0
  '
  ' 0=SCREEN, FILLED IN BY COMMAND (NEEDS SAME INFO AS SOURCE)
  destination_mfdb%(1)=sprite_width%
  destination_mfdb%(2)=sprite_height%
  destination_mfdb%(3)=sprite_width%/16
  destination_mfdb%(5)=screen_bits%
  '
  ' CORNERS OF SOURCE/DEST.
  parameters%(0)=iwx%+1
  parameters%(1)=iwy%+1
  parameters%(2)=iwx%+sprite_width%
  parameters%(3)=iwy%+sprite_height%
  parameters%(4)=0
  parameters%(5)=0
  parameters%(6)=sprite_width%-1
  parameters%(7)=sprite_height%-1
  '
  BITBLT source_mfdb%(),destination_mfdb%(),parameters%()
  '
RETURN
'
> PROCEDURE grid_setup
  '
  MAT CLR grid()
  MAT CLR dalek()
  INC sonic%
  piles%=0
  '
  x%=RND(0)*width%
  y%=RND(0)*height%
  grid(x%,y%)=1
  man_x%=x%
  man_y%=y%
  grid(man_x%,man_y%)=1
  '
  daleks%=level%*5+2
  IF daleks%>=width%*height% THEN
    DEC level%
    daleks%=level%*5+2
  ENDIF
  robots%=daleks%
  '
  FOR set_pos%=0 TO daleks%-1
    ok%=0
    DO
      x%=RND(0)*width%
      y%=RND(0)*height%
      IF grid(x%,y%)=0 THEN
        dalek(set_pos%,0)=1
        dalek(set_pos%,1)=x%
        dalek(set_pos%,2)=y%
        grid(x%,y%)=set_pos%+3
        ok%=1
      ENDIF
    LOOP UNTIL ok%
  NEXT set_pos%
  @update_display
  '
RETURN
'
> PROCEDURE game_over
  '
  robots%=-1
  x%=iwx%+man_x%*sprite_width%
  y%=iwy%+icon_height%+man_y%*sprite_height%
  SOUND 0,15,80,2,6
  FOR toggle%=0 TO 9
    '
    source_mfdb%(0)=sprite1%
    @sprite_draw
    PAUSE 5
    '
    source_mfdb%(0)=sprite2%
    @sprite_draw
    PAUSE 5
    '
  NEXT toggle%
  source_mfdb%(0)=sprite3%
  @sprite_draw
  PAUSE 5
  '
  SOUND 0,0,0,0,0
  '
RETURN
'
> PROCEDURE trying_to_quit
  '
  txt$=" |SURE YOU WANT TO QUIT ?  "
  but$="OK| CANCEL "
  ALERT 0,txt$,1,but$,button%
  '
  IF button%=1 THEN
    flag%=WIND_CLOSE(win%)       ! CLOSE WINDOW
    flag%=WIND_DELETE(win%)      ! DELETE WINDOW
    IF mint%=0 THEN
      ~MENU_BAR(menu%,0)
    ENDIF
    ~RSRC_FREE()
    IF sprite1%>0 THEN
      d%=GEMDOS(73,L:sprite1%)
    ENDIF
    IF sprite2%>0 THEN
      d%=GEMDOS(73,L:sprite2%)
    ENDIF
    IF sprite3%>0 THEN
      d%=GEMDOS(73,L:sprite3%)
    ENDIF
    ~XBIOS(35,key_delay%,key_rate%)
    END
  ENDIF
  '
RETURN
'
> PROCEDURE sprite_draw
  '
  parameters%(4)=x%
  parameters%(5)=y%
  parameters%(6)=x%+sprite_width%-1
  parameters%(7)=y%+sprite_height%-1
  '
  BITBLT source_mfdb%(),destination_mfdb%(),parameters%()
  '
RETURN
'
> PROCEDURE sprite_set
  '
  source_mfdb%(1)=sprite_width%
  source_mfdb%(2)=sprite_height%
  source_mfdb%(3)=sprite_width%/16
  source_mfdb%(5)=screen_bits%
  '
  ' 0=SCREEN, FILLED IN BY COMMAND (NEEDS SAME INFO AS SOURCE)
  destination_mfdb%(0)=0
  '
  ' CORNERS OF SOURCE/DEST.
  parameters%(0)=0
  parameters%(1)=0
  parameters%(2)=sprite_width%-1
  parameters%(3)=sprite_height%-1
  '
RETURN
'
> PROCEDURE sound
  '
  FOR z%=15 TO 13 STEP -1
    SOUND 0,15,100,2,1
    SOUND 0,15,101,2,1
  NEXT z%
  SOUND 0,0,0,0,0
  '
RETURN
