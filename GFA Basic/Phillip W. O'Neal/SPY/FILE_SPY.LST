$m200000
' FILE SPY PRG ½1994 BY PHILLIP O'NEAL
' RESERVE 200000
DEFMOUSE 2
@init_variables
DEFMOUSE 0
'
DO
  @check
LOOP
'
> PROCEDURE check
  '
  c_type&=EVNT_MULTI(&X10011,2,1,1,0,0,0,0,0,0,0,0,0,0,buffer%,10,mx&,my&,b&,key_state&,key&,clicks&)
  @check_event
  '
RETURN
'
> PROCEDURE multi_check
  FOR multi_event%=0 TO 11
    c_type&=EVNT_MULTI(&X110000,2,1,1,0,0,0,0,0,0,0,0,0,0,buffer%,1)
    @check_repair_event
  NEXT multi_event%
  '
RETURN
'
> PROCEDURE init_variables
  old_dta%=FGETDTA()
  dta%=GEMDOS(72,L:1024)
  ~FSETDTA(dta%)
  '
  window_buffer%=GEMDOS(72,L:15360)
  IF window_buffer%<1 THEN
    ~FSETDTA(old_dta%)
    IF dta%>0 THEN
      d%=GEMDOS(73,L:dta%)  ! RELEASE MEMORY
    ENDIF
    txt$=" |Sorry, I can not continue,  |as I need more memory that  |is available.  "
    ALERT 0,txt$,1," OK ",d%
    END
    '
  ENDIF
  '
  my_handle&=V~H  ! GET VDI HANDLE OF PROGRAMS WORKSTATION
  dummy$="DUMMY.PRG"
  dummy$="2DUMMYR.PRG"
  @path_setup
  '
  @settings_load
  '
  CONTRL(0)=102   ! 'VQ_EXTND' - GET EXTRA INFO ABOUT WORKSTATION
  CONTRL(1)=0
  CONTRL(3)=1
  CONTRL(6)=my_handle&
  INTIN(0)=1
  VDISYS
  screen_bits%=INTOUT(4)  ! GET # OF SCREEN PLANES
  '
  DIM source_mfdb%(8),destination_mfdb%(8),parameters%(8)
  '
  FOR zero%=4 TO 8
    source_mfdb%(zero%)=0
    destination_mfdb%(zero%)=0
  NEXT zero%
  '
  source_mfdb%(5)=screen_bits%
  destination_mfdb%(5)=screen_bits%
  parameters%(8)=3 ! REPLACE MODE
  '
  max_window%=255
  prg_exit%=0
  current%=0
  find_flag%=0
  find_next%=0
  top_size%=16
  top_place%=0
  window_flag%=0
  last_used%=0
  menu_on%=0
  '
  DIM buffer&(15)
  buffer%=VARPTR(buffer&(0))
  '
  DIM my_buffer&(15)
  my_buffer%=VARPTR(my_buffer&(0))
  '
  DIM free_buffer%(3)
  free_buffer%=VARPTR(free_buffer%(0))
  '
  DIM alert$(7)
  DIM win%(max_window%)
  DIM wx%(max_window%),wy%(max_window%),ww%(max_window%),wh%(max_window%)
  DIM iwx%(max_window%),iwy%(max_window%),iww%(max_window%),iwh%(max_window%)
  DIM slider_size%(max_window%),slider_position%(max_window%)
  '
  DIM view%(max_window%),the_width%(max_window%),size%(max_window%)
  DIM max_row%(max_window%),max_window_line%(max_window%),max_char%(max_window%)
  DIM byte_buffer%(max_window%),sort%(max_window%),sort$(max_window%)
  '
  DIM search%(max_window%),found%(max_window%),view_name$(max_window%)
  DIM edit%(max_window%),font%(3,1),hex%(18)
  DIM change%(31),match%(31),type%(max_window%),type$(2)
  DIM font_size%(max_window%),font_width%(max_window%),font_height%(max_window%)
  '
  flag%=WIND_GET(0,4,mwx%,mwy%,mww%,mwh%)
  ~WIND_CALC(1,1,mwx%,mwy%,mww%,mwh%,d%,iwy%,d%,d%)
  window_step%=iwy%-mwy%
  ~WIND_CALC(1,&X111111111,mwx%,mwy%,mww%,mwh%,d%,d%,iww%,iwh%)
  '
  window_x_plus%=mww%-iww%
  window_y_plus%=mwh%-iwh%
  '
  min_width%=64
  min_height%=97
  '
  type$(0)="ASCII"
  type$(1)="HEX"
  type$(2)="Graphic"
  '
  FOR x%=0 TO max_window%
    byte_buffer%(x%)=-1
    win%(x%)=-1
    found%(x%)=-1
  NEXT x%
  '
  font%(0,0)=6
  font%(0,1)=6
  font%(1,0)=8
  font%(1,1)=8
  font%(2,0)=8
  font%(2,1)=16
  font%(3,0)=16
  font%(3,1)=32
  '
  @check_for_mint
  '
  win_txt%=24
  info_txt%=36
  window_title%=window_buffer%
  window_info%=window_buffer%+win_txt%*256
  '
  @rsc_do
  @center_all
  @option_set_all
  @option_check_all
  @window_set_all
  @print_set_all
  @print_check_all
  @set_menu
  ~MENU_BAR(menu%,1)
  DEFFILL 0,2,8
  DEFMOUSE 0
  '
  IF tail$<>""
    test%=RINSTR(tail$,"\")
    IF test%
      view_name$=tail$
    ELSE
      view_name$=current_path$+tail$
    ENDIF
    @load
    '
  ENDIF
  '
RETURN
'
> PROCEDURE check_event
  '
  IF c_type& AND &X10000 THEN ! MENU/WINDOW EVENT
    command%=buffer&(0) ! KIND OF EVENT
    '
    IF command%=10 THEN ! MENU ITEM
      @event_menu
      '
    ELSE !                         WINDOW EVENT
      @event_window
      '
    ENDIF
    '
  ENDIF
  '
  IF c_type& AND &X1 THEN        ! KEY PRESS EVENT
    @event_keypress
    '
  ENDIF
  '
  IF c_type& AND &X10 THEN        ! BUTTON EVENT
    @event_button
    '
  ENDIF
  '
RETURN
'
> PROCEDURE check_repair_event
  '
  IF c_type& AND &X10000 THEN ! MENU/WINDOW EVENT
    command%=buffer&(0) ! KIND OF EVENT
    '
    IF command%=10 THEN ! MENU ITEM
      tit%=buffer&(3)   ! WHICH MENU TITLE ?
      ~MENU_TNORMAL(menu%,tit%,1)  ! MAKE MENU TITLE NORMAL AGAIN
      '
    ELSE !                         WINDOW EVENT
      top%=buffer&(3)  ! HANDLE OF WINDOW THAT TRIGGERED EVENT
      current%=0
      FOR x%=1 TO last_used%
        IF win%(x%)=top% THEN
          current%=x%
          x%=last_used%
        ENDIF
      NEXT x%
      '
      SELECT command%
        '
      CASE 20     ! WIND UPDATE
        @repair
      ENDSELECT
      '
    ENDIF
    '
  ENDIF
  '
RETURN
'
> PROCEDURE event_keypress
  '
  code&=SHR(key& AND &HFF00,8)
  ' UPPER BYTE OF WORD CONTAINS SCAN CODE
  '
  SELECT code&
    '
  CASE 2  ! '1' ASCII
    IF current%>0 THEN
      IF type%(current%)<>0 THEN
        type%(current%)=0
        SELECT text_size%
        CASE 0
          font_size%(current%)=4
        CASE 1
          font_size%(current%)=6
        CASE 2
          font_size%(current%)=13
        CASE 3
          font_size%(current%)=32
        ENDSELECT
        font_width%(current%)=font%(text_size%,0)
        font_height%(current%)=font%(text_size%,1)
        @size_slider
        @fix_slider
      ENDIF
    ENDIF
    '
  CASE 3  ! '2' HEX
    IF current%>0 THEN
      IF type%(current%)<>1 THEN
        type%(current%)=1
        SELECT text_size%
        CASE 0
          font_size%(current%)=4
        CASE 1
          font_size%(current%)=6
        CASE 2
          font_size%(current%)=13
        CASE 3
          font_size%(current%)=32
        ENDSELECT
        font_width%(current%)=font%(text_size%,0)
        font_height%(current%)=font%(text_size%,1)
        @size_slider
        @fix_slider
      ENDIF
    ENDIF
    '
  CASE 4  ! '3' GRAPHICS
    IF current%>0 THEN
      IF type%(current%)<>2 THEN
        type%(current%)=2
        SELECT text_size%
        CASE 0
          font_size%(current%)=4
        CASE 1
          font_size%(current%)=6
        CASE 2
          font_size%(current%)=13
        CASE 3
          font_size%(current%)=32
        ENDSELECT
        font_width%(current%)=font%(text_size%,0)
        font_height%(current%)=font%(text_size%,1)
        @size_slider
        @fix_slider
      ENDIF
    ENDIF
    '
  CASE 53 ! '?' WINDOW OPTIONS
    @which_window
    @window_options
    '
  CASE 24 ! 'O'PEN
    @hide_mouse
    FILESELECT #"Select file to view",view_path$+"*.*",view_name$,view_name$
    @show_mouse
    @load
    '
  CASE 50 ! 'M'ERGE
    @which_window
    IF current%>0 THEN
      @merge
    ENDIF
    '
  CASE 17 ! 'W' CLOSE
    @which_window
    IF current%>0 THEN
      @clear
    ENDIF
    '
  CASE 30 ! 'A' CLOSE ALL
    @which_window
    IF current%>0 THEN
      @close_all
    ENDIF
    '
  CASE 25 ! 'P'RINT
    @which_window
    @dump
    '
  CASE 16 ! 'Q'UIT
    @trying_to_quit
    '
  CASE 33 ! 'F'IND
    @which_window
    IF current%>0 THEN
      @find
    ENDIF
    '
  CASE 49 ! 'N'EXT
    @which_window
    IF current%>0 THEN
      @find_next
    ENDIF
    '
  CASE 34 ! 'G'OTO
    @which_window
    IF current%>0 THEN
      @goto
    ENDIF
    '
  CASE 46 ! 'C'OPY
    @which_window
    IF current%>0 THEN
      @copy
    ENDIF
    '
  CASE 32 ! 'D'ELETE
    @which_window
    IF current%>0 THEN
      @delete
    ENDIF
    '
  CASE 23 ! 'I'NSERT
    @which_window
    IF current%>0 THEN
      @insert
    ENDIF
    '
  CASE 48 ! 'B'IT CHANGE
    @which_window
    IF current%>0 THEN
      @change_bits
    ENDIF
    '
  CASE 12,74 ! '-' TOP WINDOW
    IF last_used% THEN
      @top_window
    ENDIF
    '
  CASE 13,78 ! '+' TILE WINDOW
    IF last_used% THEN
      @tile
    ENDIF
    '
  CASE 31 ! 'S'AVE
    @which_window
    IF current%>0 THEN
      @save
    ENDIF
    '
  CASE 45 ! 'X' OPTIONS
    @which_window
    @option
    '
  CASE 98 ! 'HELP'
    @help
    '
  CASE 72 ! UP
    @which_window
    IF view%(current%)>0 AND current%>0 THEN
      command%=24
      SELECT key_state&
      CASE 0 TO 2
        buffer&(4)=2
      CASE 4   ! CONTROL
        buffer&(4)=0
      ENDSELECT
      @event_slider
    ENDIF
    '
  CASE 80 ! DOWN
    @which_window
    IF view%(current%)<size%(current%) AND current%>0 THEN
      command%=24
      SELECT key_state&
      CASE 0 TO 2
        buffer&(4)=3
      CASE 4   ! CONTROL
        buffer&(4)=1
      ENDSELECT
      @event_slider
      '
    ENDIF
    '
  CASE 75 ! LEFT
    @which_window
    IF current%>0 THEN
      SELECT type%(current%)
      CASE 0 ! ASCII
        ww%(current%)=ww%(current%)-font_width%(current%)
        '
      CASE 1 ! HEX
        ww%(current%)=ww%(current%)-(font_width%(current%)*3)
        '
      CASE 2 ! GRAPHICS
        ww%(current%)=ww%(current%)-16
        '
      ENDSELECT
      IF ww%(current%)<min_width%+window_x_plus% THEN
        ww%(current%)=min_width%+window_x_plus%
      ENDIF
      flag%=WIND_SET(win%(current%),5,wx%(current%),wy%(current%),ww%(current%),wh%(current%))     ! SIZE WINDOW
      flag%=WIND_GET(win%(current%),4,iwx%(current%),iwy%(current%),iww%(current%),iwh%(current%)) ! GET INSIDE SIZE
      old_width%=the_width%(current%)
      @size_slider
      @info_line
      IF old_width%<>the_width%(current%) THEN
        @update_display
      ENDIF
      '
    ENDIF
    '
  CASE 77 ! RIGHT
    @which_window
    IF current%>0 THEN
      SELECT type%(current%)
      CASE 0 ! ASCII
        ww%(current%)=ww%(current%)+font_width%(current%)
        '
      CASE 1 ! HEX
        ww%(current%)=ww%(current%)+font_width%(current%)*3
        '
      CASE 2 ! GRAPHICS
        ww%(current%)=ww%(current%)+16
        '
      ENDSELECT
      flag%=WIND_SET(win%(current%),5,wx%(current%),wy%(current%),ww%(current%),wh%(current%))     ! SIZE WINDOW
      flag%=WIND_GET(win%(current%),4,iwx%(current%),iwy%(current%),iww%(current%),iwh%(current%)) ! GET INSIDE SIZE
      old_width%=the_width%(current%)
      @size_slider
      @info_line
      IF old_width%<>the_width%(current%) THEN
        @update_display
      ENDIF
      '
    ENDIF
    '
  CASE 57 ! 'SPACE' FULL WINDOW
    @which_window
    IF current%>0 THEN
      @full_window
    ENDIF
    '
  CASE 71 ! CLRHOME
    @which_window
    IF key&<>18231
      IF view%(current%)>0
        view%(current%)=0
        @fix_slider
      ENDIF
      '
    ELSE
      IF view%(current%)<size%(current%)-1
        view%(current%)=size%(current%)-1
        @fix_slider
      ENDIF
      '
    ENDIF
    '
  ENDSELECT
  '
RETURN
'
> PROCEDURE event_menu
  '
  tit%=buffer&(3)   ! WHICH MENU TITLE ?
  ~MENU_TNORMAL(menu%,tit%,1)  ! MAKE MENU TITLE NORMAL AGAIN
  item%=buffer&(4)  ! WHICH MENU ITEM WAS SELECTED
  '
  SELECT item%
    '
  CASE m_window_options% ! WINDOW_OPTIONS
    @which_window
    @window_options
    '
  CASE m_about%       ! ABOUT
    @credit
    '
  CASE m_open%        ! OPEN
    @hide_mouse
    FILESELECT #"Select file to view",view_path$+"*.*",view_name$,view_name$
    @show_mouse
    @load
    '
  CASE m_merge%       ! MERGE
    @which_window
    IF current%>0 THEN
      @merge
    ENDIF
    '
  CASE m_close%       ! CLOSE
    @which_window
    IF current%>0 THEN
      @clear
    ENDIF
    '
  CASE m_close_all%    ! CLOSE ALL
    @which_window
    IF current%>0 THEN
      @close_all
    ENDIF
    '
  CASE m_print%       ! PRINT
    @which_window
    @dump
    '
  CASE m_quit%        ! QUIT
    @trying_to_quit
    '
  CASE m_find%        ! FIND
    @which_window
    IF current%>0 THEN
      @find
    ENDIF
    '
  CASE m_find_next%   ! FIND NEXT
    @which_window
    IF current%>0 THEN
      @find_next
    ENDIF
    '
  CASE m_goto%        ! GOTO BYTE
    @which_window
    IF current%>0 THEN
      @goto
    ENDIF
    '
  CASE m_copy%         ! COPY
    @which_window
    IF current%>0 THEN
      @copy
    ENDIF
    '
  CASE m_delete%       ! DELETE
    @which_window
    IF current%>0 THEN
      @delete
    ENDIF
    '
  CASE m_insert%       ! INSERT
    @which_window
    IF current%>0 THEN
      @insert
    ENDIF
    '
  CASE m_change%      ! CHANGE BITS
    @which_window
    IF current%>0 THEN
      @change_bits
    ENDIF
    '
  CASE m_top%         ! TOP WINDOW
    @top_window
    '
  CASE m_option%      ! PRG. OPTIONS
    @which_window
    @option
    '
  CASE m_tile%        ! TILE WINDOWS
    @tile
    '
  CASE m_save%        ! SAVE
    @which_window
    IF current%>0 THEN
      @save
    ENDIF
    '
  ENDSELECT
  '
RETURN
'
> PROCEDURE event_window
  '
  top%=buffer&(3)  ! HANDLE OF WINDOW THAT TRIGGERED EVENT
  current%=0
  FOR x%=1 TO last_used%
    IF win%(x%)=top% THEN
      current%=x%
      x%=last_used%
    ENDIF
  NEXT x%
  '
  SELECT command%
    '
  CASE 20     ! WIND UPDATE
    @repair
    '
  CASE 21     ! WINDOW CLICKED ON
    flag%=WIND_SET(win%(current%),10,0,0,0,0) ! WINDOW SET TO TOP
    DEFMOUSE 0
    '
  CASE 22 ! CLOSE WINDOW
    @clear
    '
  CASE 23 ! FULL WINDOW
    @full_window
    '
  CASE 24,26
    @event_slider
    '
  CASE 27,28 ! WINDOW SIZED, MOVED
    flag%=WIND_GET(win%(current%),5,old_wx%,old_wy%,old_ww%,old_wh%)
    '
    wx%(current%)=buffer&(4) ! GET NEW WINDOW POSITION/SIZE
    wy%(current%)=buffer&(5)
    ww%(current%)=buffer&(6)
    wh%(current%)=buffer&(7)
    '
    IF ww%(current%)<min_width%+window_x_plus% THEN
      ww%(current%)=min_width%+window_x_plus%
      '
    ENDIF
    '
    IF wh%(current%)<min_height%+window_y_plus% THEN
      wh%(current%)=min_height%+window_y_plus%
      '
    ENDIF
    '
    flag%=WIND_SET(win%(current%),5,wx%(current%),wy%(current%),ww%(current%),wh%(current%))     ! SIZE WINDOW
    flag%=WIND_GET(win%(current%),4,iwx%(current%),iwy%(current%),iww%(current%),iwh%(current%)) ! GET INSIDE SIZE
    '
    IF command%=27 THEN
      old_width%=the_width%(current%)
      @size_slider
      @info_line
      IF old_width%<>the_width%(current%) THEN
        @update_display
      ENDIF
      '
    ENDIF
    '
  ENDSELECT
  '
RETURN
'
> PROCEDURE full_window
  flag%=WIND_GET(win%(current%),5,old_wx%,old_wy%,old_ww%,old_wh%)
  '
  @size_window
  '
  flag%=WIND_SET(win%(current%),5,wx%(current%),wy%(current%),ww%(current%),wh%(current%))
  flag%=WIND_GET(win%(current%),4,iwx%(current%),iwy%(current%),iww%(current%),iwh%(current%))
  old_width%=the_width%(current%)
  @size_slider
  @info_line
  IF old_width%>the_width%(current%) THEN
    @update_display
  ENDIF
  '
RETURN
'
> PROCEDURE size_window
  '
  SELECT type%(current%)
  CASE 0 ! ASCII
    max_in_width%=mwx%+mww%-(wx%(current%)+window_x_plus%)
    max_in_height%=mwy%+mwh%-(wy%(current%)+window_y_plus%)
    '
    max_char%=INT(max_in_width%/font_width%(current%))
    IF max_char%>=size%(current%) THEN
      max_char%=size%(current%)
      max_line%=1
    ELSE
      max_line%=INT(size%(current%)/max_char%)+1
    ENDIF
    '
    IF max_line%*font_height%(current%)>max_in_height% THEN
      max_line%=INT(max_in_height%/font_height%(current%))
    ENDIF
    '
    ww%(current%)=max_char%*font_width%(current%)+window_x_plus%
    wh%(current%)=max_line%*font_height%(current%)+window_y_plus%
    '
  CASE 1 ! HEX
    max_in_width%=mwx%+mww%-(wx%(current%)+window_x_plus%)
    max_in_height%=mwy%+mwh%-(wy%(current%)+window_y_plus%)
    '
    max_char%=INT(((max_in_width%+font_width%(current%))/3)/font_width%(current%))
    IF max_char%>=size%(current%) THEN
      max_char%=size%(current%)
      max_line%=1
    ELSE
      max_line%=INT(size%(current%)/max_char%)+1
    ENDIF
    '
    IF max_line%*font_height%(current%)>max_in_height% THEN
      max_line%=INT(max_in_height%/font_height%(current%))
    ENDIF
    '
    ww%(current%)=((max_char%*3)-1)*font_width%(current%)+window_x_plus%
    wh%(current%)=max_line%*font_height%(current%)+window_y_plus%
    '
  CASE 2 ! GRAPHIC
    max_in_width%=INT((mwx%+mww%-(wx%(current%)+window_x_plus%))/16)*16
    max_in_height%=mwy%+mwh%-(wy%(current%)+window_y_plus%)
    '
    pixels%=(max_in_width%*screen_bits%)/8
    '
    max_char%=pixels%
    IF max_char%>=size%(current%) THEN
      max_char%=size%(current%)
      max_line%=1
    ELSE
      max_line%=INT(size%(current%)/max_char%)+1
    ENDIF
    '
    IF max_line%>max_in_height% THEN
      max_line%=max_in_height%
    ENDIF
    '
    ww%(current%)=((max_char%*8)/screen_bits%)+window_x_plus%
    wh%(current%)=max_line%+window_y_plus%
    '
  ENDSELECT
  '
  IF ww%(current%)<min_width%+window_x_plus% THEN
    ww%(current%)=min_width%+window_x_plus%
  ENDIF
  '
  IF wh%(current%)<min_height%+window_y_plus% THEN
    wh%(current%)=min_height%+window_y_plus%
  ENDIF
  '
  flag%=WIND_SET(win%(current%),5,wx%(current%),wy%(current%),ww%(current%),wh%(current%))
  '
RETURN
'
> PROCEDURE event_button
  '
  @which_window
  clicked_on%=WIND_FIND(mx&,my&)
  IF win%(current%)=clicked_on% AND clicks&=2 AND size%(current%)>0 THEN
    @edit
  ENDIF
  '
RETURN
'
> PROCEDURE which_window
  '
  flag%=WIND_GET(0,10,top%,d%,d%,d%)
  current%=0
  FOR x%=1 TO last_used%
    IF win%(x%)=top% THEN
      current%=x%
      x%=last_used%
    ENDIF
  NEXT x%
  '
RETURN
'
> PROCEDURE event_slider
  '
  SELECT command%
  CASE 24
    slider_event%=buffer&(4)
    SELECT slider_event%
    CASE 2 ! 'UP'
      IF view%(current%)>0
        IF key_state& THEN
          DEC view%(current%)
        ELSE
          IF type%(current%)<2 THEN
            view%(current%)=view%(current%)-the_width%(current%)
          ELSE
            view%(current%)=view%(current%)-((the_width%(current%)*screen_bits%)/8)
          ENDIF
          IF view%(current%)<0 THEN
            view%(current%)=0
          ENDIF
        ENDIF
        @fix_slider
        '
      ENDIF
      '
    CASE 0 ! 'ABOVE SLIDER'
      '
      IF type%(current%)<2 THEN
        view%(current%)=view%(current%)-(max_window_line%(current%)*the_width%(current%))
      ELSE
        view%(current%)=view%(current%)-(max_window_line%(current%)*((the_width%(current%)*screen_bits%))/8)
      ENDIF
      IF view%(current%)<0 THEN
        view%(current%)=0
      ENDIF
      @fix_slider
      '
    CASE 1 ! 'BELOW SLIDER'
      '
      IF type%(current%)<2 THEN
        view%(current%)=view%(current%)+max_window_line%(current%)*the_width%(current%)
      ELSE
        view%(current%)=view%(current%)+max_window_line%(current%)*((the_width%(current%)*screen_bits%)/8)
      ENDIF
      IF view%(current%)>size%(current%)-1 THEN
        view%(current%)=size%(current%)-1
      ENDIF
      @fix_slider
      '
    CASE 3 ! 'DOWN'
      IF view%(current%)<size%(current%)-1
        IF key_state& THEN
          INC view%(current%)
        ELSE
          IF type%(current%)<2 THEN
            view%(current%)=view%(current%)+the_width%(current%)
          ELSE
            view%(current%)=view%(current%)+((the_width%(current%)*screen_bits%)/8)
          ENDIF
          IF view%(current%)>size%(current%)-1 THEN
            view%(current%)=size%(current%)-1
          ENDIF
        ENDIF
        @fix_slider
        '
      ENDIF
    ENDSELECT
  CASE 26 ! 'SLIDER BOX'
    old_view%=view%(current%)
    IF slider_size%(current%)<1000
      slider_position%(current%)=buffer&(4)
      view%(current%)=(slider_position%(current%)/1000)*(size%(current%)-1)
      IF old_view%<>view%(current%)
        flag%=WIND_SET(win%(current%),9,slider_position%(current%),0,0,0)
        @fix_slider
      ENDIF
      '
    ENDIF
    '
  ENDSELECT
  '
RETURN
'
> PROCEDURE fix_slider
  '
  @info_line
  slider_position%(current%)=(view%(current%)/(size%(current%)-1))*1000
  flag%=WIND_SET(win%(current%),9,slider_position%(current%),0,0,0)
  @update_display
  '
RETURN
'
> PROCEDURE path_setup
  shell%=SHEL_READ(drop_path$,tail$)
  tail$=MID$(tail$,2)
  test%=RINSTR(drop_path$,"\")
  IF test% THEN
    drop_path$=MID$(drop_path$,1,test%)
  ENDIF
  '
  current_drive%=GEMDOS(25)
  current_path$=DIR$(current_drive%+1)+"\"
  test%=RINSTR(current_path$,"\")
  IF test% THEN
    current_path$=MID$(current_path$,1,test%)
  ENDIF
  '
  search_file$=drop_path$+"FILE_SPY.RSC"+CHR$(0)
  ~FSETDTA(dta%)
  test%=GEMDOS(78,L:V:search_file$,&X100111)
  IF test%=0 THEN
    view_path$=drop_path$
    '
  ELSE
    search_file$=current_path$+"FILE_SPY.RSC"+CHR$(0)
    ~FSETDTA(dta%)
    test%=GEMDOS(78,L:V:search_file$,&X100111)
    IF test%=0 THEN
      view_path$=current_path$
    ELSE
      @rsc_setup
      '
    ENDIF
  ENDIF
  '
  my_rsc$=view_path$+"FILE_SPY.RSC"
  my_inf$=view_path$+"FILE_SPY.INF"
  '
RETURN
'
> PROCEDURE rsc_setup
  '
  txt$=" |File Spy cannot find it's RSC file. |What do you want to do ? | "
  ALERT 0,txt$,1,"Find|Cancel",button%
  '
  SELECT button%
  CASE 1
    @hide_mouse
    FILESELECT #"Find File Spy's RSC file",view_path$+"*.*","FILE_SPY.RSC",temp$
    @show_mouse
    '
    test%=RINSTR(temp$,"\")
    IF test% THEN
      temp$=MID$(temp$,1,test%)
    ENDIF
    '
    search_file$=temp$+"FILE_SPY.RSC"+CHR$(0)
    ~FSETDTA(dta%)
    test%=GEMDOS(78,L:V:search_file$,&X100111)
    IF test%=0 THEN
      view_path$=temp$
    ELSE
      ~FSETDTA(old_dta%)
      IF dta%>0 THEN
        d%=GEMDOS(73,L:dta%)  ! RELEASE MEMORY
      ENDIF
      END
      '
    ENDIF
    '
  CASE 2
    ~FSETDTA(old_dta%)
    IF dta%>0 THEN
      d%=GEMDOS(73,L:dta%)  ! RELEASE MEMORY
    ENDIF
    END
    '
  ENDSELECT
  '
RETURN
'
> PROCEDURE rsc_do
  '
  rsc%=RSRC_LOAD(my_rsc$)
  ~RSRC_GADDR(0,0,menu%)
  ~RSRC_GADDR(0,1,find_dialog%)
  ~RSRC_GADDR(0,2,help_dialog%)
  ~RSRC_GADDR(0,3,credit_dialog%)
  ~RSRC_GADDR(0,4,option_dialog%)
  ~RSRC_GADDR(0,5,goto_dialog%)
  ~RSRC_GADDR(0,6,top_dialog%)
  ~RSRC_GADDR(0,7,merge_dialog%)
  ~RSRC_GADDR(0,8,change_dialog%)
  ~RSRC_GADDR(0,9,copy_dialog%)
  ~RSRC_GADDR(0,10,delete_dialog%)
  ~RSRC_GADDR(0,11,window_dialog%)
  ~RSRC_GADDR(0,12,print_dialog%)
  ~RSRC_GADDR(0,13,insert_dialog%)
  ~RSRC_GADDR(0,14,alert_dialog%)
  '
  ~FORM_CENTER(alert_dialog%,alert_x%,alert_y%,alert_w%,alert_h%)
  '
  b_alert_move%=2
  t_alert_text%=3
  b_alert_1%=8
  t_alert_1%=9
  b_alert_2%=10
  t_alert_2%=11
  b_alert_3%=12
  t_alert_3%=13
  '
  '
  print_move%=2
  t_print_name%=5
  t_print_size%=7
  t_print_type%=9
  t_print_width%=12
  b_print_80%=13
  b_print_160%=14
  t_print_status%=17
  b_print_check%=18
  b_print_printer%=19
  b_print_file%=20
  b_print_ok%=21
  b_print_save%=22
  b_print_cancel%=23
  '
  credit_move%=2
  t_free%=6
  b_credit_ok%=7
  b_credit_help%=8
  '
  find_move%=2
  t_find_title%=3
  t_find%=4
  t_replace%=6
  t_start%=8
  b_find_case%=9
  b_find%=10
  b_find_all%=11
  b_find_reset%=12
  b_replace%=13
  b_replace_all%=14
  b_find_cancel%=15
  '
  help_move%=2
  '
  goto_move%=2
  t_goto%=3
  b_goto_all%=4
  b_goto_ok%=5
  b_goto_cancel%=6
  '
  top_move%=2
  t_top_title%=1
  t_top_names%=3
  b_top_up%=19
  b_top_down%=20
  b_top_cancel%=21
  '
  merge_move%=2
  t_merge_current%=3
  t_merge_file%=5
  t_merge_at%=7
  t_merge_bytes%=9
  t_merge_every%=11
  b_merge_ok%=12
  b_merge_multi%=13
  b_merge_cancel%=14
  '
  copy_move%=2
  t_copy_from%=3
  t_copy_to%=5
  t_copy_at%=7
  b_copy_pick%=8
  t_copy_start%=10
  t_copy_end%=12
  b_copy_ok%=13
  b_copy_cancel%=14
  '
  delete_move%=2
  t_delete_name%=3
  t_delete_start%=5
  t_delete_end%=7
  t_delete_size%=9
  t_delete_every%=11
  b_delete_ok%=12
  b_delete_cancel%=13
  '
  insert_move%=2
  t_insert_name%=3
  t_insert_start%=5
  t_insert_end%=7
  t_insert_size%=9
  t_insert_every%=11
  t_insert_title%=12
  t_insert_value%=13
  b_insert_ok%=14
  b_insert_cancel%=15
  '
  change_move%=2
  t_change_mask%=4
  b_change_set%=7
  b_change_toggle%=8
  b_change_clear%=9
  t_change_match%=10
  t_change_start%=12
  t_change_end%=14
  t_change_and%=17
  t_change_or%=18
  t_change_xor%=19
  t_change_flip%=20
  t_change_l_shift%=21
  t_change_r_shift%=22
  t_change_reverse%=23
  t_change_l_rotate%=24
  t_change_r_rotate%=25
  t_change_byte%=28
  t_change_word%=29
  t_change_long%=30
  b_change_ok%=31
  b_change_reset%=32
  b_change_cancel%=33
  '
  m_about%=9
  m_open%=18
  m_merge%=19
  m_save%=20
  m_close%=22
  m_close_all%=23
  m_print%=25
  m_quit%=27
  m_find%=29
  m_find_next%=30
  m_goto%=31
  m_copy%=33
  m_insert%=34
  m_delete%=35
  m_change%=36
  m_option%=38
  m_top%=40
  m_tile%=41
  m_window_options%=43
  '
  option_move%=2
  t_option_width%=5
  t_option_height%=7
  b_option_min%=8
  b_option_max%=9
  b_option_center%=12
  b_option_mouse%=13
  b_option_start%=15
  b_option_goto%=16
  b_option_ok%=17
  b_option_save%=18
  b_option_cancel%=19
  '
  window_move%=2
  b_window_ascii%=5
  b_window_hex%=6
  b_window_graphic%=7
  b_window_6x6%=10
  b_window_8x8%=11
  b_window_8x16%=12
  b_window_16x32%=13
  b_window_all%=14
  b_window_ok%=15
  b_window_save%=16
  b_window_cancel%=17
  '
  CHAR{{OB_SPEC(change_dialog%,t_change_mask%)}}=""
  CHAR{{OB_SPEC(change_dialog%,t_change_match%)}}=""
  CHAR{{OB_SPEC(find_dialog%,t_find%)}}=""
  CHAR{{OB_SPEC(find_dialog%,t_replace%)}}=""
  '
RETURN
'
> PROCEDURE center_all
  ~FORM_CENTER(find_dialog%,find_x%,find_y%,find_w%,find_h%)
  ~FORM_CENTER(help_dialog%,help_x%,help_y%,help_w%,help_h%)
  ~FORM_CENTER(credit_dialog%,credit_x%,credit_y%,credit_w%,credit_h%)
  ~FORM_CENTER(option_dialog%,option_x%,option_y%,option_w%,option_h%)
  ~FORM_CENTER(goto_dialog%,goto_x%,goto_y%,goto_w%,goto_h%)
  ~FORM_CENTER(top_dialog%,top_x%,top_y%,top_w%,top_h%)
  ~FORM_CENTER(merge_dialog%,merge_x%,merge_y%,merge_w%,merge_h%)
  ~FORM_CENTER(change_dialog%,change_x%,change_y%,change_w%,change_h%)
  ~FORM_CENTER(copy_dialog%,copy_x%,copy_y%,copy_w%,copy_h%)
  ~FORM_CENTER(delete_dialog%,delete_x%,delete_y%,delete_w%,delete_h%)
  ~FORM_CENTER(window_dialog%,window_x%,window_y%,window_w%,window_h%)
  ~FORM_CENTER(print_dialog%,print_x%,print_y%,print_w%,print_h%)
  ~FORM_CENTER(insert_dialog%,insert_x%,insert_y%,insert_w%,insert_h%)
  '
RETURN
'
> PROCEDURE check_for_mint
  '
  INLINE cook%,6
  CHAR{cook%}="    "+CHR$(0)+CHR$(0)
  ' handle&=V~H
  handle&=APPL_INIT()
  jar%=LPEEK(1440)
  mint%=0
  IF jar% THEN
    DO
      IF LPEEK(jar%) THEN
        LPOKE cook%,LPEEK(jar%)
        cookie$=CHAR{cook%}
        jar%=jar%+8
        IF cookie$="MiNT" THEN
          mint%=1
          jar%=0
        ENDIF
      ELSE
        jar%=0
      ENDIF
    LOOP UNTIL jar%=0
  ENDIF
  IF mint% THEN
    ~MENU_REGISTER(handle&,"  File Spy")
  ENDIF
  '
RETURN
'
> PROCEDURE window_setup
  '
  win%(current%)=WIND_CREATE(&X111111111,mwx%,mwy%,mww%,mwh%)
  IF win%(current%)>0 THEN
    '
    INC last_used%
    search%(current%)=0
    found%(current%)=-1
    edit%(current%)=0
    view_name$(current%)=view_name$
    view%(current%)=0
    type%(current%)=window_type%
    @title
    '
    flag%=1
    '
    SELECT text_size%
    CASE 0
      font_size%(current%)=4
    CASE 1
      font_size%(current%)=6
    CASE 2
      font_size%(current%)=13
    CASE 3
      font_size%(current%)=32
    ENDSELECT
    font_width%(current%)=font%(text_size%,0)
    font_height%(current%)=font%(text_size%,1)
    '
    @set_menu
    @set_window_size
    @info_line
    '
    @multi_check
    @bell
    '
  ELSE
    DEC last_used%
    IF byte_buffer%(current%)>0 THEN
      d%=GEMDOS(73,L:byte_buffer%(current%))  ! RELEASE MEMORY
    ENDIF
    exit%=1
    '          ....................................
    alert$(0)=""
    alert$(1)="Sorry, you have reached you systems"
    alert$(2)="window limit. Try closing a window"
    alert$(3)="that in not in use."
    alert$(4)=""
    alert$(5)=""
    alert$(6)="OK"
    alert$(7)=""
    alert_button%=1
    @alert
    '
  ENDIF
  '
RETURN
'
> PROCEDURE set_window_size
  flag%=WIND_OPEN(win%(current%),mwx%,mwy%,window_set_width%+window_x_plus%,window_set_height%+window_y_plus%)
  flag%=WIND_GET(win%(current%),4,iwx%(current%),iwy%(current%),iww%(current%),iwh%(current%)) ! GET SIZE OF DESKTOP-MENUBAR
  flag%=WIND_GET(win%(current%),5,wx%(current%),wy%(current%),ww%(current%),wh%(current%)) ! GET SIZE OF DESKTOP-MENUBAR
  flag%=WIND_SET(win%(current%),10,0,0,0,0) ! WINDOW SET TO TOP
  @size_slider
  '
RETURN
'
> PROCEDURE window_kill
  '
  flag%=WIND_CLOSE(win%(current%))       ! CLOSE WINDOW
  flag%=WIND_DELETE(win%(current%))      ! DELETE WINDOW
  '
  last%=last_used%
  DEC last_used%
  IF prg_exit%=0 THEN
    '
    IF last%<>current% THEN
      win%(current%)=win%(last%)
      type%(current%)=type%(last%)
      wx%(current%)=wx%(last%)
      wy%(current%)=wy%(last%)
      ww%(current%)=ww%(last%)
      wh%(current%)=wh%(last%)
      iwx%(current%)=iwx%(last%)
      iwy%(current%)=iwy%(last%)
      iww%(current%)=iww%(last%)
      iwh%(current%)=iwh%(last%)
      slider_size%(current%)=slider_size%(last%)
      slider_position%(current%)=slider_position%(last%)
      view%(current%)=view%(last%)
      the_width%(current%)=the_width%(last%)
      size%(current%)=size%(last%)
      max_row%(current%)=max_row%(last%)
      max_window_line%(current%)=max_window_line%(last%)
      max_char%(current%)=max_char%(last%)
      byte_buffer%(current%)=byte_buffer%(last%)
      view_name$(current%)=view_name$(last%)
      found%(current%)=found%(last%)
      search%(current%)=search%(last%)
      edit%(current%)=edit%(last%)
      font_size%(current%)=font_size%(last%)
      font_width%(current%)=font_width%(last%)
      font_height%(current%)=font_height%(last%)
      @title
      @info_line
      @size_slider
      '
    ENDIF
    '
    byte_buffer%(last%)=-1
    win%(last%)=-1
    '
  ENDIF
  '
RETURN
'
> PROCEDURE tile
  '
  IF last_used%>0 THEN
    DEFMOUSE 2
    @which_window
    old_topped%=current%
    x_outside%=window_set_width%+window_x_plus%
    y_outside%=window_set_height%+window_y_plus%
    columns%=INT(mww%/x_outside%)
    rows%=INT(mwh%/y_outside%)
    max_tile%=rows%*columns%
    '
    tile_count%=1
    current_tile%=sort%(tile_count%)
    tile_x%=0
    tile_y%=0
    '
    IF last_used%<=max_tile% THEN
      fix%=y_outside%
    ELSE
      fix%=window_step%
      rows%=INT(mwh%/window_step%)
      max_tile%=rows%*columns%
    ENDIF
    DO
      x%=tile_x%*x_outside%+mwx%
      y%=tile_y%*fix%+mwy%
      IF wx%(current_tile%)=x% AND wy%(current_tile%)=y% AND ww%(current_tile%)=x_outside% AND wh%(current_tile%)=y_outside% THEN
      ELSE
        wx%(current_tile%)=x%
        wy%(current_tile%)=y%
        ww%(current_tile%)=x_outside%
        wh%(current_tile%)=y_outside%
        '
      ENDIF
      '
      INC tile_count%
      current_tile%=sort%(tile_count%)
      INC tile_x%
      '
      IF tile_x%>=columns% THEN
        tile_x%=0
        INC tile_y%
        '
      ENDIF
      '
      IF tile_count%>max_tile% THEN
        tile_x%=0
        tile_y%=0
        '
      ENDIF
      '
    LOOP UNTIL tile_count%>last_used%
    '
    FOR current_tile%=1 TO last_used%
      current%=sort%(current_tile%)
      flag%=WIND_CLOSE(win%(current%))       ! CLOSE WINDOW
      @multi_check
    NEXT current_tile%
    '
    FOR current_tile%=1 TO last_used%
      current%=sort%(current_tile%)
      flag%=WIND_OPEN(win%(current%),wx%(current%),wy%(current%),ww%(current%),wh%(current%))     ! GET WINDOW SIZE
      flag%=WIND_GET(win%(current%),4,iwx%(current%),iwy%(current%),iww%(current%),iwh%(current%)) ! GET INSIDE SIZE
      @size_slider
      @fix_slider
      @info_line
      @multi_check
    NEXT current_tile%
    IF old_topped%>0 THEN
      flag%=WIND_SET(win%(old_topped%),10,0,0,0,0) ! WINDOW SET TO TOP
      '
    ENDIF
    DEFMOUSE 0
  ENDIF
  '
RETURN
'
> PROCEDURE sort
  FOR x%=1 TO last_used%
    sort%(x%)=x%
  NEXT x%
  '
  IF last_used%>1 THEN
    '
    FOR x%=1 TO last_used%
      sort$(x%)=view_name$(x%)
    NEXT x%
    QSORT sort$(),last_used%+1,sort%()
    '
  ENDIF
  '
RETURN
'
> PROCEDURE set_menu
  '
  IF last_used% THEN
    set%=1
  ELSE
    set%=0
  ENDIF
  ~MENU_IENABLE(menu%,m_merge%,set%)
  ~MENU_IENABLE(menu%,m_close%,set%)
  ~MENU_IENABLE(menu%,m_close_all%,set%)
  ~MENU_IENABLE(menu%,m_find%,set%)
  ~MENU_IENABLE(menu%,m_find_next%,set%)
  ~MENU_IENABLE(menu%,m_goto%,set%)
  ~MENU_IENABLE(menu%,m_copy%,set%)
  ~MENU_IENABLE(menu%,m_insert%,set%)
  ~MENU_IENABLE(menu%,m_delete%,set%)
  ~MENU_IENABLE(menu%,m_change%,set%)
  ~MENU_IENABLE(menu%,m_top%,set%)
  ~MENU_IENABLE(menu%,m_tile%,set%)
  ~MENU_IENABLE(menu%,m_save%,set%)
  '
RETURN
'
> PROCEDURE repair
  '
  er%=WIND_UPDATE(1)                      ! TELL GEM WE ARE TAKING OVER SCREEN
  er%=WIND_UPDATE(3)
  HIDEM
  er%=WIND_GET(win%(current%),11,fx%,fy%,fx2%,fy2%) ! GET FIRST RECTANGLE
  fix_wx%=buffer&(4)
  fix_wy%=buffer&(5)
  fix_ww%=buffer&(6)
  fix_wh%=buffer&(7)
  fix_flag%=RC_INTERSECT(fix_wx%,fix_wy%,fix_ww%,fix_wh%,fx%,fy%,fx2%,fy2%)
  IF fix_flag% THEN
    SELECT type%(current%)
    CASE 0
      @display_text
    CASE 1
      @display_hex
    CASE 2
      @display_graphic
    ENDSELECT
  ENDIF
  fix_done%=0
  '
  DO
    er%=WIND_GET(win%(current%),12,fx%,fy%,fx2%,fy2%)      ! GET NEXT RECTANGLE
    '
    IF fx2%+fy2%=0 THEN                          ! ANY MORE RECTANGLES ?
      fix_done%=1
    ELSE
      fix_wx%=buffer&(4)
      fix_wy%=buffer&(5)
      fix_ww%=buffer&(6)
      fix_wh%=buffer&(7)
      fix_flag%=RC_INTERSECT(fix_wx%,fix_wy%,fix_ww%,fix_wh%,fx%,fy%,fx2%,fy2%)
      IF fix_flag% THEN
        SELECT type%(current%)
        CASE 0
          @display_text
        CASE 1
          @display_hex
        CASE 2
          @display_graphic
        ENDSELECT
      ENDIF
    ENDIF
    '
  LOOP UNTIL fix_done%=1
  '
  er%=WIND_UPDATE(2)
  er%=WIND_UPDATE(0)                      !  DONE WITH SCREEN
  SHOWM
  '
RETURN
'
> PROCEDURE display_text
  '
  CLIP fx%,fy%,fx2%,fy2%
  PBOX fx%,fy%,fx%+fx2%-1,fy%+fy2%-1
  '
  IF size%(current%) THEN
    FOR row%=0 TO max_window_line%(current%)-1
      dat$=SPACE$(the_width%(current%))
      '
      place%=view%(current%)+row%*the_width%(current%)
      '
      IF place%<size%(current%) THEN
        '
        the_end%=size%(current%)-place%
        BMOVE byte_buffer%(current%)+place%,V:dat$,MIN(the_width%(current%),the_end%)
        FOR test%=1 TO MIN(the_width%(current%),the_end%)
          IF MID$(dat$,test%,1)=CHR$(0) THEN
            MID$(dat$,test%,1)=CHR$(32)
          ENDIF
        NEXT test%
        '
        DEFTEXT 1,0,,font_size%(current%)
        '
        pos%=0
        DO
          TEXT iwx%(current%)+font_width%(current%)*pos%,iwy%(current%)+row%*font_height%(current%)+font_height%(current%)*0.9,MID$(dat$,pos%+1,100)
          pos%=pos%+100
        LOOP UNTIL pos%>the_width%(current%)
        '
      ELSE
        row%=max_window_line%(current%)
        '
      ENDIF
    NEXT row%
  ENDIF
  '
RETURN
'
> PROCEDURE display_hex
  '
  CLIP fx%,fy%,fx2%,fy2%
  PBOX fx%,fy%,fx%+fx2%-1,fy%+fy2%-1
  '
  IF size%(current%) THEN
    FOR row%=0 TO max_window_line%(current%)-1
      '
      place%=view%(current%)+row%*the_width%(current%)
      '
      IF place%<size%(current%) THEN
        '
        the_end%=size%(current%)-place%
        '
        dat$=""
        FOR hex%=0 TO MIN(the_width%(current%),the_end%)-1
          dat$=dat$+HEX$(PEEK(byte_buffer%(current%)+place%+hex%),2)+" "
          '
        NEXT hex%
        '
        DEFTEXT 1,0,,font_size%(current%)
        '
        pos%=0
        DO
          TEXT iwx%(current%)+font_width%(current%)*pos%,iwy%(current%)+row%*font_height%(current%)+font_height%(current%)*0.9,MID$(dat$,pos%+1,100)
          pos%=pos%+100
        LOOP UNTIL INT(pos%/3)>the_width%(current%)
        '
      ELSE
        row%=max_window_line%(current%)
        '
      ENDIF
    NEXT row%
  ENDIF
  '
RETURN
'
> PROCEDURE display_graphic
  '
  CLIP fx%,fy%,fx2%,fy2%
  PBOX fx%,fy%,fx%+fx2%-1,fy%+fy2%-1
  '
  place%=byte_buffer%(current%)+view%(current%)
  raster_size%=INT((size%(current%)-view%(current%))/2)*2
  IF raster_size% THEN
    tw%=MIN((raster_size%*8)/screen_bits%,the_width%(current%))
    th%=INT(((raster_size%*8)/screen_bits%)/the_width%(current%))
    '
    source_mfdb%(0)=place%
    source_mfdb%(1)=tw%
    source_mfdb%(2)=th%
    source_mfdb%(3)=tw%/16
    source_mfdb%(5)=screen_bits%
    '
    destination_mfdb%(0)=0
    '
    parameters%(0)=fx%-iwx%(current%)
    parameters%(1)=fy%-iwy%(current%)
    parameters%(2)=MIN(tw%,fx%+fx2%-iwx%(current%))-1
    parameters%(3)=MIN(th%,fy%+fy2%-iwy%(current%))-1
    parameters%(4)=fx%
    parameters%(5)=fy%
    parameters%(6)=fx%+fx2%-1
    parameters%(7)=fy%+fy2%-1
    '
    BITBLT source_mfdb%(),destination_mfdb%(),parameters%()
  ENDIF
  '
RETURN
'
> PROCEDURE update_display
  '
  my_buffer&(0)=20
  my_buffer&(3)=win%(current%)
  my_buffer&(4)=iwx%(current%)
  my_buffer&(5)=iwy%(current%)
  my_buffer&(6)=iww%(current%)
  my_buffer&(7)=iwh%(current%)
  ~APPL_WRITE(handle&,16,my_buffer%)
  '
RETURN
'
> PROCEDURE title
  '
  window_title$=view_name$(current%)+" "+STR$(size%(current%))
  window_title$=MID$(window_title$,1,(win_txt%-1))+CHR$(0)
  CHAR{window_title%+current%*win_txt%}=window_title$
  ' FILL OUT TITLE BUFFER WITH STRING AND TERMINATOR CHARS
  flag%=WIND_SET(win%(current%),2,CARD(SWAP(window_title%+current%*win_txt%)),CARD(window_title%+current%*win_txt%),0,0)
  ' SET WINDOW TITLE
  '
RETURN
'
> PROCEDURE info_line
  '
  window_info$=MID$(type$(type%(current%)),1,3)+", Byte:"+STR$(view%(current%))+" Width:"+STR$(the_width%(current%))
  window_info$=MID$(window_info$,1,(info_txt%-1))+CHR$(0)
  CHAR{window_info%+current%*info_txt%}=window_info$
  flag%=WIND_SET(win%(current%),3,CARD(SWAP(window_info%+current%*info_txt%)),CARD(window_info%+current%*info_txt%),0,0)
  '
RETURN
'
> PROCEDURE size_slider
  '
  old_view%=view%(current%)
  '
  SELECT type%(current%)
  CASE 0,1 ! ASCII, HEX
    max_char%(current%)=INT(iww%(current%)/font_width%(current%))
    max_window_line%(current%)=INT(iwh%(current%)/font_height%(current%))
    IF type%(current%)=0 THEN
      the_width%(current%)=max_char%(current%)
    ELSE
      the_width%(current%)=INT((max_char%(current%)+1)/3)
    ENDIF
    max_row%(current%)=INT(size%(current%)/the_width%(current%))+1
    IF size%(current%)>0 THEN
      '
      view%(current%)=old_view%
      IF view%(current%)>=size%(current%) THEN
        view%(current%)=size%(current%)-1
      ENDIF
      '
      IF max_row%(current%)-max_window_line%(current%)>0 THEN
        slider_position%(current%)=(view%(current%)/size%(current%))*1000
      ELSE
        slider_position%(current%)=0
      ENDIF
      '
    ELSE
      slider_position%(current%)=0
      '
    ENDIF
    '
    IF size%(current%)>0 THEN
      IF max_row%(current%)>max_window_line%(current%) THEN
        slider_size%(current%)=(max_window_line%(current%)/(max_row%(current%)+max_window_line%(current%)))*1000
      ELSE
        slider_size%(current%)=999
      ENDIF
      '
    ELSE
      slider_size%(current%)=1000
      '
    ENDIF
    '
  CASE 2 ! GRAPHIC
    max_char%(current%)=INT(iww%(current%)/16)*16
    max_window_line%(current%)=iwh%(current%)
    the_width%(current%)=max_char%(current%)
    max_row%(current%)=INT(((size%(current%)*8)/screen_bits%)/the_width%(current%))+1
    '
    IF size%(current%)>0 THEN
      '
      view%(current%)=old_view%
      IF view%(current%)>=size%(current%) THEN
        view%(current%)=size%(current%)-1
      ENDIF
      '
      IF max_row%(current%)-max_window_line%(current%)>0 THEN
        slider_position%(current%)=(view%(current%)/size%(current%))*1000
      ELSE
        slider_position%(current%)=0
      ENDIF
      '
    ELSE
      slider_position%(current%)=0
      '
    ENDIF
    '
    IF size%(current%)>0 THEN
      IF max_row%(current%)>max_window_line%(current%) THEN
        slider_size%(current%)=(max_window_line%(current%)/(max_row%(current%)+max_window_line%(current%)))*1000
      ELSE
        slider_size%(current%)=999
      ENDIF
      '
    ELSE
      slider_size%(current%)=1000
      '
    ENDIF
  ENDSELECT
  '
  flag%=WIND_SET(win%(current%),9,slider_position%(current%),0,0,0)
  flag%=WIND_SET(win%(current%),16,slider_size%(current%),0,0,0)
  '
RETURN
'
> PROCEDURE change_bits
  '
  IF center_dialogs%=0 THEN
    change_x%=mx&-(change_w%/2)
    IF change_x%<mwx% THEN
      change_x%=mwx%
    ENDIF
    IF change_x%>mww%-change_w% THEN
      change_x%=mww%-change_w%
    ENDIF
    change_y%=my&-(change_h%/2)
    IF change_y%<mwy% THEN
      change_y%=mwy%
    ENDIF
    IF change_y%>mwh%+mwy%-change_h% THEN
      change_y%=mwh%+mwy%-change_h%
    ENDIF
    OB_X(change_dialog%,0)=change_x%
    OB_Y(change_dialog%,0)=change_y%
  ENDIF
  '
  er%=WIND_UPDATE(1)
  er%=WIND_UPDATE(3)
  IF start_at% THEN
    CHAR{{OB_SPEC(change_dialog%,t_change_start%)}}=STR$(0)
  ELSE
    CHAR{{OB_SPEC(change_dialog%,t_change_start%)}}=STR$(view%(current%))
  ENDIF
  IF size%(current%)>0 THEN
    CHAR{{OB_SPEC(change_dialog%,t_change_end%)}}=STR$(size%(current%)-1)
  ELSE
    CHAR{{OB_SPEC(change_dialog%,t_change_end%)}}=STR$(0)
  ENDIF
  '
  old_change_mask$=CHAR{{OB_SPEC(change_dialog%,t_change_mask%)}}
  old_change_match$=CHAR{{OB_SPEC(change_dialog%,t_change_match%)}}
  old_change_start%=VAL(CHAR{{OB_SPEC(change_dialog%,t_change_start%)}})
  old_change_end%=VAL(CHAR{{OB_SPEC(change_dialog%,t_change_end%)}})
  FOR check%=0 TO 8
    IF BTST(OB_STATE(change_dialog%,t_change_and%+check%),0) THEN
      old_operation%=check%
      '
    ENDIF
  NEXT check%
  FOR check%=0 TO 2
    IF BTST(OB_STATE(change_dialog%,t_change_byte%+check%),0) THEN
      old_change_size%=check%
      '
    ENDIF
    '
  NEXT check%
  '
  ~FORM_DIAL(0,0,0,0,0,change_x%,change_y%,change_w%,change_h%)
  ~OBJC_DRAW(change_dialog%,0,2,change_x%,change_y%,change_w%,change_h%)
  '
  done%=0
  DO
    exit%=FORM_DO(change_dialog%,t_change_mask%)
    exit%=exit% AND &H7FFF
    OB_STATE(change_dialog%,exit%)=BCLR(OB_STATE(change_dialog%,exit%),0)
    '
    SELECT exit%
    CASE change_move%
      @hide_mouse
      ~FORM_DIAL(3,0,0,0,0,change_x%,change_y%,change_w%,change_h%)
      @show_mouse
      '
      IF MOUSEK=1 THEN
        ~GRAF_DRAGBOX(change_w%,change_h%,change_x%,change_y%,mwx%,mwy%,mww%,mwh%,change_x%,change_y%)
        OB_X(change_dialog%,0)=change_x%
        OB_Y(change_dialog%,0)=change_y%
      ENDIF
      '
      er%=WIND_UPDATE(2)
      er%=WIND_UPDATE(0)
      @multi_check
      er%=WIND_UPDATE(1)
      er%=WIND_UPDATE(3)
      '
      ~FORM_DIAL(0,0,0,0,0,change_x%,change_y%,change_w%,change_h%)
      ~OBJC_DRAW(change_dialog%,0,2,change_x%,change_y%,change_w%,change_h%)
      '
    CASE b_change_set%
      CHAR{{OB_SPEC(change_dialog%,t_change_match%)}}=STRING$(32,"1")
      ~OBJC_DRAW(change_dialog%,t_change_match%,2,change_x%,change_y%,change_w%,change_h%)
      '
    CASE b_change_toggle%
      toggle$=CHAR{{OB_SPEC(change_dialog%,t_change_match%)}}
      IF LEN(toggle$) THEN
        '
        FOR toggle%=1 TO LEN(toggle$)
          IF MID$(toggle$,toggle%,1)="0" THEN
            MID$(toggle$,toggle%,1)="1"
          ELSE
            IF MID$(toggle$,toggle%,1)="1" THEN
              MID$(toggle$,toggle%,1)="0"
            ENDIF
          ENDIF
        NEXT toggle%
        CHAR{{OB_SPEC(change_dialog%,t_change_match%)}}=toggle$
        ~OBJC_DRAW(change_dialog%,t_change_match%,2,change_x%,change_y%,change_w%,change_h%)
      ENDIF
      '
    CASE b_change_clear%
      CHAR{{OB_SPEC(change_dialog%,t_change_match%)}}=""
      ~OBJC_DRAW(change_dialog%,t_change_match%,2,change_x%,change_y%,change_w%,change_h%)
      '
    CASE b_change_ok%
      change_mask$=CHAR{{OB_SPEC(change_dialog%,t_change_mask%)}}
      change_match$=CHAR{{OB_SPEC(change_dialog%,t_change_match%)}}
      change_start%=VAL(CHAR{{OB_SPEC(change_dialog%,t_change_start%)}})
      change_end%=VAL(CHAR{{OB_SPEC(change_dialog%,t_change_end%)}})
      IF change_end%>size%(current%)-1 THEN
        IF size%(current%)>0 THEN
          change_end%=size%(current%)-1
        ELSE
          change_end%=0
        ENDIF
      ENDIF
      IF change_start%>change_end% THEN
        change_start%=change_end%
      ENDIF
      FOR check%=0 TO 8
        IF BTST(OB_STATE(change_dialog%,t_change_and%+check%),0) THEN
          operation%=check%
          '
        ENDIF
      NEXT check%
      FOR check%=0 TO 2
        IF BTST(OB_STATE(change_dialog%,t_change_byte%+check%),0) THEN
          SELECT check%
          CASE 0
            change_step%=1
            change_width%=8
          CASE 1
            change_step%=2
            change_width%=16
          CASE 2
            change_step%=4
            change_width%=32
          ENDSELECT
          change_size%=(change_end%+1-change_start%)
          change_fix%=change_size%-(INT(change_size%/change_step%)*change_step%)
          change_end%=change_end%-change_fix%
          '
        ENDIF
        '
      NEXT check%
      '
      mask_size%=LEN(change_mask$)
      match_size%=LEN(change_match$)
      IF size%(current%)>0 THEN
        IF operation%=0 OR operation%=3 OR operation%=6 THEN
          IF mask_size% THEN
            DEFMOUSE 2
            @change
            DEFMOUSE 0
            @update_display
          ENDIF
        ELSE
          DEFMOUSE 2
          @change
          DEFMOUSE 0
          @update_display
        ENDIF
      ENDIF
      '
      done%=1
      '
    CASE b_change_reset%
      CHAR{{OB_SPEC(change_dialog%,t_change_mask%)}}=old_change_mask$
      CHAR{{OB_SPEC(change_dialog%,t_change_match%)}}=old_change_match$
      CHAR{{OB_SPEC(change_dialog%,t_change_start%)}}=STR$(old_change_start%)
      CHAR{{OB_SPEC(change_dialog%,t_change_end%)}}=STR$(old_change_end%)
      FOR check%=0 TO 8
        OB_STATE(change_dialog%,t_change_and%+check%)=BCLR(OB_STATE(change_dialog%,t_change_and%+check%),0)
        '
      NEXT check%
      OB_STATE(change_dialog%,t_change_and%+old_operation%)=BSET(OB_STATE(change_dialog%,t_change_and%+old_operation%),0)
      FOR check%=0 TO 2
        OB_STATE(change_dialog%,t_change_byte%+check%)=BCLR(OB_STATE(change_dialog%,t_change_and%+byte%),0)
        '
      NEXT check%
      OB_STATE(change_dialog%,t_change_byte%+old_change_size%)=BSET(OB_STATE(change_dialog%,t_change_and%+old_change_size%),0)
      '
      ~FORM_DIAL(0,0,0,0,0,change_x%,change_y%,change_w%,change_h%)
      ~OBJC_DRAW(change_dialog%,0,2,change_x%,change_y%,change_w%,change_h%)
      '
    CASE b_change_cancel%
      done%=1
      '
    ENDSELECT
    '
    ~OBJC_DRAW(change_dialog%,exit%,2,change_x%,change_y%,change_w%,change_h%)
  LOOP UNTIL done%
  '
  ~FORM_DIAL(3,0,0,0,0,change_x%,change_y%,change_w%,change_h%)
  er%=WIND_UPDATE(2)
  er%=WIND_UPDATE(0)
  '
RETURN
'
> PROCEDURE change
  IF mask_size% THEN
    FOR set%=0 TO 31
      change%(set%)=-1
      match%(set%)=-1
      '
    NEXT set%
    '
    FOR set%=0 TO mask_size%-1
      SELECT ASC(MID$(change_mask$,mask_size%-set%,1))-48
      CASE 0
        change%(set%)=0
        '
      CASE 1
        change%(set%)=1
        '
      ENDSELECT
      '
    NEXT set%
    '
    change%=0
    '
    FOR set%=0 TO change_width%-1
      IF change%(set%)=1 THEN
        change%=BSET(change%,set%)
        '
      ENDIF
      '
    NEXT set%
    '
  ENDIF
  '
  match_1%=0
  match_0%=0
  '
  IF match_size% THEN
    FOR set%=0 TO match_size%-1
      match%=ASC(MID$(change_match$,match_size%-set%,1))-48
      SELECT match%
      CASE 0
        match%(set%)=0
      CASE 1
        match%(set%)=1
      ENDSELECT
      '
    NEXT set%
    '
    FOR set%=0 TO change_width%-1
      IF match%(set%)=1 THEN
        match_1%=BSET(match_1%,set%)
      ENDIF
      IF match%(set%)=0 THEN
        match_0%=BSET(match_0%,set%)
      ENDIF
      '
    NEXT set%
  ENDIF
  @do_change
  '
RETURN
'
> PROCEDURE do_change
  '
  FOR set%=change_start% TO change_end% STEP change_step%
    SELECT change_width%
    CASE 8
      temp%=PEEK(byte_buffer%(current%)+set%)
      old_temp%=temp%
    CASE 16
      temp%=DPEEK(byte_buffer%(current%)+set%)
      old_temp%=temp%
    CASE 32
      temp%=LPEEK(byte_buffer%(current%)+set%)
      old_temp%=temp%
    ENDSELECT
    '
    IF match_size% THEN
      test%=0
      test_1%=AND(temp%,match_1%)
      test_0%=AND(match_0%,NOT temp%)
    ELSE
      test%=1
    ENDIF
    '
    IF test%=1 OR (test_0%=match_0% AND test_1%=match_1%) THEN
      SELECT operation%
      CASE 0 ! AND
        temp%=AND(temp%,change%)
      CASE 1 ! FLIP
        FOR flip%=0 TO change_width%-1
          temp%=BCHG(temp%,flip%)
        NEXT flip%
        '
      CASE 2 ! REVERSE
        temp_2%=temp%
        FOR reverse%=0 TO change_width%-1
          IF BTST(temp_2%,change_width%-(reverse%+1)) THEN
            temp%=BSET(temp%,reverse%)
          ELSE
            temp%=BCLR(temp%,reverse%)
          ENDIF
        NEXT reverse%
        '
      CASE 3 ! OR
        temp%=OR(temp%,change%)
        '
      CASE 4 ! L SHIFT
        SELECT change_width%
        CASE 8
          temp%=SHL|(temp%,1)
        CASE 16
          temp%=SHL&(temp%,1)
        CASE 32
          temp%=SHL(temp%,1)
        ENDSELECT
        '
      CASE 5 ! L ROTATE
        SELECT change_width%
        CASE 8
          temp%=ROL|(temp%,1)
        CASE 16
          temp%=ROL&(temp%,1)
        CASE 32
          temp%=ROL(temp%,1)
        ENDSELECT
        '
      CASE 6 ! XOR
        temp%=XOR(temp%,change%)
        '
      CASE 7 ! R SHIFT
        SELECT change_width%
        CASE 8
          temp%=SHR|(temp%,1)
        CASE 16
          temp%=SHR&(temp%,1)
        CASE 32
          temp%=SHR(temp%,1)
        ENDSELECT
        '
      CASE 8 ! R ROTATE
        SELECT change_width%
        CASE 8
          temp%=ROR|(temp%,1)
        CASE 16
          temp%=ROR&(temp%,1)
        CASE 32
          temp%=ROR(temp%,1)
        ENDSELECT
        '
      ENDSELECT
      '
      SELECT change_width%
      CASE 8
        POKE byte_buffer%(current%)+set%,temp%
      CASE 16
        DPOKE byte_buffer%(current%)+set%,temp%
      CASE 32
        LPOKE byte_buffer%(current%)+set%,temp%
      ENDSELECT
    ENDIF
    '
    IF old_temp%<>temp% THEN
      edit%(current%)=1
    ENDIF
  NEXT set%
  '
RETURN
'
> PROCEDURE copy
  '
  IF center_dialogs%=0 THEN
    copy_x%=mx&-(copy_w%/2)
    IF copy_x%<mwx% THEN
      copy_x%=mwx%
    ENDIF
    IF copy_x%>mww%-copy_w% THEN
      copy_x%=mww%-copy_w%
    ENDIF
    copy_y%=my&-(copy_h%/2)
    IF copy_y%<mwy% THEN
      copy_y%=mwy%
    ENDIF
    IF copy_y%>mwh%+mwy%-copy_h% THEN
      copy_y%=mwh%+mwy%-copy_h%
    ENDIF
    OB_X(copy_dialog%,0)=copy_x%
    OB_Y(copy_dialog%,0)=copy_y%
  ENDIF
  '
  er%=WIND_UPDATE(1)
  er%=WIND_UPDATE(3)
  CHAR{{OB_SPEC(copy_dialog%,t_copy_from%)}}=view_name$(current%)
  CHAR{{OB_SPEC(copy_dialog%,t_copy_to%)}}="NEW"
  CHAR{{OB_SPEC(copy_dialog%,t_copy_at%)}}=STR$(0)
  IF start_at% THEN
    CHAR{{OB_SPEC(copy_dialog%,t_copy_start%)}}=STR$(0)
  ELSE
    CHAR{{OB_SPEC(copy_dialog%,t_copy_start%)}}=STR$(view%(current%))
  ENDIF
  IF size%(current%)>0 THEN
    CHAR{{OB_SPEC(copy_dialog%,t_copy_end%)}}=STR$(size%(current%)-1)
  ELSE
    CHAR{{OB_SPEC(copy_dialog%,t_copy_end%)}}=STR$(0)
  ENDIF
  '
  ~FORM_DIAL(0,0,0,0,0,copy_x%,copy_y%,copy_w%,copy_h%)
  ~OBJC_DRAW(copy_dialog%,0,2,copy_x%,copy_y%,copy_w%,copy_h%)
  '
  copy_done%=0
  DO
    exit%=FORM_DO(copy_dialog%,t_copy_to%)
    exit%=exit% AND &H7FFF
    OB_STATE(copy_dialog%,exit%)=BCLR(OB_STATE(copy_dialog%,exit%),0)
    '
    SELECT exit%
    CASE copy_move%
      @hide_mouse
      ~FORM_DIAL(3,0,0,0,0,copy_x%,copy_y%,copy_w%,copy_h%)
      @show_mouse
      '
      IF MOUSEK=1 THEN
        ~GRAF_DRAGBOX(copy_w%,copy_h%,copy_x%,copy_y%,mwx%,mwy%,mww%,mwh%,copy_x%,copy_y%)
        OB_X(copy_dialog%,0)=copy_x%
        OB_Y(copy_dialog%,0)=copy_y%
      ENDIF
      '
      er%=WIND_UPDATE(2)
      er%=WIND_UPDATE(0)
      @multi_check
      er%=WIND_UPDATE(1)
      er%=WIND_UPDATE(3)
      '
      ~FORM_DIAL(0,0,0,0,0,copy_x%,copy_y%,copy_w%,copy_h%)
      ~OBJC_DRAW(copy_dialog%,0,2,copy_x%,copy_y%,copy_w%,copy_h%)
      '
    CASE b_copy_pick%
      ~FORM_DIAL(3,0,0,0,0,copy_x%,copy_y%,copy_w%,copy_h%)
      CHAR{{OB_SPEC(top_dialog%,t_top_title%)}}="File Spy pick"
      er%=WIND_UPDATE(2)
      er%=WIND_UPDATE(0)
      @multi_check
      @pick_window
      @multi_check
      er%=WIND_UPDATE(1)
      er%=WIND_UPDATE(3)
      IF picked%>0 THEN
        CHAR{{OB_SPEC(copy_dialog%,t_copy_to%)}}=view_name$(picked%)
      ELSE
        CHAR{{OB_SPEC(copy_dialog%,t_copy_to%)}}="NEW"
      ENDIF
      ~FORM_DIAL(0,0,0,0,0,copy_x%,copy_y%,copy_w%,copy_h%)
      ~OBJC_DRAW(copy_dialog%,0,2,copy_x%,copy_y%,copy_w%,copy_h%)
      '
    CASE b_copy_ok%
      source$=CHAR{{OB_SPEC(copy_dialog%,t_copy_from%)}}
      dest$=CHAR{{OB_SPEC(copy_dialog%,t_copy_to%)}}
      copy_at%=VAL(CHAR{{OB_SPEC(copy_dialog%,t_copy_at%)}})
      copy_start%=VAL(CHAR{{OB_SPEC(copy_dialog%,t_copy_start%)}})
      copy_end%=VAL(CHAR{{OB_SPEC(copy_dialog%,t_copy_end%)}})
      IF size%(current%)>0 AND copy_end%<size%(current%) AND copy_end%>=copy_start% THEN
        copy_to%=0
        FOR x%=1 TO last_used%
          IF view_name$(x%)=dest$ AND win%(x%)>0 THEN
            copy_to%=x%
            x%=last_used%
            '
          ENDIF
        NEXT x%
        copy_from%=current%
        '
        @copy_to
      ENDIF
      copy_done%=1
    CASE b_copy_cancel%
      copy_done%=1
      '
    ENDSELECT
    '
  LOOP UNTIL copy_done%
  '
  ~FORM_DIAL(3,0,0,0,0,copy_x%,copy_y%,copy_w%,copy_h%)
  er%=WIND_UPDATE(2)
  er%=WIND_UPDATE(0)
  '
RETURN
'
> PROCEDURE copy_to
  IF copy_to%=0 THEN
    @copy_new
  ELSE
    IF copy_at%>=size%(copy_to%)-1 THEN
      copy_at%=size%(copy_to%)-1
    ENDIF
    need%=size%(copy_to%)+copy_end%+1-copy_start%
    temp_buffer%=GEMDOS(72,L:need%)
    IF temp_buffer%>0 THEN
      top_copy_size%=copy_at%
      bottom_copy_size%=size%(copy_to%)-copy_at%
      copy_size%=copy_end%+1-copy_start%
      IF top_copy_size% THEN
        BMOVE byte_buffer%(copy_to%),temp_buffer%,top_copy_size%
      ENDIF
      IF copy_size% THEN
        BMOVE byte_buffer%(copy_from%)+copy_start%,temp_buffer%+copy_at%,copy_size%
      ENDIF
      IF bottom_copy_size% THEN
        BMOVE byte_buffer%(copy_to%)+top_copy_size%,temp_buffer%+top_copy_size%+copy_size%,bottom_copy_size%
      ENDIF
      IF byte_buffer%(copy_to%) THEN
        d%=GEMDOS(73,L:byte_buffer%(copy_to%))  ! RELEASE MEMORY
      ENDIF
      byte_buffer%(copy_to%)=temp_buffer%
      size%(copy_to%)=need%
      current%=copy_to%
      edit%(current%)=1
      @title
      @size_slider
      @update_display
    ELSE
      @alert_copy
    ENDIF
  ENDIF
RETURN
'
> PROCEDURE copy_new
  '
  need%=copy_end%+1-copy_start%
  temp_buffer%=GEMDOS(72,L:need%)
  IF temp_buffer%>0 THEN
    BMOVE byte_buffer%(copy_from%)+copy_start%,temp_buffer%,need%
    '
    IF last_used%<max_window% THEN
      current%=last_used%+1
      view_name$=dest$
      size%(current%)=need%
      byte_buffer%(current%)=temp_buffer%
      @window_setup
      edit%(current%)=1
      DEFMOUSE 2
      @sort
      DEFMOUSE 0
      '
    ELSE
      @alert_window
    ENDIF
  ELSE
    @alert_copy
    '
  ENDIF
  '
RETURN
'
> PROCEDURE delete
  '
  IF center_dialogs%=0 THEN
    delete_x%=mx&-(delete_w%/2)
    IF delete_x%<mwx% THEN
      delete_x%=mwx%
    ENDIF
    IF delete_x%>mww%-delete_w% THEN
      delete_x%=mww%-delete_w%
    ENDIF
    delete_y%=my&-(delete_h%/2)
    IF delete_y%<mwy% THEN
      delete_y%=mwy%
    ENDIF
    IF delete_y%>mwh%+mwy%-delete_h% THEN
      delete_y%=mwh%+mwy%-delete_h%
    ENDIF
    OB_X(delete_dialog%,0)=delete_x%
    OB_Y(delete_dialog%,0)=delete_y%
  ENDIF
  '
  er%=WIND_UPDATE(1)
  er%=WIND_UPDATE(3)
  '
  CHAR{{OB_SPEC(delete_dialog%,t_delete_name%)}}=view_name$(current%)
  IF start_at% THEN
    CHAR{{OB_SPEC(delete_dialog%,t_delete_start%)}}=STR$(0)
  ELSE
    CHAR{{OB_SPEC(delete_dialog%,t_delete_start%)}}=STR$(view%(current%))
  ENDIF
  IF size%(current%)>0
    CHAR{{OB_SPEC(delete_dialog%,t_delete_end%)}}=STR$(size%(current%)-1)
  ELSE
    CHAR{{OB_SPEC(delete_dialog%,t_delete_end%)}}=STR$(0)
  ENDIF
  CHAR{{OB_SPEC(delete_dialog%,t_delete_size%)}}=STR$(0)
  CHAR{{OB_SPEC(delete_dialog%,t_delete_every%)}}=STR$(0)
  '
  ~FORM_DIAL(0,0,0,0,0,delete_x%,delete_y%,delete_w%,delete_h%)
  ~OBJC_DRAW(delete_dialog%,0,2,delete_x%,delete_y%,delete_w%,delete_h%)
  '
  done%=0
  DO
    exit%=FORM_DO(delete_dialog%,t_delete_to%)
    exit%=exit% AND &H7FFF
    OB_STATE(delete_dialog%,exit%)=BCLR(OB_STATE(delete_dialog%,exit%),0)
    '
    SELECT exit%
    CASE delete_move%
      @hide_mouse
      ~FORM_DIAL(3,0,0,0,0,delete_x%,delete_y%,delete_w%,delete_h%)
      @show_mouse
      '
      IF MOUSEK=1 THEN
        ~GRAF_DRAGBOX(delete_w%,delete_h%,delete_x%,delete_y%,mwx%,mwy%,mww%,mwh%,delete_x%,delete_y%)
        OB_X(delete_dialog%,0)=delete_x%
        OB_Y(delete_dialog%,0)=delete_y%
      ENDIF
      '
      er%=WIND_UPDATE(2)
      er%=WIND_UPDATE(0)
      @multi_check
      er%=WIND_UPDATE(1)
      er%=WIND_UPDATE(3)
      '
      ~FORM_DIAL(0,0,0,0,0,delete_x%,delete_y%,delete_w%,delete_h%)
      ~OBJC_DRAW(delete_dialog%,0,2,delete_x%,delete_y%,delete_w%,delete_h%)
      '
    CASE b_delete_ok%
      IF size%(current%)>0
        delete_start%=VAL(CHAR{{OB_SPEC(delete_dialog%,t_delete_start%)}})
        delete_end%=VAL(CHAR{{OB_SPEC(delete_dialog%,t_delete_end%)}})
        delete_size%=VAL(CHAR{{OB_SPEC(delete_dialog%,t_delete_size%)}})
        delete_every%=VAL(CHAR{{OB_SPEC(delete_dialog%,t_delete_every%)}})
        IF delete_start%>size%(current%)-1 THEN
          delete_start%=size%(current%)-1
        ENDIF
        IF delete_end%>size%(current%)-1 THEN
          delete_end%=size%(current%)-1
        ENDIF
        IF delete_start%>delete_end% THEN
          delete_start%=delete_end%
        ENDIF
        IF delete_size%=0 THEN
          delete_size%=delete_end%+1-delete_start%
          delete_every%=delete_size%
        ENDIF
        IF delete_size%<size%(current%) THEN
          @do_delete
        ELSE
          @clear
        ENDIF
      ENDIF
      '
      done%=1
    CASE b_delete_cancel%
      done%=1
      '
    ENDSELECT
    '
    ~OBJC_DRAW(delete_dialog%,exit%,2,delete_x%,delete_y%,delete_w%,delete_h%)
  LOOP UNTIL done%
  '
  ~FORM_DIAL(3,0,0,0,0,delete_x%,delete_y%,delete_w%,delete_h%)
  er%=WIND_UPDATE(2)
  er%=WIND_UPDATE(0)
  '
RETURN
'
> PROCEDURE do_delete
  '
  delete_at%=delete_start%+delete_size%
  delete_on%=delete_start%
  '
  IF delete_every%>delete_size% THEN
    DO
      '
      delete_on%=delete_on%+delete_every%-delete_size%
      delete_at%=delete_at%+delete_every%
      '
    LOOP UNTIL delete_at%>delete_end%
    IF delete_at%>delete_end%+1 THEN
      delete_at%=delete_end%+1
    ENDIF
  ELSE
    delete_at%=delete_end%+1
  ENDIF
  '
  temp%=size%(current%)-delete_at%
  IF temp%>0 THEN
    delete_on%=delete_on%+temp%
  ENDIF
  '
  need%=delete_on%
  IF need%>0 THEN
    temp_buffer%=GEMDOS(72,L:need%)
    IF temp_buffer%>=0 THEN
      delete_at%=delete_start%+delete_size%
      delete_on%=delete_start%
      '
      IF delete_start%>0 THEN
        BMOVE byte_buffer%(current%),temp_buffer%,delete_start%
      ENDIF
      '
      IF delete_every%>delete_size% THEN
        DO
          '
          BMOVE byte_buffer%(current%)+delete_at%,temp_buffer%+delete_on%,delete_every%-delete_size%
          delete_on%=delete_on%+delete_every%-delete_size%
          delete_at%=delete_at%+delete_every%
          '
        LOOP UNTIL delete_at%>delete_end%
        IF delete_at%>delete_end%+1 THEN
          delete_at%=delete_end%+1
        ENDIF
      ELSE
        delete_at%=delete_end%+1
      ENDIF
      '
      temp%=size%(current%)-delete_at%
      IF temp%>0 THEN
        BMOVE byte_buffer%(current%)+delete_at%,temp_buffer%+delete_on%,temp%
      ENDIF
      '
      edit%(current%)=1
      '
      IF byte_buffer%(current%) THEN
        d%=GEMDOS(73,L:byte_buffer%(current%))  ! RELEASE MEMORY
      ENDIF
      '
      byte_buffer%(current%)=temp_buffer%
      size%(current%)=need%
      @title
      @size_slider
      @update_display
      '
    ELSE
      '          ....................................
      alert$(0)=""
      alert$(1)="Sorry, not enough free memory to"
      alert$(2)="complete delete."
      alert$(3)=""
      alert$(4)=""
      alert$(5)=""
      alert$(6)="OK"
      alert$(7)=""
      alert_button%=1
      @alert
      '
    ENDIF
  ELSE
    @clear
  ENDIF
  '
RETURN
'
> PROCEDURE insert
  '
  IF center_dialogs%=0 THEN
    insert_x%=mx&-(insert_w%/2)
    IF insert_x%<mwx% THEN
      insert_x%=mwx%
    ENDIF
    IF insert_x%>mww%-insert_w% THEN
      insert_x%=mww%-insert_w%
    ENDIF
    insert_y%=my&-(insert_h%/2)
    IF insert_y%<mwy% THEN
      insert_y%=mwy%
    ENDIF
    IF insert_y%>mwh%+mwy%-insert_h% THEN
      insert_y%=mwh%+mwy%-insert_h%
    ENDIF
    OB_X(insert_dialog%,0)=insert_x%
    OB_Y(insert_dialog%,0)=insert_y%
  ENDIF
  '
  er%=WIND_UPDATE(1)
  er%=WIND_UPDATE(3)
  '
  CHAR{{OB_SPEC(insert_dialog%,t_insert_name%)}}=view_name$(current%)
  CHAR{{OB_SPEC(insert_dialog%,t_insert_start%)}}=STR$(view%(current%))
  CHAR{{OB_SPEC(insert_dialog%,t_insert_end%)}}=STR$(size%(current%))
  CHAR{{OB_SPEC(insert_dialog%,t_insert_size%)}}=STR$(insert_size%)
  CHAR{{OB_SPEC(insert_dialog%,t_insert_every%)}}=STR$(insert_every%)
  CHAR{{OB_SPEC(insert_dialog%,t_insert_value%)}}=insert_value$
  IF type%(current%)=0 THEN
    temp$="Insert "+type$(0)
  ELSE
    temp$="Insert "+type$(1)
  ENDIF
  CHAR{{OB_SPEC(insert_dialog%,t_insert_title%)}}=temp$
  '
  ~FORM_DIAL(0,0,0,0,0,insert_x%,insert_y%,insert_w%,insert_h%)
  ~OBJC_DRAW(insert_dialog%,0,2,insert_x%,insert_y%,insert_w%,insert_h%)
  '
  done%=0
  DO
    exit%=FORM_DO(insert_dialog%,t_insert_to%)
    exit%=exit% AND &H7FFF
    OB_STATE(insert_dialog%,exit%)=BCLR(OB_STATE(insert_dialog%,exit%),0)
    '
    SELECT exit%
    CASE insert_move%
      @hide_mouse
      ~FORM_DIAL(3,0,0,0,0,insert_x%,insert_y%,insert_w%,insert_h%)
      @show_mouse
      '
      IF MOUSEK=1 THEN
        ~GRAF_DRAGBOX(insert_w%,insert_h%,insert_x%,insert_y%,mwx%,mwy%,mww%,mwh%,insert_x%,insert_y%)
        OB_X(insert_dialog%,0)=insert_x%
        OB_Y(insert_dialog%,0)=insert_y%
      ENDIF
      '
      er%=WIND_UPDATE(2)
      er%=WIND_UPDATE(0)
      @multi_check
      er%=WIND_UPDATE(1)
      er%=WIND_UPDATE(3)
      '
      ~FORM_DIAL(0,0,0,0,0,insert_x%,insert_y%,insert_w%,insert_h%)
      ~OBJC_DRAW(insert_dialog%,0,2,insert_x%,insert_y%,insert_w%,insert_h%)
      '
    CASE b_insert_ok%
      insert_every%=VAL(CHAR{{OB_SPEC(insert_dialog%,t_insert_every%)}})
      IF insert_every%>size%(current%) THEN
        insert_every%=size%(current%)
      ENDIF
      insert_value$=CHAR{{OB_SPEC(insert_dialog%,t_insert_value%)}}
      IF type%(current%)>0 AND insert_value$<>"" THEN
        convert$=insert_value$
        @convert_hex
        insert_value$=convert$
      ENDIF
      IF insert_value$<>"" AND insert_every%>0 THEN
        insert_start%=VAL(CHAR{{OB_SPEC(insert_dialog%,t_insert_start%)}})
        IF insert_start%>size%(current%) THEN
          insert_start%=size%(current%)
        ENDIF
        insert_end%=VAL(CHAR{{OB_SPEC(insert_dialog%,t_insert_end%)}})
        IF insert_end%>size%(current%) THEN
          insert_end%=size%(current%)
        ELSE
          IF insert_end%<insert_start% THEN
            insert_end%=insert_start%
          ENDIF
        ENDIF
        insert_times%=INT((insert_end%+1-insert_start%)/insert_every%)
        insert_size%=VAL(CHAR{{OB_SPEC(insert_dialog%,t_insert_size%)}})
        insert_value_size%=LEN(insert_value$)
        IF insert_value_size%=1 THEN
          insert_value$=STRING$(insert_size%,insert_value$)
        ELSE
          insert_size%=insert_value_size%
        ENDIF
        @do_insert
      ENDIF
      '
      done%=1
    CASE b_insert_cancel%
      done%=1
      '
    ENDSELECT
    '
    ~OBJC_DRAW(insert_dialog%,exit%,2,insert_x%,insert_y%,insert_w%,insert_h%)
  LOOP UNTIL done%
  '
  ~FORM_DIAL(3,0,0,0,0,insert_x%,insert_y%,insert_w%,insert_h%)
  er%=WIND_UPDATE(2)
  er%=WIND_UPDATE(0)
  '
RETURN
'
> PROCEDURE do_insert
  need%=size%(current%)+insert_size%*(insert_times%+1)
  temp_buffer%=GEMDOS(72,L:need%)
  IF temp_buffer%>=0 THEN
    '
    DEFMOUSE 2
    edit%(current%)=1
    IF insert_start%>0 THEN
      BMOVE byte_buffer%(current%),temp_buffer%,insert_start%
    ENDIF
    insert_at%=insert_start%
    insert_on%=0
    insert_value%=V:insert_value$
    DO
      temp%=need%-insert_at%
      IF temp%>=insert_size% THEN
        BMOVE insert_value%,temp_buffer%+insert_at%,insert_size%
        insert_at%=insert_at%+insert_size%
      ENDIF
      '
      temp%=size%(current%)-(insert_start%+insert_on%*insert_every%)
      IF temp%>=insert_every% THEN
        BMOVE byte_buffer%(current%)+insert_start%+insert_on%*insert_every%,temp_buffer%+insert_at%,insert_every%
        insert_at%=insert_at%+insert_every%
      ELSE
        IF temp%>0 THEN
          BMOVE byte_buffer%(current%)+insert_start%+insert_on%*insert_every%,temp_buffer%+insert_at%,temp%
          insert_at%=insert_at%+temp%
        ENDIF
      ENDIF
      '
      INC insert_on%
    LOOP UNTIL insert_on%>insert_times%+1
    '
    IF byte_buffer%(current%) THEN
      d%=GEMDOS(73,L:byte_buffer%(current%))  ! RELEASE MEMORY
    ENDIF
    byte_buffer%(current%)=temp_buffer%
    size%(current%)=need%
    @title
    @size_slider
    @update_display
    DEFMOUSE 0
    '
  ELSE
    '          ....................................
    alert$(0)=""
    alert$(1)="Sorry, not enough free memory to"
    alert$(2)="complete insert."
    alert$(3)=""
    alert$(4)=""
    alert$(5)=""
    alert$(6)="OK"
    alert$(7)=""
    alert_button%=1
    @alert
    '
  ENDIF
  '
RETURN
'
> PROCEDURE merge
  @hide_mouse
  FILESELECT #"Merge file",view_path$+"*.*",view_name$(current%),merge_name$
  @show_mouse
  search_file$=merge_name$+CHR$(0)
  ~FSETDTA(dta%)
  test%=GEMDOS(78,L:V:search_file$,&X100111)
  IF test%=0 THEN
    '
    DEFMOUSE 2
    merge_test%=RINSTR(merge_name$,"\")
    IF merge_test% THEN
      view_path$=MID$(merge_name$,1,merge_test%)
      merge_name$=MID$(merge_name$,merge_test%+1)
    ELSE
      view_path$="\"
    ENDIF
    '
    search_file$=view_path$+merge_name$+CHR$(0)
    ~FSETDTA(dta%)
    finished%=GEMDOS(78,L:V:search_file$,&X100111)
    '
    merge_size%=0
    exit%=0
    DO UNTIL finished% OR exit%
      file$=CHAR{dta%+30}
      '
      IF file$<>"." AND file$<>".."
        '
        OPEN "I",#1,view_path$+file$
        merge_size%=merge_size%+LOF(#1)
        CLOSE #1
        '
      ENDIF
      '
      ~FSETDTA(dta%)
      finished%=GEMDOS(79)
      '
    LOOP
    '
    DEFMOUSE 0
    free%=GEMDOS(72,L:-1)
    '
    IF merge_size% THEN
      '
      IF center_dialogs%=0 THEN
        merge_x%=mx&-(merge_w%/2)
        IF merge_x%<mwx% THEN
          merge_x%=mwx%
        ENDIF
        IF merge_x%>mww%-merge_w% THEN
          merge_x%=mww%-merge_w%
        ENDIF
        merge_y%=my&-(merge_h%/2)
        IF merge_y%<mwy% THEN
          merge_y%=mwy%
        ENDIF
        IF merge_y%>mwh%+mwy%-merge_h% THEN
          merge_y%=mwh%+mwy%-merge_h%
        ENDIF
        OB_X(merge_dialog%,0)=merge_x%
        OB_Y(merge_dialog%,0)=merge_y%
      ENDIF
      '
      er%=WIND_UPDATE(1)
      er%=WIND_UPDATE(3)
      merge_bytes%=merge_size%
      CHAR{{OB_SPEC(merge_dialog%,t_merge_current%)}}=merge_name$
      CHAR{{OB_SPEC(merge_dialog%,t_merge_file%)}}=view_name$(current%)
      CHAR{{OB_SPEC(merge_dialog%,t_merge_at%)}}=STR$(view%(current%))
      CHAR{{OB_SPEC(merge_dialog%,t_merge_bytes%)}}=STR$(merge_bytes%)
      CHAR{{OB_SPEC(merge_dialog%,t_merge_every%)}}=STR$(merge_every%)
      '
      ~FORM_DIAL(0,0,0,0,0,merge_x%,merge_y%,merge_w%,merge_h%)
      ~OBJC_DRAW(merge_dialog%,0,2,merge_x%,merge_y%,merge_w%,merge_h%)
      merge_done%=0
      DO
        exit%=FORM_DO(merge_dialog%,t_merge_at%)
        exit%=exit% AND &H7FFF
        OB_STATE(merge_dialog%,exit%)=BCLR(OB_STATE(merge_dialog%,exit%),0)
        '
        SELECT exit%
        CASE merge_move%
          @hide_mouse
          ~FORM_DIAL(3,0,0,0,0,merge_x%,merge_y%,merge_w%,merge_h%)
          @show_mouse
          '
          IF MOUSEK=1 THEN
            ~GRAF_DRAGBOX(merge_w%,merge_h%,merge_x%,merge_y%,mwx%,mwy%,mww%,mwh%,merge_x%,merge_y%)
            OB_X(merge_dialog%,0)=merge_x%
            OB_Y(merge_dialog%,0)=merge_y%
          ENDIF
          '
          er%=WIND_UPDATE(2)
          er%=WIND_UPDATE(0)
          @multi_check
          er%=WIND_UPDATE(1)
          er%=WIND_UPDATE(3)
          '
          ~FORM_DIAL(0,0,0,0,0,merge_x%,merge_y%,merge_w%,merge_h%)
          ~OBJC_DRAW(merge_dialog%,0,2,merge_x%,merge_y%,merge_w%,merge_h%)
          '
        CASE b_merge_ok%
          @do_merge
          merge_done%=1
          '
        CASE b_merge_multi%
          IF merge_size%<free% THEN
            @multi_merge
          ELSE
            @alert_merge
          ENDIF
          merge_done%=1
          '
        CASE b_merge_cancel%
          merge_done%=1
        ENDSELECT
      LOOP UNTIL merge_done%
      ~FORM_DIAL(3,0,0,0,0,merge_x%,merge_y%,merge_w%,merge_h%)
      er%=WIND_UPDATE(2)
      er%=WIND_UPDATE(0)
      '
    ENDIF
    '
  ENDIF
  '
RETURN
'
> PROCEDURE do_merge
  DEFMOUSE 2
  search_file$=view_path$+merge_name$+CHR$(0)
  ~FSETDTA(dta%)
  finished%=GEMDOS(78,L:V:search_file$,&X100111)
  file$=CHAR{dta%+30}
  OPEN "I",#1,view_path$+file$
  merge_file_size%=LOF(#1)
  CLOSE #1
  '
  merge_at%=VAL(CHAR{{OB_SPEC(merge_dialog%,t_merge_at%)}})
  IF merge_at%>size%(current%) THEN
    merge_at%=size%(current%)
  ENDIF
  merge_bytes%=VAL(CHAR{{OB_SPEC(merge_dialog%,t_merge_bytes%)}})
  IF merge_bytes%>merge_file_size% THEN
    merge_bytes%=merge_file_size%
  ENDIF
  merge_every%=VAL(CHAR{{OB_SPEC(merge_dialog%,t_merge_every%)}})
  IF merge_every%>size%(current%) THEN
    merge_every%=size%(current%)
  ENDIF
  IF merge_every%>0 AND merge_bytes%>0 THEN
    '
    need%=size%(current%)+merge_file_size%
    temp_buffer%=GEMDOS(72,L:need%)
    IF temp_buffer%>0 THEN
      '
      merge_start%=merge_at%
      IF merge_at%>0 THEN
        BMOVE byte_buffer%(current%),temp_buffer%,merge_at%
      ENDIF
      '
      merge_on%=0
      OPEN "I",#1,view_path$+file$
      DO
        temp%=merge_file_size%-(merge_on%*merge_bytes%)
        IF temp%>merge_bytes% THEN
          BGET #1,temp_buffer%+merge_at%,merge_bytes%
          merge_at%=merge_at%+merge_bytes%
        ELSE
          IF temp%>0 THEN
            BGET #1,temp_buffer%+merge_at%,temp%
            merge_at%=merge_at%+temp%
          ENDIF
        ENDIF
        '
        temp%=size%(current%)-(merge_start%+merge_on%*merge_every%)
        IF temp%>merge_every% THEN
          BMOVE byte_buffer%(current%)+merge_start%+merge_on%*merge_every%,temp_buffer%+merge_at%,merge_every%
          merge_at%=merge_at%+merge_every%
        ELSE
          IF temp%>0 THEN
            BMOVE byte_buffer%(current%)+merge_start%+merge_on%*merge_every%,temp_buffer%+merge_at%,temp%
            merge_at%=merge_at%+temp%
          ENDIF
        ENDIF
        '
        INC merge_on%
      LOOP UNTIL merge_at%=need%
      '
      CLOSE #1
      '
      edit%(current%)=1
      ~FSETDTA(dta%)
      finished%=GEMDOS(79)
      IF byte_buffer%(current%)>0 THEN
        d%=GEMDOS(73,L:byte_buffer%(current%))  ! RELEASE MEMORY
        '
      ENDIF
      byte_buffer%(current%)=temp_buffer%
      size%(current%)=need%
      @title
      @size_slider
      @update_display
    ELSE
      @alert_merge
      '
    ENDIF
  ENDIF
  merge_done%=1
  DEFMOUSE 0
  '
RETURN
'
> PROCEDURE multi_merge
  DEFMOUSE 2
  merge_at%=VAL(CHAR{{OB_SPEC(merge_dialog%,t_merge_at%)}})
  IF merge_at%>size%(current%) THEN
    merge_at%=size%(current%)
  ENDIF
  temp_buffer%=GEMDOS(72,L:size%(current%)+merge_size%)
  '
  exit%=0
  search_file$=view_path$+merge_name$+CHR$(0)
  ~FSETDTA(dta%)
  finished%=GEMDOS(78,L:V:search_file$,&X100111)
  '
  top_merge_size%=merge_at%
  IF top_merge_size%>0
    BMOVE byte_buffer%(current%),temp_buffer%,top_merge_size%
  ENDIF
  bottom_size%=size%(current%)-merge_at%
  IF bottom_size%>0 THEN
    BMOVE byte_buffer%(current%)+top_merge_size%,temp_buffer%+top_merge_size%+merge_size%,bottom_size%
  ENDIF
  '
  merge_size%=0
  DO UNTIL finished% OR exit%
    file$=CHAR{dta%+30}
    IF file$<>"." AND file$<>".."
      BLOAD view_path$+file$,temp_buffer%+merge_at%+merge_size%
      OPEN "I",#1,view_path$+file$
      merge_size%=merge_size%+LOF(#1)
      CLOSE #1
      edit%(current%)=1
      '
    ENDIF
    '
    ~FSETDTA(dta%)
    finished%=GEMDOS(79)
    '
  LOOP
  IF byte_buffer%(current%)>0 THEN
    d%=GEMDOS(73,L:byte_buffer%(current%))  ! RELEASE MEMORY
    '
  ENDIF
  byte_buffer%(current%)=temp_buffer%
  size%(current%)=size%(current%)+merge_size%
  @title
  @size_slider
  @update_display
  DEFMOUSE 0
  '
RETURN
'
> PROCEDURE load
  '
  IF view_name$<>"" THEN
    '
    view_test%=RINSTR(view_name$,"\")
    IF view_test% THEN
      view_path$=MID$(view_name$,1,view_test%)
      view_name$=MID$(view_name$,view_test%+1)
    ELSE
      view_path$="\"
    ENDIF
    '
    IF view_name$<>""
      exit%=0
      '
      search_file$=view_path$+view_name$+CHR$(0)
      ~FSETDTA(dta%)
      finished%=GEMDOS(78,L:V:search_file$,&X100111)
      '
      DEFMOUSE 2
      IF finished%=0 THEN
        new_flag%=0
        DO UNTIL finished% OR exit%
          file$=CHAR{dta%+30}
          '
          IF file$<>"." AND file$<>".."
            '
            @get_file
            '
          ENDIF
          '
          ~FSETDTA(dta%)
          finished%=GEMDOS(79)
          '
        LOOP
      ELSE
        file$=view_name$
        test_1%=INSTR(file$,"*")
        test_2%=INSTR(file$,"?")
        IF test_1%=0 AND test_2%=0 THEN
          new_flag%=1
          @get_file
        ENDIF
        '
      ENDIF
      '
      @sort
      DEFMOUSE 0
      '
    ENDIF
    '
  ENDIF
  '
RETURN
'
> PROCEDURE get_file
  '
  IF last_used%<max_window% THEN
    current%=last_used%+1
    '
    view_name$=file$
    '
    IF new_flag%=0 THEN
      OPEN "I",#1,view_path$+file$
      size%(current%)=LOF(#1)
      CLOSE #1
    ELSE
      size%(current%)=0
      '
    ENDIF
    '
    IF size%(current%)>0 THEN
      byte_buffer%(current%)=GEMDOS(72,L:size%(current%))
      '
      IF byte_buffer%(current%)>0 THEN
        BLOAD view_path$+file$,byte_buffer%(current%)
        '
        @window_setup
        '
      ELSE
        exit%=1
        '          ....................................
        alert$(0)=""
        alert$(1)="Sorry, I could not load"
        alert$(2)=view_name$+" as it is "
        alert$(3)="larger than the free memory."
        alert$(4)=""
        alert$(5)=""
        alert$(6)="OK"
        alert$(7)=""
        alert_button%=1
        @alert
        '
      ENDIF
    ELSE
      byte_buffer%(current%)=0
      @window_setup
    ENDIF
    '
  ELSE
    exit%=1
    @alert_window
    '
  ENDIF
  '
RETURN
'
> PROCEDURE save
  '
  @hide_mouse
  FILESELECT #"Save as",view_path$+"*.*",view_name$(current%),view_save$
  @show_mouse
  '
  IF view_save$<>"" THEN
    search_file$=view_save$+CHR$(0)
    ~FSETDTA(dta%)
    test%=GEMDOS(78,L:V:search_file$,&X100111)
    view_test%=RINSTR(view_save$,"\")
    IF view_test%>0 THEN
      view_save_name$=MID$(view_save$,view_test%+1)
      '
    ELSE
      view_save_name$=view_save$
      '
    ENDIF
    '
    IF test%=0 THEN
      temp$=view_save_name$
      @alert_exists
      IF button%=0 THEN
        @do_save
        '
      ENDIF
      '
    ELSE
      @do_save
      '
    ENDIF
    '
  ENDIF
  '
RETURN
'
> PROCEDURE do_save
  test%=INSTR(view_save$,":")
  IF test% THEN
    drive%=ASC(MID$(UPPER$(view_save$),1,1))-64
  ELSE
    drive%=0
  ENDIF
  er%=GEMDOS(54,L:free_buffer%,drive%)
  free_space%=free_buffer%(0)*free_buffer%(2)*free_buffer%(3)
  IF free_space%>=size%(current%) THEN
    DEFMOUSE 2
    BSAVE view_save$,byte_buffer%(current%),size%(current%)
    DEFMOUSE 0
    edit%(current%)=0
  ELSE
    total_size%=size%(current%)
    @alert_free_disk
  ENDIF
  '
RETURN
'
> PROCEDURE close_all
  '
  IF last_used%>0 THEN
    '
    DEFMOUSE 2
    FOR current_close%=1 TO last_used%
      current%=current_close%
      flag%=WIND_CLOSE(win%(current%))       ! CLOSE WINDOW
      @multi_check
    NEXT current_close%
    '
    FOR current_close%=1 TO last_used%
      current%=current_close%
      IF edit%(current%)=1 THEN
        '          ....................................
        alert$(0)=""
        alert$(1)="Changes to "+view_name$(current%)
        alert$(2)="have NOT been saved."
        alert$(3)="Should I close it?"
        alert$(4)=""
        alert$(5)="Close"
        alert$(6)=""
        alert$(7)="Save"
        alert_button%=2
        @alert
        button%=alert_exit%
        '
        IF button%=2 THEN
          @save
          '
        ENDIF
        '
      ENDIF
      '
      IF byte_buffer%(current%)>0 THEN
        d%=GEMDOS(73,L:byte_buffer%(current%))  ! RELEASE MEMORY
        '
      ENDIF
      '
      flag%=WIND_DELETE(win%(current%))      ! DELETE WINDOW
      search%(current%)=0
      found%(current%)=-1
      win%(current%)=-1
      edit%(current%)=0
      '
    NEXT current_close%
    last_used%=0
    '
    @set_menu
    DEFMOUSE 0
    '
  ENDIF
  '
RETURN
'
> PROCEDURE clear
  '
  IF win%(current%)>0 THEN
    flag%=1
    IF edit%(current%)=1 THEN
      '
      '          ....................................
      alert$(0)=""
      alert$(1)="Changes to "+view_name$(current%)
      alert$(2)="have NOT been saved."
      alert$(3)="Should I close it?"
      alert$(4)=""
      alert$(5)="Close"
      alert$(6)="Save"
      alert$(7)="Cancel"
      alert_button%=1
      @alert
      button%=alert_exit%
      '
      SELECT button%
      CASE 1
        @save
        '
      CASE 2
        close_flag%=1
        flag%=0
        '
      ENDSELECT
      '
    ENDIF
    '
    IF flag% THEN
      IF byte_buffer%(current%)>0 THEN
        d%=GEMDOS(73,L:byte_buffer%(current%))  ! RELEASE MEMORY
        '
      ENDIF
      '
      byte_buffer%(current%)=0
      @window_kill
      IF prg_exit%=0 THEN
        DEFMOUSE 2
        @set_menu
        @sort
        DEFMOUSE 0
      ENDIF
      '
    ENDIF
  ENDIF
  '
RETURN
'
> PROCEDURE edit
  '
  row%=INT((my&-iwy%(current%))/font_height%(current%))
  col%=INT((mx&-iwx%(current%))/font_width%(current%))
  '
  er%=WIND_UPDATE(1)
  er%=WIND_UPDATE(3)
  HIDEM
  '
  SELECT type%(current%)
  CASE 0
    @edit_ascii
    '
  CASE 1
    @edit_hex
    '
  CASE 2
    '
  ENDSELECT
  '
  er%=WIND_UPDATE(2)
  er%=WIND_UPDATE(0)
  SHOWM
  '
RETURN
'
> PROCEDURE edit_hex
  '
  col%=INT(((mx&-iwx%(current%))/font_width%(current%))/3)
  IF col%>-1 AND col%<max_char%(current%) AND col%<size%(current%) AND row%<max_window_line%(current%) THEN
    '
    byte%=view%(current%)+col%+row%*the_width%(current%)
    '
    IF byte%<size%(current%)
      '
      CLIP iwx%(current%),iwy%(current%),iww%(current%),iwh%(current%)
      exit%=0
      the_letter%=0
      byte$=""
      '
      DO
        '
        IF INP?(2) THEN
          the_key%=INP(2)
          '
          SELECT the_key%
          CASE 200 ! UP
            IF the_letter%=0 THEN
              '
              byte%=view%(current%)+col%+row%*the_width%(current%)
              value$=HEX$(PEEK(byte_buffer%(current%)+byte%),2)
              TEXT col%*3*font_width%(current%)+iwx%(current%),row%*font_height%(current%)+font_height%(current%)*0.9+iwy%(current%),value$
              DEC row%
              '
              IF row%=-1 THEN
                row%=max_window_line%(current%)-1
                '
                byte%=view%(current%)+col%+row%*the_width%(current%)
                DO WHILE byte%>=size%(current%)
                  DEC row%
                  byte%=view%(current%)+col%+row%*the_width%(current%)
                LOOP
                '
              ELSE
                byte%=view%(current%)+col%+row%*the_width%(current%)
                '
              ENDIF
              '
            ENDIF
            '
          CASE 208 ! DOWN
            IF the_letter%=0 THEN
              '
              value$=HEX$(PEEK(byte_buffer%(current%)+byte%),2)
              byte%=view%(current%)+col%+row%*the_width%(current%)
              TEXT col%*3*font_width%(current%)+iwx%(current%),row%*font_height%(current%)+font_height%(current%)*0.9+iwy%(current%),value$
              INC row%
              '
              IF row%=max_window_line%(current%)
                row%=0
                '
              ENDIF
              '
              byte%=view%(current%)+col%+row%*the_width%(current%)
              IF byte%>=size%(current%)
                row%=0
                byte%=view%(current%)+col%+row%*the_width%(current%)
              ENDIF
              '
            ENDIF
            '
          CASE 205 ! RIGHT
            IF the_letter%=0 THEN
              '
              byte%=view%(current%)+col%+row%*the_width%(current%)
              value$=HEX$(PEEK(byte_buffer%(current%)+byte%),2)
              TEXT col%*3*font_width%(current%)+iwx%(current%),row%*font_height%(current%)+font_height%(current%)*0.9+iwy%(current%),value$
              INC col%
              '
              IF col%=the_width%(current%)
                col%=0
                '
              ENDIF
              '
              byte%=view%(current%)+col%+row%*the_width%(current%)
              IF byte%>=size%(current%)
                col%=0
                byte%=view%(current%)+col%+row%*the_width%(current%)
              ENDIF
              '
            ENDIF
            '
          CASE 203 ! LEFT
            IF the_letter%=0 THEN
              '
              byte%=view%(current%)+col%+row%*the_width%(current%)
              value$=HEX$(PEEK(byte_buffer%(current%)+byte%),2)
              TEXT col%*3*font_width%(current%)+iwx%(current%),row%*font_height%(current%)+font_height%(current%)*0.9+iwy%(current%),value$
              DEC col%
              '
              IF col%=-1 THEN
                col%=the_width%(current%)-1
                '
                byte%=view%(current%)+col%+row%*the_width%(current%)
                IF byte%>=size%(current%) THEN
                  DO
                    DEC col%
                    byte%=view%(current%)+col%+row%*the_width%(current%)
                  LOOP UNTIL byte%<size%(current%)
                ENDIF
                '
              ELSE
                byte%=view%(current%)+col%+row%*the_width%(current%)
                '
              ENDIF
              '
            ENDIF
            '
          CASE 48 TO 57 ! 0-9
            @next_letter
            '
          CASE 65 TO 70,97 TO 102 ! A-F
            IF the_key%>96 THEN
              the_key%=the_key%-32
            ENDIF
            @next_letter
            '
          CASE 27 ! ESC
            exit%=1
            @update_display
            '
          ENDSELECT
          '
        ELSE
          INC flag%
          PAUSE 1
        ENDIF
        '
        IF flag%=10 THEN
          DEFTEXT 2,1,,font_size%(current%)
          GRAPHMODE 4
          TEXT ((col%*3)+the_letter%)*font_width%(current%)+iwx%(current%),row%*font_height%(current%)+font_height%(current%)*0.9+iwy%(current%)," "
          GRAPHMODE 1
          DEFTEXT 1,0,,font_size%(current%)
        ENDIF
        '
        IF flag%=20 THEN
          z%=view%(current%)+col%+row%*the_width%(current%)
          z$=HEX$(PEEK(byte_buffer%(current%)+z%),2)
          TEXT ((col%*3)+the_letter%)*font_width%(current%)+iwx%(current%),row%*font_height%(current%)+font_height%(current%)*0.9+iwy%(current%),MID$(z$,the_letter%+1,1)
          flag%=0
        ENDIF
        '
        IF flag%=30 THEN
          TEXT ((col%*3)+the_letter%)*font_width%(current%)+iwx%(current%),row%*font_height%(current%)+font_height%(current%)*0.9+iwy%(current%)," "
          flag%=0
        ENDIF
        '
      LOOP UNTIL exit%
      '
    ENDIF
    '
  ENDIF
  '
RETURN
'
> PROCEDURE next_letter
  '
  TEXT ((col%*3)+the_letter%)*font_width%(current%)+iwx%(current%),row%*font_height%(current%)+font_height%(current%)*0.9+iwy%(current%),CHR$(the_key%)
  '
  byte$=byte$+CHR$(the_key%)
  INC the_letter%
  IF the_letter%=2 THEN
    @hex_to_dec
    byte$=""
    the_letter%=0
    INC col%
    IF col%=the_width%(current%)
      col%=0
      INC row%
      IF row%>max_window_line%(current%) THEN
        row%=0
      ENDIF
    ENDIF
    byte%=view%(current%)+col%+row%*the_width%(current%)
    IF byte%>=size%(current%) THEN
      col%=0
      row%=0
      byte%=view%(current%)+col%+row%*the_width%(current%)
    ENDIF
  ENDIF
  '
RETURN
'
> PROCEDURE hex_to_dec
  '
  hi%=ASC(MID$(byte$,1,1))-48
  lo%=ASC(MID$(byte$,2,1))-48
  IF hi%>9 THEN
    hi%=hi%-7
  ENDIF
  IF lo%>9 THEN
    lo%=lo%-7
  ENDIF
  value%=hi%*16+lo%
  POKE byte_buffer%(current%)+byte%,value%
  edit%(current%)=1
  '
RETURN
'
> PROCEDURE edit_ascii
  '
  offset%=MIN(the_width%(current%),size%(current%))
  col%=INT((mx&-iwx%(current%))/font_width%(current%))
  IF col%>-1 AND col%<offset% AND row%<max_window_line%(current%) THEN
    '
    byte%=view%(current%)+col%+row%*the_width%(current%)
    '
    IF byte%<size%(current%)
      '
      CLIP iwx%(current%),iwy%(current%),iww%(current%),iwh%(current%)
      exit%=0
      '
      DO
        '
        IF INP?(2) THEN
          the_key%=INP(2)
          '
          SELECT the_key%
          CASE 200 ! UP
            '
            byte%=view%(current%)+col%+row%*the_width%(current%)
            temp%=PEEK(byte_buffer%(current%)+byte%)
            TEXT col%*font_width%(current%)+iwx%(current%),row%*font_height%(current%)+font_height%(current%)*0.9+iwy%(current%),CHR$(temp%)
            DEC row%
            '
            IF row%=-1 THEN
              row%=max_window_line%(current%)-1
              '
              byte%=view%(current%)+col%+row%*the_width%(current%)
              DO WHILE byte%>=size%(current%)
                DEC row%
                byte%=view%(current%)+col%+row%*the_width%(current%)
              LOOP
              '
            ELSE
              byte%=view%(current%)+col%+row%*the_width%(current%)
              '
            ENDIF
            '
          CASE 208 ! DOWN
            '
            byte%=view%(current%)+col%+row%*the_width%(current%)
            temp%=PEEK(byte_buffer%(current%)+byte%)
            TEXT col%*font_width%(current%)+iwx%(current%),row%*font_height%(current%)+font_height%(current%)*0.9+iwy%(current%),CHR$(temp%)
            INC row%
            '
            IF row%=max_window_line%(current%)
              row%=0
              '
            ENDIF
            '
            byte%=view%(current%)+col%+row%*the_width%(current%)
            IF byte%>=size%(current%)
              row%=0
              byte%=view%(current%)+col%+row%*the_width%(current%)
            ENDIF
            '
          CASE 205 ! RIGHT
            '
            byte%=view%(current%)+col%+row%*the_width%(current%)
            temp%=PEEK(byte_buffer%(current%)+byte%)
            TEXT col%*font_width%(current%)+iwx%(current%),row%*font_height%(current%)+font_height%(current%)*0.9+iwy%(current%),CHR$(temp%)
            INC col%
            '
            IF col%=the_width%(current%)
              col%=0
              '
            ENDIF
            '
            byte%=view%(current%)+col%+row%*the_width%(current%)
            IF byte%>=size%(current%)
              col%=0
              byte%=view%(current%)+col%+row%*the_width%(current%)
            ENDIF
            '
          CASE 203 ! LEFT
            '
            byte%=view%(current%)+col%+row%*the_width%(current%)
            temp%=PEEK(byte_buffer%(current%)+byte%)
            TEXT col%*font_width%(current%)+iwx%(current%),row%*font_height%(current%)+font_height%(current%)*0.9+iwy%(current%),CHR$(temp%)
            DEC col%
            '
            IF col%=-1 THEN
              col%=the_width%(current%)-1
              '
              byte%=view%(current%)+col%+row%*the_width%(current%)
              IF byte%>=size%(current%) THEN
                DO
                  DEC col%
                  byte%=view%(current%)+col%+row%*the_width%(current%)
                LOOP UNTIL byte%<size%(current%)
              ENDIF
              '
            ELSE
              byte%=view%(current%)+col%+row%*the_width%(current%)
              '
            ENDIF
            '
          CASE 27 ! ESC
            exit%=1
            @update_display
            '
          DEFAULT
            @next_ascii
            '
          ENDSELECT
          '
        ELSE
          INC flag%
          PAUSE 1
        ENDIF
        '
        IF flag%=10 THEN
          DEFTEXT 2,1,,font_size%(current%)
          GRAPHMODE 4
          TEXT col%*font_width%(current%)+iwx%(current%),row%*font_height%(current%)+font_height%(current%)*0.9+iwy%(current%)," "
          GRAPHMODE 1
          DEFTEXT 1,0,,font_size%(current%)
        ENDIF
        '
        IF flag%=20 THEN
          z%=PEEK(byte_buffer%(current%)+byte%)
          TEXT col%*font_width%(current%)+iwx%(current%),row%*font_height%(current%)+font_height%(current%)*0.9+iwy%(current%),CHR$(z%)
          flag%=0
        ENDIF
        '
        IF flag%=30 THEN
          TEXT col%*font_width%(current%)+iwx%(current%),row%*font_height%(current%)+font_height%(current%)*0.9+iwy%(current%)," "
          flag%=0
        ENDIF
        '
      LOOP UNTIL exit%
      '
    ENDIF
    '
  ENDIF
  '
RETURN
'
> PROCEDURE next_ascii
  '
  TEXT col%*font_width%(current%)+iwx%(current%),row%*font_height%(current%)+font_height%(current%)*0.9+iwy%(current%),CHR$(the_key%)
  '
  POKE byte_buffer%(current%)+byte%,the_key%
  edit%(current%)=1
  INC col%
  IF col%=the_width%(current%)
    col%=0
    INC row%
    IF row%>max_window_line%(current%) THEN
      row%=0
    ENDIF
  ENDIF
  byte%=view%(current%)+col%+row%*the_width%(current%)
  IF byte%>=size%(current%) THEN
    col%=0
    row%=0
    byte%=view%(current%)+col%+row%*the_width%(current%)
  ENDIF
  '
RETURN
'
> PROCEDURE credit
  '
  IF center_dialogs%=0 THEN
    credit_x%=mx&-(credit_w%/2)
    IF credit_x%<mwx% THEN
      credit_x%=mwx%
    ENDIF
    IF credit_x%>mww%-credit_w% THEN
      credit_x%=mww%-credit_w%
    ENDIF
    credit_y%=my&-(credit_h%/2)
    IF credit_y%<mwy% THEN
      credit_y%=mwy%
    ENDIF
    IF credit_y%>mwh%+mwy%-credit_h% THEN
      credit_y%=mwh%+mwy%-credit_h%
    ENDIF
    OB_X(credit_dialog%,0)=credit_x%
    OB_Y(credit_dialog%,0)=credit_y%
  ENDIF
  '
  er%=WIND_UPDATE(1)
  er%=WIND_UPDATE(3)
  free%=GEMDOS(72,L:-1)
  CHAR{{OB_SPEC(credit_dialog%,t_free%)}}=STR$(free%)+" free"
  ~FORM_DIAL(0,0,0,0,0,credit_x%,credit_y%,credit_w%,credit_h%)
  ~OBJC_DRAW(credit_dialog%,0,2,credit_x%,credit_y%,credit_w%,credit_h%)
  credit_done%=0
  DO
    exit%=FORM_DO(credit_dialog%,0)
    exit%=exit% AND &H7FFF
    OB_STATE(credit_dialog%,exit%)=BCLR(OB_STATE(credit_dialog%,exit%),0)
    '
    SELECT exit%
    CASE credit_move%
      @hide_mouse
      ~FORM_DIAL(3,0,0,0,0,credit_x%,credit_y%,credit_w%,credit_h%)
      @show_mouse
      '
      IF MOUSEK=1 THEN
        ~GRAF_DRAGBOX(credit_w%,credit_h%,credit_x%,credit_y%,mwx%,mwy%,mww%,mwh%,credit_x%,credit_y%)
        OB_X(credit_dialog%,0)=credit_x%
        OB_Y(credit_dialog%,0)=credit_y%
      ENDIF
      '
      er%=WIND_UPDATE(2)
      er%=WIND_UPDATE(0)
      @multi_check
      er%=WIND_UPDATE(1)
      er%=WIND_UPDATE(3)
      '
      ~FORM_DIAL(0,0,0,0,0,credit_x%,credit_y%,credit_w%,credit_h%)
      ~OBJC_DRAW(credit_dialog%,0,2,credit_x%,credit_y%,credit_w%,credit_h%)
      '
    CASE b_credit_ok%
      credit_done%=1
      '
    ENDSELECT
  LOOP UNTIL credit_done%
  ~FORM_DIAL(3,0,0,0,0,credit_x%,credit_y%,credit_w%,credit_h%)
  er%=WIND_UPDATE(2)
  er%=WIND_UPDATE(0)
  '
RETURN
'
> PROCEDURE help
  '
  IF center_dialogs%=0 THEN
    help_x%=mx&-(help_w%/2)
    IF help_x%<mwx% THEN
      help_x%=mwx%
    ENDIF
    IF help_x%>mww%-help_w% THEN
      help_x%=mww%-help_w%
    ENDIF
    help_y%=my&-(help_h%/2)
    IF help_y%<mwy% THEN
      help_y%=mwy%
    ENDIF
    IF help_y%>mwh%+mwy%-help_h% THEN
      help_y%=mwh%+mwy%-help_h%
    ENDIF
    OB_X(help_dialog%,0)=help_x%
    OB_Y(help_dialog%,0)=help_y%
  ENDIF
  '
  er%=WIND_UPDATE(1)
  er%=WIND_UPDATE(3)
  ~FORM_DIAL(0,0,0,0,0,help_x%,help_y%,help_w%,help_h%)
  ~OBJC_DRAW(help_dialog%,0,2,help_x%,help_y%,help_w%,help_h%)
  help_done%=0
  DO
    exit%=FORM_DO(help_dialog%,0)
    exit%=exit% AND &H7FFF
    OB_STATE(help_dialog%,exit%)=BCLR(OB_STATE(help_dialog%,exit%),0)
    SELECT exit%
    CASE help_move%
      @hide_mouse
      ~FORM_DIAL(3,0,0,0,0,help_x%,help_y%,help_w%,help_h%)
      @show_mouse
      '
      IF MOUSEK=1 THEN
        ~GRAF_DRAGBOX(help_w%,help_h%,help_x%,help_y%,mwx%,mwy%,mww%,mwh%,help_x%,help_y%)
        OB_X(help_dialog%,0)=help_x%
        OB_Y(help_dialog%,0)=help_y%
      ENDIF
      '
      er%=WIND_UPDATE(2)
      er%=WIND_UPDATE(0)
      @multi_check
      er%=WIND_UPDATE(1)
      er%=WIND_UPDATE(3)
      '
      ~FORM_DIAL(0,0,0,0,0,help_x%,help_y%,help_w%,help_h%)
      ~OBJC_DRAW(help_dialog%,0,2,help_x%,help_y%,help_w%,help_h%)
    DEFAULT
      help_done%=1
    ENDSELECT
    '
  LOOP UNTIL help_done%
  ~FORM_DIAL(3,0,0,0,0,help_x%,help_y%,help_w%,help_h%)
  er%=WIND_UPDATE(2)
  er%=WIND_UPDATE(0)
  '
RETURN
'
> PROCEDURE window_options
  '
  old_window_type%=window_type%
  old_text_size%=text_size%
  IF center_dialogs%=0 THEN
    window_x%=mx&-(window_w%/2)
    IF window_x%<mwx% THEN
      window_x%=mwx%
    ENDIF
    IF window_x%>mww%-window_w% THEN
      window_x%=mww%-window_w%
    ENDIF
    window_y%=my&-(window_h%/2)
    IF window_y%<mwy% THEN
      window_y%=mwy%
    ENDIF
    IF window_y%>mwh%+mwy%-window_h% THEN
      window_y%=mwh%+mwy%-window_h%
    ENDIF
    OB_X(window_dialog%,0)=window_x%
    OB_Y(window_dialog%,0)=window_y%
  ENDIF
  '
  er%=WIND_UPDATE(1)
  er%=WIND_UPDATE(3)
  @which_window
  SELECT font_size%(current%)
  CASE 4
    text_size%=0
  CASE 6
    text_size%=1
  CASE 13
    text_size%=2
  CASE 32
    text_size%=3
  ENDSELECT
  IF current%>0 THEN
    window_type%=type%(current%)
  ELSE
    window_type%=old_window_type%
  ENDIF
  @window_set_all
  '
  window_done%=0
  '
  ~FORM_DIAL(0,0,0,0,0,window_x%,window_y%,window_w%,window_h%)
  ~OBJC_DRAW(window_dialog%,0,2,window_x%,window_y%,window_w%,window_h%)
  '
  DO
    exit%=FORM_DO(window_dialog%,0)
    exit%=exit% AND &H7FFF
    OB_STATE(window_dialog%,exit%)=BCLR(OB_STATE(window_dialog%,exit%),0)
    ~OBJC_DRAW(window_dialog%,exit%,2,window_x%,window_y%,window_w%,window_h%)
    '
    SELECT exit%
    CASE window_move%
      @hide_mouse
      ~FORM_DIAL(3,0,0,0,0,window_x%,window_y%,window_w%,window_h%)
      @show_mouse
      '
      IF MOUSEK=1 THEN
        ~GRAF_DRAGBOX(window_w%,window_h%,window_x%,window_y%,mwx%,mwy%,mww%,mwh%,window_x%,window_y%)
        OB_X(window_dialog%,0)=window_x%
        OB_Y(window_dialog%,0)=window_y%
      ENDIF
      '
      er%=WIND_UPDATE(2)
      er%=WIND_UPDATE(0)
      @multi_check
      er%=WIND_UPDATE(1)
      er%=WIND_UPDATE(3)
      '
      ~FORM_DIAL(0,0,0,0,0,window_x%,window_y%,window_w%,window_h%)
      ~OBJC_DRAW(window_dialog%,0,2,window_x%,window_y%,window_w%,window_h%)
      '
    CASE b_window_ok%
      @window_check_all
      IF current%>0 THEN
        IF type%(current%)<>window_type% OR font%(text_size%,0)<>font_width%(current%) OR font%(text_size%,1)<>font_height%(current%) THEN
          type%(current%)=window_type%
          SELECT text_size%
          CASE 0
            font_size%(current%)=4
          CASE 1
            font_size%(current%)=6
          CASE 2
            font_size%(current%)=13
          CASE 3
            font_size%(current%)=32
          ENDSELECT
          font_width%(current%)=font%(text_size%,0)
          font_height%(current%)=font%(text_size%,1)
          @size_slider
          @fix_slider
        ENDIF
      ENDIF
      window_done%=1
      ~FORM_DIAL(3,0,0,0,0,window_x%,window_y%,window_w%,window_h%)
    CASE b_window_all%
      @window_check_all
      ~FORM_DIAL(3,0,0,0,0,window_x%,window_y%,window_w%,window_h%)
      '
      IF last_used%>0 THEN
        FOR set_all%=1 TO last_used%
          current%=set_all%
          IF type%(current%)<>window_type% OR font%(text_size%,0)<>font_width%(current%) OR font%(text_size%,1)<>font_height%(current%) THEN
            type%(current%)=window_type%
            SELECT text_size%
            CASE 0
              font_size%(current%)=4
            CASE 1
              font_size%(current%)=6
            CASE 2
              font_size%(current%)=13
            CASE 3
              font_size%(current%)=32
            ENDSELECT
            font_width%(current%)=font%(text_size%,0)
            font_height%(current%)=font%(text_size%,1)
            @size_slider
            @fix_slider
            @multi_check
          ENDIF
        NEXT set_all%
      ENDIF
      window_done%=1
    CASE b_window_save%
      @window_check_all
      @settings_save
      @bell
    CASE b_window_cancel%
      window_type%=old_window_type%
      text_size%=old_text_size%
      @window_set_all
      window_done%=1
      ~FORM_DIAL(3,0,0,0,0,window_x%,window_y%,window_w%,window_h%)
      '
    ENDSELECT
  LOOP UNTIL window_done%
  er%=WIND_UPDATE(2)
  er%=WIND_UPDATE(0)
  '
RETURN
'
> PROCEDURE window_set_all
  FOR try%=b_window_6x6% TO b_window_6x6%+3
    OB_STATE(window_dialog%,try%)=BCLR(OB_STATE(window_dialog%,try%),0)
  NEXT try%
  OB_STATE(window_dialog%,b_window_6x6%+text_size%)=BSET(OB_STATE(window_dialog%,b_window_6x6%+text_size%),0)
  '
  FOR set%=0 TO 2
    OB_STATE(window_dialog%,b_window_ascii%+set%)=BCLR(OB_STATE(window_dialog%,b_window_ascii%+set%),0)
  NEXT set%
  OB_STATE(window_dialog%,b_window_ascii%+window_type%)=BSET(OB_STATE(window_dialog%,b_window_ascii%+window_type%),0)
  '
RETURN
'
> PROCEDURE window_check_all
  FOR try%=0 TO 3
    IF BTST(OB_STATE(window_dialog%,b_window_6x6%+try%),0) THEN
      text_size%=try%
    ENDIF
  NEXT try%
  '
  FOR try%=0 TO 2
    IF BTST(OB_STATE(window_dialog%,b_window_ascii%+try%),0) THEN
      window_type%=try%
    ENDIF
  NEXT try%
  '
RETURN
'
> PROCEDURE option
  '
  IF center_dialogs%=0 THEN
    option_x%=mx&-(option_w%/2)
    IF option_x%<mwx% THEN
      option_x%=mwx%
    ENDIF
    IF option_x%>mww%-option_w% THEN
      option_x%=mww%-option_w%
    ENDIF
    option_y%=my&-(option_h%/2)
    IF option_y%<mwy% THEN
      option_y%=mwy%
    ENDIF
    IF option_y%>mwh%+mwy%-option_h% THEN
      option_y%=mwh%+mwy%-option_h%
    ENDIF
    OB_X(option_dialog%,0)=option_x%
    OB_Y(option_dialog%,0)=option_y%
  ENDIF
  '
  er%=WIND_UPDATE(1)
  er%=WIND_UPDATE(3)
  old_window_set_width%=window_set_width%
  old_window_set_height%=window_set_height%
  old_center_dialogs%=center_dialogs%
  old_start_at%=start_at%
  old_zero_goto%=zero_goto%
  '
  IF current%>0 THEN
    window_set_width%=iww%(current%)
    window_set_height%=iwh%(current%)
    @option_set_all
  ENDIF
  '
  option_done%=0
  '
  ~FORM_DIAL(0,0,0,0,0,option_x%,option_y%,option_w%,option_h%)
  ~OBJC_DRAW(option_dialog%,0,2,option_x%,option_y%,option_w%,option_h%)
  '
  DO
    exit%=FORM_DO(option_dialog%,t_option_width%)
    exit%=exit% AND &H7FFF
    OB_STATE(option_dialog%,exit%)=BCLR(OB_STATE(option_dialog%,exit%),0)
    ~OBJC_DRAW(option_dialog%,exit%,2,option_x%,option_y%,option_w%,option_h%)
    '
    SELECT exit%
    CASE option_move%
      @hide_mouse
      ~FORM_DIAL(3,0,0,0,0,option_x%,option_y%,option_w%,option_h%)
      @show_mouse
      '
      IF MOUSEK=1 THEN
        ~GRAF_DRAGBOX(option_w%,option_h%,option_x%,option_y%,mwx%,mwy%,mww%,mwh%,option_x%,option_y%)
        OB_X(option_dialog%,0)=option_x%
        OB_Y(option_dialog%,0)=option_y%
      ENDIF
      '
      er%=WIND_UPDATE(2)
      er%=WIND_UPDATE(0)
      @multi_check
      er%=WIND_UPDATE(1)
      er%=WIND_UPDATE(3)
      '
      ~FORM_DIAL(0,0,0,0,0,option_x%,option_y%,option_w%,option_h%)
      ~OBJC_DRAW(option_dialog%,0,2,option_x%,option_y%,option_w%,option_h%)
      '
    CASE b_option_min%
      CHAR{{OB_SPEC(option_dialog%,t_option_width%)}}=STR$(min_width%)
      CHAR{{OB_SPEC(option_dialog%,t_option_height%)}}=STR$(min_height%)
      ~OBJC_DRAW(option_dialog%,0,2,option_x%,option_y%,option_w%,option_h%)
      '
    CASE b_option_max%
      CHAR{{OB_SPEC(option_dialog%,t_option_width%)}}=STR$(mww%)
      CHAR{{OB_SPEC(option_dialog%,t_option_height%)}}=STR$(mwh%)
      ~OBJC_DRAW(option_dialog%,0,2,option_x%,option_y%,option_w%,option_h%)
      '
    CASE b_option_ok%
      @option_check_all
      IF current%>0 THEN
        IF window_set_width%<>iww%(current%) OR window_set_height%<>iwh%(current%) THEN
          ww%(current%)=window_set_width%+window_x_plus%
          wh%(current%)=window_set_height%+window_y_plus%
          flag%=WIND_SET(win%(current%),5,wx%(current%),wy%(current%),ww%(current%),wh%(current%))     ! SIZE WINDOW
          flag%=WIND_GET(win%(current%),4,iwx%(current%),iwy%(current%),iww%(current%),iwh%(current%)) ! GET INSIDE SIZE
          '
          old_width%=the_width%(current%)
          @size_slider
          @info_line
          IF old_width%<>the_width%(current%) THEN
            @update_display
          ENDIF
          '
        ENDIF
      ENDIF
      option_done%=1
    CASE b_option_save%
      @option_check_all
      @settings_save
      @bell
    CASE b_option_cancel%
      window_set_width%=old_window_set_width%
      window_set_height%=old_window_set_height%
      center_dialogs%=old_center_dialogs%
      start_at%=old_start_at%
      zero_goto%=old_zero_goto%
      @option_set_all
      option_done%=1
      '
    ENDSELECT
  LOOP UNTIL option_done%
  ~FORM_DIAL(3,0,0,0,0,option_x%,option_y%,option_w%,option_h%)
  er%=WIND_UPDATE(2)
  er%=WIND_UPDATE(0)
  '
RETURN
'
> PROCEDURE option_set_all
  '
  CHAR{{OB_SPEC(option_dialog%,t_option_width%)}}=STR$(window_set_width%)
  CHAR{{OB_SPEC(option_dialog%,t_option_height%)}}=STR$(window_set_height%)
  IF center_dialogs% THEN
    OB_STATE(option_dialog%,b_option_center%)=BSET(OB_STATE(option_dialog%,b_option_center%),0)
    OB_STATE(option_dialog%,b_option_mouse%)=BCLR(OB_STATE(option_dialog%,b_option_mouse%),0)
  ELSE
    OB_STATE(option_dialog%,b_option_center%)=BCLR(OB_STATE(option_dialog%,b_option_center%),0)
    OB_STATE(option_dialog%,b_option_mouse%)=BSET(OB_STATE(option_dialog%,b_option_mouse%),0)
  ENDIF
  IF start_at% THEN
    OB_STATE(option_dialog%,b_option_start%)=BSET(OB_STATE(option_dialog%,b_option_start%),0)
  ELSE
    OB_STATE(option_dialog%,b_option_start%)=BCLR(OB_STATE(option_dialog%,b_option_start%),0)
  ENDIF
  IF zero_goto% THEN
    OB_STATE(option_dialog%,b_option_goto%)=BSET(OB_STATE(option_dialog%,b_option_goto%),0)
  ELSE
    OB_STATE(option_dialog%,b_option_goto%)=BCLR(OB_STATE(option_dialog%,b_option_goto%),0)
  ENDIF
  '
RETURN
'
> PROCEDURE option_check_all
  '
  window_set_width%=VAL(CHAR{{OB_SPEC(option_dialog%,t_option_width%)}})
  IF window_set_width%<min_width% THEN
    window_set_width%=min_width%
    CHAR{{OB_SPEC(option_dialog%,t_option_width%)}}=STR$(window_set_width%)
  ENDIF
  IF window_set_width%>mww%-window_x_plus% THEN
    ' window_set_width%=mww%-window_x_plus%
    ' CHAR{{OB_SPEC(option_dialog%,t_option_width%)}}=STR$(window_set_width%)
  ENDIF
  '
  window_set_height%=VAL(CHAR{{OB_SPEC(option_dialog%,t_option_height%)}})
  IF window_set_height%<min_height% THEN
    window_set_height%=min_height%
    CHAR{{OB_SPEC(option_dialog%,t_option_height%)}}=STR$(window_set_height%)
  ENDIF
  IF window_set_height%>mwh%-window_y_plus% THEN
    window_set_height%=mwh%-window_y_plus%
    CHAR{{OB_SPEC(option_dialog%,t_option_height%)}}=STR$(window_set_height%)
  ENDIF
  '
  center_dialogs%=BTST(OB_STATE(option_dialog%,b_option_center%),0)
  start_at%=BTST(OB_STATE(option_dialog%,b_option_start%),0)
  zero_goto%=BTST(OB_STATE(option_dialog%,b_option_goto%),0)
  '
RETURN
'
> PROCEDURE goto
  '
  IF center_dialogs%=0 THEN
    goto_x%=mx&-(goto_w%/2)
    IF goto_x%<mwx% THEN
      goto_x%=mwx%
    ENDIF
    IF goto_x%>mww%-goto_w% THEN
      goto_x%=mww%-goto_w%
    ENDIF
    goto_y%=my&-(goto_h%/2)
    IF goto_y%<mwy% THEN
      goto_y%=mwy%
    ENDIF
    IF goto_y%>mwh%+mwy%-goto_h% THEN
      goto_y%=mwh%+mwy%-goto_h%
    ENDIF
    OB_X(goto_dialog%,0)=goto_x%
    OB_Y(goto_dialog%,0)=goto_y%
  ENDIF
  '
  er%=WIND_UPDATE(1)
  er%=WIND_UPDATE(3)
  IF zero_goto% THEN
    CHAR{{OB_SPEC(goto_dialog%,t_goto%)}}=STR$(0)
  ELSE
    CHAR{{OB_SPEC(goto_dialog%,t_goto%)}}=STR$(view%(current%))
  ENDIF
  ~FORM_DIAL(0,0,0,0,0,goto_x%,goto_y%,goto_w%,goto_h%)
  goto_done%=0
  DO
    ~OBJC_DRAW(goto_dialog%,0,2,goto_x%,goto_y%,goto_w%,goto_h%)
    exit%=FORM_DO(goto_dialog%,t_goto%)
    exit%=exit% AND &H7FFF
    OB_STATE(goto_dialog%,exit%)=BCLR(OB_STATE(goto_dialog%,exit%),0)
    '
    SELECT exit%
    CASE goto_move%
      @hide_mouse
      ~FORM_DIAL(3,0,0,0,0,goto_x%,goto_y%,goto_w%,goto_h%)
      @show_mouse
      '
      IF MOUSEK=1 THEN
        ~GRAF_DRAGBOX(goto_w%,goto_h%,goto_x%,goto_y%,mwx%,mwy%,mww%,mwh%,goto_x%,goto_y%)
        OB_X(goto_dialog%,0)=goto_x%
        OB_Y(goto_dialog%,0)=goto_y%
      ENDIF
      '
      er%=WIND_UPDATE(2)
      er%=WIND_UPDATE(0)
      @multi_check
      er%=WIND_UPDATE(1)
      er%=WIND_UPDATE(3)
      '
      ~FORM_DIAL(0,0,0,0,0,goto_x%,goto_y%,goto_w%,goto_h%)
      ~OBJC_DRAW(goto_dialog%,0,2,goto_x%,goto_y%,goto_w%,goto_h%)
      '
    CASE b_goto_all%
      goto%=VAL(CHAR{{OB_SPEC(goto_dialog%,t_goto%)}})
      FOR current_goto%=1 TO last_used%
        current%=current_goto%
        IF size%(current%) THEN
          IF goto%<>view%(current%)
            view%(current%)=MIN(goto%,size%(current%))
            @fix_slider
          ENDIF
        ENDIF
      NEXT current_goto%
      goto_done%=1
      '
    CASE b_goto_ok%
      IF size%(current%) THEN
        goto%=VAL(CHAR{{OB_SPEC(goto_dialog%,t_goto%)}})
        IF goto%<>view%(current%)
          view%(current%)=MIN(goto%,size%(current%))
          @fix_slider
        ENDIF
      ENDIF
      goto_done%=1
      '
    CASE b_goto_cancel%
      goto_done%=1
      '
    ENDSELECT
  LOOP UNTIL goto_done%
  ~FORM_DIAL(3,0,0,0,0,goto_x%,goto_y%,goto_w%,goto_h%)
  er%=WIND_UPDATE(2)
  er%=WIND_UPDATE(0)
  '
RETURN
'
> PROCEDURE top_window
  CHAR{{OB_SPEC(top_dialog%,t_top_title%)}}="File Spy top"
  @pick_window
  '
  IF pick_done%=1 THEN
    current%=picked%
    flag%=WIND_SET(win%(current%),10,0,0,0,0) ! WINDOW SET TO TOP
  ENDIF
  '
RETURN
'
> PROCEDURE pick_window
  '
  IF center_dialogs%=0 THEN
    top_x%=mx&-(top_w%/2)
    IF top_x%<mwx% THEN
      top_x%=mwx%
    ENDIF
    IF top_x%>mww%-top_w% THEN
      top_x%=mww%-top_w%
    ENDIF
    top_y%=my&-(top_h%/2)
    IF top_y%<mwy% THEN
      top_y%=mwy%
    ENDIF
    IF top_y%>mwh%+mwy%-top_h% THEN
      top_y%=mwh%+mwy%-top_h%
    ENDIF
    OB_X(top_dialog%,0)=top_x%
    OB_Y(top_dialog%,0)=top_y%
  ENDIF
  '
  er%=WIND_UPDATE(1)
  er%=WIND_UPDATE(3)
  FOR x%=0 TO top_size%-1
    CHAR{{OB_SPEC(top_dialog%,t_top_names%+x%)}}="------------"
    OB_STATE(top_dialog%,t_top_names%+x%)=BSET(OB_STATE(top_dialog%,t_top_names%+x%),3)
    OB_FLAGS(top_dialog%,t_top_names%+x%)=BCLR(OB_FLAGS(top_dialog%,t_top_names%),0)
    OB_FLAGS(top_dialog%,t_top_names%+x%)=BCLR(OB_FLAGS(top_dialog%,t_top_names%),6)
    '
  NEXT x%
  '
  IF top_place%>last_used%-top_size% THEN
    top_place%=0
  ENDIF
  '
  FOR x%=0 TO MIN(top_size%,last_used%)-1
    temp$=SPACE$(12)
    LSET temp$=view_name$(sort%(top_place%+x%+1))
    CHAR{{OB_SPEC(top_dialog%,t_top_names%+x%)}}=temp$
    OB_STATE(top_dialog%,t_top_names%+x%)=BCLR(OB_STATE(top_dialog%,t_top_names%+x%),3)
    OB_FLAGS(top_dialog%,t_top_names%+x%)=BSET(OB_FLAGS(top_dialog%,t_top_names%),0)
    OB_FLAGS(top_dialog%,t_top_names%+x%)=BSET(OB_FLAGS(top_dialog%,t_top_names%),6)
    '
  NEXT x%
  '
  IF top_place%=0 THEN
    OB_STATE(top_dialog%,b_top_up%)=BSET(OB_STATE(top_dialog%,b_top_up%),3)
    OB_FLAGS(top_dialog%,b_top_up%)=BCLR(OB_FLAGS(top_dialog%,b_top_up%),6)
  ENDIF
  '
  IF top_place%<last_used%-top_size% THEN
    OB_STATE(top_dialog%,b_top_down%)=BCLR(OB_STATE(top_dialog%,b_top_down%),3)
    OB_FLAGS(top_dialog%,b_top_down%)=BSET(OB_FLAGS(top_dialog%,b_top_down%),6)
    '
  ELSE
    OB_STATE(top_dialog%,b_top_down%)=BSET(OB_STATE(top_dialog%,b_top_down%),3)
    OB_FLAGS(top_dialog%,b_top_down%)=BCLR(OB_FLAGS(top_dialog%,b_top_down%),6)
    '
  ENDIF
  '
  pick_done%=0
  '
  ~FORM_DIAL(0,0,0,0,0,top_x%,top_y%,top_w%,top_h%)
  ~OBJC_DRAW(top_dialog%,0,2,top_x%,top_y%,top_w%,top_h%)
  DO
    pick_exit%=FORM_DO(top_dialog%,0)
    pick_exit%=pick_exit% AND &H7FFF
    OB_STATE(top_dialog%,pick_exit%)=BCLR(OB_STATE(top_dialog%,pick_exit%),0)
    ~OBJC_DRAW(top_dialog%,pick_exit%,2,top_x%,top_y%,top_w%,top_h%)
    '
    SELECT pick_exit%
    CASE top_move%
      @hide_mouse
      ~FORM_DIAL(3,0,0,0,0,top_x%,top_y%,top_w%,top_h%)
      @show_mouse
      '
      IF MOUSEK=1 THEN
        ~GRAF_DRAGBOX(top_w%,top_h%,top_x%,top_y%,mwx%,mwy%,mww%,mwh%,top_x%,top_y%)
        OB_X(top_dialog%,0)=top_x%
        OB_Y(top_dialog%,0)=top_y%
      ENDIF
      '
      er%=WIND_UPDATE(2)
      er%=WIND_UPDATE(0)
      @multi_check
      er%=WIND_UPDATE(1)
      er%=WIND_UPDATE(3)
      '
      ~FORM_DIAL(0,0,0,0,0,top_x%,top_y%,top_w%,top_h%)
      ~OBJC_DRAW(top_dialog%,0,2,top_x%,top_y%,top_w%,top_h%)
      '
    CASE b_top_up%
      IF top_place% AND BTST(OB_STATE(top_dialog%,b_top_up%),3)=0 THEN
        top_place%=top_place%-16
        IF top_place%<0
          top_place%=0
        ENDIF
        FOR x%=0 TO MIN(top_size%,last_used%)-1
          temp$=SPACE$(12)
          LSET temp$=view_name$(sort%(top_place%+x%+1))
          CHAR{{OB_SPEC(top_dialog%,t_top_names%+x%)}}=temp$
          ~OBJC_DRAW(top_dialog%,t_top_names%+x%,2,top_x%,top_y%,top_w%,top_h%)
          '
        NEXT x%
        '
        IF top_place%=0 THEN
          OB_STATE(top_dialog%,b_top_up%)=BSET(OB_STATE(top_dialog%,b_top_up%),3)
          OB_FLAGS(top_dialog%,b_top_up%)=BCLR(OB_FLAGS(top_dialog%,b_top_up%),6)
          ~OBJC_DRAW(top_dialog%,b_top_up%,2,top_x%,top_y%,top_w%,top_h%)
          '
        ENDIF
        '
        IF top_place%<last_used%-top_size% THEN
          OB_STATE(top_dialog%,b_top_down%)=BCLR(OB_STATE(top_dialog%,b_top_down%),3)
          OB_FLAGS(top_dialog%,b_top_down%)=BSET(OB_FLAGS(top_dialog%,b_top_down%),6)
          ~OBJC_DRAW(top_dialog%,b_top_down%,2,top_x%,top_y%,top_w%,top_h%)
        ENDIF
        '
      ENDIF
      '
    CASE b_top_down%
      IF top_place%<last_used%-top_size% AND BTST(OB_STATE(top_dialog%,b_top_down%),3)=0 THEN
        top_place%=top_place%+16
        IF top_place%>last_used%-top_size%
          top_place%=last_used%-top_size%
        ENDIF
        FOR x%=0 TO MIN(top_size%,last_used%)-1
          temp$=SPACE$(12)
          LSET temp$=view_name$(sort%(top_place%+x%+1))
          CHAR{{OB_SPEC(top_dialog%,t_top_names%+x%)}}=temp$
          ~OBJC_DRAW(top_dialog%,t_top_names%+x%,2,top_x%,top_y%,top_w%,top_h%)
          '
        NEXT x%
        '
        IF top_place%>=last_used%-top_size% THEN
          OB_STATE(top_dialog%,b_top_down%)=BSET(OB_STATE(top_dialog%,b_top_down%),3)
          OB_FLAGS(top_dialog%,b_top_down%)=BCLR(OB_FLAGS(top_dialog%,b_top_down%),6)
          ~OBJC_DRAW(top_dialog%,b_top_down%,2,top_x%,top_y%,top_w%,top_h%)
        ENDIF
        '
        IF top_place%>0 THEN
          OB_STATE(top_dialog%,b_top_up%)=BCLR(OB_STATE(top_dialog%,b_top_up%),3)
          OB_FLAGS(top_dialog%,b_top_up%)=BSET(OB_FLAGS(top_dialog%,b_top_up%),6)
          ~OBJC_DRAW(top_dialog%,b_top_up%,2,top_x%,top_y%,top_w%,top_h%)
          '
        ENDIF
        '
      ENDIF
      '
    CASE b_top_cancel%
      pick_done%=2
      '
    DEFAULT
      IF pick_exit%+top_place%+1-t_top_names%<=last_used% THEN
        picked%=sort%(pick_exit%+top_place%+1-t_top_names%)
        pick_done%=1
      ENDIF
      '
    ENDSELECT
    '
  LOOP UNTIL pick_done%
  '
  ~FORM_DIAL(3,0,0,0,0,top_x%,top_y%,top_w%,top_h%)
  er%=WIND_UPDATE(2)
  er%=WIND_UPDATE(0)
  '
RETURN
'
> PROCEDURE find
  '
  IF center_dialogs%=0 THEN
    find_x%=mx&-(find_w%/2)
    IF find_x%<mwx% THEN
      find_x%=mwx%
    ENDIF
    IF find_x%>mww%-find_w% THEN
      find_x%=mww%-find_w%
    ENDIF
    find_y%=my&-(find_h%/2)
    IF find_y%<mwy% THEN
      find_y%=mwy%
    ENDIF
    IF find_y%>mwh%+mwy%-find_h% THEN
      find_y%=mwh%+mwy%-find_h%
    ENDIF
    OB_X(find_dialog%,0)=find_x%
    OB_Y(find_dialog%,0)=find_y%
  ENDIF
  '
  er%=WIND_UPDATE(1)
  er%=WIND_UPDATE(3)
  IF type%(current%)=0 THEN
    temp$="Find "+type$(0)
    OB_STATE(find_dialog%,b_find_case%)=BCLR(OB_STATE(find_dialog%,b_find_case%),3)
    OB_FLAGS(find_dialog%,b_find_case%)=BSET(OB_FLAGS(find_dialog%,b_find_case%),0)
  ELSE
    temp$="Find "+type$(1)
    OB_STATE(find_dialog%,b_find_case%)=BSET(OB_STATE(find_dialog%,b_find_case%),3)
    OB_FLAGS(find_dialog%,b_find_case%)=BCLR(OB_FLAGS(find_dialog%,b_find_case%),0)
  ENDIF
  CHAR{{OB_SPEC(find_dialog%,t_find_title%)}}=temp$
  IF start_at% THEN
    CHAR{{OB_SPEC(find_dialog%,t_start%)}}=STR$(0)
  ELSE
    CHAR{{OB_SPEC(find_dialog%,t_start%)}}=STR$(view%(current%))
  ENDIF
  '
  case%=BTST(OB_STATE(find_dialog%,b_find_case%),0)
  case%=BTST(OB_STATE(find_dialog%,b_find_case%),0)
  old_case%=case%
  find$=CHAR{{OB_SPEC(find_dialog%,t_find%)}}
  old_find$=find$
  replace$=CHAR{{OB_SPEC(find_dialog%,t_replace%)}}
  old_replace$=replace$
  old_start_at%=VAL(CHAR{{OB_SPEC(find_dialog%,t_start%)}})
  '
  ~FORM_DIAL(0,0,0,0,0,find_x%,find_y%,find_w%,find_h%)
  ~OBJC_DRAW(find_dialog%,0,2,find_x%,find_y%,find_w%,find_h%)
  find_done%=0
  DO
    exit%=FORM_DO(find_dialog%,t_find%)
    exit%=exit% AND &H7FFF
    OB_STATE(find_dialog%,exit%)=BCLR(OB_STATE(find_dialog%,exit%),0)
    '
    SELECT exit%
    CASE find_move%
      @hide_mouse
      ~FORM_DIAL(3,0,0,0,0,find_x%,find_y%,find_w%,find_h%)
      @show_mouse
      '
      IF MOUSEK=1 THEN
        ~GRAF_DRAGBOX(find_w%,find_h%,find_x%,find_y%,mwx%,mwy%,mww%,mwh%,find_x%,find_y%)
        OB_X(find_dialog%,0)=find_x%
        OB_Y(find_dialog%,0)=find_y%
      ENDIF
      '
      er%=WIND_UPDATE(2)
      er%=WIND_UPDATE(0)
      @multi_check
      er%=WIND_UPDATE(1)
      er%=WIND_UPDATE(3)
      '
      ~FORM_DIAL(0,0,0,0,0,find_x%,find_y%,find_w%,find_h%)
      ~OBJC_DRAW(find_dialog%,0,2,find_x%,find_y%,find_w%,find_h%)
      '
    CASE b_find%
      find_flag%=0
      find_next_flag%=0
      @set_find
      find_done%=1
      '
    CASE b_find_all%
      find_flag%=0
      find_next_flag%=1
      @set_find_all
      find_done%=1
      '
    CASE b_find_reset%
      IF old_case% THEN
        OB_STATE(find_dialog%,b_find_case%)=BSET(OB_STATE(find_dialog%,b_find_case%),0)
      ELSE
        OB_STATE(find_dialog%,b_find_case%)=BCLR(OB_STATE(find_dialog%,b_find_case%),0)
      ENDIF
      CHAR{{OB_SPEC(find_dialog%,t_find%)}}=old_find$
      CHAR{{OB_SPEC(find_dialog%,t_replace%)}}=old_replace$
      CHAR{{OB_SPEC(find_dialog%,t_start%)}}=STR$(old_start_at%)
      ~OBJC_DRAW(find_dialog%,0,2,find_x%,find_y%,find_w%,find_h%)
      '
    CASE b_replace%
      find_flag%=1
      find_next_flag%=0
      @set_find
      find_done%=1
      '
    CASE b_replace_all%
      find_flag%=2
      find_next_flag%=0
      @set_find
      find_done%=1
      '
    CASE b_find_cancel%
      '
      IF old_case% THEN
        OB_STATE(find_dialog%,b_find_case%)=BSET(OB_STATE(find_dialog%,b_find_case%),0)
      ELSE
        OB_STATE(find_dialog%,b_find_case%)=BCLR(OB_STATE(find_dialog%,b_find_case%),0)
      ENDIF
      CHAR{{OB_SPEC(find_dialog%,t_find%)}}=old_find$
      CHAR{{OB_SPEC(find_dialog%,t_replace%)}}=old_replace$
      find_done%=1
      '
    ENDSELECT
  LOOP UNTIL find_done%
  ~FORM_DIAL(3,0,0,0,0,find_x%,find_y%,find_w%,find_h%)
  er%=WIND_UPDATE(2)
  er%=WIND_UPDATE(0)
  '
RETURN
'
> PROCEDURE set_find
  '
  start%=VAL(CHAR{{OB_SPEC(find_dialog%,t_start%)}})
  case%=BTST(OB_STATE(find_dialog%,b_find_case%),0)
  find$=CHAR{{OB_SPEC(find_dialog%,t_find%)}}
  replace$=CHAR{{OB_SPEC(find_dialog%,t_replace%)}}
  DEFMOUSE 2
  IF size%(current%) THEN
    IF type%(current%)=0 THEN
      @ascii_find
    ELSE
      @hex_find
    ENDIF
  ENDIF
  DEFMOUSE 0
  '
RETURN
'
> PROCEDURE set_find_all
  '
  start%=VAL(CHAR{{OB_SPEC(find_dialog%,t_start%)}})
  case%=BTST(OB_STATE(find_dialog%,b_find_case%),0)
  find$=CHAR{{OB_SPEC(find_dialog%,t_find%)}}
  replace$=CHAR{{OB_SPEC(find_dialog%,t_replace%)}}
  DEFMOUSE 2
  FOR current_find%=1 TO last_used%
    current%=current_find%
    IF size%(current%) THEN
      SELECT type%(current%)
      CASE 0
        @ascii_find
      CASE 1
        @hex_find
      ENDSELECT
    ENDIF
  NEXT current_find%
  DEFMOUSE 0
  '
RETURN
'
> PROCEDURE find_next
  '
  find_next%=1
  IF find$<>"" THEN
    DEFMOUSE 2
    IF find_next_flag% THEN
      FOR current_find%=1 TO last_used%
        current%=current_find%
        IF search%(current%)<size%(current%) THEN
          @ascii_find
        ENDIF
      NEXT current_find%
    ELSE
      IF search%(current%)<size%(current%) THEN
        @ascii_find
      ENDIF
    ENDIF
    DEFMOUSE 0
  ENDIF
  find_next%=0
  '
RETURN
'
> PROCEDURE ascii_find
  '
  length%=LEN(find$)
  '
  IF length% THEN
    @do_search
  ENDIF
  '
RETURN
'
> PROCEDURE hex_find
  '
  convert$=replace$
  IF convert$<>"" THEN
    @convert_hex
    replace$=convert$
  ENDIF
  '
  convert$=find$
  IF convert$<>"" THEN
    @convert_hex
    find$=convert$
  ENDIF
  length%=LEN(find$)
  '
  IF length% THEN
    @do_search
  ENDIF
  '
RETURN
'
> PROCEDURE convert_hex
  '
  place%=LEN(convert$)
  nibble%=0
  count%=0
  DO
    byte%=ASC(MID$(convert$,place%,1))
    '
    SELECT byte%
    CASE 48 TO 57
      byte%=byte%-48
    CASE 65 TO 70
      byte%=byte%-55
    CASE 97 TO 102
      byte%=byte%-87
    DEFAULT
      byte%=-1
    ENDSELECT
    IF byte%<>-1 THEN
      IF nibble%=0 THEN
        hex%(count%)=byte%
        nibble%=1
      ELSE
        hex%(count%)=hex%(count%)+byte%*16
        nibble%=0
        INC count%
      ENDIF
    ENDIF
    DEC place%
  LOOP UNTIL place%=0
  IF nibble% THEN
    INC count%
  ENDIF
  convert$=""
  FOR x%=1 TO count%
    convert$=convert$+CHR$(hex%(count%-x%))
  NEXT x%
  '
RETURN
'
> PROCEDURE convert_ascii
  '
  size%=LEN(convert$)
  convert$=""
  count%=1
  DO
    byte%=ASC(MID$(convert$,count%,1))
    convert$=convert$+HEX$(byte%,2)
    INC count%
  LOOP UNTIL count%>size%
  '
RETURN
'
> PROCEDURE do_search
  '
  IF find_next% THEN
    search_place%=search%(current%)
    '
  ELSE
    search_place%=start%
    '
  ENDIF
  '
  IF search_place%>size%(current%) OR search_place%<start% THEN
    ' search_place%=start%
  ENDIF
  '
  DO
    found%(current%)=-1
    '
    DO
      search_size%=32000
      temp%=search_place%+32000-size%(current%)
      IF temp%>0 THEN
        search_size%=search_size%-temp%
      ENDIF
      search_buffer$=SPACE$(search_size%)
      search_buffer%=VARPTR(search_buffer$)
      BMOVE byte_buffer%(current%)+search_place%,search_buffer%,search_size%
      '
      IF case%=0 AND type%(current%)=0 THEN
        search_buffer$=UPPER$(search_buffer$)
        find$=UPPER$(find$)
        '
      ENDIF
      '
      test%=INSTR(search_buffer$,find$)
      '
      IF test% THEN
        found%(current%)=search_place%+test%-1
        search_place%=search_place%+test%
        '
      ELSE
        search_place%=search_place%+32000-length%
        '
      ENDIF
      '
    LOOP UNTIL found%(current%)>-1 OR search_place%>size%(current%)
    '
    IF search_place%>size%(current%) THEN
      DEC find_flag%
      ' search_place%=0
      '
    ENDIF
    '
    search%(current%)=search_place%
    '
    IF found%(current%)>-1 THEN
      IF find_flag%>0 THEN
        @replace
        '
      ENDIF
      '
      @bell
      IF find_flag%<>2 THEN
        view%(current%)=found%(current%)
        IF slider_size%(current%)<1000
          @fix_slider
          @multi_check
        ENDIF
      ENDIF
      '
    ENDIF
    '
  LOOP UNTIL find_flag%<2
  '
RETURN
'
> PROCEDURE replace
  '
  replace_size%=LEN(replace$)
  replace_place%=found%(current%)
  replace%=VARPTR(replace$)
  IF replace_place%+replace_size%<=size%(current%) THEN
    BMOVE replace%,byte_buffer%(current%)+replace_place%,replace_size%
    edit%(current%)=1
  ENDIF
  '
RETURN
'
> PROCEDURE dump
  '
  IF center_dialogs%=0 THEN
    print_x%=mx&-(print_w%/2)
    IF print_x%<mwx% THEN
      print_x%=mwx%
    ENDIF
    IF print_x%>mww%-print_w% THEN
      print_x%=mww%-print_w%
    ENDIF
    print_y%=my&-(print_h%/2)
    IF print_y%<mwy% THEN
      print_y%=mwy%
    ENDIF
    IF print_y%>mwh%+mwy%-print_h% THEN
      print_y%=mwh%+mwy%-print_h%
    ENDIF
    OB_X(print_dialog%,0)=print_x%
    OB_Y(print_dialog%,0)=print_y%
  ENDIF
  '
  er%=WIND_UPDATE(1)
  er%=WIND_UPDATE(3)
  old_hp%=hp%
  '
  @print_set_all
  '
  print_done%=0
  '
  ~FORM_DIAL(0,0,0,0,0,print_x%,print_y%,print_w%,print_h%)
  ~OBJC_DRAW(print_dialog%,0,2,print_x%,print_y%,print_w%,print_h%)
  '
  DO
    exit%=FORM_DO(print_dialog%,t_print_width%)
    exit%=exit% AND &H7FFF
    OB_STATE(print_dialog%,exit%)=BCLR(OB_STATE(print_dialog%,exit%),0)
    ~OBJC_DRAW(print_dialog%,exit%,2,print_x%,print_y%,print_w%,print_h%)
    '
    SELECT exit%
    CASE print_move%
      @hide_mouse
      ~FORM_DIAL(3,0,0,0,0,print_x%,print_y%,print_w%,print_h%)
      @show_mouse
      '
      IF MOUSEK=1 THEN
        ~GRAF_DRAGBOX(print_w%,print_h%,print_x%,print_y%,mwx%,mwy%,mww%,mwh%,print_x%,print_y%)
        OB_X(print_dialog%,0)=print_x%
        OB_Y(print_dialog%,0)=print_y%
      ENDIF
      '
      er%=WIND_UPDATE(2)
      er%=WIND_UPDATE(0)
      @multi_check
      er%=WIND_UPDATE(1)
      er%=WIND_UPDATE(3)
      '
      ~FORM_DIAL(0,0,0,0,0,print_x%,print_y%,print_w%,print_h%)
      ~OBJC_DRAW(print_dialog%,0,2,print_x%,print_y%,print_w%,print_h%)
      '
    CASE b_print_80%
      hp%=80
      @print_set_all
      ~OBJC_DRAW(print_dialog%,0,2,print_x%,print_y%,print_w%,print_h%)
      '
    CASE b_print_160%
      hp%=160
      @print_set_all
      ~OBJC_DRAW(print_dialog%,0,2,print_x%,print_y%,print_w%,print_h%)
      '
    CASE b_print_check%
      @print_check_all
      @print_set_all
      ~OBJC_DRAW(print_dialog%,0,2,print_x%,print_y%,print_w%,print_h%)
      '
    CASE b_print_printer%
      @print_check_all
      IF type%(current%)<2 AND current%>0 THEN
        IF OUT?(0)
          @printer_dump
          '
        ENDIF
      ENDIF
      print_done%=1
      '
    CASE b_print_file%
      @print_check_all
      IF type%(current%)<2 AND current%>0 THEN
        @file_dump
      ENDIF
      print_done%=1
      '
    CASE b_print_ok%
      @print_check_all
      print_done%=1
      '
    CASE b_print_save%
      @print_check_all
      @settings_save
      @bell
    CASE b_print_cancel%
      hp%=old_hp%
      @print_set_all
      print_done%=1
      '
    ENDSELECT
  LOOP UNTIL print_done%
  ~FORM_DIAL(3,0,0,0,0,print_x%,print_y%,print_w%,print_h%)
  er%=WIND_UPDATE(2)
  er%=WIND_UPDATE(0)
  '
RETURN
'
> PROCEDURE print_set_all
  '
  IF current%>0 THEN
    CHAR{{OB_SPEC(print_dialog%,t_print_name%)}}=view_name$(current%)
    CHAR{{OB_SPEC(print_dialog%,t_print_size%)}}=STR$(size%(current%))
    CHAR{{OB_SPEC(print_dialog%,t_print_type%)}}=type$(type%(current%))
  ELSE
    CHAR{{OB_SPEC(print_dialog%,t_print_name%)}}="-No File-"
    CHAR{{OB_SPEC(print_dialog%,t_print_size%)}}="-"
    CHAR{{OB_SPEC(print_dialog%,t_print_type%)}}=type$(window_type%)
  ENDIF
  CHAR{{OB_SPEC(print_dialog%,t_print_width%)}}=STR$(hp%)
  IF current%>0 AND type%(current%)<2
    OB_STATE(print_dialog%,b_print_printer%)=BCLR(OB_STATE(print_dialog%,b_print_printer%),3)
    OB_FLAGS(print_dialog%,b_print_printer%)=BSET(OB_FLAGS(print_dialog%,b_print_printer%),0)
    OB_FLAGS(print_dialog%,b_print_printer%)=BSET(OB_FLAGS(print_dialog%,b_print_printer%),6)
    '
    OB_STATE(print_dialog%,b_print_file%)=BCLR(OB_STATE(print_dialog%,b_print_file%),3)
    OB_FLAGS(print_dialog%,b_print_file%)=BSET(OB_FLAGS(print_dialog%,b_print_file%),0)
    OB_FLAGS(print_dialog%,b_print_file%)=BSET(OB_FLAGS(print_dialog%,b_print_file%),6)
  ELSE
    OB_STATE(print_dialog%,b_print_file%)=BSET(OB_STATE(print_dialog%,b_print_file%),3)
    OB_FLAGS(print_dialog%,b_print_printer%)=BCLR(OB_FLAGS(print_dialog%,b_print_printer%),0)
    OB_FLAGS(print_dialog%,b_print_printer%)=BCLR(OB_FLAGS(print_dialog%,b_print_printer%),6)
    '
    OB_STATE(print_dialog%,b_print_printer%)=BSET(OB_STATE(print_dialog%,b_print_printer%),3)
    OB_FLAGS(print_dialog%,b_print_file%)=BCLR(OB_FLAGS(print_dialog%,b_print_file%),0)
    OB_FLAGS(print_dialog%,b_print_file%)=BCLR(OB_FLAGS(print_dialog%,b_print_file%),6)
  ENDIF
  IF OUT?(0) THEN
    CHAR{{OB_SPEC(print_dialog%,t_print_status%)}}="Ready"
  ELSE
    CHAR{{OB_SPEC(print_dialog%,t_print_status%)}}="Off-line"
    OB_STATE(print_dialog%,b_print_printer%)=BSET(OB_STATE(print_dialog%,b_print_printer%),3)
    OB_FLAGS(print_dialog%,b_print_printer%)=BCLR(OB_FLAGS(print_dialog%,b_print_printer%),0)
    OB_FLAGS(print_dialog%,b_print_printer%)=BCLR(OB_FLAGS(print_dialog%,b_print_printer%),6)
  ENDIF
  '
RETURN
'
> PROCEDURE print_check_all
  hp%=VAL(CHAR{{OB_SPEC(print_dialog%,t_print_width%)}})
  IF hp%<4 THEN
    hp%=4
  ENDIF
  '
RETURN
'
> PROCEDURE printer_dump
  '
  DEFMOUSE 2
  IF type%(current%)=0 THEN
    width%=hp%
  ELSE
    width%=INT((hp%+1)/3)
  ENDIF
  IF hp%>80 THEN
    OUT 0,27,38,108,49,50,68
    OUT 0,27,38,108,49,51,50,80
    OUT 0,27,40,115,50,48,72
    OUT 0,27,40,115,54,86
  ENDIF
  FOR byte%=1 TO LEN(view_name$(current%))
    OUT 0,ASC(MID$(view_name$(current%),byte%,1))
  NEXT byte%
  OUT 0,32
  size$=STR$(size%(current%))
  FOR byte%=1 TO LEN(size$)
    OUT 0,ASC(MID$(size$,byte%,1))
  NEXT byte%
  OUT 0,10,13
  IF size%(current%)>0 THEN
    FOR row%=0 TO size%(current%)-1 STEP width%
      '
      IF row%<size%(current%) THEN
        the_end%=size%(current%)-row%
        IF type%(current%)=0 THEN
          IF width%>80
            dat$=SPACE$(160)
          ELSE
            dat$=SPACE$(80)
          ENDIF
          BMOVE byte_buffer%(current%)+row%,V:dat$,MIN(hp%,the_end%)
          FOR test%=1 TO MIN(width%,the_end%)
            IF MID$(dat$,test%,1)=CHR$(13) THEN
              MID$(dat$,test%,1)=CHR$(32)
            ENDIF
          NEXT test%
          '
        ELSE
          dat$=""
          FOR hex%=0 TO MIN(width%,the_end%)-1
            dat$=dat$+HEX$(PEEK(byte_buffer%(current%)+row%+hex%),2)+" "
            '
          NEXT hex%
          IF width%>80
            IF LEN(dat$)<160 THEN
              dat$=dat$+SPACE$(160-LEN(dat$))
            ENDIF
          ELSE
            IF LEN(dat$)<80 THEN
              dat$=dat$+SPACE$(80-LEN(dat$))
            ENDIF
          ENDIF
        ENDIF
        '
        OUT 0,27,89
        FOR byte%=1 TO LEN(dat$)
          OUT 0,ASC(MID$(dat$,byte%,1))
        NEXT byte%
        OUT 0,27,90
        OUT 0,10,13
      ENDIF
    NEXT row%
    '
  ENDIF
  OUT 0,12
  DEFMOUSE 0
  '
RETURN
'
> PROCEDURE file_dump
  @hide_mouse
  FILESELECT #"Dump to file",view_path$+"*.*",view_name$(current%),view_name$
  @show_mouse
  '
  IF view_name$<>"" THEN
    test%=RINSTR(view_name$,"\")
    IF test%>0 THEN
      temp$=MID$(view_name$,test%+1)
      temp2$=MID$(view_name$,1,test%)
      '
    ELSE
      temp$=view_name$
      temp2$="\"
      '
    ENDIF
    '
    search_file$=view_name$+CHR$(0)
    ~FSETDTA(dta%)
    test%=GEMDOS(78,L:V:search_file$,&X100111)
    IF test%=0 THEN
      @alert_exists
      '
      IF button%=0 THEN
        view_path$=temp2$
        view_name$=temp$
        @print_to_file
        '
      ENDIF
      '
    ELSE
      view_path$=temp2$
      view_name$=temp$
      @print_to_file
      '
    ENDIF
    '
  ENDIF
  '
RETURN
'
> PROCEDURE print_to_file
  IF type%(current%)=0 THEN
    width%=hp%
  ELSE
    width%=INT((hp%+1)/3)
  ENDIF
  test%=INSTR(view_path$,":")
  IF test% THEN
    drive%=ASC(MID$(UPPER$(view_path$),1,1))-64
  ELSE
    drive%=0
  ENDIF
  er%=GEMDOS(54,L:free_buffer%,drive%)
  free_space%=free_buffer%(0)*free_buffer%(2)*free_buffer%(3)
  '
  temp$=view_name$(current%)+" "+STR$(size%(current%))
  total_size%=size%(current%)+size%(current%)*type%(current%)*2+INT(size%(current%)/hp%)*2+LEN(temp$)+4
  '
  IF free_space%>=total_size% THEN
    '
    DEFMOUSE 2
    OPEN "O",#1,view_path$+view_name$
    PRINT #1,view_name$(current%);" ";STR$(size%(current%))
    IF size%(current%)>0 THEN
      FOR row%=0 TO size%(current%)-1 STEP width%
        '
        IF row%<size%(current%) THEN
          the_end%=size%(current%)-row%
          IF type%(current%)=0 THEN
            dat$=SPACE$(hp%)
            BMOVE byte_buffer%(current%)+row%,V:dat$,MIN(hp%,the_end%)
            FOR test%=1 TO MIN(hp%,the_end%)
              IF MID$(dat$,test%,1)<CHR$(32) THEN
                MID$(dat$,test%,1)=CHR$(32)
              ENDIF
            NEXT test%
            '
          ELSE
            dat$=""
            FOR hex%=0 TO MIN(width%,the_end%)-1
              dat$=dat$+HEX$(PEEK(byte_buffer%(current%)+row%+hex%),2)+" "
              '
            NEXT hex%
          ENDIF
          '
          PRINT #1,dat$
        ENDIF
      NEXT row%
      '
    ENDIF
    CLOSE #1
    DEFMOUSE 0
    '
  ELSE
    @alert_free_disk
  ENDIF
  '
RETURN
'
> PROCEDURE settings_save
  '
  test%=INSTR(my_inf$,":")
  IF test% THEN
    drive%=ASC(MID$(UPPER$(my_inf$),1,1))-64
  ELSE
    drive%=0
  ENDIF
  er%=GEMDOS(54,L:free_buffer%,drive%)
  free_space%=free_buffer%(0)*free_buffer%(2)*free_buffer%(3)
  IF free_space%>=32 THEN
    OPEN "O",#1,my_inf$
    PRINT #1,"FILE SPY setup"
    temp$="TEXT SIZE="+STR$(text_size%)
    PRINT #1,temp$
    temp$="WINDOW CONTENTS TYPE="+STR$(window_type%)
    PRINT #1,temp$
    temp$="PRINTER LINE WIDTH="+STR$(hp%)
    PRINT #1,temp$
    temp$="START AT="+STR$(start_at%)
    PRINT #1,temp$
    temp$="ZERO GOTO="+STR$(zero_goto%)
    PRINT #1,temp$
    temp$="CENTER DIALOGS="+STR$(center_dialogs%)
    PRINT #1,temp$
    temp$="WINDOW WIDTH="+STR$(window_set_width%)
    PRINT #1,temp$
    temp$="WINDOW HEIGHT="+STR$(window_set_height%)
    PRINT #1,temp$
    CLOSE #1
    @bell
    '
  ENDIF
  '
RETURN
'
> PROCEDURE settings_load
  '
  text_size%=2
  window_type%=0
  hp%=80
  start_at%=0
  zero_goto%=0
  center_dialogs%=1
  window_set_width%=mww%
  window_set_height%=mwh%
  search_file$=my_inf$+CHR$(0)
  '
  ~FSETDTA(dta%)
  test%=GEMDOS(78,L:V:search_file$,&X100111)
  IF test%=0 THEN
    OPEN "I",#1,my_inf$
    DO WHILE EOF(#1)=FALSE
      INPUT #1,temp$
      test%=RINSTR(temp$,"=")
      IF test%>1 THEN
        command$=MID$(temp$,1,test%-1)
        inf_set$=MID$(temp$,test%+1)
        IF command$="TEXT SIZE"
          SELECT VAL(inf_set$)
          CASE 0,1,2,3
            text_size%=VAL(inf_set$)
          ENDSELECT
        ENDIF
        IF command$="WINDOW CONTENTS TYPE"
          SELECT VAL(inf_set$)
          CASE 0,1,2
            window_type%=VAL(inf_set$)
          ENDSELECT
        ENDIF
        IF command$="PRINTER LINE WIDTH"
          SELECT VAL(inf_set$)
          CASE 80,160
            hp%=VAL(inf_set$)
          ENDSELECT
        ENDIF
        IF command$="START AT"
          SELECT VAL(inf_set$)
          CASE 0,1,-1
            start_at%=VAL(inf_set$)
          ENDSELECT
        ENDIF
        IF command$="ZERO GOTO"
          SELECT VAL(inf_set$)
          CASE 0,1,-1
            zero_goto%=VAL(inf_set$)
          ENDSELECT
        ENDIF
        IF command$="CENTER DIALOGS"
          SELECT VAL(inf_set$)
          CASE 0,1,-1
            center_dialogs%=VAL(inf_set$)
          ENDSELECT
        ENDIF
        IF command$="WINDOW WIDTH"
          IF VAL(inf_set$)>min_width% THEN
            window_set_width%=VAL(inf_set$)
          ENDIF
        ENDIF
        IF command$="WINDOW HEIGHT"
          IF VAL(inf_set$)>min_height% THEN
            window_set_height%=VAL(inf_set$)
          ENDIF
        ENDIF
      ENDIF
    LOOP UNTIL EOF(#1)=TRUE
    CLOSE #1
  ENDIF
  '
RETURN
'
> PROCEDURE bell
  '
  FOR x%=1 TO 7
    SOUND 0,15-x%,10,5,1
  NEXT x%
  SOUND 0,0,0,0,0
  '
RETURN
'
> PROCEDURE hide_mouse
  CONTRL(0)=123
  CONTRL(1)=0
  CONTRL(3)=0
  CONTRL(6)=my_handle&
  VDISYS
  '
RETURN
'
> PROCEDURE show_mouse
  CONTRL(0)=122
  CONTRL(1)=0
  CONTRL(3)=0
  CONTRL(6)=my_handle&
  VDISYS
  '
RETURN
'
> PROCEDURE trying_to_quit
  '          ....................................
  alert$(0)=""
  alert$(1)=""
  alert$(2)="Sure you want to quit."
  alert$(3)=""
  alert$(4)=""
  alert$(5)="Quit"
  alert$(6)=""
  alert$(7)="Cancel"
  alert_button%=0
  @alert
  button%=alert_exit%
  '
  IF button%=0 THEN
    prg_exit%=1
    close_flag%=0
    FOR current_clear%=1 TO last_used%
      current%=current_clear%
      @clear
    NEXT current_clear%
    IF close_flag%=0 THEN
      ~FSETDTA(old_dta%)
      IF dta%>0 THEN
        d%=GEMDOS(73,L:dta%)  ! RELEASE MEMORY
      ENDIF
      IF window_buffer%>0 THEN
        d%=GEMDOS(73,L:window_buffer%)  ! RELEASE MEMORY
      ENDIF
      ~MENU_BAR(menu%,0)
      ~RSRC_FREE()                 ! FREE RSC MEMORY
      END
    ENDIF
    prg_exit%=0
  ENDIF
  '
RETURN
'
> PROCEDURE alert
  DEFMOUSE 0
  FOR x%=0 TO 4
    CHAR{{OB_SPEC(alert_dialog%,t_alert_text%+x%)}}=alert$(x%)
  NEXT x%
  IF alert$(5)="" THEN
    OB_FLAGS(alert_dialog%,b_alert_1%)=BSET(OB_FLAGS(alert_dialog%,b_alert_1%),7)
  ELSE
    OB_FLAGS(alert_dialog%,b_alert_1%)=BCLR(OB_FLAGS(alert_dialog%,b_alert_1%),7)
    CHAR{{OB_SPEC(alert_dialog%,t_alert_1%)}}=alert$(5)
  ENDIF
  IF alert$(6)="" THEN
    OB_FLAGS(alert_dialog%,b_alert_2%)=BSET(OB_FLAGS(alert_dialog%,b_alert_2%),7)
  ELSE
    OB_FLAGS(alert_dialog%,b_alert_2%)=BCLR(OB_FLAGS(alert_dialog%,b_alert_2%),7)
    CHAR{{OB_SPEC(alert_dialog%,t_alert_2%)}}=alert$(6)
  ENDIF
  IF alert$(7)="" THEN
    OB_FLAGS(alert_dialog%,b_alert_3%)=BSET(OB_FLAGS(alert_dialog%,b_alert_3%),7)
  ELSE
    OB_FLAGS(alert_dialog%,b_alert_3%)=BCLR(OB_FLAGS(alert_dialog%,b_alert_3%),7)
    CHAR{{OB_SPEC(alert_dialog%,t_alert_3%)}}=alert$(7)
  ENDIF
  OB_SPEC(alert_dialog%,b_alert_1%)=OB_SPEC(alert_dialog%,b_alert_1%) AND &HFF00FF
  OB_SPEC(alert_dialog%,b_alert_2%)=OB_SPEC(alert_dialog%,b_alert_2%) AND &HFF00FF
  OB_SPEC(alert_dialog%,b_alert_3%)=OB_SPEC(alert_dialog%,b_alert_3%) AND &HFF00FF
  OB_FLAGS(alert_dialog%,t_alert_1%)=BCLR(OB_FLAGS(alert_dialog%,t_alert_1%),1)
  OB_FLAGS(alert_dialog%,t_alert_2%)=BCLR(OB_FLAGS(alert_dialog%,t_alert_2%),1)
  OB_FLAGS(alert_dialog%,t_alert_3%)=BCLR(OB_FLAGS(alert_dialog%,t_alert_3%),1)
  SELECT alert_button%
  CASE 0
    OB_SPEC(alert_dialog%,b_alert_1%)=OB_SPEC(alert_dialog%,b_alert_1%) OR &HFF11FF
    OB_FLAGS(alert_dialog%,t_alert_1%)=BSET(OB_FLAGS(alert_dialog%,t_alert_1%),1)
  CASE 1
    OB_SPEC(alert_dialog%,b_alert_2%)=OB_SPEC(alert_dialog%,b_alert_2%) OR &HFF11FF
    OB_FLAGS(alert_dialog%,t_alert_2%)=BSET(OB_FLAGS(alert_dialog%,t_alert_2%),1)
  CASE 2
    OB_SPEC(alert_dialog%,b_alert_3%)=OB_SPEC(alert_dialog%,b_alert_3%) OR &HFF11FF
    OB_FLAGS(alert_dialog%,t_alert_3%)=BSET(OB_FLAGS(alert_dialog%,t_alert_3%),1)
  ENDSELECT
  IF center_dialogs%=0 THEN
    alert_x%=mx&-(alert_w%/2)
    IF alert_x%<mwx% THEN
      alert_x%=mwx%
    ENDIF
    IF alert_x%<mwx% THEN
      alert_x%=mwx%
    ENDIF
    IF alert_x%>mww%-alert_w% THEN
      alert_x%=mww%-alert_w%
    ENDIF
    alert_y%=my&-(alert_h%/2)
    IF alert_y%<mwy% THEN
      alert_y%=mwy%
    ENDIF
    IF alert_y%>mwh%+mwy%-alert_h% THEN
      alert_y%=mwh%+mwy%-alert_h%
    ENDIF
    OB_X(alert_dialog%,0)=alert_x%
    OB_Y(alert_dialog%,0)=alert_y%
  ENDIF
  '
  OB_X(alert_dialog%,0)=alert_x%
  OB_Y(alert_dialog%,0)=alert_y%
  ~FORM_DIAL(0,0,0,0,0,alert_x%,alert_y%,alert_w%,alert_h%)
  er%=WIND_UPDATE(1)
  er%=WIND_UPDATE(3)
  ~OBJC_DRAW(alert_dialog%,0,2,alert_x%,alert_y%,alert_w%,alert_h%)
  '
  alert_done%=0
  DO
    exit%=FORM_DO(alert_dialog%,0)
    exit%=exit% AND &H7FFF
    OB_STATE(alert_dialog%,exit%)=BCLR(OB_STATE(alert_dialog%,exit%),0)
    IF exit%=b_alert_move% THEN
      @hide_mouse
      ~FORM_DIAL(3,0,0,0,0,alert_x%,alert_y%,alert_w%,alert_h%)
      @show_mouse
      '
      IF MOUSEK=1 THEN
        ~GRAF_DRAGBOX(alert_w%,alert_h%,alert_x%,alert_y%,mwx%,mwy%,mww%,mwh%,alert_x%,alert_y%)
        OB_X(alert_dialog%,0)=alert_x%
        OB_Y(alert_dialog%,0)=alert_y%
      ENDIF
      '
      er%=WIND_UPDATE(2)
      er%=WIND_UPDATE(0)
      @multi_check
      er%=WIND_UPDATE(1)
      er%=WIND_UPDATE(3)
      '
      ~FORM_DIAL(0,0,0,0,0,alert_x%,alert_y%,alert_w%,alert_h%)
      ~OBJC_DRAW(alert_dialog%,0,2,alert_x%,alert_y%,alert_w%,alert_h%)
      '
    ELSE
      alert_done%=1
    ENDIF
  LOOP UNTIL alert_done%=1
  '
  er%=WIND_UPDATE(2)
  er%=WIND_UPDATE(0)
  ~FORM_DIAL(3,0,0,0,0,alert_x%,alert_y%,alert_w%,alert_h%)
  alert_exit%=INT((exit%-b_alert_1%)/2)
RETURN
'
> PROCEDURE alert_window
  '          ....................................
  alert$(0)=""
  alert$(1)="Sorry, I can not open another window"
  alert$(2)="at this time. Try closing a window"
  alert$(3)="that in not in use."
  alert$(4)=""
  alert$(5)=""
  alert$(6)="OK"
  alert$(7)=""
  alert_button%=1
  @alert
  '
RETURN
'
> PROCEDURE alert_copy
  '          ....................................
  alert$(0)=""
  alert$(1)="Sorry, not enough free memory to"
  alert$(2)="complete copy."
  alert$(3)=""
  alert$(4)=""
  alert$(5)=""
  alert$(6)="OK"
  alert$(7)=""
  alert_button%=1
  @alert
  '
RETURN
'
> PROCEDURE alert_merge
  '          ....................................
  alert$(0)=""
  alert$(1)="Sorry, I could not merge"
  alert$(2)=view_name$+" as it is "
  alert$(3)="larger than the free memory."
  alert$(4)=""
  alert$(5)=""
  alert$(6)="OK"
  alert$(7)=""
  alert_button%=1
  @alert
  '
RETURN
'
> PROCEDURE alert_exists
  '          ....................................
  alert$(0)="Important..."
  alert$(1)=""
  alert$(2)=temp$+" exists,"
  alert$(3)="should I overwrite it?"
  alert$(4)=""
  alert$(5)="Overwrite"
  alert$(6)=""
  alert$(7)="Cancel"
  alert_button%=2
  @alert
  button%=alert_exit%
  '
RETURN
'
> PROCEDURE alert_free_disk
  '          ....................................
  alert$(0)=""
  alert$(1)="Sorry, only "+STR$(free_space%)
  alert$(2)="free bytes on drive "+CHR$(drive%+64)+"."
  alert$(3)="You need "+STR$(total_size%)+" bytes"
  alert$(4)="to save '"+view_save_name$+"'."
  alert$(5)=""
  alert$(6)="OK"
  alert$(7)=""
  alert_button%=1
  @alert
  '
RETURN
