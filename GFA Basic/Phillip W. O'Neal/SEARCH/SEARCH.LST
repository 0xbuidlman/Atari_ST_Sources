$m700000
' RESERVE 700000
' SEARCH ½1994 BY PHILLIP O'NEAL
@init_variables
'
DO
  @check
LOOP
'
> PROCEDURE check
  '
  event_type%=EVNT_MULTI(&X10011,2,1,1,0,0,0,0,0,0,0,0,0,0,buffer%,10,event_mouse_x%,event_mouse_y%,button&,key_state&,key&,clicks&)
  @check_event
  '
RETURN
'
> PROCEDURE multi_check
  '
  FOR multi%=0 TO 5
    event_type%=EVNT_MULTI(&X110000,0,0,1,0,0,0,0,0,0,0,0,0,0,buffer%,1)
    IF event_type% AND &X10000 THEN ! MENU/WINDOW EVENT
      command%=buffer&(0) ! KIND OF EVENT
      '
      IF command%=10 THEN ! MENU ITEM
        tit%=buffer&(3)   ! WHICH MENU TITLE ?
        ~MENU_TNORMAL(menu%,tit%,1)  ! MAKE MENU TITLE NORMAL AGAIN
        '
      ELSE !                         WINDOW EVENT
        IF command%=20 THEN
          top%=buffer&(3)  ! HANDLE OF WINDOW THAT TRIGGERED EVENT
          '
          IF top%=mask_window% THEN
            @repair_mask
            '
          ENDIF
          '
          IF top%=words_window% THEN
            @repair_words
            '
          ENDIF
          '
          IF top%=puzzle_window% THEN
            @repair_puzzle
            '
          ENDIF
          '
        ENDIF
      ENDIF
      '
    ENDIF
  NEXT multi%
  '
RETURN
'
> PROCEDURE init_variables
  '
  GRAPHMODE 1
  old_dta%=FGETDTA()
  dta%=GEMDOS(72,L:1024)
  IF dta%<1 THEN
    dta%=old_dta%
  ENDIF
  ~FSETDTA(dta%)
  '
  INLINE blank%,1024
  @set_paths
  '
  screen_width%=WORK_OUT(0)+1
  screen_height%=WORK_OUT(1)+1
  screen_colors%=WORK_OUT(13)
  '
  my_handle%=V~H  ! GET VDI HANDLE OF PROGRAMS WORKSTATION
  '
  CONTRL(0)=102   ! 'VQ_EXTND' - GET EXTRA INFO ABOUT WORKSTATION
  CONTRL(1)=0
  CONTRL(3)=1
  CONTRL(6)=my_handle%
  INTIN(0)=1
  VDISYS
  screen_bits%=INTOUT(4)  ! GET # OF SCREEN PLANES
  '
  IF screen_bits%>8 THEN
    screen_colors$=STR$(screen_bits%)+" bit color."
  ELSE
    screen_colors$=STR$(screen_colors%)+" colors."
  ENDIF
  '
  OPTION BASE 0
  MAT BASE 0
  DIM source_mfdb%(8),destination_mfdb%(8),parameters%(8)
  '
  FOR zero%=4 TO 8
    source_mfdb%(zero%)=0
    destination_mfdb%(zero%)=0
  NEXT zero%
  '
  source_mfdb%(5)=screen_bits%
  destination_mfdb%(5)=screen_bits%
  parameters%(8)=3 ! REPLACE MODE
  '
  max_char%=16
  max_word%=256
  min_grid%=4
  max_grid%=80
  min_box%=5
  max_box%=16
  word_list$=SPACE$(max_char%*max_word%)
  '
  DIM words$(max_word%),words%(max_word%),mixup(7),derections%(7),used%(7)
  DIM grid(max_grid%,max_grid%)
  DIM undo(max_grid%,max_grid%)
  DIM temp(max_grid%,max_grid%),size(max_word%),placex%(max_grid%),placey%(max_grid%)
  DIM puzzle$(max_grid%),puzzle_words$(max_word%),puzzle%(2,max_word%)
  DIM alert$(8),fill(1,6400),stat$(7)
  DIM driver$(9),cell%(255),gcell%(255)
  '
  mask_save%=1
  words_save%=1
  puzzle_save%=1
  puzzle_ready%=0
  puzzle_line%=0
  found%=0
  '
  pixel_width%=WORK_OUT(3)
  pixel_height%=WORK_OUT(4)
  raito=pixel_height%/pixel_width%
  '
  grid_used%=0
  longest_word%=0
  last_word%=-1
  '
  mask_raster_flag%=1
  mask_mode%=0
  old_mask_mode%=0
  old_current_word%=-1
  drawing%=0
  draw_x%=-1
  draw_y%=-1
  '
  mask_vview%=0
  mask_hview%=0
  words_vview%=0
  words_hview%=0
  puzzle_vview%=0
  puzzle_hview%=0
  print_copies%=1
  '
  min_shadow%=1
  max_shadow%=10
  '
  shadow=2
  shadow_title%=0
  shadow_puzzle%=0
  shadow_wordlist%=0
  '
  grid_box_sizey%=8
  grid_box_sizex%=grid_box_sizey%*raito
  grid_x%=8
  grid_y%=8
  undo_x%=grid_x%
  undo_y%=grid_y%
  dialog_type%=1
  output%=1
  driver%=21
  font_height%=13
  landscape%=0
  top_margin%=0
  bottom_margin%=0
  left_margin%=0
  right_margin%=0
  print_extra%=10
  word_place%=0
  font_name$=""
  gdos_title_color%=1
  gdos_puzzle_color%=1
  gdos_wordlist_color%=1
  gdos_answers_color%=1
  shadow_title%=0
  shadow_puzzle%=0
  shadow_wordlist%=0
  outline_title_%=0
  outline_puzzle%=0
  outline_wordlist%=0
  print_answers%=0
  '
  @inf_load
  '
  MAT CLR grid()
  MAT CLR undo()
  undo%=0
  '
  DIM buffer&(15)
  buffer%=VARPTR(buffer&(0))
  '
  DIM my_buffer&(15)
  my_buffer%=VARPTR(my_buffer&(0))
  '
  flag%=WIND_GET(0,4,mwx%,mwy%,mww%,mwh%)
  '
  ~WIND_CALC(1,&X111111111111,mwx%,mwy%,mww%,mwh%,dummy%,dummy%,miww%,miwh%)
  '
  dif_width%=mww%-miww%
  dif_height%=mwh%-miwh%
  min_window_w%=dif_width%+96
  min_window_h%=dif_height%+96
  '
  ~WIND_CALC(1,&X1,mwx%,mwy%,mww%,mwh%,dummy%,dummy%,dummy%,title_height%)
  title_height%=mwh%-title_height%
  '
  window_stuff%=GEMDOS(72,L:128)
  '
  raster_size%=((mww%*screen_bits%)/8)*mwh%+1024
  raster_buffer%=GEMDOS(72,L:raster_size%)
  '
  IF raster_buffer%<1 THEN
    ALERT 0," |Sorry but I need more than  |the available memory to run.  | ",1," OK ",dummy%
    ~FSETDTA(old_dta%)
    IF dta%>0 THEN
      d%=GEMDOS(73,L:dta%)           ! RELEASE MEMORY
    ENDIF
    IF window_stuff%>0 THEN
      d%=GEMDOS(73,L:window_stuff%)           ! RELEASE MEMORY
    ENDIF
    END
  ENDIF
  '
  mask_title%=window_stuff%
  words_title%=window_stuff%+10
  puzzle_title%=window_stuff%+20
  '
  mask_info%=window_stuff%+30
  words_info%=window_stuff%+50
  puzzle_info%=window_stuff%+70
  '
  @check_for_mint
  @rsc_do
  '
  IF gdos%=1 THEN
    OB_STATE(set_font_dialog%,t_set_font_name%)=BCLR(OB_STATE(set_font_dialog%,t_set_font_name%),3)
    OB_FLAGS(set_font_dialog%,t_set_font_name%)=BSET(OB_FLAGS(set_font_dialog%,t_set_font_name%),6)
  ELSE
    OB_STATE(set_font_dialog%,t_set_font_name%)=BSET(OB_STATE(set_font_dialog%,t_set_font_name%),3)
    OB_FLAGS(set_font_dialog%,t_set_font_name%)=BCLR(OB_FLAGS(set_font_dialog%,t_set_font_name%),6)
    gdos_fonts%=1
    output%=0
  ENDIF
  current_font%=1
  FOR check%=1 TO 18
    IF check%<=gdos_fonts% THEN
      face%=VQT_NAME(check%,temp_name$)
      CHAR{{OB_SPEC(font_dialog%,check%+1)}}=temp_name$
      OB_FLAGS(font_dialog%,check%+1)=BSET(OB_FLAGS(font_dialog%,check%+1),6)
      IF font_name$=temp_name$ THEN
        current_font%=check%
      ENDIF
    ELSE
      CHAR{{OB_SPEC(font_dialog%,check%+1)}}=""
      OB_FLAGS(font_dialog%,check%+1)=BCLR(OB_FLAGS(font_dialog%,check%+1),6)
    ENDIF
  NEXT check%
  @select_font
  '
  CONTRL(0)=39  ! VST_ALIGNMENT
  CONTRL(1)=0
  CONTRL(3)=2
  CONTRL(6)=my_handle%
  INTIN(0)=0
  INTIN(1)=0
  VDISYS
  '
  @set_mask_color
  ~MENU_BAR(menu%,1)
  ~MENU_IENABLE(menu%,m_puzzle_save%,0)
  ~MENU_IENABLE(menu%,m_puzzle_make%,0)
  ~MENU_IENABLE(menu%,m_puzzle_delete%,0)
  ~MENU_IENABLE(menu%,m_words_save%,0)
  ~MENU_IENABLE(menu%,m_words_delete%,0)
  ~MENU_IENABLE(menu%,m_mask_save%,0)
  ~MENU_IENABLE(menu%,m_mask_scale%,0)
  ~MENU_IENABLE(menu%,m_mask_delete%,0)
  '
  @window_setup
  @check_driver
  '
  IF tail$<>""
    test%=RINSTR(tail$,"\")
    IF test%
      work_file$=tail$
    ELSE
      work_file$=current_path$+tail$
    ENDIF
    temp$=UPPER$(RIGHT$(work_file$,4))
    IF temp$=".ICN" OR temp$=".WSM" THEN
      puzzle_path$=view_path$
      @get_grid
      '
    ELSE
      IF temp$=".WSP" THEN
        puzzle_path$=view_path$
        @get_puzzle
        '
      ELSE
        words_path$=view_path$
        @words_read
        '
      ENDIF
      '
    ENDIF
    '
  ENDIF
  ~GRAF_MOUSE(0,0)
  '
RETURN
'
> PROCEDURE check_event
  '
  IF event_type% AND &X10000 THEN ! MENU/WINDOW EVENT
    command%=buffer&(0) ! KIND OF EVENT
    '
    IF command%=10 THEN ! MENU ITEM
      @event_menu
      '
    ELSE !                         WINDOW EVENT
      @event_window
      '
    ENDIF
    '
  ENDIF
  '
  IF event_type% AND &X1 THEN        ! KEY PRESS EVENT
    @event_keypress
    '
  ENDIF
  '
  IF event_type% AND &X10 THEN        ! BUTTON EVENT
    @event_button
    '
  ENDIF
  '
RETURN
'
> PROCEDURE event_keypress
  '
  key_code&=SHR(key& AND &HFF00,8)
  ' UPPER BYTE OF WORD CONTAINS SCAN CODE
  '
  SELECT key_code&
  CASE 98 ! HELP
    @help
    '
  CASE 53 ! ABOUT
    @about
    '
  CASE 16 ! (Q)UIT
    @trying_to_quit
    '
  CASE 45 ! (X) FONTS
    @set_font
    '
  CASE 23 ! (I)MPORT
    ~WIND_GET(0,10,top%,d%,d%,d%)
    IF top%=mask_window% THEN
      mask_load_type%=1
      @menu_mask_load
    ELSE
      words_load_type%=1
      @words_load
    ENDIF
    '
  CASE 24 ! (O)PEN
    ~WIND_GET(0,10,top%,d%,d%,d%)
    IF top%=puzzle_window% THEN
      @menu_puzzle_load
      '
    ELSE
      '
      IF top%=mask_window% THEN
        mask_load_type%=0
        @menu_mask_load
        '
      ELSE
        '
        IF top%=words_window% THEN
          words_load_type%=0
          @words_load
          '
        ELSE
          @menu_puzzle_load
          '
        ENDIF
      ENDIF
    ENDIF
    '
  CASE 31 ! (S)AVE
    ~WIND_GET(0,10,top%,d%,d%,d%)
    IF top%=puzzle_window% THEN
      @menu_puzzle_save
      '
    ELSE
      '
      IF top%=mask_window% THEN
        @menu_mask_save
        '
      ELSE
        '
        IF top%=words_window% THEN
          @menu_words_save
          '
        ELSE
          @menu_puzzle_save
          '
        ENDIF
      ENDIF
    ENDIF
    '
  CASE 25 ! (P)RINT
    @puzzle_print
    '
  CASE 20 ! (T)OP
    IF mask_window_status%=0 THEN
      @menu_mask_top
      '
    ELSE
      IF words_window_status%=0 THEN
        @menu_words_top
        '
      ELSE
        IF puzzle_window_status%=0 THEN
          @menu_puzzle_top
          '
        ELSE
          ~WIND_GET(0,10,top%,d%,d%,d%)
          IF top%=puzzle_window% THEN
            @menu_mask_top
            '
          ELSE
            IF top%=mask_window% THEN
              @menu_words_top
              '
            ELSE
              @menu_puzzle_top
              '
            ENDIF
          ENDIF
          '
        ENDIF
      ENDIF
    ENDIF
    '
  CASE 50 ! (M)AKE
    @menu_make_puzzle
    '
  CASE 32 ! (D)ELETE
    ~WIND_GET(0,10,top%,d%,d%,d%)
    IF top%=puzzle_window% THEN
      @menu_puzzle_delete
      '
    ELSE
      IF top%=mask_window% THEN
        @menu_mask_delete
        '
      ELSE
        IF top%=words_window% THEN
          @menu_words_delete
          '
        ENDIF
        '
      ENDIF
    ENDIF
    '
  CASE 44 ! SI(Z)E
    @size_mask
    '
  CASE 38 ! SCA(L)E
    IF grid_used%>0 THEN
      @scale_mask
    ENDIF
    '
  CASE 30 ! (A)DD
    @menu_words_add
    '
  CASE 17 ! (W)INDOW CLOSE
    ~WIND_GET(0,10,top%,d%,d%,d%)
    IF top%=puzzle_window% THEN
      puzzle_window_status%=0
      flag%=WIND_CLOSE(puzzle_window%)
    ELSE
      '
      IF top%=words_window% THEN
        words_window_status%=0
        flag%=WIND_CLOSE(words_window%)
        '
      ELSE
        IF top%=mask_window% THEN
          mask_window_status%=0
          flag%=WIND_CLOSE(mask_window%)
        ENDIF
      ENDIF
    ENDIF
    '
  CASE 33 ! (F)ULL
    ~WIND_GET(0,10,top%,d%,d%,d%)
    IF top%=puzzle_window% THEN
      old_puzzle_ww%=puzzle_ww%
      old_puzzle_wh%=puzzle_wh%
      @puzzle_full
      '
      flag%=WIND_SET(puzzle_window%,5,puzzle_wx%,puzzle_wy%,puzzle_ww%,puzzle_wh%)     ! SIZE WINDOW
      flag%=WIND_GET(puzzle_window%,4,puzzle_iwx%,puzzle_iwy%,puzzle_iww%,puzzle_iwh%) ! GET INSIDE SIZE
      @size_puzzle_slider
      IF puzzle_ww%<old_puzzle_ww% OR puzzle_wh%<old_puzzle_wh% THEN
        words_update_flag%=0
        @update_puzzle
      ENDIF
      '
    ELSE
      '
      IF top%=words_window% THEN
        old_words_ww%=words_ww%
        old_words_wh%=words_wh%
        @words_full
        '
        flag%=WIND_SET(words_window%,5,words_wx%,words_wy%,words_ww%,words_wh%)     ! SIZE WINDOW
        flag%=WIND_GET(words_window%,4,words_iwx%,words_iwy%,words_iww%,words_iwh%) ! GET INSIDE SIZE
        @size_words_slider
        IF words_ww%<old_words_ww% OR words_wh%<old_words_wh% THEN
          words_update_flag%=0
          @update_words
        ENDIF
        '
      ELSE
        '
        IF top%=mask_window% THEN
          old_mask_vfit%=mask_vfit%
          old_mask_hfit%=mask_hfit%
          @mask_full
          '
          flag%=WIND_SET(mask_window%,5,mask_wx%,mask_wy%,mask_ww%,mask_wh%)     ! SIZE WINDOW
          flag%=WIND_GET(mask_window%,4,mask_iwx%,mask_iwy%,mask_iww%,mask_iwh%) ! GET INSIDE SIZE
          @size_mask_slider
          '
          IF old_mask_vfit%<>mask_vfit% OR old_mask_hfit%<>mask_hfit% THEN
            @update_grid
          ELSE
            @update_mask
          ENDIF
          '
        ENDIF
      ENDIF
    ENDIF
    '
  CASE 72 ! UP
    ~WIND_GET(0,10,top%,d%,d%,d%)
    IF top%=puzzle_window% THEN
      IF puzzle_vview%>0
        old_puzzle_vview%=puzzle_vview%
        DEC puzzle_vview%
        @puzzle_fix_vslider
        '
        IF old_puzzle_vview%<>puzzle_vview% THEN
          @update_puzzle
        ENDIF
      ENDIF
      '
    ELSE
      IF top%=words_window% THEN
        IF words_vview%>0
          old_words_vview%=words_vview%
          DEC words_vview%
          @words_fix_vslider
          IF old_words_vview%<>words_vview% THEN
            @update_words
          ENDIF
        ENDIF
        '
      ELSE
        IF top%=mask_window% THEN
          IF mask_vview%>0 THEN
            old_mask_vview%=mask_vview%
            DEC mask_vview%
            @mask_fix_vslider
            IF old_mask_vview%<>mask_vview% THEN
              @update_grid
            ENDIF
            '
          ENDIF
          '
        ENDIF
      ENDIF
    ENDIF
    '
  CASE 80 ! DOWN
    ~WIND_GET(0,10,top%,d%,d%,d%)
    IF top%=puzzle_window% THEN
      IF puzzle_vview%<puzzle_vmax% AND puzzle_vslider_size%<1000 THEN
        old_puzzle_vview%=puzzle_vview%
        INC puzzle_vview%
        @puzzle_fix_vslider
        IF old_puzzle_vview%<>puzzle_vview% THEN
          @update_puzzle
        ENDIF
      ENDIF
      '
    ELSE
      IF top%=words_window% THEN
        IF words_vview%<words_vmax% AND words_vslider_size%<1000 THEN
          old_words_vview%=words_vview%
          INC words_vview%
          @words_fix_vslider
          IF old_words_vview%<>words_vview% THEN
            @update_words
          ENDIF
        ENDIF
        '
      ELSE
        IF top%=mask_window% THEN
          IF mask_vview%<mask_vmax% AND mask_vslider_size%<1000 THEN
            old_mask_vview%=mask_vview%
            INC mask_vview%
            @mask_fix_vslider
            IF old_mask_vview%<>mask_vview% THEN
              @update_grid
            ENDIF
          ENDIF
          '
        ENDIF
      ENDIF
    ENDIF
    '
  CASE 75 ! LEFT
    ~WIND_GET(0,10,top%,d%,d%,d%)
    IF top%=puzzle_window% THEN
      IF puzzle_hview%>0
        old_puzzle_hview%=puzzle_hview%
        DEC puzzle_hview%
        @puzzle_fix_hslider
        IF old_puzzle_hview%<>puzzle_hview% THEN
          @update_puzzle
        ENDIF
      ENDIF
      '
    ELSE
      IF top%=words_window% THEN
        IF words_hview%>0
          old_words_hview%=words_hview%
          DEC words_hview%
          @words_fix_hslider
          IF old_words_hview%<>words_hview% THEN
            @update_words
          ENDIF
        ENDIF
        '
      ELSE
        IF top%=mask_window% THEN
          IF mask_hview%>0
            old_mask_hview%=mask_hview%
            DEC mask_hview%
            @mask_fix_hslider
            IF old_mask_hview%<>mask_hview% THEN
              @update_grid
            ENDIF
          ENDIF
          '
        ENDIF
      ENDIF
    ENDIF
    '
  CASE 77 ! RIGHT
    ~WIND_GET(0,10,top%,d%,d%,d%)
    IF top%=puzzle_window% THEN
      IF puzzle_hview%<puzzle_hmax% AND puzzle_hslider_size%<1000 THEN
        old_puzzle_hview%=puzzle_hview%
        INC puzzle_hview%
        @puzzle_fix_hslider
        IF old_puzzle_hview%<>puzzle_hview% THEN
          @update_puzzle
        ENDIF
      ENDIF
      '
    ELSE
      IF top%=words_window% THEN
        IF words_hview%<words_hmax% AND words_hslider_size%<1000 THEN
          old_words_hview%=words_hview%
          INC words_hview%
          @words_fix_hslider
          IF old_words_hview%<>words_hview% THEN
            @update_words
          ENDIF
        ENDIF
        '
      ELSE
        IF top%=mask_window% THEN
          IF mask_hview%<mask_hmax% AND mask_hslider_size%<1000 THEN
            old_mask_hview%=mask_hview%
            INC mask_hview%
            @mask_fix_hslider
            IF old_mask_hview%<>mask_hview% THEN
              @update_grid
            ENDIF
          ENDIF
        ENDIF
      ENDIF
    ENDIF
    '
  CASE 57 ! SPACE
    ~WIND_GET(0,10,top%,d%,d%,d%)
    IF top%=puzzle_window% THEN
      IF puzzle_line% THEN
        puzzle_line%=0
      ELSE
        puzzle_line%=1
      ENDIF
      IF puzzle_ready%=1 THEN
        @update_puzzle
      ENDIF
    ELSE
      IF top%=words_window% THEN
        IF last_word%>-1 THEN
          FOR current_word%=0 TO last_word%
            IF words%(current_word%)=1 THEN
              words%(current_word%)=0
            ELSE
              words%(current_word%)=1
            ENDIF
          NEXT current_word%
          old_current_word%=-1
          @update_words
        ENDIF
      ELSE
        IF top%=mask_window% THEN
          IF the_mask_height%=mask_height% THEN
            mask_height%=1
          ELSE
            mask_height%=the_mask_height%
          ENDIF
          temp_hfit%=mask_hfit%
          temp_vfit%=mask_vfit%
          @mask_full
          flag%=WIND_SET(mask_window%,5,mask_wx%,mask_wy%,mask_ww%,mask_wh%)     ! SIZE WINDOW
          flag%=WIND_GET(mask_window%,4,mask_iwx%,mask_iwy%,mask_iww%,mask_iwh%) ! GET INSIDE SIZE
          @size_mask_slider
          IF temp_hfit%<>mask_hfit% OR temp_vfit%<>mask_vfit% THEN
            @update_grid
          ELSE
            @update_mask
          ENDIF
          '
        ENDIF
      ENDIF
    ENDIF
    '
  CASE 97 ! UNDO
    ~WIND_GET(0,10,top%,d%,d%,d%)
    IF top%=mask_window% THEN
      ~GRAF_MOUSE(2,0)
      IF drawing%=1 THEN
        drawing%=0
        @clr_draw
      ENDIF
      undo%=1
      @undo
      ~GRAF_MOUSE(0,0)
    ENDIF
    '
  ENDSELECT
  '
RETURN
'
> PROCEDURE event_menu
  '
  tit%=buffer&(3)   ! WHICH MENU TITLE ?
  ~MENU_TNORMAL(menu%,tit%,1)  ! MAKE MENU TITLE NORMAL AGAIN
  item%=buffer&(4)  ! WHICH MENU ITEM WAS SELECTED
  '
  DO
    ~GRAF_MKSTATE(event_mouse_x%,event_mouse_y%,mouse_button%,key_state%)
  LOOP UNTIL mouse_button%=0
  '
  SELECT item%
    '
  CASE m_about%       ! ABOUT
    @about
    '
  CASE m_fonts%
    @set_font
    '
  CASE m_quit%        ! QUIT
    @trying_to_quit
    '
  CASE m_puzzle_load%
    @menu_puzzle_load
    '
  CASE m_puzzle_save%
    @menu_puzzle_save
    '
  CASE m_puzzle_print%
    @puzzle_print
    '
  CASE m_puzzle_top%
    @menu_puzzle_top
    '
  CASE m_puzzle_make%
    @menu_make_puzzle
    '
  CASE m_puzzle_delete%
    @menu_puzzle_delete
    '
  CASE m_words_load%
    words_load_type%=0
    @words_load
    '
  CASE m_words_import%
    words_load_type%=1
    @words_load
    '
  CASE m_words_save%
    @menu_words_save
    '
  CASE m_words_top%
    @menu_words_top
    '
  CASE m_words_add%
    @menu_words_add
    '
  CASE m_words_delete%
    @menu_words_delete
    '
  CASE m_mask_load%
    mask_load_type%=0
    @menu_mask_load
    '
  CASE m_mask_import%
    mask_load_type%=1
    @menu_mask_load
    '
  CASE m_mask_save%
    @menu_mask_save
    '
  CASE m_mask_top%
    @menu_mask_top
    '
  CASE m_mask_delete%
    @menu_mask_delete
    '
  CASE m_mask_size%
    @size_mask
    '
  CASE m_mask_scale%
    @scale_mask
    '
  ENDSELECT
  '
RETURN
'
> PROCEDURE about
  '
  free%=GEMDOS(72,L:-1)
  alert$(0)="Search"
  alert$(1)=""
  alert$(2)="½1995 by Phillip O'Neal"
  alert$(3)=""
  IF mint%=1 THEN
    alert$(3)="MINT"
  ENDIF
  IF mint%=1 AND gdos%=1 THEN
    alert$(3)=alert$(3)+", "
  ENDIF
  IF gdos%=1 THEN
    alert$(3)=alert$(3)+"GDOS"
  ENDIF
  '
  IF mint%=1 OR gdos%=1 THEN
    alert$(3)=alert$(3)+" present."
  ENDIF
  '
  alert$(4)=STR$(free%)+" bytes free."
  alert$(5)="Screen:"+STR$(screen_width%)+"x"+STR$(screen_height%)+", "+screen_colors$
  alert$(6)="Help"
  alert$(7)=""
  alert$(8)="Cancel"
  button_default%=2
  @alert(alert_button%,button_default%,alert$())
  IF alert_button%=0 THEN
    @multi_check
    @help
  ENDIF
  '
RETURN
'
> PROCEDURE menu_puzzle_load
  alert_button%=0
  IF puzzle_save%=0 THEN
    alert$(0)="Puzzle Load"
    alert$(1)=""
    alert$(2)=puzzle_name$
    alert$(3)="is not saved,"
    alert$(4)="Load anyway ?"
    alert$(5)=""
    alert$(6)="OK"
    alert$(7)=""
    alert$(8)="Cancel"
    button_default%=0
    @alert(alert_button%,button_default%,alert$())
  ENDIF
  IF alert_button%=0 THEN
    @puzzle_load
  ENDIF
  '
RETURN
'
> PROCEDURE menu_mask_load
  @mask_load
  '
RETURN
'
> PROCEDURE menu_puzzle_save
  IF puzzle_ready%=1 THEN
    @puzzle_save
  ELSE
    alert$(0)="Puzzle save"
    alert$(1)=""
    alert$(2)=""
    alert$(3)="Sorry, no puzzle to save."
    alert$(4)=""
    alert$(5)=""
    alert$(6)=""
    alert$(7)="OK"
    alert$(8)=""
    button_default%=1
    @alert(alert_button%,button_default%,alert$())
  ENDIF
  '
RETURN
'
> PROCEDURE menu_words_save
  IF last_word%>-1 THEN
    @words_save
  ELSE
    alert$(0)="Word list save"
    alert$(1)=""
    alert$(2)=""
    alert$(3)="Sorry, no words to save."
    alert$(4)=""
    alert$(5)=""
    alert$(6)=""
    alert$(7)="OK"
    alert$(8)=""
    button_default%=1
    @alert(alert_button%,button_default%,alert$())
  ENDIF
  '
RETURN
'
> PROCEDURE menu_mask_save
  IF grid_used%>0 THEN
    @mask_save
  ELSE
    alert$(0)="Save mask"
    alert$(1)=""
    alert$(2)=""
    alert$(3)="Sorry, no mask to save."
    alert$(4)=""
    alert$(5)=""
    alert$(6)=""
    alert$(7)="OK"
    alert$(8)=""
    button_default%=1
    @alert(alert_button%,button_default%,alert$())
  ENDIF
  '
RETURN
'
> PROCEDURE menu_puzzle_top
  IF puzzle_window_status%=0 THEN
    flag%=WIND_OPEN(puzzle_window%,puzzle_wx%,puzzle_wy%,puzzle_ww%,puzzle_wh%)
    flag%=WIND_SET(puzzle_window%,8,puzzle_hslider_position%,0,0,0)
    flag%=WIND_SET(puzzle_window%,9,puzzle_vslider_position%,0,0,0)
    puzzle_window_status%=1
  ELSE
    flag%=WIND_SET(puzzle_window%,10,0,0,0,0) ! WINDOW SET TO TOP
  ENDIF
  '
RETURN
'
> PROCEDURE menu_mask_top
  IF mask_window_status%=0 THEN
    flag%=WIND_OPEN(mask_window%,mask_wx%,mask_wy%,mask_ww%,mask_wh%)
    flag%=WIND_SET(mask_window%,8,mask_hslider_position%,0,0,0)
    flag%=WIND_SET(mask_window%,9,mask_vslider_position%,0,0,0)
    mask_window_status%=1
    IF mask_raster_flag%=1 THEN
      @update_grid
    ENDIF
  ELSE
    flag%=WIND_SET(mask_window%,10,0,0,0,0) ! WINDOW SET TO TOP
  ENDIF
  '
RETURN
'
> PROCEDURE menu_words_top
  IF words_window_status%=0 THEN
    flag%=WIND_OPEN(words_window%,words_wx%,words_wy%,words_ww%,words_wh%)
    flag%=WIND_SET(words_window%,8,words_hslider_position%,0,0,0)
    flag%=WIND_SET(words_window%,9,words_vslider_position%,0,0,0)
    words_window_status%=1
  ELSE
    flag%=WIND_SET(words_window%,10,0,0,0,0) ! WINDOW SET TO TOP
  ENDIF
  '
RETURN
'
> PROCEDURE menu_make_puzzle
  IF ((longest_word%>grid_x% AND longest_word%>grid_y%) OR grid_used%=0 OR last_word%=-1) THEN
    alert$(0)="Puzzle create"
    alert$(1)=""
    alert$(2)="Can not make puzzle,"
    alert$(3)=""
    alert$(4)=""
    alert$(5)=""
    alert$(6)=""
    alert$(7)="OK"
    alert$(8)=""
    '
    current_alert%=3
    IF grid_used%=0 THEN
      alert$(current_alert%)="No mask to use for puzzle."
      INC current_alert%
    ENDIF
    IF last_word%=-1 THEN
      alert$(current_alert%)="No words to use for puzzle."
    ENDIF
    IF longest_word%>grid_x% AND longest_word%>grid_y% AND grid_used%>0 AND last_word%>-1 THEN
      alert$(current_alert%)="Word(s) to long to fit mask."
    ENDIF
    button_default%=1
    @alert(alert_button%,button_default%,alert$())
    '
  ELSE
    alert_button%=0
    IF puzzle_save%=0 AND puzzle_ready%=1 THEN
      alert$(0)="Puzzle create"
      alert$(1)=""
      alert$(2)=""
      alert$(3)="OK to erase old puzzle ?"
      alert$(4)=""
      alert$(5)=""
      alert$(6)="OK"
      alert$(7)=""
      alert$(8)="Cancel"
      button_default%=0
      @alert(alert_button%,button_default%,alert$())
    ENDIF
    '
  ENDIF
  IF alert_button%=0 THEN
    ~GRAF_MKSTATE(event_mouse_x%,event_mouse_y%,mouse_button%,key_state%)
    @make_puzzle
  ENDIF
  '
RETURN
'
> PROCEDURE menu_puzzle_delete
  IF puzzle_ready%=1 THEN
    alert_button%=0
    IF puzzle_save%=0 THEN
      alert$(0)="Delete Puzzle"
      alert$(1)=""
      alert$(2)=""
      alert$(3)="OK to earse puzzle ?"
      alert$(4)=""
      alert$(5)=""
      alert$(6)="OK"
      alert$(7)=""
      alert$(8)="Cancel"
      button_default%=0
      @alert(alert_button%,button_default%,alert$())
    ENDIF
    IF alert_button%=0 THEN
      puzzle_save%=1
      puzzle_ready%=0
      @set_new_puzzle_size
    ENDIF
  ENDIF
  '
RETURN
'
> PROCEDURE menu_words_delete
  IF last_word%>-1 THEN
    flag%=0
    temp%=0
    word_change_flag%=0
    FOR x%=0 TO last_word%
      IF words%(x%)=1 THEN
        INC temp%
        flag%=1
      ENDIF
    NEXT x%
    IF flag%=1 THEN
      '
      alert$(0)="Delete words"
      alert$(1)=""
      alert$(2)="OK to delete the "+STR$(temp%)
      alert$(3)="selected words ?"
      alert$(4)=""
      alert$(5)=""
      alert$(6)="OK"
      alert$(7)=""
      alert$(8)="Cancel"
      button_default%=0
      @alert(alert_button%,button_default%,alert$())
      '
      IF alert_button%=0 THEN
        found%=0
        FOR x%=0 TO last_word%
          IF words%(x%)=1 THEN
            words%(x%)=0
            temp$=SPACE$(max_char%)
            MID$(temp$,1,LEN(words$(x%)))=words$(x%)
            words$(x%)=""
            test%=INSTR(word_list$,temp$)
            IF test% THEN
              MID$(word_list$,test%,max_char%)=SPACE$(max_char%)
            ENDIF
            INC found%
          ENDIF
        NEXT x%
        last_word%=last_word%-found%
        word_change_flag%=1
      ENDIF
    ELSE
      alert_button%=0
      IF words_save%=0 THEN
        alert$(0)="Delete words"
        alert$(1)=""
        alert$(2)="The word list was not saved,"
        alert$(3)="OK to erase the word list ?"
        alert$(4)=""
        alert$(5)=""
        alert$(6)="OK"
        alert$(7)=""
        alert$(8)="Cancel"
        button_default%=0
        @alert(alert_button%,button_default%,alert$())
        '
      ENDIF
      IF alert_button%=0 THEN
        FOR x%=0 TO last_word%
          words%(x%)=0
          words$(x%)=""
        NEXT x%
        word_list$=SPACE$(max_word%*max_char%)
        last_word%=-1
        words_save%=1
        word_change_flag%=1
      ENDIF
    ENDIF
    IF word_change_flag%=1
      @set_new_words_size
    ENDIF
  ENDIF
  '
RETURN
'
> PROCEDURE menu_mask_delete
  IF grid_used%>0 THEN
    alert_button%=0
    IF mask_save%=0 AND grid_used%>0 THEN
      alert$(0)="Delete mask"
      alert$(1)=""
      alert$(2)="The mask is not saved,"
      alert$(3)="OK to erase mask ?"
      alert$(4)=""
      alert$(5)=""
      alert$(6)="OK"
      alert$(7)=""
      alert$(8)="Cancel"
      button_default%=0
      @alert(alert_button%,button_default%,alert$())
      '
    ENDIF
    IF alert_button%=0 THEN
      ~GRAF_MOUSE(2,0)
      @undo
      MAT CLR grid()
      grid_used%=0
      mask_save%=1
      @set_new_mask_size
      ~GRAF_MOUSE(0,0)
    ENDIF
  ENDIF
  '
RETURN
'
> PROCEDURE menu_words_size
  ~GRAF_MOUSE(2,0)
  IF outline_wordlist% THEN
    DEFTEXT ,16
  ELSE
    DEFTEXT ,0
  ENDIF
  widest_word%=1
  FOR x%=0 TO last_word%
    ~VQT_EXTENT(words$(x%),d%,d%,d%,d%,z%,d%,d%,d%)
    widest_word%=MAX(widest_word%,z%)
  NEXT x%
  @words_full
  flag%=WIND_SET(words_window%,5,words_wx%,words_wy%,words_ww%,words_wh%)     ! SIZE WINDOW
  flag%=WIND_GET(words_window%,4,words_iwx%,words_iwy%,words_iww%,words_iwh%) ! GET INSIDE SIZE
  @size_words_slider
  @update_words
  ~GRAF_MOUSE(0,0)
  '
RETURN
'
> PROCEDURE menu_puzzle_size
  ~GRAF_MOUSE(2,0)
  '
  @puzzle_full
  flag%=WIND_SET(puzzle_window%,5,puzzle_wx%,puzzle_wy%,puzzle_ww%,puzzle_wh%)     ! SIZE WINDOW
  flag%=WIND_GET(puzzle_window%,4,puzzle_iwx%,puzzle_iwy%,puzzle_iww%,puzzle_iwh%) ! GET INSIDE SIZE
  @size_puzzle_slider
  @update_puzzle
  ~GRAF_MOUSE(0,0)
  '
RETURN
'
> PROCEDURE menu_words_add
  IF last_word%<max_word%-1 THEN
    current_word%=last_word%+1
    @edit_words
  ELSE
    alert$(0)="Edit words"
    alert$(1)=""
    alert$(2)="Sorry, the word list is full,"
    alert$(3)="Try deleting some words."
    alert$(4)=""
    alert$(5)=""
    alert$(6)=""
    alert$(7)="OK"
    alert$(8)=""
    button_default%=1
    @alert(alert_button%,button_default%,alert$())
  ENDIF
  '
RETURN
'
> PROCEDURE event_window
  '
  top%=buffer&(3)  ! HANDLE OF WINDOW THAT TRIGGERED EVENT
  '
  IF top%=mask_window% THEN
    @mask_window
    '
  ENDIF
  '
  IF top%=words_window% THEN
    @words_window
    '
  ENDIF
  '
  IF top%=puzzle_window% THEN
    @puzzle_window
    '
  ENDIF
  '
RETURN
'
> PROCEDURE mask_window
  SELECT command%
    '
  CASE 20     ! WIND UPDATE
    @repair_mask
    '
  CASE 21     ! WINDOW CLICKED ON
    flag%=WIND_SET(mask_window%,10,0,0,0,0) ! WINDOW SET TO TOP
    ~GRAF_MOUSE(0,0)
    DO
      ~GRAF_MKSTATE(event_mouse_x%,event_mouse_y%,mouse_button%,key_state%)
    LOOP UNTIL mouse_button%=0
    '
  CASE 22 ! CLOSE WINDOW
    mask_window_status%=0
    flag%=WIND_CLOSE(mask_window%)
    '
  CASE 23 ! FULL WINDOW
    '
    old_mask_vfit%=mask_vfit%
    old_mask_hfit%=mask_hfit%
    @mask_full
    '
    flag%=WIND_SET(mask_window%,5,mask_wx%,mask_wy%,mask_ww%,mask_wh%)     ! SIZE WINDOW
    flag%=WIND_GET(mask_window%,4,mask_iwx%,mask_iwy%,mask_iww%,mask_iwh%) ! GET INSIDE SIZE
    @size_mask_slider
    '
    IF mask_vfit%<>old_mask_vfit% OR mask_hfit%<>old_mask_hfit% THEN
      @update_grid
    ELSE
      @update_mask
    ENDIF
    '
  CASE 24,25,26
    old_mask_vview%=mask_vview%
    old_mask_hview%=mask_hview%
    @event_mask_slider
    IF old_mask_vview%<>mask_vview% OR old_mask_hview%<>mask_hview% THEN
      @update_grid
    ENDIF
    '
  CASE 27,28 ! WINDOW SIZED, MOVED
    '
    old_mask_vfit%=mask_vfit%
    old_mask_hfit%=mask_hfit%
    '
    mask_wx%=buffer&(4) ! GET NEW WINDOW POSITION/SIZE
    mask_wy%=buffer&(5)
    mask_ww%=buffer&(6)
    mask_wh%=buffer&(7)
    '
    @mask_size_check
    flag%=WIND_SET(mask_window%,5,mask_wx%,mask_wy%,mask_ww%,mask_wh%)     ! SIZE WINDOW
    flag%=WIND_GET(mask_window%,4,mask_iwx%,mask_iwy%,mask_iww%,mask_iwh%) ! GET INSIDE SIZE
    '
    @size_mask_slider
    '
    IF command%=28
      OB_X(mask_dialog%,0)=mask_iwx%
      OB_Y(mask_dialog%,0)=mask_iwy%
    ELSE
      IF mask_vfit%<>old_mask_vfit% OR mask_hfit%<>old_mask_hfit% THEN
        @update_grid
      ELSE
        @update_mask
      ENDIF
    ENDIF
    '
  ENDSELECT
  '
RETURN
'
> PROCEDURE words_window
  SELECT command%
    '
  CASE 20     ! WIND UPDATE
    @repair_words
    '
  CASE 21     ! WINDOW CLICKED ON
    flag%=WIND_SET(words_window%,10,0,0,0,0) ! WINDOW SET TO TOP
    ~GRAF_MOUSE(0,0)
    DO
      ~GRAF_MKSTATE(event_mouse_x%,event_mouse_y%,mouse_button%,key_state%)
    LOOP UNTIL mouse_button%=0
    '
  CASE 22 ! CLOSE WINDOW
    words_window_status%=0
    flag%=WIND_CLOSE(words_window%)
    '
  CASE 23 ! FULL WINDOW
    '
    old_words_ww%=words_ww%
    old_words_wh%=words_wh%
    @words_full
    '
    flag%=WIND_SET(words_window%,5,words_wx%,words_wy%,words_ww%,words_wh%)     ! SIZE WINDOW
    flag%=WIND_GET(words_window%,4,words_iwx%,words_iwy%,words_iww%,words_iwh%) ! GET INSIDE SIZE
    @size_words_slider
    IF words_ww%<old_words_ww% OR words_wh%<old_words_wh% THEN
      words_update_flag%=0
      @update_words
    ENDIF
    '
  CASE 24,25,26
    old_words_vview%=words_vview%
    old_words_hview%=words_hview%
    @event_words_slider
    IF old_words_vview%<>words_vview% OR old_words_hview%<>words_hview% THEN
      @update_words
    ENDIF
    '
  CASE 27,28 ! WINDOW SIZED, MOVED
    '
    old_words_ww%=words_ww%
    old_words_wh%=words_wh%
    '
    words_wx%=buffer&(4) ! GET NEW WINDOW POSITION/SIZE
    words_wy%=buffer&(5)
    words_ww%=buffer&(6)
    words_wh%=buffer&(7)
    '
    @words_size_check
    flag%=WIND_SET(words_window%,5,words_wx%,words_wy%,words_ww%,words_wh%)     ! SIZE WINDOW
    flag%=WIND_GET(words_window%,4,words_iwx%,words_iwy%,words_iww%,words_iwh%) ! GET INSIDE SIZE
    '
    @size_words_slider
    IF words_ww%<old_words_ww% OR words_wh%<old_words_wh% THEN
      words_update_flag%=0
      @update_words
    ENDIF
    '
  ENDSELECT
  '
RETURN
'
> PROCEDURE puzzle_window
  SELECT command%
    '
  CASE 20     ! WIND UPDATE
    @repair_puzzle
    '
  CASE 21     ! WINDOW CLICKED ON
    flag%=WIND_SET(puzzle_window%,10,0,0,0,0) ! WINDOW SET TO TOP
    ~GRAF_MOUSE(0,0)
    DO
      ~GRAF_MKSTATE(event_mouse_x%,event_mouse_y%,mouse_button%,key_state%)
    LOOP UNTIL mouse_button%=0
    '
  CASE 22 ! CLOSE WINDOW
    puzzle_window_status%=0
    flag%=WIND_CLOSE(puzzle_window%)
    '
  CASE 23 ! FULL WINDOW
    '
    old_puzzle_ww%=puzzle_ww%
    old_puzzle_wh%=puzzle_wh%
    @puzzle_full
    '
    flag%=WIND_SET(puzzle_window%,5,puzzle_wx%,puzzle_wy%,puzzle_ww%,puzzle_wh%)     ! SIZE WINDOW
    flag%=WIND_GET(puzzle_window%,4,puzzle_iwx%,puzzle_iwy%,puzzle_iww%,puzzle_iwh%) ! GET INSIDE SIZE
    @size_puzzle_slider
    IF puzzle_ww%<old_puzzle_ww% OR puzzle_wh%<old_puzzle_wh% THEN
      words_update_flag%=0
      @update_puzzle
    ENDIF
    '
  CASE 24,25,26
    old_puzzle_vview%=puzzle_vview%
    old_puzzle_hview%=puzzle_hview%
    @event_puzzle_slider
    IF old_puzzle_vview%<>puzzle_vview% OR old_puzzle_hview%<>puzzle_hview% THEN
      @update_puzzle
    ENDIF
    '
  CASE 27,28 ! WINDOW SIZED, MOVED
    '
    old_puzzle_ww%=puzzle_ww%
    old_puzzle_wh%=puzzle_wh%
    '
    puzzle_wx%=buffer&(4) ! GET NEW WINDOW POSITION/SIZE
    puzzle_wy%=buffer&(5)
    puzzle_ww%=buffer&(6)
    puzzle_wh%=buffer&(7)
    '
    @puzzle_size_check
    flag%=WIND_SET(puzzle_window%,5,puzzle_wx%,puzzle_wy%,puzzle_ww%,puzzle_wh%)     ! SIZE WINDOW
    flag%=WIND_GET(puzzle_window%,4,puzzle_iwx%,puzzle_iwy%,puzzle_iww%,puzzle_iwh%) ! GET INSIDE SIZE
    '
    @size_puzzle_slider
    '
    IF puzzle_ww%<old_puzzle_ww% OR puzzle_wh%<old_puzzle_wh% THEN
      words_update_flag%=0
      @update_puzzle
    ENDIF
    '
  ENDSELECT
  '
RETURN
'
> PROCEDURE event_button
  '
  clicked_on%=WIND_FIND(event_mouse_x%,event_mouse_y%)
  '
  IF mask_window%=clicked_on% THEN
    @mask_button
    '
  ENDIF
  '
  IF words_window%=clicked_on% THEN
    @words_button
    '
  ENDIF
  '
  IF puzzle_window%=clicked_on% THEN
    @puzzle_button
    '
  ENDIF
  '
RETURN
'
> PROCEDURE words_button
  ~WIND_GET(0,10,top%,d%,d%,d%)
  IF top%=words_window% AND event_mouse_x%>=words_iwx% AND event_mouse_x%<words_iwx%+words_iww% AND event_mouse_y%>=words_iwy% AND event_mouse_y%<words_iwy%+words_iwh% THEN
    IF last_word%=-1 THEN
      IF clicks&=2 THEN
        DO
          ~GRAF_MKSTATE(event_mouse_x%,event_mouse_y%,mouse_button%,key_state%)
        LOOP UNTIL mouse_button%=0
        current_word%=0
        @edit_words
      ENDIF
    ELSE
      current_word%=INT((event_mouse_y%-words_iwy%)/screen_points%)+words_vview%
      IF current_word%>-1 AND current_word%=<last_word% AND current_word%-words_vview%<words_vfit% THEN
        IF clicks&=2 THEN
          DO
            ~GRAF_MKSTATE(event_mouse_x%,event_mouse_y%,mouse_button%,key_state%)
          LOOP UNTIL mouse_button%=0
          @edit_words
        ELSE
          IF old_current_word%<>current_word% THEN
            IF words%(current_word%)=1 THEN
              words%(current_word%)=0
            ELSE
              words%(current_word%)=1
            ENDIF
            @update_words
            old_current_word%=current_word%
          ELSE
            ~GRAF_MKSTATE(event_mouse_x%,event_mouse_y%,mouse_button%,key_state%)
            IF mouse_button%=0 THEN
              old_current_word%=-1
            ENDIF
          ENDIF
        ENDIF
        '
      ENDIF
    ENDIF
  ENDIF
  '
RETURN
'
> PROCEDURE mask_button
  ~WIND_GET(0,10,top%,d%,d%,d%)
  IF top%=mask_window% THEN
    IF event_mouse_x%>=mask_iwx% AND event_mouse_x%<mask_iwx%+mask_iww% AND event_mouse_y%>=mask_iwy% AND event_mouse_y%<mask_iwy%+mask_iwh% THEN
      IF event_mouse_y%<mask_iwy%+mask_height% AND mask_height%>1 THEN
        mask_found%=OBJC_FIND(mask_dialog%,0,1,event_mouse_x%,event_mouse_y%)
        IF mask_found%>0 THEN
          IF drawing%=1 AND mask_found%<>b_mask_color% THEN
            @undo
            drawing%=0
            grid(draw_x%,draw_y%)=old_plot%
            plot_x%=draw_x%
            plot_y%=draw_y%
            @plot
            mask_save%=0
          ENDIF
          SELECT mask_found%
          CASE b_mask_color%
            OB_STATE(mask_dialog%,mask_found%)=BCHG(OB_STATE(mask_dialog%,mask_found%),0)
            ~OBJC_DRAW(mask_dialog%,mask_found%,1,mask_iwx%,mask_iwy%,mask_iww%,mask_iwh%)
            @set_mask_color
            DO
              ~GRAF_MKSTATE(event_mouse_x%,event_mouse_y%,mouse_button%,key_state%)
            LOOP UNTIL mouse_button%=0
            '
          CASE b_mask_draw%
            IF mask_mode%<>0 THEN
              @mask_button_set
              old_mask_mode%=mask_mode%
              mask_mode%=0
              @set_mask_mode
              mask_found%=mode_fix%
              @mask_button_clr
              DO
                ~GRAF_MKSTATE(event_mouse_x%,event_mouse_y%,mouse_button%,key_state%)
              LOOP UNTIL mouse_button%=0
            ENDIF
            '
          CASE b_mask_line%
            IF mask_mode%<>1 THEN
              @mask_button_set
              old_mask_mode%=mask_mode%
              mask_mode%=1
              @set_mask_mode
              mask_found%=mode_fix%
              @mask_button_clr
              DO
                ~GRAF_MKSTATE(event_mouse_x%,event_mouse_y%,mouse_button%,key_state%)
              LOOP UNTIL mouse_button%=0
            ENDIF
            '
          CASE b_mask_box%
            IF mask_mode%<>2 THEN
              @mask_button_set
              old_mask_mode%=mask_mode%
              mask_mode%=2
              @set_mask_mode
              mask_found%=mode_fix%
              @mask_button_clr
              DO
                ~GRAF_MKSTATE(event_mouse_x%,event_mouse_y%,mouse_button%,key_state%)
              LOOP UNTIL mouse_button%=0
            ENDIF
            '
          CASE b_mask_pbox%
            IF mask_mode%<>3 THEN
              @mask_button_set
              old_mask_mode%=mask_mode%
              mask_mode%=3
              @set_mask_mode
              mask_found%=mode_fix%
              @mask_button_clr
              DO
                ~GRAF_MKSTATE(event_mouse_x%,event_mouse_y%,mouse_button%,key_state%)
              LOOP UNTIL mouse_button%=0
            ENDIF
            '
          CASE b_mask_circle%
            IF mask_mode%<>4 THEN
              @mask_button_set
              old_mask_mode%=mask_mode%
              mask_mode%=4
              @set_mask_mode
              mask_found%=mode_fix%
              @mask_button_clr
              DO
                ~GRAF_MKSTATE(event_mouse_x%,event_mouse_y%,mouse_button%,key_state%)
              LOOP UNTIL mouse_button%=0
            ENDIF
            '
          CASE b_mask_pcircle%
            IF mask_mode%<>5 THEN
              @mask_button_set
              old_mask_mode%=mask_mode%
              mask_mode%=5
              @set_mask_mode
              mask_found%=mode_fix%
              @mask_button_clr
              DO
                ~GRAF_MKSTATE(event_mouse_x%,event_mouse_y%,mouse_button%,key_state%)
              LOOP UNTIL mouse_button%=0
            ENDIF
            '
          CASE b_mask_fill%
            IF mask_mode%<>6 THEN
              @mask_button_set
              old_mask_mode%=mask_mode%
              mask_mode%=6
              @set_mask_mode
              mask_found%=mode_fix%
              @mask_button_clr
              DO
                ~GRAF_MKSTATE(event_mouse_x%,event_mouse_y%,mouse_button%,key_state%)
              LOOP UNTIL mouse_button%=0
            ENDIF
            '
          CASE b_mask_trim%
            @mask_select
            @trim_mask
            @mask_button_clr
            '
          CASE b_mask_invert%
            @mask_select
            ~GRAF_MOUSE(2,0)
            @undo
            FOR x%=0 TO grid_x%-1
              FOR y%=0 TO grid_y%-1
                grid(x%,y%)=BCHG(grid(x%,y%),0)
              NEXT y%
            NEXT x%
            @count_mask
            @mask_info_line
            @update_grid
            ~GRAF_MOUSE(0,0)
            @mask_button_clr
            '
          CASE b_mask_flip_horizontal%
            @mask_select
            IF grid_used%<>grid_x%*grid_y% AND grid_used% THEN
              ~GRAF_MOUSE(2,0)
              '
              @undo
              MAT CPY temp()=grid(),grid_x%,grid_y%
              FOR y%=0 TO grid_y%-1
                MAT CPY grid(0,y%)=temp(0,grid_y%-(y%+1)),grid_x%,1
              NEXT y%
              @update_grid
              ~GRAF_MOUSE(0,0)
            ENDIF
            @mask_button_clr
            DO
              ~GRAF_MKSTATE(event_mouse_x%,event_mouse_y%,mouse_button%,key_state%)
            LOOP UNTIL mouse_button%=0
            '
          CASE b_mask_flip_vertical%
            @mask_select
            IF grid_used%<>grid_x%*grid_y% AND grid_used% THEN
              ~GRAF_MOUSE(2,0)
              '
              @undo
              MAT CPY temp()=grid(),grid_x%,grid_y%
              FOR x%=0 TO grid_x%-1
                MAT CPY grid(x%,0)=temp(grid_x%-(x%+1),0),1,grid_y%
              NEXT x%
              @update_grid
              ~GRAF_MOUSE(0,0)
            ENDIF
            @mask_button_clr
            DO
              ~GRAF_MKSTATE(event_mouse_x%,event_mouse_y%,mouse_button%,key_state%)
            LOOP UNTIL mouse_button%=0
            '
          CASE b_mask_mirror_vertical%
            @mask_select
            IF grid_used%<>grid_x%*grid_y% AND grid_used% THEN
              ~GRAF_MOUSE(2,0)
              @undo
              MAT CPY temp()=grid(),grid_x%,grid_y%
              FOR y%=0 TO (grid_y%/2)-1
                MAT CPY grid(0,grid_y%-(y%+1))=temp(0,y%),grid_x%,1
              NEXT y%
              @count_mask
              @mask_info_line
              @update_grid
              ~GRAF_MOUSE(0,0)
              '
            ENDIF
            @mask_button_clr
            DO
              ~GRAF_MKSTATE(event_mouse_x%,event_mouse_y%,mouse_button%,key_state%)
            LOOP UNTIL mouse_button%=0
            '
          CASE b_mask_mirror_horizontal%
            @mask_select
            IF grid_used%<>grid_x%*grid_y% AND grid_used% THEN
              ~GRAF_MOUSE(2,0)
              @undo
              MAT CPY temp()=grid(),grid_x%,grid_y%
              FOR x%=0 TO (grid_x%/2)-1
                MAT CPY grid(grid_x%-(x%+1),0)=temp(x%,0),1,grid_y%
              NEXT x%
              @count_mask
              @mask_info_line
              @update_grid
              ~GRAF_MOUSE(0,0)
            ENDIF
            @mask_button_clr
            DO
              ~GRAF_MKSTATE(event_mouse_x%,event_mouse_y%,mouse_button%,key_state%)
            LOOP UNTIL mouse_button%=0
            '
          CASE b_mask_rotate_left%
            @mask_select
            IF grid_used%<>grid_x%*grid_y% AND grid_used% THEN
              ~GRAF_MOUSE(2,0)
              '
              @undo
              MAT CPY temp()=grid(),grid_x%,grid_y%
              IF grid_x%=grid_y% THEN
                FOR y%=0 TO grid_y%-1
                  FOR x%=0 TO grid_x%-1
                    grid(x%,y%)=temp(grid_y%-(y%+1),x%)
                  NEXT x%
                NEXT y%
              ELSE
                IF grid_x%>grid_y% THEN
                  MAT CLR grid()
                  FOR y%=0 TO grid_y%-1
                    FOR x%=0 TO grid_y%-1
                      grid(x%,y%)=temp(grid_y%-(y%+1),x%)
                    NEXT x%
                  NEXT y%
                ELSE
                  MAT CLR grid()
                  FOR y%=0 TO grid_x%-1
                    FOR x%=0 TO grid_x%-1
                      grid(x%,grid_x%-(y%+1))=temp(y%,x%)
                    NEXT x%
                  NEXT y%
                ENDIF
              ENDIF
              @update_grid
              ~GRAF_MOUSE(0,0)
            ENDIF
            @mask_button_clr
            DO
              ~GRAF_MKSTATE(event_mouse_x%,event_mouse_y%,mouse_button%,key_state%)
            LOOP UNTIL mouse_button%=0
            '
          CASE b_mask_rotate_right%
            @mask_select
            IF grid_used%<>grid_x%*grid_y% AND grid_used% THEN
              ~GRAF_MOUSE(2,0)
              '
              @undo
              MAT CPY temp()=grid(),grid_x%,grid_y%
              IF grid_x%=grid_y% THEN
                FOR y%=0 TO grid_y%-1
                  FOR x%=0 TO grid_x%-1
                    grid(x%,y%)=temp(y%,grid_x%-(x%+1))
                  NEXT x%
                NEXT y%
              ELSE
                IF grid_x%>grid_y% THEN
                  MAT CLR grid()
                  FOR y%=0 TO grid_y%-1
                    FOR x%=0 TO grid_y%-1
                      grid(grid_y%-(x%+1),y%)=temp(y%,x%)
                    NEXT x%
                  NEXT y%
                ELSE
                  MAT CLR grid()
                  FOR y%=0 TO grid_x%-1
                    FOR x%=0 TO grid_x%-1
                      grid(x%,y%)=temp(y%,grid_x%-(x%+1))
                    NEXT x%
                  NEXT y%
                ENDIF
              ENDIF
              @update_grid
              ~GRAF_MOUSE(0,0)
            ENDIF
            @mask_button_clr
            DO
              ~GRAF_MKSTATE(event_mouse_x%,event_mouse_y%,mouse_button%,key_state%)
            LOOP UNTIL mouse_button%=0
            '
          CASE b_mask_up%
            @mask_select
            IF grid_used%<>grid_x%*grid_y% AND grid_used% THEN
              ~GRAF_MOUSE(2,0)
              @undo
              MAT CPY temp()=grid(),grid_x%,grid_y%
              MAT CPY grid(0,0)=temp(0,1),grid_x%,grid_y%-1
              MAT CPY grid(0,grid_y%-1)=temp(0,0),grid_x%,1
              @update_grid
              ~GRAF_MOUSE(0,0)
            ENDIF
            @mask_button_clr
            '
          CASE b_mask_down%
            @mask_select
            IF grid_used%<>grid_x%*grid_y% AND grid_used% THEN
              ~GRAF_MOUSE(2,0)
              @undo
              MAT CPY temp()=grid(),grid_x%,grid_y%
              MAT CPY grid(0,1)=temp(0,0),grid_x%,grid_y%-1
              MAT CPY grid(0,0)=temp(0,grid_y%-1),grid_x%,1
              @update_grid
              ~GRAF_MOUSE(0,0)
            ENDIF
            @mask_button_clr
            '
          CASE b_mask_left%
            @mask_select
            IF grid_used%<>grid_x%*grid_y% AND grid_used% THEN
              ~GRAF_MOUSE(2,0)
              @undo
              MAT CPY temp()=grid(),grid_x%,grid_y%
              MAT CPY grid(0,0)=temp(1,0),grid_x%-1,grid_y%
              MAT CPY grid(grid_x%-1,0)=temp(0,0),1,grid_y%
              @update_grid
              ~GRAF_MOUSE(0,0)
            ENDIF
            @mask_button_clr
            '
          CASE b_mask_right%
            @mask_select
            IF grid_used%<>grid_x%*grid_y% AND grid_used% THEN
              ~GRAF_MOUSE(2,0)
              @undo
              MAT CPY temp()=grid(),grid_x%,grid_y%
              MAT CPY grid(1,0)=temp(0,0),grid_x%-1,grid_y%
              MAT CPY grid(0,0)=temp(grid_x%-1,0),1,grid_y%
              @update_grid
              ~GRAF_MOUSE(0,0)
            ENDIF
            @mask_button_clr
            '
          ENDSELECT
          '
        ENDIF
      ELSE
        @draw
      ENDIF
    ENDIF
  ENDIF
RETURN
'
> PROCEDURE puzzle_button
  ~WIND_GET(0,10,top%,d%,d%,d%)
  IF top%=puzzle_window% THEN
    IF puzzle_ready% THEN
      IF clicks&=2 THEN
        @set_puzzle_title
      ELSE
        @stats
        '
      ENDIF
    ELSE
      IF clicks&=2 THEN
        @menu_make_puzzle
      ENDIF
      '
    ENDIF
  ENDIF
  '
RETURN
'
> PROCEDURE draw
  plot_x%=INT((event_mouse_x%-mask_iwx%)/grid_box_sizex%)+mask_hview%
  plot_y%=INT((event_mouse_y%-(mask_iwy%+mask_height%))/grid_box_sizey%)+mask_vview%
  '
  IF plot_x%>-1 AND plot_y%>-1 AND plot_x%<grid_x% AND plot_y%<grid_y% THEN
    SELECT mask_mode%
    CASE 0 ! DRAW
      IF grid(plot_x%,plot_y%)<>mask_color% THEN
        mask_save%=0
        '
        @undo
        IF grid(plot_x%,plot_y%)=1 THEN
          grid(plot_x%,plot_y%)=0
          DEC grid_used%
        ELSE
          grid(plot_x%,plot_y%)=1
          INC grid_used%
        ENDIF
        '
        @plot
        @mask_info_line
      ENDIF
    CASE 1 ! LINE
      @mask_line
      DO
        ~GRAF_MKSTATE(event_mouse_x%,event_mouse_y%,mouse_button%,key_state%)
      LOOP UNTIL mouse_button%=0
      '
    CASE 2,3 ! BOX,PBOX
      @mask_box
      DO
        ~GRAF_MKSTATE(event_mouse_x%,event_mouse_y%,mouse_button%,key_state%)
      LOOP UNTIL mouse_button%=0
      '
    CASE 4,5 ! CIRCLE,PCIRCLE
      @mask_circle
      DO
        ~GRAF_MKSTATE(event_mouse_x%,event_mouse_y%,mouse_button%,key_state%)
      LOOP UNTIL mouse_button%=0
      '
    CASE 6 ! FILL
      IF grid(plot_x%,plot_y%)<>mask_color% THEN
        @mask_fill
      ENDIF
      DO
        ~GRAF_MKSTATE(event_mouse_x%,event_mouse_y%,mouse_button%,key_state%)
      LOOP UNTIL mouse_button%=0
      '
    ENDSELECT
    '
  ENDIF
  '
RETURN
'
> PROCEDURE set_draw
  drawing%=1
  draw_x%=plot_x%
  draw_y%=plot_y%
  old_plot%=grid(draw_x%,draw_y%)
  grid(draw_x%,draw_y%)=2
  IF mask_window_status%=1 THEN
    @plot
  ENDIF
  '
RETURN
'
> PROCEDURE clr_draw
  drawing%=0
  draw_x2%=plot_x%
  draw_y2%=plot_y%
  plot_x%=draw_x%
  plot_y%=draw_y%
  grid(draw_x%,draw_y%)=old_plot%
  IF mask_window_status%=1 THEN
    @plot
  ENDIF
  '
RETURN
'
> PROCEDURE mask_line
  IF drawing%=0 THEN
    @set_draw
    '
  ELSE
    ~GRAF_MOUSE(2,0)
    @clr_draw
    mask_save%=0
    @undo
    '
    IF draw_x2%>draw_x% AND draw_y2%>draw_y% THEN
      pixels%=draw_x2%-draw_x%
      IF pixels%<draw_y2%-draw_y% THEN
        pixels%=draw_y2%-draw_y%
      ENDIF
      delta_x=(draw_x2%-draw_x%)/pixels%
      delta_y=(draw_y2%-draw_y%)/pixels%
      x=draw_x%
      y=draw_y%
      '
    ELSE
      IF draw_x2%<draw_x% AND draw_y2%<draw_y% THEN
        SWAP draw_x%,draw_x2%
        SWAP draw_y%,draw_y2%
        pixels%=draw_x2%-draw_x%
        IF pixels%<draw_y2%-draw_y% THEN
          pixels%=draw_y2%-draw_y%
        ENDIF
        delta_x=(draw_x2%-draw_x%)/pixels%
        delta_y=(draw_y2%-draw_y%)/pixels%
        x=draw_x%
        y=draw_y%
        '
      ELSE
        IF draw_x2%=draw_x% OR draw_y2%=draw_y% THEN
          IF draw_x2%=draw_x% THEN
            IF draw_y2%<draw_y% THEN
              pixels%=draw_y%-draw_y2%
              y=draw_y2%
            ELSE
              pixels%=draw_y2%-draw_y%
              y=draw_y%
            ENDIF
            delta_x=0
            delta_y=1
            x=draw_x%
          ELSE
            IF draw_x2%<draw_x% THEN
              pixels%=draw_x%-draw_x2%
              x=draw_x2%
            ELSE
              pixels%=draw_x2%-draw_x%
              x=draw_x%
            ENDIF
            delta_x=1
            delta_y=0
            y=draw_y%
          ENDIF
        ELSE
          IF draw_x2%<draw_x% THEN
            pixels%=draw_y2%-draw_y%
            IF pixels%<draw_x%-draw_x2% THEN
              pixels%=draw_x%-draw_x2%
            ENDIF
            delta_x=-(draw_x%-draw_x2%)/pixels%
            delta_y=(draw_y2%-draw_y%)/pixels%
            x=draw_x%
            y=draw_y%
            '
          ELSE
            pixels%=draw_x2%-draw_x%
            IF pixels%<draw_y%-draw_y2% THEN
              pixels%=draw_y%-draw_y2%
            ENDIF
            delta_x=(draw_x2%-draw_x%)/pixels%
            delta_y=-(draw_y%-draw_y2%)/pixels%
            x=draw_x%
            y=draw_y%
            '
          ENDIF
        ENDIF
        '
      ENDIF
    ENDIF
    '
    CLIP mask_iwx%,mask_iwy%+mask_height%,mask_iww%,mask_iwh%+1-mask_height%
    @hide_mouse
    er%=WIND_UPDATE(1)
    '
    FOR dot%=0 TO pixels%
      dot_x%=ROUND(x)
      dot_y%=ROUND(y)
      IF mask_color%=0 THEN
        IF grid(dot_x%,dot_y%)=1
          grid(dot_x%,dot_y%)=0
          '
          ploting_x%=dot_x%-mask_hview%
          ploting_y%=dot_y%-mask_vview%
          DEFFILL 1,0
          DEFLINE ,1
          PBOX mask_iwx%+ploting_x%*grid_box_sizex%+1,mask_iwy%+mask_height%+ploting_y%*grid_box_sizey%,mask_iwx%+ploting_x%*grid_box_sizex%+grid_box_sizex%-1,mask_iwy%+mask_height%+ploting_y%*grid_box_sizey%+grid_box_sizey%-2
          '
        ENDIF
      ELSE
        IF grid(dot_x%,dot_y%)=0
          grid(dot_x%,dot_y%)=1
          ploting_x%=dot_x%-mask_hview%
          ploting_y%=dot_y%-mask_vview%
          '
          DEFFILL 1,2,8
          DEFLINE ,1
          PBOX mask_iwx%+ploting_x%*grid_box_sizex%+1,mask_iwy%+mask_height%+ploting_y%*grid_box_sizey%,mask_iwx%+ploting_x%*grid_box_sizex%+grid_box_sizex%-1,mask_iwy%+mask_height%+ploting_y%*grid_box_sizey%+grid_box_sizey%-2
        ENDIF
      ENDIF
      x=x+delta_x
      y=y+delta_y
    NEXT dot%
    '
    @count_mask
    @mask_info_line
    @mask_raster_get
    er%=WIND_UPDATE(0)
    @show_mouse
    ~GRAF_MOUSE(0,0)
    '
  ENDIF
  '
RETURN
'
> PROCEDURE mask_box
  IF drawing%=0 THEN
    @set_draw
    '
  ELSE
    ~GRAF_MOUSE(2,0)
    @clr_draw
    mask_save%=0
    @undo
    IF draw_x%>draw_x2% THEN
      SWAP draw_x%,draw_x2%
    ENDIF
    IF draw_y%>draw_y2% THEN
      SWAP draw_y%,draw_y2%
    ENDIF
    '
    CLIP mask_iwx%,mask_iwy%+mask_height%,mask_iww%,mask_iwh%-mask_height%
    @hide_mouse
    er%=WIND_UPDATE(1)
    '
    IF mask_mode%=3 THEN
      FOR x%=draw_x% TO draw_x2%
        FOR y%=draw_y% TO draw_y2%
          IF mask_color%=0 THEN
            IF grid(x%,y%)=1
              grid(x%,y%)=0
              ploting_x%=x%-mask_hview%
              ploting_y%=y%-mask_vview%
              DEFFILL 1,0
              DEFLINE ,1
              PBOX mask_iwx%+ploting_x%*grid_box_sizex%+1,mask_iwy%+mask_height%+ploting_y%*grid_box_sizey%,mask_iwx%+ploting_x%*grid_box_sizex%+grid_box_sizex%-1,mask_iwy%+mask_height%+ploting_y%*grid_box_sizey%+grid_box_sizey%-2
            ENDIF
          ELSE
            IF grid(x%,y%)=0
              grid(x%,y%)=1
              ploting_x%=x%-mask_hview%
              ploting_y%=y%-mask_vview%
              DEFFILL 1,2,8
              DEFLINE ,1
              PBOX mask_iwx%+ploting_x%*grid_box_sizex%+1,mask_iwy%+mask_height%+ploting_y%*grid_box_sizey%,mask_iwx%+ploting_x%*grid_box_sizex%+grid_box_sizex%-1,mask_iwy%+mask_height%+ploting_y%*grid_box_sizey%+grid_box_sizey%-2
            ENDIF
          ENDIF
        NEXT y%
      NEXT x%
    ELSE
      FOR x%=draw_x% TO draw_x2%
        IF mask_color%=0 THEN
          IF grid(x%,draw_y%)=1
            grid(x%,draw_y%)=0
            ploting_x%=x%-mask_hview%
            ploting_y%=draw_y%-mask_vview%
            DEFFILL 1,0
            DEFLINE ,1
            PBOX mask_iwx%+ploting_x%*grid_box_sizex%+1,mask_iwy%+mask_height%+ploting_y%*grid_box_sizey%,mask_iwx%+ploting_x%*grid_box_sizex%+grid_box_sizex%-1,mask_iwy%+mask_height%+ploting_y%*grid_box_sizey%+grid_box_sizey%-2
          ENDIF
          IF grid(x%,draw_y2%)=1
            grid(x%,draw_y2%)=0
            ploting_x%=x%-mask_hview%
            ploting_y%=draw_y2%-mask_vview%
            DEFFILL 1,0
            DEFLINE ,1
            PBOX mask_iwx%+ploting_x%*grid_box_sizex%+1,mask_iwy%+mask_height%+ploting_y%*grid_box_sizey%,mask_iwx%+ploting_x%*grid_box_sizex%+grid_box_sizex%-1,mask_iwy%+mask_height%+ploting_y%*grid_box_sizey%+grid_box_sizey%-2
          ENDIF
        ELSE
          IF grid(x%,draw_y%)=0
            grid(x%,draw_y%)=1
            ploting_x%=x%-mask_hview%
            ploting_y%=draw_y%-mask_vview%
            DEFFILL 1,2,8
            DEFLINE ,1
            PBOX mask_iwx%+ploting_x%*grid_box_sizex%+1,mask_iwy%+mask_height%+ploting_y%*grid_box_sizey%,mask_iwx%+ploting_x%*grid_box_sizex%+grid_box_sizex%-1,mask_iwy%+mask_height%+ploting_y%*grid_box_sizey%+grid_box_sizey%-2
          ENDIF
          IF grid(x%,draw_y2%)=0
            grid(x%,draw_y2%)=1
            ploting_x%=x%-mask_hview%
            ploting_y%=draw_y2%-mask_vview%
            DEFFILL 1,2,8
            DEFLINE ,1
            PBOX mask_iwx%+ploting_x%*grid_box_sizex%+1,mask_iwy%+mask_height%+ploting_y%*grid_box_sizey%,mask_iwx%+ploting_x%*grid_box_sizex%+grid_box_sizex%-1,mask_iwy%+mask_height%+ploting_y%*grid_box_sizey%+grid_box_sizey%-2
          ENDIF
        ENDIF
      NEXT x%
      FOR y%=draw_y% TO draw_y2%
        IF mask_color%=0 THEN
          IF grid(draw_x%,y%)=1
            grid(draw_x%,y%)=0
            ploting_x%=draw_x%-mask_hview%
            ploting_y%=y%-mask_vview%
            DEFFILL 1,0
            DEFLINE ,1
            PBOX mask_iwx%+ploting_x%*grid_box_sizex%+1,mask_iwy%+mask_height%+ploting_y%*grid_box_sizey%,mask_iwx%+ploting_x%*grid_box_sizex%+grid_box_sizex%-1,mask_iwy%+mask_height%+ploting_y%*grid_box_sizey%+grid_box_sizey%-2
          ENDIF
          IF grid(draw_x2%,y%)=1
            grid(draw_x2%,y%)=0
            ploting_x%=draw_x2%-mask_hview%
            ploting_y%=y%-mask_vview%
            DEFFILL 1,0
            DEFLINE ,1
            PBOX mask_iwx%+ploting_x%*grid_box_sizex%+1,mask_iwy%+mask_height%+ploting_y%*grid_box_sizey%,mask_iwx%+ploting_x%*grid_box_sizex%+grid_box_sizex%-1,mask_iwy%+mask_height%+ploting_y%*grid_box_sizey%+grid_box_sizey%-2
          ENDIF
        ELSE
          IF grid(draw_x%,y%)=0
            grid(draw_x%,y%)=1
            ploting_x%=draw_x%-mask_hview%
            ploting_y%=y%-mask_vview%
            DEFFILL 1,2,8
            DEFLINE ,1
            PBOX mask_iwx%+ploting_x%*grid_box_sizex%+1,mask_iwy%+mask_height%+ploting_y%*grid_box_sizey%,mask_iwx%+ploting_x%*grid_box_sizex%+grid_box_sizex%-1,mask_iwy%+mask_height%+ploting_y%*grid_box_sizey%+grid_box_sizey%-2
          ENDIF
          IF grid(draw_x2%,y%)=0
            grid(draw_x2%,y%)=1
            ploting_x%=draw_x2%-mask_hview%
            ploting_y%=y%-mask_vview%
            DEFFILL 1,2,8
            DEFLINE ,1
            PBOX mask_iwx%+ploting_x%*grid_box_sizex%+1,mask_iwy%+mask_height%+ploting_y%*grid_box_sizey%,mask_iwx%+ploting_x%*grid_box_sizex%+grid_box_sizex%-1,mask_iwy%+mask_height%+ploting_y%*grid_box_sizey%+grid_box_sizey%-2
          ENDIF
        ENDIF
      NEXT y%
    ENDIF
    @count_mask
    @mask_info_line
    @mask_raster_get
    '
    er%=WIND_UPDATE(0)
    @show_mouse
    ~GRAF_MOUSE(0,0)
    '
  ENDIF
  '
RETURN
'
> PROCEDURE mask_circle
  IF drawing%=0 THEN
    @set_draw
    '
  ELSE
    ~GRAF_MOUSE(2,0)
    @clr_draw
    mask_save%=0
    @undo
    '
    x%=ABS(draw_x%-draw_x2%)
    y%=ABS(draw_y%-draw_y2%)
    radius_x%=x%+1
    radius_y%=y%+1
    '
    old_x%=-1
    old_y%=-1
    '
    CLIP mask_iwx%,mask_iwy%+mask_height%,mask_iww%,mask_iwh%-mask_height%
    @hide_mouse
    er%=WIND_UPDATE(1)
    '
    FOR point%=1 TO 89
      x%=SINQ(point%)*radius_x%
      y%=COSQ(point%)*radius_y%
      IF x%<>old_x% OR y%<>old_y% THEN
        old_x%=x%
        old_y%=y%
        '
        x1%=draw_x%-x%
        x2%=draw_x%+x%
        y1%=draw_y%-y%
        y2%=draw_y%+y%
        '
        IF mask_mode%=5 THEN
          FOR x3%=x1% TO x2%
            IF x3%>-1 AND x3%<grid_x% THEN
              IF mask_color%=0 THEN
                IF y1%>-1 AND y1%<grid_y% THEN
                  IF grid(x3%,y1%)=1
                    grid(x3%,y1%)=0
                    ploting_x%=x3%-mask_hview%
                    ploting_y%=y1%-mask_vview%
                    DEFFILL 1,0
                    DEFLINE ,1
                    PBOX mask_iwx%+ploting_x%*grid_box_sizex%+1,mask_iwy%+mask_height%+ploting_y%*grid_box_sizey%,mask_iwx%+ploting_x%*grid_box_sizex%+grid_box_sizex%-1,mask_iwy%+mask_height%+ploting_y%*grid_box_sizey%+grid_box_sizey%-2
                  ENDIF
                ENDIF
                IF y2%>-1 AND y2%<grid_y% THEN
                  IF grid(x3%,y2%)=1
                    grid(x3%,y2%)=0
                    ploting_x%=x3%-mask_hview%
                    ploting_y%=y2%-mask_vview%
                    DEFFILL 1,0
                    DEFLINE ,1
                    PBOX mask_iwx%+ploting_x%*grid_box_sizex%+1,mask_iwy%+mask_height%+ploting_y%*grid_box_sizey%,mask_iwx%+ploting_x%*grid_box_sizex%+grid_box_sizex%-1,mask_iwy%+mask_height%+ploting_y%*grid_box_sizey%+grid_box_sizey%-2
                  ENDIF
                ENDIF
              ELSE
                IF y1%>-1 AND y1%<grid_y% THEN
                  IF grid(x3%,y1%)=0
                    grid(x3%,y1%)=1
                    ploting_x%=x3%-mask_hview%
                    ploting_y%=y1%-mask_vview%
                    DEFFILL 1,2,8
                    DEFLINE ,1
                    PBOX mask_iwx%+ploting_x%*grid_box_sizex%+1,mask_iwy%+mask_height%+ploting_y%*grid_box_sizey%,mask_iwx%+ploting_x%*grid_box_sizex%+grid_box_sizex%-1,mask_iwy%+mask_height%+ploting_y%*grid_box_sizey%+grid_box_sizey%-2
                  ENDIF
                ENDIF
                IF y2%>-1 AND y2%<grid_y% THEN
                  IF grid(x3%,y2%)=0
                    grid(x3%,y2%)=1
                    ploting_x%=x3%-mask_hview%
                    ploting_y%=y2%-mask_vview%
                    DEFFILL 1,2,8
                    DEFLINE ,1
                    PBOX mask_iwx%+ploting_x%*grid_box_sizex%+1,mask_iwy%+mask_height%+ploting_y%*grid_box_sizey%,mask_iwx%+ploting_x%*grid_box_sizex%+grid_box_sizex%-1,mask_iwy%+mask_height%+ploting_y%*grid_box_sizey%+grid_box_sizey%-2
                  ENDIF
                ENDIF
              ENDIF
            ENDIF
          NEXT x3%
        ELSE
          IF mask_color%=0 THEN
            IF x1%>-1 AND x1%<grid_x% THEN
              IF y1%>-1 AND y1%<grid_y% THEN
                IF grid(x1%,y1%)=1
                  grid(x1%,y1%)=0
                  ploting_x%=x1%-mask_hview%
                  ploting_y%=y1%-mask_vview%
                  DEFFILL 1,0
                  DEFLINE ,1
                  PBOX mask_iwx%+ploting_x%*grid_box_sizex%+1,mask_iwy%+mask_height%+ploting_y%*grid_box_sizey%,mask_iwx%+ploting_x%*grid_box_sizex%+grid_box_sizex%-1,mask_iwy%+mask_height%+ploting_y%*grid_box_sizey%+grid_box_sizey%-2
                ENDIF
              ENDIF
              IF y2%>-1 AND y2%<grid_y% THEN
                IF grid(x1%,y2%)=1
                  grid(x1%,y2%)=0
                  ploting_x%=x1%-mask_hview%
                  ploting_y%=y2%-mask_vview%
                  DEFFILL 1,0
                  DEFLINE ,1
                  PBOX mask_iwx%+ploting_x%*grid_box_sizex%+1,mask_iwy%+mask_height%+ploting_y%*grid_box_sizey%,mask_iwx%+ploting_x%*grid_box_sizex%+grid_box_sizex%-1,mask_iwy%+mask_height%+ploting_y%*grid_box_sizey%+grid_box_sizey%-2
                ENDIF
              ENDIF
            ENDIF
            IF x2%>-1 AND x2%<grid_x% THEN
              IF y1%>-1 AND y1%<grid_y% THEN
                IF grid(x2%,y1%)=1
                  grid(x2%,y1%)=0
                  ploting_x%=x2%-mask_hview%
                  ploting_y%=y1%-mask_vview%
                  DEFFILL 1,0
                  DEFLINE ,1
                  PBOX mask_iwx%+ploting_x%*grid_box_sizex%+1,mask_iwy%+mask_height%+ploting_y%*grid_box_sizey%,mask_iwx%+ploting_x%*grid_box_sizex%+grid_box_sizex%-1,mask_iwy%+mask_height%+ploting_y%*grid_box_sizey%+grid_box_sizey%-2
                ENDIF
              ENDIF
              IF y2%>-1 AND y2%<grid_y% THEN
                IF grid(x2%,y2%)=1
                  grid(x2%,y2%)=0
                  ploting_x%=x2%-mask_hview%
                  ploting_y%=y2%-mask_vview%
                  DEFFILL 1,0
                  DEFLINE ,1
                  PBOX mask_iwx%+ploting_x%*grid_box_sizex%+1,mask_iwy%+mask_height%+ploting_y%*grid_box_sizey%,mask_iwx%+ploting_x%*grid_box_sizex%+grid_box_sizex%-1,mask_iwy%+mask_height%+ploting_y%*grid_box_sizey%+grid_box_sizey%-2
                ENDIF
              ENDIF
            ENDIF
          ELSE
            IF x1%>-1 AND x1%<grid_x% THEN
              IF y1%>-1 AND y1%<grid_y% THEN
                IF grid(x1%,y1%)=0
                  grid(x1%,y1%)=1
                  ploting_x%=x1%-mask_hview%
                  ploting_y%=y1%-mask_vview%
                  DEFFILL 1,2,8
                  DEFLINE ,1
                  PBOX mask_iwx%+ploting_x%*grid_box_sizex%+1,mask_iwy%+mask_height%+ploting_y%*grid_box_sizey%,mask_iwx%+ploting_x%*grid_box_sizex%+grid_box_sizex%-1,mask_iwy%+mask_height%+ploting_y%*grid_box_sizey%+grid_box_sizey%-2
                ENDIF
              ENDIF
              IF y2%>-1 AND y2%<grid_y% THEN
                IF grid(x1%,y2%)=0
                  grid(x1%,y2%)=1
                  ploting_x%=x1%-mask_hview%
                  ploting_y%=y2%-mask_vview%
                  DEFFILL 1,2,8
                  DEFLINE ,1
                  PBOX mask_iwx%+ploting_x%*grid_box_sizex%+1,mask_iwy%+mask_height%+ploting_y%*grid_box_sizey%,mask_iwx%+ploting_x%*grid_box_sizex%+grid_box_sizex%-1,mask_iwy%+mask_height%+ploting_y%*grid_box_sizey%+grid_box_sizey%-2
                ENDIF
              ENDIF
            ENDIF
            IF x2%>-1 AND x2%<grid_x% THEN
              IF y1%>-1 AND y1%<grid_y% THEN
                IF grid(x2%,y1%)=0
                  grid(x2%,y1%)=1
                  ploting_x%=x2%-mask_hview%
                  ploting_y%=y1%-mask_vview%
                  DEFFILL 1,2,8
                  DEFLINE ,1
                  PBOX mask_iwx%+ploting_x%*grid_box_sizex%+1,mask_iwy%+mask_height%+ploting_y%*grid_box_sizey%,mask_iwx%+ploting_x%*grid_box_sizex%+grid_box_sizex%-1,mask_iwy%+mask_height%+ploting_y%*grid_box_sizey%+grid_box_sizey%-2
                ENDIF
              ENDIF
              IF y2%>-1 AND y2%<grid_y% THEN
                IF grid(x2%,y2%)=0
                  grid(x2%,y2%)=1
                  ploting_x%=x2%-mask_hview%
                  ploting_y%=y2%-mask_vview%
                  DEFFILL 1,2,8
                  DEFLINE ,1
                  PBOX mask_iwx%+ploting_x%*grid_box_sizex%+1,mask_iwy%+mask_height%+ploting_y%*grid_box_sizey%,mask_iwx%+ploting_x%*grid_box_sizex%+grid_box_sizex%-1,mask_iwy%+mask_height%+ploting_y%*grid_box_sizey%+grid_box_sizey%-2
                ENDIF
              ENDIF
            ENDIF
          ENDIF
        ENDIF
      ENDIF
    NEXT point%
    '
    @count_mask
    @mask_info_line
    @mask_raster_get
    '
    er%=WIND_UPDATE(0)
    @show_mouse
    ~GRAF_MOUSE(0,0)
    '
  ENDIF
  '
RETURN
'
> PROCEDURE trim_mask
  ~GRAF_MOUSE(2,0)
  '
  IF grid_used%>0 THEN
    @undo
    old_grid_x%=grid_x%
    old_grid_y%=grid_y%
    '
    minx%=grid_x%
    miny%=grid_y%
    maxx%=0
    maxy%=0
    '
    FOR y%=0 TO grid_y%-1
      FOR x%=0 TO grid_x%-1
        IF grid(x%,y%) THEN
          minx%=MIN(minx%,x%)
          x%=grid_x%
        ENDIF
      NEXT x%
      IF minx%=0 THEN
        y%=grid_y%
      ENDIF
    NEXT y%
    '
    FOR x%=0 TO grid_x%-1
      FOR y%=0 TO grid_y%-1
        IF grid(x%,y%) THEN
          miny%=MIN(miny%,y%)
          y%=grid_y%
        ENDIF
      NEXT y%
      IF miny%=0 THEN
        x%=grid_x%
      ENDIF
    NEXT x%
    '
    FOR y%=grid_y%-1 TO 0 STEP -1
      FOR x%=grid_x%-1 TO 0 STEP -1
        IF grid(x%,y%) THEN
          maxx%=MAX(maxx%,x%)
          x%=0
        ENDIF
      NEXT x%
      IF maxx%=grid_x% THEN
        y%=0
      ENDIF
    NEXT y%
    '
    FOR x%=grid_x%-1 TO 0 STEP -1
      FOR y%=grid_y%-1 TO 0 STEP -1
        IF grid(x%,y%) THEN
          maxy%=MAX(maxy%,y%)
          y%=0
        ENDIF
      NEXT y%
      IF maxy%=grid_y% THEN
        x%=0
      ENDIF
    NEXT x%
    '
    IF minx% OR maxx%+1<>grid_x% OR miny% OR maxy%+1<>grid_y% THEN
      maxx%=maxx%+1-minx%
      maxy%=maxy%+1-miny%
      '
      IF maxx%<min_grid% THEN
        maxx%=min_grid%
      ENDIF
      IF maxy%<min_grid% THEN
        maxy%=min_grid%
      ENDIF
      '
      IF minx% OR miny% THEN
        MAT CPY temp(0,0)=grid(minx%,miny%),grid_x%-minx%,grid_y%-miny%
      ELSE
        MAT CPY temp(0,0)=grid(0,0),maxx%,maxy%
        '
      ENDIF
      '
      MAT CLR grid()
      MAT CPY grid(0,0)=temp(0,0),grid_x%,grid_y%
      grid_x%=maxx%
      grid_y%=maxy%
      '
    ENDIF
    '
  ENDIF
  '
  ~GRAF_MOUSE(0,0)
  '
  IF old_grid_x%<>grid_x% OR old_grid_y%<>grid_y% THEN
    @set_new_mask_size
    '
  ENDIF
  '
RETURN
'
> PROCEDURE mask_fill
  ~GRAF_MOUSE(2,0)
  mask_save%=0
  @undo
  '
  CLIP mask_iwx%,mask_iwy%+mask_height%,mask_iww%,mask_iwh%-mask_height%
  @hide_mouse
  er%=WIND_UPDATE(1)
  '
  grid(plot_x%,plot_y%)=3
  current_x%=plot_x%
  current_y%=plot_y%
  current_dot%=0
  last_dot%=0
  fill(0,current_dot%)=current_x%
  fill(1,current_dot%)=current_y%
  '
  DO
    current_dot%=0
    test%=0
    DO
      current_x%=fill(0,current_dot%)
      current_y%=fill(1,current_dot%)
      current_found%=0
      '
      IF current_x%<>-1 THEN
        IF current_y%>0 THEN
          IF grid(current_x%,current_y%-1)<>mask_color% AND grid(current_x%,current_y%-1)<>3 THEN
            grid(current_x%,current_y%-1)=3
            INC last_dot%
            fill(0,last_dot%)=current_x%
            fill(1,last_dot%)=current_y%-1
            INC test%
          ELSE
            INC current_found%
          ENDIF
        ENDIF
        '
        IF current_x%<grid_x%-1 THEN
          IF grid(current_x%+1,current_y%)<>mask_color% AND grid(current_x%+1,current_y%)<>3 THEN
            grid(current_x%+1,current_y%)=3
            INC last_dot%
            fill(0,last_dot%)=current_x%+1
            fill(1,last_dot%)=current_y%
            INC test%
          ELSE
            INC current_found%
          ENDIF
        ENDIF
        '
        IF current_y%<grid_y%-1 THEN
          IF grid(current_x%,current_y%+1)<>mask_color% AND grid(current_x%,current_y%+1)<>3 THEN
            grid(current_x%,current_y%+1)=3
            INC last_dot%
            fill(0,last_dot%)=current_x%
            fill(1,last_dot%)=current_y%+1
            INC test%
          ELSE
            INC current_found%
          ENDIF
        ENDIF
        '
        IF current_x%>0 THEN
          IF grid(current_x%-1,current_y%)<>mask_color% AND grid(current_x%-1,current_y%)<>3 THEN
            grid(current_x%-1,current_y%)=3
            INC last_dot%
            fill(0,last_dot%)=current_x%-1
            fill(1,last_dot%)=current_y%
            INC test%
          ELSE
            INC current_found%
          ENDIF
        ENDIF
        IF current_found%=4 THEN
          IF last_dot%=current_dot% THEN
            fill(0,current_dot%)=-1
          ELSE
            fill(0,current_dot%)=fill(0,last_dot%)
            fill(1,current_dot%)=fill(1,last_dot%)
            fill(0,last_dot%)=-1
          ENDIF
          DEC last_dot%
        ELSE
          INC current_dot%
        ENDIF
      ENDIF
      '
    LOOP UNTIL current_dot%>last_dot%
  LOOP UNTIL test%=0
  '
  FOR dot_x%=0 TO grid_x%-1
    FOR dot_y%=0 TO grid_y%-1
      IF grid(dot_x%,dot_y%)=3
        grid(dot_x%,dot_y%)=mask_color%
        IF dot_y%>=mask_vview% AND dot_y%<mask_vview%+mask_vfit%
          IF dot_x%>=mask_hview% AND dot_x%<mask_hview%+mask_hfit%
            ploting_x%=dot_x%-mask_hview%
            ploting_y%=dot_y%-mask_vview%
            SELECT mask_color%
            CASE 0
              DEFFILL 1,0
            CASE 1
              DEFFILL 1,2,8
            ENDSELECT
            DEFLINE ,1
            PBOX mask_iwx%+ploting_x%*grid_box_sizex%+1,mask_iwy%+mask_height%+ploting_y%*grid_box_sizey%,mask_iwx%+ploting_x%*grid_box_sizex%+grid_box_sizex%-1,mask_iwy%+mask_height%+ploting_y%*grid_box_sizey%+grid_box_sizey%-2
          ENDIF
        ENDIF
      ENDIF
    NEXT dot_y%
  NEXT dot_x%
  '
  @count_mask
  @mask_info_line
  '
  @mask_raster_get
  '
  er%=WIND_UPDATE(0)
  @show_mouse
  ~GRAF_MOUSE(0,0)
  '
RETURN
'
> PROCEDURE mask_select
  @mask_button_set
  DO
    ~GRAF_MKSTATE(event_mouse_x%,event_mouse_y%,mouse_button%,key_state%)
  LOOP UNTIL mouse_button%=0
  '
RETURN
'
> PROCEDURE mask_button_set
  OB_STATE(mask_dialog%,mask_found%)=BSET(OB_STATE(mask_dialog%,mask_found%),0)
  ~OBJC_DRAW(mask_dialog%,mask_found%,1,mask_iwx%,mask_iwy%,mask_iww%,mask_iwh%)
  '
RETURN
'
> PROCEDURE mask_button_clr
  OB_STATE(mask_dialog%,mask_found%)=BCLR(OB_STATE(mask_dialog%,mask_found%),0)
  ~OBJC_DRAW(mask_dialog%,mask_found%,1,mask_iwx%,mask_iwy%,mask_iww%,mask_iwh%)
  '
RETURN
'
> PROCEDURE event_mask_slider
  '
  SELECT command%
  CASE 24
    slider_event%=buffer&(4)
    SELECT slider_event%
    CASE 0 ! 'ABOVE'
      IF mask_vview%>0
        mask_vview%=mask_vview%-mask_vfit%
        IF mask_vview%<0 THEN
          mask_vview%=0
        ENDIF
        @mask_fix_vslider
        '
      ENDIF
      '
    CASE 1 ! 'BELOW'
      IF mask_vview%<mask_vmax% AND mask_vslider_size%<1000 THEN
        mask_vview%=mask_vview%+mask_vfit%
        IF mask_vview%>mask_vmax% THEN
          mask_vview%=mask_vmax%
        ENDIF
        @mask_fix_vslider
      ENDIF
      '
    CASE 2 ! 'UP'
      IF mask_vview%>0
        DEC mask_vview%
        @mask_fix_vslider
        '
      ENDIF
      '
    CASE 3 ! 'DOWN'
      IF mask_vview%<mask_vmax% AND mask_vslider_size%<1000 THEN
        INC mask_vview%
        @mask_fix_vslider
      ENDIF
      '
    CASE 4 ! 'LEFT OF SLIDER'
      IF mask_hview%>0
        mask_hview%=mask_hview%-mask_hfit%
        IF mask_hview%<0
          mask_hview%=0
        ENDIF
        @mask_fix_hslider
        '
      ENDIF
      '
    CASE 5 ! 'RIGHT OF SLIDER'
      IF mask_hview%<mask_hmax% AND mask_hslider_size%<1000 THEN
        mask_hview%=mask_hview%+mask_hfit%
        IF mask_hview%>mask_hmax%
          mask_hview%=mask_hmax%
        ENDIF
        @mask_fix_hslider
      ENDIF
      '
    CASE 6 ! 'LEFT'
      IF mask_hview%>0
        DEC mask_hview%
        @mask_fix_hslider
        '
      ENDIF
      '
    CASE 7 ! 'RIGHT'
      IF mask_hview%<mask_hmax% AND mask_hslider_size%<1000 THEN
        INC mask_hview%
        @mask_fix_hslider
      ENDIF
      '
    ENDSELECT
  CASE 25 ! 'H SLIDER BOX'
    IF mask_hslider_size%<1000 THEN
      mask_hslider_position%=buffer&(4)
      mask_hview%=(mask_hslider_position%/1000)*mask_hmax%
      @mask_fix_hslider
      '
    ENDIF
    '
  CASE 26 ! 'V SLIDER BOX'
    IF mask_vslider_size%<1000 THEN
      mask_vslider_position%=buffer&(4)
      mask_vview%=(mask_vslider_position%/1000)*mask_vmax%
      @mask_fix_vslider
      '
    ENDIF
    '
  ENDSELECT
  '
RETURN
'
> PROCEDURE mask_fix_vslider
  '
  mask_vslider_position%=(mask_vview%/mask_vmax%)*1000
  flag%=WIND_SET(mask_window%,9,mask_vslider_position%,0,0,0)
  '
RETURN
'
> PROCEDURE mask_fix_hslider
  '
  mask_hslider_position%=(mask_hview%/mask_hmax%)*1000
  flag%=WIND_SET(mask_window%,8,mask_hslider_position%,0,0,0)
  '
RETURN
'
> PROCEDURE event_words_slider
  '
  SELECT command%
  CASE 24
    slider_event%=buffer&(4)
    SELECT slider_event%
    CASE 0 ! 'ABOVE'
      IF words_vview%>0
        words_vview%=words_vview%-words_vfit%
        IF words_vview%<0
          words_vview%=0
        ENDIF
        @words_fix_vslider
        '
      ENDIF
      '
    CASE 1 ! 'BELOW'
      IF words_vview%<words_vmax% AND words_vslider_size%<1000 THEN
        words_vview%=words_vview%+words_vfit%
        IF words_vview%>words_vmax% THEN
          words_vview%=words_vmax%
        ENDIF
        @words_fix_vslider
      ENDIF
      '
    CASE 2 ! 'UP'
      IF words_vview%>0
        DEC words_vview%
        @words_fix_vslider
        '
      ENDIF
      '
    CASE 3 ! 'DOWN'
      IF words_vview%<words_vmax% AND words_vslider_size%<1000 THEN
        INC words_vview%
        @words_fix_vslider
      ENDIF
      '
    CASE 4 ! 'LEFT OF SLIDER'
      IF words_hview%>0
        words_hview%=words_hview%-words_hfit%
        IF words_hview%<0 THEN
          words_hview%=0
        ENDIF
        @words_fix_hslider
        '
      ENDIF
      '
    CASE 5 ! 'RIGHT OF SLIDER'
      IF words_hview%<words_hmax% AND words_hslider_size%<1000 THEN
        words_hview%=words_hview%+words_hfit%
        IF words_hview%>words_hmax% THEN
          words_hview%=words_hmax%
        ENDIF
        @words_fix_hslider
      ENDIF
      '
    CASE 6 ! 'LEFT'
      IF words_hview%>0
        DEC words_hview%
        @words_fix_hslider
        '
      ENDIF
      '
    CASE 7 ! 'RIGHT'
      IF words_hview%<words_hmax% AND words_hslider_size%<1000 THEN
        INC words_hview%
        @words_fix_hslider
      ENDIF
      '
    ENDSELECT
  CASE 25 ! 'H SLIDER BOX'
    IF words_hslider_size%<1000 THEN
      words_hslider_position%=buffer&(4)
      words_hview%=(words_hslider_position%/1000)*words_hmax%
      @words_fix_hslider
      '
    ENDIF
    '
  CASE 26 ! 'V SLIDER BOX'
    IF words_vslider_size%<1000 THEN
      words_vslider_position%=buffer&(4)
      words_vview%=(words_vslider_position%/1000)*words_vmax%
      @words_fix_vslider
      '
    ENDIF
    '
  ENDSELECT
  '
RETURN
'
> PROCEDURE words_fix_vslider
  '
  words_vslider_position%=(words_vview%/words_vmax%)*1000
  flag%=WIND_SET(words_window%,9,words_vslider_position%,0,0,0)
  '
RETURN
'
> PROCEDURE words_fix_hslider
  '
  words_hslider_position%=(words_hview%/words_hmax%)*1000
  flag%=WIND_SET(words_window%,8,words_hslider_position%,0,0,0)
  '
RETURN
'
> PROCEDURE event_puzzle_slider
  '
  SELECT command%
  CASE 24
    slider_event%=buffer&(4)
    SELECT slider_event%
    CASE 0 ! 'ABOVE'
      IF puzzle_vview%>0
        puzzle_vview%=puzzle_vview%-puzzle_vfit%
        IF puzzle_vview%<0 THEN
          puzzle_vview%=0
        ENDIF
        @puzzle_fix_vslider
        '
      ENDIF
      '
    CASE 1 ! 'BELOW'
      IF puzzle_vview%<puzzle_vmax% AND puzzle_vslider_size%<1000 THEN
        puzzle_vview%=puzzle_vview%+puzzle_vfit%
        IF puzzle_vview%>puzzle_vmax% THEN
          puzzle_vview%=puzzle_vmax%
        ENDIF
        @puzzle_fix_vslider
      ENDIF
      '
    CASE 2 ! 'UP'
      IF puzzle_vview%>0
        DEC puzzle_vview%
        @puzzle_fix_vslider
        '
      ENDIF
      '
    CASE 3 ! 'DOWN'
      IF puzzle_vview%<puzzle_vmax% AND puzzle_vslider_size%<1000 THEN
        INC puzzle_vview%
        @puzzle_fix_vslider
      ENDIF
      '
    CASE 4 ! 'LEFT OF SLIDER'
      IF puzzle_hview%>0
        puzzle_hview%=puzzle_hview%-puzzle_hfit%
        IF puzzle_hview%<0 THEN
          puzzle_hview%=0
        ENDIF
        @puzzle_fix_hslider
        '
      ENDIF
      '
    CASE 5 ! 'RIGHT OF SLIDER'
      IF puzzle_hview%<puzzle_hmax% AND puzzle_hslider_size%<1000 THEN
        puzzle_hview%=puzzle_hview%+puzzle_hfit%
        IF puzzle_hview%>puzzle_hmax% THEN
          puzzle_hview%=puzzle_hmax%
        ENDIF
        @puzzle_fix_hslider
      ENDIF
      '
    CASE 6 ! 'LEFT'
      IF puzzle_hview%>0
        DEC puzzle_hview%
        @puzzle_fix_hslider
        '
      ENDIF
      '
    CASE 7 ! 'RIGHT'
      IF puzzle_hview%<puzzle_hmax% AND puzzle_hslider_size%<1000 THEN
        INC puzzle_hview%
        @puzzle_fix_hslider
      ENDIF
      '
    ENDSELECT
  CASE 25 ! 'H SLIDER BOX'
    IF puzzle_hslider_size%<1000 THEN
      puzzle_hslider_position%=buffer&(4)
      puzzle_hview%=(puzzle_hslider_position%/1000)*puzzle_hmax%
      @puzzle_fix_hslider
      '
    ENDIF
    '
  CASE 26 ! 'V SLIDER BOX'
    IF puzzle_vslider_size%<1000 THEN
      puzzle_vslider_position%=buffer&(4)
      puzzle_vview%=(puzzle_vslider_position%/1000)*puzzle_vmax%
      @puzzle_fix_vslider
      '
    ENDIF
    '
  ENDSELECT
  '
RETURN
'
> PROCEDURE puzzle_fix_vslider
  '
  puzzle_vslider_position%=(puzzle_vview%/puzzle_vmax%)*1000
  flag%=WIND_SET(puzzle_window%,9,puzzle_vslider_position%,0,0,0)
  '
RETURN
'
> PROCEDURE puzzle_fix_hslider
  '
  puzzle_hslider_position%=(puzzle_hview%/puzzle_hmax%)*1000
  flag%=WIND_SET(puzzle_window%,8,puzzle_hslider_position%,0,0,0)
  '
RETURN
'
> PROCEDURE mask_full
  IF mask_height%>1 THEN
    mask_ww%=MAX(mask_width%,grid_x%*grid_box_sizex%+1)+dif_width%
  ELSE
    mask_ww%=grid_x%*grid_box_sizex%+1+dif_width%
  ENDIF
  mask_wh%=mask_height%+grid_y%*grid_box_sizey%+dif_height%+2
  @mask_size_check
RETURN
'
> PROCEDURE words_full
  words_ww%=widest_word%+2+dif_width%
  words_wh%=(last_word%+1)*screen_points%+2+dif_height%
  @words_size_check
  '
RETURN
'
> PROCEDURE puzzle_full
  IF puzzle_ready% THEN
    puzzle_ww%=longest_puzzle%*screen_points%+2+dif_width%
    puzzle_wh%=puzzle_grid_y%*screen_points%+2+dif_height%
  ELSE
    puzzle_ww%=dif_width%
    puzzle_wh%=dif_height%
  ENDIF
  @puzzle_size_check
  '
RETURN
'
> PROCEDURE mask_size_check
  IF mask_ww%>mww%-mask_wx% THEN
    mask_ww%=mww%-mask_wx%
  ENDIF
  IF mask_ww%<min_window_w% THEN
    mask_ww%=min_window_w%
  ENDIF
  '
  IF mask_wh%>mwh%+mwy%-mask_wy% THEN
    mask_wh%=mwh%+mwy%-mask_wy%
  ENDIF
  IF mask_wh%<min_window_h% THEN
    mask_wh%=min_window_h%
  ENDIF
  '
  IF mask_wy%+mask_wh%>mwy%+mwh% THEN
    mask_wy%=mwy%+mwh%-mask_wh%
  ENDIF
  IF mask_wx%+mask_ww%>mwx%+mww% THEN
    mask_wx%=mwx%+mww%-mask_ww%
  ENDIF
  '
  IF mask_ww%-dif_width%<grid_x%*grid_box_sizex%+1 THEN
    temp%=mask_ww%-(dif_width%+1)
    IF INT(temp%/grid_box_sizex%)<>temp%/grid_box_sizex% THEN
      temp%=temp%-(INT(temp%/grid_box_sizex%)*grid_box_sizex%)
      mask_ww%=mask_ww%-temp%
    ENDIF
  ENDIF
  '
  temp%=mask_wh%-(mask_height%+dif_height%)
  IF INT(temp%/grid_box_sizey%)<>temp%/grid_box_sizey% THEN
    temp%=temp%-(INT(temp%/grid_box_sizey%)*grid_box_sizey%)
    mask_wh%=mask_wh%-temp%
  ENDIF
  '
RETURN
'
> PROCEDURE words_size_check
  IF words_ww%>mww%-words_wx% THEN
    words_ww%=mww%-words_wx%
  ENDIF
  IF words_wh%>mwh%+mwy%-words_wy% THEN
    words_wh%=mwh%+mwy%-words_wy%
  ENDIF
  '
  IF words_wh%<min_window_h% THEN
    words_wh%=min_window_h%
  ENDIF
  IF words_ww%<min_window_w% THEN
    words_ww%=min_window_w%
  ENDIF
  '
  IF words_wy%+words_wh%>mwy%+mwh% THEN
    words_wy%=mwy%+mwh%-words_wh%
  ENDIF
  IF words_wx%+words_ww%>mwx%+mww% THEN
    words_wx%=mwx%+mww%-words_ww%
  ENDIF
  '
  IF words_ww%-dif_width%<widest_word%+2
    temp%=words_ww%-(dif_width%+2)
    IF INT(temp%/screen_points%)<>temp%/screen_points% THEN
      temp%=temp%-(INT(temp%/screen_points%)*screen_points%)
      words_ww%=words_ww%-temp%
    ENDIF
  ENDIF
  '
  IF last_word%>=0 THEN
    temp%=words_wh%-(dif_height%+2)
    IF INT(temp%/screen_points%)<>temp%/screen_points% THEN
      temp%=temp%-(INT(temp%/screen_points%)*screen_points%)
      words_wh%=words_wh%-temp%
    ENDIF
  ENDIF
  '
  IF words_wh%<min_window_h% THEN
    words_wh%=min_window_h%
  ENDIF
  IF words_ww%<min_window_w% THEN
    words_ww%=min_window_w%
  ENDIF
  '
RETURN
'
> PROCEDURE puzzle_size_check
  IF puzzle_ww%>mww%-puzzle_wx% THEN
    puzzle_ww%=mww%-puzzle_wx%
  ENDIF
  IF puzzle_wh%>mwh%+mwy%-puzzle_wy% THEN
    puzzle_wh%=mwh%+mwy%-puzzle_wy%
  ENDIF
  '
  IF puzzle_wh%<min_window_h% THEN
    puzzle_wh%=min_window_h%
  ENDIF
  IF puzzle_ww%<min_window_w% THEN
    puzzle_ww%=min_window_w%
  ENDIF
  '
  IF puzzle_wy%+puzzle_wh%>mwy%+mwh% THEN
    puzzle_wy%=mwy%+mwh%-puzzle_wh%
  ENDIF
  IF puzzle_wx%+puzzle_ww%>mwx%+mww% THEN
    puzzle_wx%=mwx%+mww%-puzzle_ww%
  ENDIF
  '
  IF puzzle_ready% THEN
    IF puzzle_ww%-dif_width%<longest_puzzle%*screen_points%+2
      temp%=puzzle_ww%-(dif_width%+2)
      IF INT(temp%/screen_points%)<>temp%/screen_points% THEN
        temp%=temp%-(INT(temp%/screen_points%)*screen_points%)
        puzzle_ww%=puzzle_ww%-temp%
      ENDIF
    ENDIF
    '
    temp%=puzzle_wh%-(dif_height%+2)
    IF INT(temp%/screen_points%)<>temp%/screen_points% THEN
      temp%=temp%-(INT(temp%/screen_points%)*screen_points%)
      puzzle_wh%=puzzle_wh%-temp%
    ENDIF
  ENDIF
  '
  IF puzzle_wh%<min_window_h% THEN
    puzzle_wh%=min_window_h%
  ENDIF
  IF puzzle_ww%<min_window_w% THEN
    puzzle_ww%=min_window_w%
  ENDIF
  '
RETURN
'
> PROCEDURE set_paths
  shell%=SHEL_READ(command$,tail$)
  tail$=MID$(tail$,2)
  test%=RINSTR(command$,"\")
  IF test% THEN
    command$=MID$(command$,1,test%)
  ENDIF
  '
  current_drive%=GEMDOS(25)
  current_path$=DIR$(current_drive%+1)+"\"
  '
  IF MID$(current_path$,1,1)="\" THEN
    current_path$=CHR$(current_drive%+65)+":"+current_path$
  ELSE
    IF MID$(current_path$,2,1)<>":" THEN
      current_path$=CHR$(current_drive%+65)+":\"+current_path$
    ENDIF
  ENDIF
  '
  search_file$=current_path$+"SEARCH.RSC"+CHR$(0)
  ~FSETDTA(dta%)
  test%=GEMDOS(78,L:V:search_file$,&X100111)
  IF test%=0 THEN
    view_path$=current_path$
    '
  ELSE
    search_file$=command$+"SEARCH.RSC"+CHR$(0)
    ~FSETDTA(dta%)
    test%=GEMDOS(78,L:V:search_file$,&X100111)
    IF test%=0 THEN
      view_path$=command$
      '
    ELSE
      txt$="Sorry, I can not find my RSC  |file, would you like to look  |for it ? | "
      ALERT 0,txt$,1,"OK|Cancel",button%
      '
      IF button%=1 THEN
        FILESELECT #"FIND SEARCH RSC FILE",current_path$+"*.*","SEARCH.RSC",temp$
        test%=RINSTR(temp$,"\")
        IF test% THEN
          temp$=MID$(temp$,1,test%)+"SEARCH.RSC"
        ELSE
          temp$="\SEARCH.RSC"
        ENDIF
        '
        search_file$=temp$+CHR$(0)
        ~FSETDTA(dta%)
        test%=GEMDOS(78,L:V:search_file$,&X100111)
        IF test%=0 THEN
          test%=RINSTR(temp$,"\")
          view_path$=MID$(temp$,1,test%)
        ELSE
          IF dta%>0 THEN
            d%=GEMDOS(73,L:dta%)           ! RELEASE MEMORY
          ENDIF
          END
        ENDIF
        '
      ELSE
        IF dta%>0 THEN
          d%=GEMDOS(73,L:dta%)           ! RELEASE MEMORY
        ENDIF
        END
      ENDIF
      '
    ENDIF
  ENDIF
  '
  ' dummy$=view_path$+"SAERCH.XXX"
  puzzle_path$=view_path$
  puzzle_print_path$=view_path$
  search_inf$=view_path$+"SEARCH.INF"
  puzzle_name$="PUZZLE.WSP"
  puzzle_print_name$=""
  words_path$=view_path$
  words_name$="WORDS.WSL"
  mask_path$=view_path$
  mask_name$="MASK.WSM"
  my_rsc$=view_path$+"SEARCH.RSC"
  '
RETURN
'
> PROCEDURE rsc_do
  '
  rsc%=RSRC_LOAD(my_rsc$)
  ~RSRC_GADDR(0,0,mask_dialog%)
  ~RSRC_GADDR(0,1,menu%)
  ~RSRC_GADDR(0,2,edit_dialog%)
  ~RSRC_GADDR(0,3,size_dialog%)
  ~RSRC_GADDR(0,4,make_dialog%)
  ~RSRC_GADDR(0,5,word_load_dialog%)
  ~RSRC_GADDR(0,6,alert_dialog%)
  ~RSRC_GADDR(0,7,title_dialog%)
  ~RSRC_GADDR(0,8,scale_dialog%)
  ~RSRC_GADDR(0,9,help_dialog%)
  ~RSRC_GADDR(0,10,set_font_dialog%)
  ~RSRC_GADDR(0,11,print_puzzle_dialog%)
  ~RSRC_GADDR(0,12,output_dialog%)
  ~RSRC_GADDR(0,13,driver_dialog%)
  ~RSRC_GADDR(0,14,page_dialog%)
  ~RSRC_GADDR(0,15,dialogs_dialog%)
  ~RSRC_GADDR(0,16,font_dialog%)
  ~RSRC_GADDR(0,17,margins_dialog%)
  ~RSRC_GADDR(0,18,gdos_print_dialog%)
  ~RSRC_GADDR(0,19,word_place_dialog%)
  ~RSRC_GADDR(0,20,gdos_color_dialog%)
  '
  ~FORM_CENTER(edit_dialog%,edit_x%,edit_y%,edit_w%,edit_h%)
  ~FORM_CENTER(size_dialog%,size_x%,size_y%,size_w%,size_h%)
  ~FORM_CENTER(make_dialog%,make_x%,make_y%,make_w%,make_h%)
  ~FORM_CENTER(word_load_dialog%,word_load_x%,word_load_y%,word_load_w%,word_load_h%)
  ~FORM_CENTER(alert_dialog%,alert_x%,alert_y%,alert_w%,alert_h%)
  ~FORM_CENTER(title_dialog%,title_x%,title_y%,title_w%,title_h%)
  ~FORM_CENTER(scale_dialog%,scale_x%,scale_y%,scale_w%,scale_h%)
  ~FORM_CENTER(help_dialog%,help_x%,help_y%,help_w%,help_h%)
  ~FORM_CENTER(set_font_dialog%,set_font_x%,set_font_y%,set_font_w%,set_font_h%)
  ~FORM_CENTER(print_puzzle_dialog%,print_puzzle_x%,print_puzzle_y%,print_puzzle_w%,print_puzzle_h%)
  ~FORM_CENTER(output_dialog%,output_x%,output_y%,output_w%,output_h%)
  ~FORM_CENTER(driver_dialog%,driver_x%,driver_y%,driver_w%,driver_h%)
  ~FORM_CENTER(page_dialog%,page_x%,page_y%,page_w%,page_h%)
  ~FORM_CENTER(dialogs_dialog%,dialogs_x%,dialogs_y%,dialogs_w%,dialogs_h%)
  ~FORM_CENTER(font_dialog%,font_x%,font_y%,font_w%,font_h%)
  ~FORM_CENTER(margins_dialog%,margins_x%,margins_y%,margins_w%,margins_h%)
  ~FORM_CENTER(gdos_print_dialog%,gdos_print_x%,gdos_print_y%,gdos_print_w%,gdos_print_h%)
  ~FORM_CENTER(word_place_dialog%,word_place_x%,word_place_y%,word_place_w%,word_place_h%)
  ~FORM_CENTER(gdos_color_dialog%,gdos_color_x%,gdos_color_y%,gdos_color_w%,gdos_color_h%)
  '
  b_gdos_print_box%=2
  t_gdos_print_text%=3
  t_gdos_print_message%=4
  '
  b_print_puzzle_move%=2
  t_print_puzzle_output%=7
  t_print_puzzle_driver%=9
  t_print_puzzle_page%=11
  t_print_puzzle_font%=12
  t_print_puzzle_xrez%=13
  t_print_puzzle_yrez%=15
  t_print_puzzle_points%=16
  b_print_puzzle_title_color%=24
  b_print_puzzle_puzzle_color%=26
  b_print_puzzle_wordlist_color%=28
  b_print_puzzle_answers_color%=30
  t_print_puzzle_place%=32
  b_print_puzzle_shadow_title%=34
  b_print_puzzle_shadow_puzzle%=35
  b_print_puzzle_shadow_wordlist%=36
  t_print_puzzle_shadow%=38
  b_print_puzzle_fit%=39
  b_print_puzzle_outline_title%=41
  b_print_puzzle_outline_puzzle%=42
  b_print_puzzle_outline_wordlist%=43
  t_print_puzzle_copies%=46
  t_print_puzzle_top%=48
  t_print_puzzle_extra%=51
  t_print_puzzle_dialogs%=54
  t_print_puzzle_left%=56
  t_print_puzzle_right%=58
  b_print_puzzle_answers%=59
  t_print_puzzle_bottom%=61
  b_print_puzzle_load%=62
  b_print_puzzle_save%=63
  b_print_puzzle_ok%=64
  b_print_puzzle_print%=65
  b_print_puzzle_cancel%=66
  '
  b_set_font_move%=2
  t_set_font_name%=5
  b_set_font_box%=6
  t_set_font_points%=8
  b_set_font_ok%=9
  b_set_font_cancel%=10
  '
  b_edit_move%=2
  t_edit_word%=3
  b_edit_ok%=4
  b_edit_next%=5
  b_edit_cancel%=6
  '
  b_size_move%=2
  t_size_grid_x%=4
  t_size_grid_y%=6
  t_size_box%=8
  b_size_ok%=9
  b_size_cancel%=10
  '
  b_scale_move%=2
  t_scale_x%=4
  t_scale_y%=6
  b_scale_smooth%=7
  b_scale_double%=8
  b_scale_half%=9
  b_scale_cancel%=10
  '
  b_help_move%=2
  b_help_cancel%=17
  '
  b_make_move%=2
  t_make_box%=3
  t_make_word%=4
  b_make_cancel%=6
  '
  b_word_load_move%=2
  t_word_load_box%=3
  t_word_load_word%=4
  b_word_load_cancel%=6
  '
  b_title_move%=2
  t_title_title%=3
  b_title_ok%=4
  b_title_cancel%=5
  '
  b_mask_color%=1
  b_mask_draw%=2
  b_mask_line%=3
  b_mask_box%=4
  b_mask_pbox%=5
  b_mask_circle%=6
  b_mask_pcircle%=7
  b_mask_fill%=8
  b_mask_trim%=9
  b_mask_invert%=10
  b_mask_up%=11
  b_mask_down%=12
  b_mask_left%=13
  b_mask_right%=14
  b_mask_mirror_vertical%=15
  b_mask_mirror_horizontal%=16
  b_mask_flip_horizontal%=17
  b_mask_flip_vertical%=18
  b_mask_rotate_left%=19
  b_mask_rotate_right%=20
  '
  t_alert_title%=1
  b_alert_move%=2
  t_alert_line1%=3
  b_alert_button1%=8
  b_alert_button2%=9
  b_alert_button3%=10
  '
  m_about%=9
  '
  m_puzzle_load%=18
  m_puzzle_save%=19
  m_puzzle_print%=20
  m_puzzle_top%=22
  m_puzzle_make%=24
  m_puzzle_delete%=25
  m_fonts%=27
  m_quit%=28
  '
  m_words_load%=30
  m_words_import%=31
  m_words_save%=32
  m_words_top%=34
  m_words_add%=36
  m_words_delete%=37
  '
  m_mask_load%=39
  m_mask_import%=40
  m_mask_save%=41
  m_mask_top%=43
  m_mask_size%=44
  m_mask_scale%=46
  m_mask_delete%=48
  '
  IF screen_width%>=640 THEN
    temp_button%=set_font_w%-OB_X(set_font_dialog%,b_set_font_cancel%)
    temp_move%=set_font_w%-OB_X(set_font_dialog%,b_set_font_move%)
    '
    OB_W(set_font_dialog%,0)=set_font_w%*2
    ~FORM_CENTER(set_font_dialog%,set_font_x%,set_font_y%,set_font_w%,set_font_h%)
    '
    OB_X(set_font_dialog%,b_set_font_box%)=OB_X(set_font_dialog%,b_set_font_box%)*2
    OB_W(set_font_dialog%,b_set_font_box%)=OB_W(set_font_dialog%,b_set_font_box%)*2
    '
    OB_X(set_font_dialog%,b_set_font_cancel%)=set_font_w%-temp_button%
    OB_X(set_font_dialog%,b_set_font_move%)=set_font_w%-temp_move%
    '
    FOR x%=1 TO 6
      IF x%<>b_set_font_move% AND x%<>t_set_font_name% THEN
        OB_X(set_font_dialog%,x%)=(set_font_w%/2)-(OB_W(set_font_dialog%,x%)/2)
      ENDIF
    NEXT x%
  ENDIF
  '
  box_height%=OB_H(set_font_dialog%,b_set_font_box%)
  IF screen_height%>=set_font_h%+box_height%+title_height% THEN
    '
    OB_H(set_font_dialog%,0)=set_font_h%+box_height%
    ~FORM_CENTER(set_font_dialog%,set_font_x%,set_font_y%,set_font_w%,set_font_h%)
    '
    OB_H(set_font_dialog%,b_set_font_box%)=box_height%*2
    '
    FOR x%=7 TO 10
      OB_Y(set_font_dialog%,x%)=OB_Y(set_font_dialog%,x%)+box_height%
    NEXT x%
  ENDIF
  '
  word_load_button_y%=OB_Y(word_load_dialog%,b_word_load_cancel%)
  word_load_button_h%=OB_H(word_load_dialog%,b_word_load_cancel%)
  '
  font_button_y%=OB_Y(set_font_dialog%,b_set_font_ok%)
  font_button_h%=OB_H(set_font_dialog%,b_set_font_ok%)
  '
  alert_button_y%=OB_Y(alert_dialog%,b_alert_button2%)
  alert_button_h%=OB_H(alert_dialog%,b_alert_button2%)
  '
  make_button_y%=OB_Y(make_dialog%,b_make_cancel%)
  make_button_h%=OB_H(make_dialog%,b_make_cancel%)
  '
  step=38
  IF miww%>=20*step THEN
    mask_width%=20*step
    mask_height%=42
    OB_W(mask_dialog%,0)=mask_width%
    OB_H(mask_dialog%,0)=mask_height%
    FOR x%=0 TO 19
      OB_X(mask_dialog%,x%+1)=x%*step
      OB_Y(mask_dialog%,x%+1)=0
      OB_W(mask_dialog%,x%+1)=32
      OB_H(mask_dialog%,x%+1)=mask_height%
      '
    NEXT x%
  ELSE
    IF miww%<10*step THEN
      step=miww%/10
    ENDIF
    mask_width%=10*step
    mask_height%=80
    OB_W(mask_dialog%,0)=mask_width%
    OB_H(mask_dialog%,0)=mask_height%
    FOR x%=0 TO 9
      OB_X(mask_dialog%,x%+1)=x%*step
      OB_Y(mask_dialog%,x%+1)=0
      OB_W(mask_dialog%,x%+1)=32
      OB_H(mask_dialog%,x%+1)=mask_height%/2
      '
      OB_X(mask_dialog%,x%+11)=x%*step
      OB_Y(mask_dialog%,x%+11)=mask_height%/2
      OB_W(mask_dialog%,x%+11)=32
      OB_H(mask_dialog%,x%+11)=mask_height%/2
    NEXT x%
  ENDIF
  the_mask_height%=mask_height%
  '
  OB_STATE(mask_dialog%,b_mask_color%)=BCHG(OB_STATE(mask_dialog%,b_mask_color%),0)
  OB_STATE(scale_dialog%,b_scale_smooth%)=BSET(OB_STATE(scale_dialog%,b_scale_smooth%),0)
  @set_mask_color
  @set_mask_mode
  '
RETURN
'
> PROCEDURE set_mask_mode
  SELECT old_mask_mode%
  CASE 0 ! DRAW
    mode_fix%=b_mask_draw%
    OB_STATE(mask_dialog%,b_mask_draw%)=BCLR(OB_STATE(mask_dialog%,b_mask_draw%),0)
    '
  CASE 1 ! LINE
    mode_fix%=b_mask_line%
    OB_STATE(mask_dialog%,b_mask_line%)=BCLR(OB_STATE(mask_dialog%,b_mask_line%),0)
    '
  CASE 2 ! BOX
    mode_fix%=b_mask_box%
    OB_STATE(mask_dialog%,b_mask_box%)=BCLR(OB_STATE(mask_dialog%,b_mask_box%),0)
    '
  CASE 3 ! PBOX
    mode_fix%=b_mask_pbox%
    OB_STATE(mask_dialog%,b_mask_pbox%)=BCLR(OB_STATE(mask_dialog%,b_mask_pbox%),0)
    '
  CASE 4 ! CLRCLE
    mode_fix%=b_mask_circle%
    OB_STATE(mask_dialog%,b_mask_circle%)=BCLR(OB_STATE(mask_dialog%,b_mask_circle%),0)
    '
  CASE 5 ! PCLRCLE
    mode_fix%=b_mask_pcircle%
    OB_STATE(mask_dialog%,b_mask_pcircle%)=BCLR(OB_STATE(mask_dialog%,b_mask_pcircle%),0)
    '
  CASE 6 ! FILL
    mode_fix%=b_mask_fill%
    OB_STATE(mask_dialog%,b_mask_fill%)=BCLR(OB_STATE(mask_dialog%,b_mask_fill%),0)
    '
  ENDSELECT
  '
  SELECT mask_mode%
  CASE 0 ! DRAW
    OB_STATE(mask_dialog%,b_mask_draw%)=BSET(OB_STATE(mask_dialog%,b_mask_draw%),0)
    '
  CASE 1 ! LINE
    OB_STATE(mask_dialog%,b_mask_line%)=BSET(OB_STATE(mask_dialog%,b_mask_line%),0)
    '
  CASE 2 ! BOX
    OB_STATE(mask_dialog%,b_mask_box%)=BSET(OB_STATE(mask_dialog%,b_mask_box%),0)
    '
  CASE 3 ! PBOX
    OB_STATE(mask_dialog%,b_mask_pbox%)=BSET(OB_STATE(mask_dialog%,b_mask_pbox%),0)
    '
  CASE 4 ! CIRCLE
    OB_STATE(mask_dialog%,b_mask_circle%)=BSET(OB_STATE(mask_dialog%,b_mask_circle%),0)
    '
  CASE 5 ! PCIRCLE
    OB_STATE(mask_dialog%,b_mask_pcircle%)=BSET(OB_STATE(mask_dialog%,b_mask_pcircle%),0)
    '
  CASE 6 ! FILL
    OB_STATE(mask_dialog%,b_mask_fill%)=BSET(OB_STATE(mask_dialog%,b_mask_fill%),0)
    '
  ENDSELECT
  '
RETURN
'
> PROCEDURE set_mask_color
  IF BTST(OB_STATE(mask_dialog%,b_mask_color%),0)=0 THEN
    mask_color%=0
  ELSE
    mask_color%=1
  ENDIF
  '
RETURN
'
> PROCEDURE check_for_mint
  '
  INLINE cookie%,6
  CHAR{cookie%}="    "+CHR$(0)+CHR$(0)
  handle&=APPL_INIT()
  jar%=LPEEK(1440)
  mint%=0
  gdos%=0
  IF jar% THEN
    DO
      IF LPEEK(jar%) THEN
        LPOKE cookie%,LPEEK(jar%)
        cookie$=CHAR{cookie%}
        IF cookie$="MiNT" THEN
          mint%=1
        ENDIF
        IF cookie$="FSMC" OR cookie$="_FNT" THEN
          gdos%=1
        ENDIF
        jar%=jar%+8
      ELSE
        jar%=0
      ENDIF
    LOOP UNTIL jar%=0
  ENDIF
  '
  IF mint% THEN
    ~MENU_REGISTER(handle&,"  Search")
  ELSE
    CLS
  ENDIF
  '
  FOR x%=0 TO 9
    driver$(x%)="-Unused-"
  NEXT x%
  IF gdos% THEN
    assign$="C:\ASSIGN.SYS"
    search_file$=assign$+CHR$(0)
    ~FSETDTA(dta%)
    test%=GEMDOS(78,L:V:search_file$,&X100111)
    IF test%=0 THEN
      '
    ELSE
      assign$="A:\ASSIGN.SYS"
      search_file$=assign$+CHR$(0)
      ~FSETDTA(dta%)
      test%=GEMDOS(78,L:V:search_file$,&X100111)
      IF test%=0 THEN
        '
      ELSE
        assign$=""
        '
      ENDIF
      '
    ENDIF
    '
    IF assign$<>"" THEN
      OPEN "I",#1,assign$
      DO
        INPUT #1,temp$
        x%=VAL(temp$)
        IF x%>20 AND x%<31 THEN
          test1%=INSTR(temp$," ")
          test2%=INSTR(temp$,".")
          driver$(x%-21)=MID$(temp$,test1%+1,test2%-(test1%+1))
        ENDIF
      LOOP UNTIL EOF(#1)
      CLOSE #1
    ENDIF
    '
    message$="Loading fonts..."
    ~VQT_EXTENT(message$,x1%,y1%,x2%,y2%,x3%,y3%,x4%,y4%)
    x%=(screen_width%-x3%)/2
    y%=screen_height%/2
    DEFTEXT 1
    TEXT x%+1,y%+y3%,message$
    COLOR 1
    DEFLINE ,1
    BOX x%-2,y%-2,x%+x3%+6,y%+y3%+6
    BOX x%-5,y%-5,x%+x3%+9,y%+y3%+9
    gdos_fonts%=VST_LOAD_FONTS(0)+1
    CLS
  ENDIF
  '
RETURN
'
> PROCEDURE window_setup
  '
  words_wx%=mwx%
  words_wy%=mwy%
  words_ww%=mww%
  words_wh%=mwh%
  words_window%=WIND_CREATE(&X111111111111,mwx%,mwy%,mww%,mwh%)
  @words_title
  @words_info_line
  @words_full
  '
  puzzle_wx%=mwx%
  puzzle_wy%=mwy%
  puzzle_ww%=mww%
  puzzle_wh%=mwh%
  puzzle_window%=WIND_CREATE(&X111111111111,mwx%,mwy%,mww%,mwh%)
  @puzzle_title
  @puzzle_info_line
  @puzzle_full
  '
  mask_wx%=mwx%
  mask_wy%=mwy%
  mask_ww%=mww%
  mask_wh%=mwh%
  mask_window%=WIND_CREATE(&X111111111111,mwx%,mwy%,mww%,mwh%)
  @mask_title
  @mask_info_line
  @mask_full
  '
  mask_window_status%=0
  words_window_status%=0
  puzzle_window_status%=0
  '
  @mask_size_check
  flag%=WIND_SET(mask_window%,5,mask_wx%,mask_wy%,mask_ww%,mask_wh%)
  flag%=WIND_GET(mask_window%,4,mask_iwx%,mask_iwy%,mask_iww%,mask_iwh%)
  @size_mask_slider
  OB_X(mask_dialog%,0)=mask_iwx%
  OB_Y(mask_dialog%,0)=mask_iwy%
  @set_new_mask_size
  '
  @words_size_check
  flag%=WIND_SET(words_window%,5,words_wx%,words_wy%,words_ww%,words_wh%)
  flag%=WIND_GET(words_window%,4,words_iwx%,words_iwy%,words_iww%,words_iwh%)
  @size_words_slider
  '
  @puzzle_size_check
  flag%=WIND_SET(puzzle_window%,5,puzzle_wx%,puzzle_wy%,puzzle_ww%,puzzle_wh%)
  flag%=WIND_GET(puzzle_window%,4,puzzle_iwx%,puzzle_iwy%,puzzle_iww%,puzzle_iwh%)
  @size_puzzle_slider
  '
RETURN
'
> PROCEDURE repair_mask
  '
  @hide_mouse
  er%=WIND_UPDATE(1)                      ! TELL GEM WE ARE TAKING OVER SCREEN
  er%=WIND_UPDATE(3)
  er%=WIND_GET(mask_window%,11,fx%,fy%,fx2%,fy2%) ! GET FIRST RECTANGLE
  fix_wx%=buffer&(4)
  fix_wy%=buffer&(5)
  fix_ww%=buffer&(6)
  fix_wh%=buffer&(7)
  fix_flag%=RC_INTERSECT(fix_wx%,fix_wy%,fix_ww%,fix_wh%,fx%,fy%,fx2%,fy2%)
  IF fix_flag% THEN
    @display_mask
  ENDIF
  fix_done%=0
  '
  DO
    er%=WIND_GET(mask_window%,12,fx%,fy%,fx2%,fy2%)      ! GET NEXT RECTANGLE
    '
    IF fx2%+fy2%=0 THEN                          ! ANY MORE RECTANGLES ?
      fix_done%=1
    ELSE
      fix_wx%=buffer&(4)
      fix_wy%=buffer&(5)
      fix_ww%=buffer&(6)
      fix_wh%=buffer&(7)
      fix_flag%=RC_INTERSECT(fix_wx%,fix_wy%,fix_ww%,fix_wh%,fx%,fy%,fx2%,fy2%)
      IF fix_flag% THEN
        @display_mask
      ENDIF
    ENDIF
    '
  LOOP UNTIL fix_done%=1
  '
  er%=WIND_UPDATE(2)
  er%=WIND_UPDATE(0)                      !  DONE WITH SCREEN
  @show_mouse
  '
RETURN
'
> PROCEDURE repair_words
  '
  @hide_mouse
  er%=WIND_UPDATE(1)                      ! TELL GEM WE ARE TAKING OVER SCREEN
  er%=WIND_UPDATE(3)
  er%=WIND_GET(words_window%,11,fx%,fy%,fx2%,fy2%) ! GET FIRST RECTANGLE
  fix_wx%=buffer&(4)
  fix_wy%=buffer&(5)
  fix_ww%=buffer&(6)
  fix_wh%=buffer&(7)
  fix_flag%=RC_INTERSECT(fix_wx%,fix_wy%,fix_ww%,fix_wh%,fx%,fy%,fx2%,fy2%)
  IF fix_flag% THEN
    CLIP fx%,fy%,fx2%,fy2%
    DEFFILL 0,2,8
    DEFLINE ,1
    PBOX fx%,fy%,fx%+fx2%-1,fy%+fy2%-1
    @display_words
  ENDIF
  fix_done%=0
  '
  DO
    er%=WIND_GET(words_window%,12,fx%,fy%,fx2%,fy2%)      ! GET NEXT RECTANGLE
    '
    IF fx2%+fy2%=0 THEN                          ! ANY MORE RECTANGLES ?
      fix_done%=1
    ELSE
      fix_wx%=buffer&(4)
      fix_wy%=buffer&(5)
      fix_ww%=buffer&(6)
      fix_wh%=buffer&(7)
      fix_flag%=RC_INTERSECT(fix_wx%,fix_wy%,fix_ww%,fix_wh%,fx%,fy%,fx2%,fy2%)
      IF fix_flag% THEN
        CLIP fx%,fy%,fx2%,fy2%
        DEFFILL 0,2,8
        DEFLINE ,1
        PBOX fx%,fy%,fx%+fx2%-1,fy%+fy2%-1
        @display_words
      ENDIF
    ENDIF
    '
  LOOP UNTIL fix_done%=1
  '
  er%=WIND_UPDATE(2)
  er%=WIND_UPDATE(0)                      !  DONE WITH SCREEN
  @show_mouse
  '
RETURN
'
> PROCEDURE repair_puzzle
  '
  @hide_mouse
  er%=WIND_UPDATE(1)                      ! TELL GEM WE ARE TAKING OVER SCREEN
  er%=WIND_UPDATE(3)
  er%=WIND_GET(puzzle_window%,11,fx%,fy%,fx2%,fy2%) ! GET FIRST RECTANGLE
  fix_wx%=buffer&(4)
  fix_wy%=buffer&(5)
  fix_ww%=buffer&(6)
  fix_wh%=buffer&(7)
  fix_flag%=RC_INTERSECT(fix_wx%,fix_wy%,fix_ww%,fix_wh%,fx%,fy%,fx2%,fy2%)
  IF fix_flag% THEN
    CLIP fx%,fy%,fx2%,fy2%
    DEFFILL 0,2,8
    DEFLINE ,1
    PBOX fx%,fy%,fx%+fx2%-1,fy%+fy2%-1
    @display_puzzle
  ENDIF
  fix_done%=0
  '
  DO
    er%=WIND_GET(puzzle_window%,12,fx%,fy%,fx2%,fy2%)      ! GET NEXT RECTANGLE
    '
    IF fx2%+fy2%=0 THEN                          ! ANY MORE RECTANGLES ?
      fix_done%=1
    ELSE
      fix_wx%=buffer&(4)
      fix_wy%=buffer&(5)
      fix_ww%=buffer&(6)
      fix_wh%=buffer&(7)
      fix_flag%=RC_INTERSECT(fix_wx%,fix_wy%,fix_ww%,fix_wh%,fx%,fy%,fx2%,fy2%)
      IF fix_flag% THEN
        CLIP fx%,fy%,fx2%,fy2%
        DEFFILL 0,2,8
        DEFLINE ,1
        PBOX fx%,fy%,fx%+fx2%-1,fy%+fy2%-1
        @display_puzzle
      ENDIF
    ENDIF
    '
  LOOP UNTIL fix_done%=1
  '
  er%=WIND_UPDATE(2)
  er%=WIND_UPDATE(0)                      !  DONE WITH SCREEN
  @show_mouse
  '
RETURN
'
> PROCEDURE display_mask
  '
  tfx%=fx%
  tfy%=fy%
  tfx2%=fx2%
  tfy2%=fy2%
  '
  fix_obj_flag%=RC_INTERSECT(mask_iwx%,mask_iwy%,mask_width%,mask_height%,tfx%,tfy%,tfx2%,tfy2%)
  IF fix_obj_flag% THEN
    CLIP fx%,fy%,fx2%,fy2%
    DEFFILL 0,2,8
    DEFLINE ,1
    PBOX tfx%,tfy%,tfx%+tfx2%-1,tfy%+tfy2%-1
    ~OBJC_DRAW(mask_dialog%,0,2,tfx%,tfy%,tfx2%,tfy2%)
  ENDIF
  '
  fix_mask_flag%=RC_INTERSECT(mask_iwx%,mask_iwy%+mask_height%,mask_iww%,mask_iwh%+1-mask_height%,fx%,fy%,fx2%,fy2%)
  IF fix_mask_flag% THEN
    CLIP fx%,fy%,fx2%,fy2%
    @mask_raster_put
  ENDIF
  '
RETURN
'
> PROCEDURE mask_draw
  FOR x%=0 TO mask_hfit%-1
    FOR y%=0 TO mask_vfit%-1
      ploting_x%=mask_iwx%+x%*grid_box_sizex%+1
      ploting_y%=mask_iwy%+y%*grid_box_sizey%+mask_height%
      ploting_x2%=ploting_x%+grid_box_sizex%-2
      ploting_y2%=ploting_y%+grid_box_sizey%-2
      SELECT grid(x%+mask_hview%,y%+mask_vview%)
      CASE 0
        DEFFILL 1,0
      CASE 1
        DEFFILL 1,2,8
      CASE 2
        IF screen_bits%>1 THEN
          DEFFILL 2,2,8
        ELSE
          DEFFILL 1,2,4
        ENDIF
      ENDSELECT
      DEFLINE ,1
      PBOX ploting_x%,ploting_y%,ploting_x2%,ploting_y2%
      '
    NEXT y%
  NEXT x%
  '
RETURN
'
> PROCEDURE mask_raster_get
  '
  FOR bx%=0 TO raster_size%-1025 STEP 1024
    BMOVE blank%,raster_buffer%+bx%,1024
  NEXT bx%
  '
  CLIP mask_iwx%,mask_iwy%+mask_height%,mask_iww%,mask_iwh%+1-mask_height%
  source_mfdb%(0)=0
  '
  destination_mfdb%(0)=raster_buffer%
  destination_mfdb%(1)=mww%
  destination_mfdb%(2)=mwh%
  destination_mfdb%(3)=mww%/16
  destination_mfdb%(5)=screen_bits%
  '
  parameters%(0)=mask_iwx%
  parameters%(1)=mask_iwy%+mask_height%
  parameters%(2)=mask_iwx%+mask_hfit%*grid_box_sizex%-1
  parameters%(3)=mask_iwy%+mask_height%+mask_vfit%*grid_box_sizey%-1
  parameters%(4)=0
  parameters%(5)=0
  parameters%(6)=mask_hfit%*grid_box_sizex%-1
  parameters%(7)=mask_vfit%*grid_box_sizey%-1
  BITBLT source_mfdb%(),destination_mfdb%(),parameters%()
  '
RETURN
'
> PROCEDURE mask_raster_put
  '
  source_mfdb%(0)=raster_buffer%
  source_mfdb%(1)=mww%
  source_mfdb%(2)=mwh%
  source_mfdb%(3)=mww%/16
  source_mfdb%(5)=screen_bits%
  '
  destination_mfdb%(0)=0
  '
  parameters%(0)=fx%-mask_iwx%
  parameters%(1)=fy%-(mask_iwy%+mask_height%)
  parameters%(2)=fx%+fx2%-(mask_iwx%+1)
  parameters%(3)=fy%+fy2%-(mask_iwy%+mask_height%+1)
  parameters%(4)=fx%
  parameters%(5)=fy%
  parameters%(6)=fx%+fx2%-1
  parameters%(7)=fy%+fy2%-1
  BITBLT source_mfdb%(),destination_mfdb%(),parameters%()
  '
RETURN
'
> PROCEDURE display_words
  '
  IF last_word%>-1 THEN
    words_column%=words_hview%
    FOR x%=0 TO words_vfit%-1
      words_row%=words_vview%+x%
      DEFTEXT gdos_wordlist_color%
      IF words%(words_row%)=1 THEN
        IF gdos_wordlist_color% THEN
          IF outline_wordlist% THEN
            DEFTEXT ,17
          ELSE
            DEFTEXT ,1
          ENDIF
        ELSE
          IF outline_wordlist% THEN
            DEFTEXT 1,17
          ELSE
            DEFTEXT 1,1
          ENDIF
        ENDIF
      ELSE
        IF gdos_wordlist_color% THEN
          IF outline_wordlist% THEN
            DEFTEXT ,16
          ELSE
            DEFTEXT ,0
          ENDIF
        ELSE
          IF outline_wordlist% THEN
            DEFTEXT 1,16
          ELSE
            DEFTEXT 1,0
          ENDIF
        ENDIF
      ENDIF
      x_text%=words_iwx%+1
      y_text%=words_iwy%+(x%+1)*screen_points%
      t_text$=MID$(words$(words_row%),words_column%+1)
      handle%=my_handle%
      @text
    NEXT x%
    '
  ENDIF
  '
RETURN
'
> PROCEDURE display_puzzle
  '
  IF puzzle_ready%=1 THEN
    IF gdos_puzzle_color% THEN
      DEFTEXT gdos_puzzle_color%
    ELSE
      DEFTEXT 1
    ENDIF
    IF outline_puzzle% THEN
      DEFTEXT ,16
    ELSE
      DEFTEXT ,0
    ENDIF
    FOR y%=0 TO puzzle_vfit%-1
      FOR x%=0 TO puzzle_hfit%-1
        char%=ASC(MID$(puzzle$(puzzle_vview%+y%),puzzle_hview%+x%+1,1))
        tx%=puzzle_iwx%+x%*screen_points%+((screen_points%-cell%(char%))/2)+1
        ty%=puzzle_iwy%+(y%+1)*screen_points%
        x_text%=tx%
        y_text%=ty%
        t_text$=MID$(puzzle$(puzzle_vview%+y%),puzzle_hview%+x%+1,1)
        handle%=my_handle%
        @text
      NEXT x%
    NEXT y%
    IF puzzle_line% THEN
      FOR current_puzzle_word%=0 TO last_puzzle_word%
        @puzzle_line
      NEXT current_puzzle_word%
    ENDIF
  ENDIF
  '
RETURN
'
> PROCEDURE puzzle_line
  x%=puzzle%(0,current_puzzle_word%)
  y%=puzzle%(1,current_puzzle_word%)
  COLOR gdos_answers_color%
  derection%=puzzle%(2,current_puzzle_word%)
  size%=LEN(puzzle_words$(current_puzzle_word%))
  x%=x%-puzzle_hview%
  y%=y%-puzzle_vview%
  '
  SELECT derection%
  CASE 0
    y2%=y%+1-size%
    x2%=x%
  CASE 1
    y2%=y%+1-size%
    x2%=x%+size%-1
  CASE 2
    x2%=x%+size%-1
    y2%=y%
  CASE 3
    x2%=x%+size%-1
    y2%=y%+size%-1
  CASE 4
    x2%=x%
    y2%=y%+size%-1
  CASE 5
    x2%=x%+1-size%
    y2%=y%+size%-1
  CASE 6
    x2%=x%+1-size%
    y2%=y%
  CASE 7
    x2%=x%+1-size%
    y2%=y%+1-size%
  ENDSELECT
  '
  GRAPHMODE 2
  DEFLINE ,1
  LINE puzzle_iwx%+x%*screen_points%+screen_points%*0.5,puzzle_iwy%+y%*screen_points%+screen_points%*0.65,puzzle_iwx%+x2%*screen_points%+screen_points%*0.5,puzzle_iwy%+y2%*screen_points%+screen_points%*0.65
  CIRCLE puzzle_iwx%+x%*screen_points%+screen_points%*0.5,puzzle_iwy%+y%*screen_points%+screen_points%*0.65,MAX(screen_points%,screen_points%)/2
  GRAPHMODE 1
  '
RETURN
'
> PROCEDURE plot
  '
  @hide_mouse
  er%=WIND_UPDATE(1)
  CLIP mask_iwx%,mask_iwy%+mask_height%,mask_iww%,mask_iwh%+1-mask_height%
  ploting_x%=mask_iwx%+(plot_x%-mask_hview%)*grid_box_sizex%+1
  ploting_y%=mask_iwy%+mask_height%+(plot_y%-mask_vview%)*grid_box_sizey%
  ploting_x2%=ploting_x%+grid_box_sizex%-2
  ploting_y2%=ploting_y%+grid_box_sizey%-2
  '
  IF mask_mode%<>0 THEN
    SELECT grid(plot_x%,plot_y%)
    CASE 0
      DEFFILL 1,0
      DEFLINE ,1
      PBOX ploting_x%,ploting_y%,ploting_x2%,ploting_y2%
    CASE 1
      DEFFILL 1,2,8
      DEFLINE ,1
      PBOX ploting_x%,ploting_y%,ploting_x2%,ploting_y2%
    CASE 2
      IF screen_bits%>1 THEN
        DEFFILL 2,2,8
      ELSE
        DEFFILL 1,2,4
      ENDIF
      DEFLINE ,1
      PBOX ploting_x%,ploting_y%,ploting_x2%,ploting_y2%
    ENDSELECT
  ELSE
    '
    SELECT mask_color%
    CASE 0
      DEFFILL 1,0
      DEFLINE ,1
      PBOX ploting_x%,ploting_y%,ploting_x2%,ploting_y2%
    CASE 1
      DEFFILL 1,2,8
      DEFLINE ,1
      PBOX ploting_x%,ploting_y%,ploting_x2%,ploting_y2%
    ENDSELECT
  ENDIF
  '
  source_mfdb%(0)=0
  '
  destination_mfdb%(0)=raster_buffer%
  destination_mfdb%(1)=mww%
  destination_mfdb%(2)=mwh%
  destination_mfdb%(3)=mww%/16
  destination_mfdb%(5)=screen_bits%
  '
  parameters%(0)=ploting_x%
  parameters%(1)=ploting_y%
  parameters%(2)=ploting_x2%
  parameters%(3)=ploting_y2%
  parameters%(4)=plot_x%*grid_box_sizex%+1
  parameters%(5)=plot_y%*grid_box_sizey%
  parameters%(6)=(plot_x%+1)*grid_box_sizex%-2
  parameters%(7)=(plot_y%+1)*grid_box_sizey%-1
  BITBLT source_mfdb%(),destination_mfdb%(),parameters%()
  '
  er%=WIND_UPDATE(0)
  @show_mouse
  '
RETURN
'
> PROCEDURE update_grid
  mask_raster_flag%=1
  IF mask_window_status%=1 THEN
    mask_raster_flag%=0
    flag%=WIND_SET(mask_window%,10,0,0,0,0) ! WINDOW SET TO TOP
    er%=WIND_UPDATE(1)
    er%=WIND_UPDATE(3)
    CLIP mask_iwx%,mask_iwy%+mask_height%-1,mask_iww%,mask_iwh%+1-mask_height%
    DEFFILL 0,2,8
    DEFLINE ,1
    PBOX mask_iwx%,mask_iwy%+mask_height%-1,mask_iwx%+mask_iww%-1,mask_iwy%+mask_iwh%-1
    @mask_draw
    @mask_raster_get
    er%=WIND_UPDATE(2)
    er%=WIND_UPDATE(0)
  ENDIF
  '
RETURN
'
> PROCEDURE update_mask
  '
  IF mask_window_status%=1 THEN
    my_buffer&(0)=20
    my_buffer&(3)=mask_window%
    my_buffer&(4)=mask_iwx%
    my_buffer&(5)=mask_iwy%
    my_buffer&(6)=mask_iwx%+mask_iww%-1
    my_buffer&(7)=mask_iwy%+mask_iwh%-1
    ~APPL_WRITE(handle&,16,my_buffer%)
  ENDIF
  '
RETURN
'
> PROCEDURE update_words
  '
  IF words_window_status%=1 THEN
    my_buffer&(0)=20
    my_buffer&(3)=words_window%
    my_buffer&(4)=words_iwx%
    my_buffer&(5)=words_iwy%
    my_buffer&(6)=words_iwx%+words_iww%-1
    my_buffer&(7)=words_iwy%+words_iwh%-1
    ~APPL_WRITE(handle&,16,my_buffer%)
  ENDIF
  '
RETURN
'
> PROCEDURE update_puzzle
  '
  IF puzzle_window_status%=1 THEN
    my_buffer&(0)=20
    my_buffer&(3)=puzzle_window%
    my_buffer&(4)=puzzle_iwx%
    my_buffer&(5)=puzzle_iwy%
    my_buffer&(6)=puzzle_iwx%+puzzle_iww%-1
    my_buffer&(7)=puzzle_iwy%+puzzle_iwh%-1
    ~APPL_WRITE(handle&,16,my_buffer%)
  ENDIF
  '
RETURN
'
> PROCEDURE mask_title
  '
  temp%=RINSTR(mask_name$,".")
  IF temp%>1 THEN
    CHAR{mask_title%}=MID$(mask_name$,1,temp%-1)
  ELSE
    CHAR{mask_title%}=mask_name$
  ENDIF
  flag%=WIND_SET(mask_window%,2,CARD(SWAP(mask_title%)),CARD(mask_title%),0,0)
  '
RETURN
'
> PROCEDURE mask_info_line
  '
  mask_info$=STR$(grid_x%)+"x"+STR$(grid_y%)+" "+STR$(grid_used%)+CHR$(0)
  CHAR{mask_info%}=mask_info$
  flag%=WIND_SET(mask_window%,3,CARD(SWAP(mask_info%)),CARD(mask_info%),0,0)
  '
  IF grid_used%>0 THEN
    ~MENU_IENABLE(menu%,m_mask_save%,1)
    ~MENU_IENABLE(menu%,m_mask_scale%,1)
    ~MENU_IENABLE(menu%,m_mask_delete%,1)
  ELSE
    ~MENU_IENABLE(menu%,m_mask_save%,0)
    ~MENU_IENABLE(menu%,m_mask_scale%,0)
    ~MENU_IENABLE(menu%,m_mask_delete%,0)
  ENDIF
  IF last_word%>-1 AND grid_used%>0 THEN
    ~MENU_IENABLE(menu%,m_puzzle_make%,1)
  ELSE
    ~MENU_IENABLE(menu%,m_puzzle_make%,0)
  ENDIF
  '
RETURN
'
> PROCEDURE words_title
  '
  temp%=RINSTR(words_name$,".")
  IF temp%>1 THEN
    CHAR{words_title%}=MID$(words_name$,1,temp%-1)
  ELSE
    CHAR{words_title%}=words_name$
  ENDIF
  flag%=WIND_SET(words_window%,2,CARD(SWAP(words_title%)),CARD(words_title%),0,0)
  '
RETURN
'
> PROCEDURE words_info_line
  '
  words_info$=STR$(last_word%+1)+"/"+STR$(total_letters%)
  CHAR{words_info%}=words_info$
  flag%=WIND_SET(words_window%,3,CARD(SWAP(words_info%)),CARD(words_info%),0,0)
  '
  IF last_word%>-1 THEN
    ~MENU_IENABLE(menu%,m_words_save%,1)
    ~MENU_IENABLE(menu%,m_words_delete%,1)
  ELSE
    ~MENU_IENABLE(menu%,m_words_save%,0)
    ~MENU_IENABLE(menu%,m_words_delete%,0)
  ENDIF
  IF last_word%>-1 AND grid_used%>0 THEN
    ~MENU_IENABLE(menu%,m_puzzle_make%,1)
  ELSE
    ~MENU_IENABLE(menu%,m_puzzle_make%,0)
  ENDIF
  '
RETURN
'
> PROCEDURE puzzle_title
  '
  temp%=RINSTR(puzzle_name$,".")
  IF temp%>1 THEN
    CHAR{puzzle_title%}=MID$(puzzle_name$,1,temp%-1)
  ELSE
    CHAR{puzzle_title%}=puzzle_name$
  ENDIF
  flag%=WIND_SET(puzzle_window%,2,CARD(SWAP(puzzle_title%)),CARD(puzzle_title%),0,0)
  '
RETURN
'
> PROCEDURE set_puzzle_title
  SELECT dialog_type%
  CASE 0
    title_x%=event_mouse_x%-(title_w%/2)
    IF title_x%<mwx% THEN
      title_x%=mwx%
    ENDIF
    IF title_x%+title_w%>screen_width% THEN
      title_x%=screen_width%-title_w%
    ENDIF
    OB_X(title_dialog%,0)=title_x%
    title_y%=event_mouse_y%-(title_h%/2)
    IF title_y%<mwy% THEN
      title_y%=mwy%
    ENDIF
    IF title_y%+title_h%>screen_height% THEN
      title_y%=screen_height%-title_h%
    ENDIF
    OB_Y(title_dialog%,0)=title_y%
  CASE 1
    ~FORM_CENTER(title_dialog%,title_x%,title_y%,title_w%,title_h%)
  ENDSELECT
  '
  ~FORM_DIAL(0,0,0,0,0,title_x%,title_y%,title_w%,title_h%)
  er%=WIND_UPDATE(1)
  er%=WIND_UPDATE(3)
  title_done%=0
  '
  IF puzzle_title$="" THEN
    temp%=RINSTR(puzzle_name$,".")
    IF temp%>1 THEN
      puzzle_title$=MID$(puzzle_name$,1,temp%-1)
    ELSE
      puzzle_title$=puzzle_name$
    ENDIF
    IF LEN(puzzle_title$) THEN
      FOR x%=1 TO LEN(puzzle_title$)
        IF MID$(puzzle_title$,x%,1)="_" THEN
          MID$(puzzle_title$,x%,1)=" "
        ENDIF
      NEXT x%
    ENDIF
  ENDIF
  CHAR{{OB_SPEC(title_dialog%,t_title_title%)}}=puzzle_title$
  DO
    ~OBJC_DRAW(title_dialog%,0,2,title_x%,title_y%,title_w%,title_h%)
    exit%=FORM_DO(title_dialog%,t_title_title%)
    exit%=exit% AND &H7FFF
    ~OBJC_DRAW(title_dialog%,exit%,2,title_x%,title_y%,title_w%,title_h%)
    OB_STATE(title_dialog%,exit%)=BCLR(OB_STATE(title_dialog%,exit%),0)
    '
    SELECT exit%
    CASE b_title_move%
      OB_STATE(title_dialog%,exit%)=BCLR(OB_STATE(title_dialog%,exit%),0)
      er%=WIND_UPDATE(2)
      er%=WIND_UPDATE(0)
      ~FORM_DIAL(3,0,0,0,0,title_x%,title_y%,title_w%,title_h%)
      '
      ~GRAF_DRAGBOX(title_w%,title_h%,title_x%,title_y%,mwx%,mwy%,mww%,mwh%,title_x%,title_y%)
      OB_X(title_dialog%,0)=title_x%
      OB_Y(title_dialog%,0)=title_y%
      '
      @multi_check
      '
      ~FORM_DIAL(0,0,0,0,0,title_x%,title_y%,title_w%,title_h%)
      er%=WIND_UPDATE(1)
      er%=WIND_UPDATE(3)
      '
    CASE b_title_ok%
      puzzle_title$=CHAR{{OB_SPEC(title_dialog%,t_title_title%)}}
      @puzzle_info_line
      title_done%=1
      '
    CASE b_title_cancel%
      title_done%=1
      '
    ENDSELECT
    DO
      ~GRAF_MKSTATE(event_mouse_x%,event_mouse_y%,mouse_button%,key_state%)
    LOOP UNTIL mouse_button%=0
  LOOP UNTIL title_done%=1
  er%=WIND_UPDATE(2)
  er%=WIND_UPDATE(0)
  ~FORM_DIAL(3,0,0,0,0,title_x%,title_y%,title_w%,title_h%)
  '
RETURN
'
> PROCEDURE puzzle_info_line
  '
  CHAR{puzzle_info%}=puzzle_title$
  flag%=WIND_SET(puzzle_window%,3,CARD(SWAP(puzzle_info%)),CARD(puzzle_info%),0,0)
  '
RETURN
'
> PROCEDURE size_mask_slider
  '
  IF INT(mask_iww%/grid_box_sizex%)<grid_x% THEN
    mask_hmax%=grid_x%-INT(mask_iww%/grid_box_sizex%)
    mask_hfit%=grid_x%-mask_hmax%
    mask_hslider_size%=(mask_hfit%/grid_x%)*1000
    IF mask_hview%>mask_hmax% THEN
      mask_hview%=mask_hmax%
    ENDIF
    @mask_fix_hslider
    '
  ELSE
    mask_hview%=0
    mask_hslider_size%=1000
    mask_hfit%=grid_x%
  ENDIF
  '
  IF INT((mask_iwh%-mask_height%)/grid_box_sizey%)<grid_y% THEN
    mask_vmax%=grid_y%-INT((mask_iwh%-mask_height%)/grid_box_sizey%)
    mask_vfit%=grid_y%-mask_vmax%
    mask_vslider_size%=(mask_vfit%/grid_y%)*1000
    IF mask_vview%>mask_vmax% THEN
      mask_vview%=mask_vmax%
    ENDIF
    @mask_fix_vslider
    '
  ELSE
    mask_vview%=0
    mask_vslider_size%=1000
    mask_vfit%=grid_y%
  ENDIF
  '
  flag%=WIND_SET(mask_window%,8,mask_hslider_position%,0,0,0)
  flag%=WIND_SET(mask_window%,15,mask_hslider_size%,0,0,0)
  '
  flag%=WIND_SET(mask_window%,9,mask_vslider_position%,0,0,0)
  flag%=WIND_SET(mask_window%,16,mask_vslider_size%,0,0,0)
  '
RETURN
'
> PROCEDURE size_words_slider
  '
  IF words_iww%-2<widest_word% THEN
    words_hmax%=longest_word%-INT((words_iww%-2)/screen_points%)
    words_hfit%=longest_word%-words_hmax%
    words_hslider_size%=(words_hfit%/longest_word%)*1000
    IF words_hview%>words_hmax% THEN
      words_hview%=words_hmax%
      @words_fix_hslider
    ENDIF
    '
  ELSE
    words_hview%=0
    words_hslider_size%=1000
    words_hfit%=longest_word%
  ENDIF
  '
  IF INT((words_iwh%-2)/screen_points%)<last_word%+1 THEN
    words_vmax%=last_word%+1-INT((words_iwh%-2)/screen_points%)
    words_vfit%=last_word%+1-words_vmax%
    words_vslider_size%=(words_vfit%/(last_word%+1))*1000
    @words_fix_vslider
    IF words_vview%>words_vmax% THEN
      words_vview%=words_vmax%
    ENDIF
    '
  ELSE
    words_vview%=0
    words_vslider_size%=1000
    words_vfit%=last_word%+1
  ENDIF
  '
  flag%=WIND_SET(words_window%,8,words_hslider_position%,0,0,0)
  flag%=WIND_SET(words_window%,15,words_hslider_size%,0,0,0)
  '
  flag%=WIND_SET(words_window%,9,words_vslider_position%,0,0,0)
  flag%=WIND_SET(words_window%,16,words_vslider_size%,0,0,0)
  '
RETURN
'
> PROCEDURE size_puzzle_slider
  '
  IF puzzle_ready% THEN
    IF INT((puzzle_iww%-2)/screen_points%)<longest_puzzle% THEN
      puzzle_hmax%=longest_puzzle%-INT((puzzle_iww%-2)/screen_points%)
      puzzle_hfit%=longest_puzzle%-puzzle_hmax%
      puzzle_hslider_size%=(puzzle_hfit%/longest_puzzle%)*1000
      IF puzzle_hview%>puzzle_hmax% THEN
        puzzle_hview%=puzzle_hmax%
      ENDIF
      @puzzle_fix_hslider
    ELSE
      puzzle_hview%=0
      puzzle_hslider_size%=1000
      puzzle_hfit%=longest_puzzle%
    ENDIF
    '
    IF INT((puzzle_iwh%-2)/screen_points%)<puzzle_grid_y% THEN
      puzzle_vmax%=puzzle_grid_y%-INT((puzzle_iwh%-2)/screen_points%)
      puzzle_vfit%=puzzle_grid_y%-puzzle_vmax%
      puzzle_vslider_size%=(puzzle_vfit%/puzzle_grid_y%)*1000
      IF puzzle_vview%>puzzle_vmax% THEN
        puzzle_vview%=puzzle_vmax%
      ENDIF
      @puzzle_fix_vslider
    ELSE
      puzzle_vview%=0
      puzzle_vslider_size%=1000
      puzzle_vfit%=puzzle_grid_y%
    ENDIF
  ELSE
    puzzle_hslider_size%=1000
    puzzle_hfit%=0
    puzzle_vslider_size%=1000
    puzzle_vfit%=0
  ENDIF
  '
  flag%=WIND_SET(puzzle_window%,8,puzzle_hslider_position%,0,0,0)
  flag%=WIND_SET(puzzle_window%,15,puzzle_hslider_size%,0,0,0)
  '
  flag%=WIND_SET(puzzle_window%,9,puzzle_vslider_position%,0,0,0)
  flag%=WIND_SET(puzzle_window%,16,puzzle_vslider_size%,0,0,0)
  '
RETURN
'
> PROCEDURE puzzle_load
  FILESELECT #"LOAD PUZZLE",puzzle_path$+"*.WSP",puzzle_name$,work_file$
  DO
    ~GRAF_MKSTATE(event_mouse_x%,event_mouse_y%,mouse_button%,key_state%)
  LOOP UNTIL mouse_button%=0
  @get_puzzle
RETURN
'
> PROCEDURE get_puzzle
  IF work_file$<>"" AND RIGHT$(work_file$)<>"\" THEN
    ~FSETDTA(dta%)
    search_file$=work_file$+CHR$(0)
    finished%=GEMDOS(78,L:V:search_file$,&X100111)
    '
    IF finished%=0 THEN
      puzzle_file_size%=LPEEK(dta%+26)
      @clip_name
      IF puzzle_file_size%>0 THEN
        OPEN "I",#1,work_file$
        INPUT #1,temp$
        IF temp$="WSP1" THEN
          puzzle_load%=1
          puzzle_save%=1
          '
        ELSE
          alert$(0)="Load puzzle"
          alert$(1)=""
          alert$(2)="Sorry, "+work_name$
          alert$(3)="is not a puzzle file."
          alert$(4)=""
          alert$(5)=""
          alert$(6)=""
          alert$(7)="OK"
          alert$(8)=""
          button_default%=1
          @alert(alert_button%,button_default%,alert$())
          puzzle_load%=0
        ENDIF
        '
        IF puzzle_load%=1 THEN
          ~GRAF_MOUSE(2,0)
          INPUT #1,puzzle_title$
          INPUT #1,puzzle_grid_x%
          INPUT #1,puzzle_grid_y%
          INPUT #1,longest_puzzle_word%
          INPUT #1,last_puzzle_word%
          '
          longest_puzzle%=0
          '
          RECALL #1,puzzle$(),puzzle_grid_y%,d%
          FOR y%=0 TO puzzle_grid_y%-1
            longest_puzzle%=MAX(longest_puzzle%,LEN(puzzle$(y%)))
            '
          NEXT y%
          RECALL #1,puzzle_words$(),last_puzzle_word%+1,d%
          '
          FOR x%=0 TO last_puzzle_word%
            INPUT #1,puzzle%(0,x%)
            INPUT #1,puzzle%(1,x%)
            INPUT #1,puzzle%(2,x%)
          NEXT x%
          '
          puzzle_path$=work_path$
          puzzle_name$=work_name$
          puzzle_ready%=1
          puzzle_hview%=0
          puzzle_vview%=0
          ~GRAF_MOUSE(0,0)
          '
        ELSE
          puzzle_ready%=0
        ENDIF
        CLOSE #1
        ~FSETDTA(dta%)
        '
        overwrite_mask%=0
        IF puzzle_load%=1 AND mask_save%=0 AND grid_used%>0 THEN
          alert$(0)="Load puzzle"
          alert$(1)=""
          alert$(2)=""
          alert$(3)="OK to use mask from puzzle ?"
          alert$(4)=""
          alert$(5)=""
          alert$(6)="OK"
          alert$(7)=""
          alert$(8)="Cancel"
          button_default%=0
          @alert(alert_button%,button_default%,alert$())
          overwrite_mask%=alert_button%
        ENDIF
        '
        IF puzzle_load%=1 AND overwrite_mask%=0 THEN
          '
          ~GRAF_MOUSE(2,0)
          IF drawing%=1 THEN
            drawing%=0
            @clr_draw
          ENDIF
          @undo
          undo_x%=grid_x%
          undo_y%=grid_y%
          grid_x%=puzzle_grid_x%
          grid_y%=puzzle_grid_y%
          grid_used%=0
          '
          FOR y%=0 TO puzzle_grid_y%-1
            FOR x%=0 TO puzzle_grid_x%-1
              IF ASC(MID$(puzzle$(y%),x%+1,1))<>32 AND LEN(puzzle$(y%))>x% THEN
                grid(x%,y%)=1
                INC grid_used%
              ELSE
                grid(x%,y%)=0
              ENDIF
              '
            NEXT x%
          NEXT y%
          '
          mask_hview%=0
          mask_vview%=0
          mask_save%=1
          ~GRAF_MOUSE(0,0)
        ENDIF
        '
        alert_button%=0
        IF puzzle_load%=1 AND words_save%=0 AND last_word%>-1 THEN
          alert$(0)="Load puzzle"
          alert$(1)=""
          alert$(2)=""
          alert$(3)="OK to load word list from puzzle ?"
          alert$(4)=""
          alert$(5)=""
          alert$(6)="OK"
          alert$(7)=""
          alert$(8)="Cancel"
          button_default%=0
          @alert(alert_button%,button_default%,alert$())
        ENDIF
        '
        IF puzzle_load%=1 AND overwrite_mask%=0 THEN
          ~GRAF_MOUSE(2,0)
          mask_name$="MASK.WSM"
          full_flag%=1
          @set_new_mask_size
          ~GRAF_MOUSE(0,0)
        ENDIF
        '
        IF puzzle_load%=1 AND alert_button%=0 THEN
          ~GRAF_MOUSE(2,0)
          FOR x%=0 TO last_word%
            words$(x%)=""
            words%(x%)=0
          NEXT x%
          last_word%=last_puzzle_word%
          word_list$=SPACE$(max_char%*max_word%)
          FOR x%=0 TO last_word%
            words$(x%)=puzzle_words$(x%)
            words%(x%)=0
            MID$(word_list$,x%*max_char%+1,LEN(words$(x%)))=words$(x%)
          NEXT x%
          words_hview%=0
          words_vview%=0
          words_save%=1
          '
          words_name$="WORDS.WSL"
          full_flag%=1
          word_ext_flag%=1
          @set_new_words_size
          ~GRAF_MOUSE(0,0)
          '
        ENDIF
        full_flag%=1
        @set_new_puzzle_size
        @menu_puzzle_top
      ENDIF
    ENDIF
  ENDIF
RETURN
'
> PROCEDURE puzzle_save
  FILESELECT #"SAVE PUZZLE",puzzle_path$+"*.WSP",puzzle_name$,work_file$
  DO
    ~GRAF_MKSTATE(event_mouse_x%,event_mouse_y%,mouse_button%,key_state%)
  LOOP UNTIL mouse_button%=0
  IF work_file$<>"" AND RIGHT$(work_file$)<>"\" THEN
    ext$=".WSP"
    @add_ext
    @clip_name
    ~FSETDTA(dta%)
    search_file$=work_file$+CHR$(0)
    finished%=GEMDOS(78,L:V:search_file$,&X100111)
    '
    alert_button%=0
    IF finished%=0 THEN
      alert$(0)="Save puzzle"
      alert$(1)=work_name$+" exist,"
      alert$(2)=""
      alert$(3)="OK to overwrite it ?"
      alert$(4)=""
      alert$(5)=""
      alert$(6)="OK"
      alert$(7)=""
      alert$(8)="Cancel"
      button_default%=0
      @alert(alert_button%,button_default%,alert$())
      '
    ENDIF
    '
    IF alert_button%=0 THEN
      puzzle_path$=work_path$
      puzzle_name$=work_name$
      ~GRAF_MOUSE(2,0)
      OPEN "O",#1,work_file$
      '
      PRINT #1,"WSP1"
      PRINT #1,puzzle_title$
      PRINT #1,puzzle_grid_x%
      PRINT #1,puzzle_grid_y%
      PRINT #1,longest_puzzle_word%
      PRINT #1,last_puzzle_word%
      '
      STORE #1,puzzle$(),puzzle_grid_y%
      STORE #1,puzzle_words$(),last_puzzle_word%+1
      FOR x%=0 TO last_puzzle_word%
        PRINT #1,puzzle%(0,x%)
        PRINT #1,puzzle%(1,x%)
        PRINT #1,puzzle%(2,x%)
      NEXT x%
      '
      CLOSE #1
      ~FSETDTA(dta%)
      puzzle_save%=1
      ~GRAF_MOUSE(0,0)
    ENDIF
  ENDIF
RETURN
'
> PROCEDURE puzzle_print
  '
  old_output%=output%
  old_driver%=driver%
  old_landscape%=landscape%
  old_top_margin%=top_margin%
  old_bottom_margin%=bottom_margin%
  old_left_margin%=left_margin%
  old_right_margin%=right_margin%
  old_word_place%=word_place%
  old_title_color%=gdos_title_color%
  old_puzzle_color%=gdos_puzzle_color%
  old_wordlist_color%=gdos_wordlist_color%
  old_answers_color%=gdos_answers_color%
  old_dialog_type%=dialog_type%
  old_print_copies%=print_copies%
  old_print_extra%=print_extra%
  old_print_answers%=print_answers%
  old_shadow_title%=shadow_title%
  old_shadow_puzzle%=shadow_puzzle%
  old_shadow_wordlist%=shadow_wordlist%
  old_outline_title%=outline_title%
  old_outline_puzzle%=outline_puzzle%
  old_outline_wordlist%=outline_wordlist%
  old_current_font%=current_font%
  old_font_height%=font_height%
  '
  SELECT dialog_type%
  CASE 0
    print_puzzle_x%=event_mouse_x%-(print_puzzle_w%/2)
    IF print_puzzle_x%<mwx% THEN
      print_puzzle_x%=mwx%
    ENDIF
    IF print_puzzle_x%+print_puzzle_w%>screen_width% THEN
      print_puzzle_x%=screen_width%-print_puzzle_w%
    ENDIF
    OB_X(print_puzzle_dialog%,0)=print_puzzle_x%
    print_puzzle_y%=event_mouse_y%-(print_puzzle_h%/2)
    IF print_puzzle_y%<mwy% THEN
      print_puzzle_y%=mwy%
    ENDIF
    IF print_puzzle_y%+print_puzzle_h%>screen_height% THEN
      print_puzzle_y%=screen_height%-print_puzzle_h%
    ENDIF
    OB_Y(print_puzzle_dialog%,0)=print_puzzle_y%
  CASE 1
    ~FORM_CENTER(print_puzzle_dialog%,print_puzzle_x%,print_puzzle_y%,print_puzzle_w%,print_puzzle_h%)
  ENDSELECT
  '
  @set_print_dialog
  @set_print
  '
  print_puzzle_done%=0
  ~FORM_DIAL(0,0,0,0,0,print_puzzle_x%,print_puzzle_y%,print_puzzle_w%,print_puzzle_h%)
  er%=WIND_UPDATE(1)
  er%=WIND_UPDATE(3)
  '
  DO
    ~OBJC_DRAW(print_puzzle_dialog%,0,3,print_puzzle_x%,print_puzzle_y%,print_puzzle_w%,print_puzzle_h%)
    exit%=FORM_DO(print_puzzle_dialog%,t_print_puzzle_copies%)
    exit%=exit% AND &H7FFF
    OB_STATE(print_puzzle_dialog%,exit%)=BCLR(OB_STATE(print_puzzle_dialog%,exit%),0)
    '
    SELECT exit%
    CASE b_print_puzzle_move%
      OB_STATE(print_puzzle_dialog%,exit%)=BCLR(OB_STATE(print_puzzle_dialog%,exit%),0)
      er%=WIND_UPDATE(2)
      er%=WIND_UPDATE(0)
      ~FORM_DIAL(3,0,0,0,0,print_puzzle_x%,print_puzzle_y%,print_puzzle_w%,print_puzzle_h%)
      '
      ~GRAF_DRAGBOX(print_puzzle_w%,print_puzzle_h%,print_puzzle_x%,print_puzzle_y%,mwx%,mwy%,mww%,mwh%,print_puzzle_x%,print_puzzle_y%)
      OB_X(print_puzzle_dialog%,0)=print_puzzle_x%
      OB_Y(print_puzzle_dialog%,0)=print_puzzle_y%
      @set_print_dialog
      @multi_check
      '
      ~FORM_DIAL(0,0,0,0,0,print_puzzle_x%,print_puzzle_y%,print_puzzle_w%,print_puzzle_h%)
      er%=WIND_UPDATE(1)
      er%=WIND_UPDATE(3)
      '
    CASE t_print_puzzle_output%
      @get_print
      DO
        ~GRAF_MKSTATE(event_mouse_x%,event_mouse_y%,mouse_button%,key_state%)
      LOOP UNTIL mouse_button%=0
      ~OBJC_DRAW(output_dialog%,0,3,output_x%,output_y%,output_w%,output_h%)
      output_exit%=FORM_DO(output_dialog%,0)
      output%=(output_exit% AND &H7FFF)-2
      OB_STATE(output_dialog%,output_exit%)=BCLR(OB_STATE(output_dialog%,output_exit%),0)
      @set_print
      '
    CASE t_print_puzzle_place%
      @get_print
      DO
        ~GRAF_MKSTATE(event_mouse_x%,event_mouse_y%,mouse_button%,key_state%)
      LOOP UNTIL mouse_button%=0
      ~OBJC_DRAW(word_place_dialog%,0,3,word_place_x%,word_place_y%,word_place_w%,word_place_h%)
      word_place_exit%=FORM_DO(word_place_dialog%,0)
      word_place%=(word_place_exit% AND &H7FFF)-2
      OB_STATE(word_place_dialog%,word_place_exit%)=BCLR(OB_STATE(word_place_dialog%,word_place_exit%),0)
      @set_print
      '
    CASE t_print_puzzle_top%
      @get_print
      DO
        ~GRAF_MKSTATE(event_mouse_x%,event_mouse_y%,mouse_button%,key_state%)
      LOOP UNTIL mouse_button%=0
      temp_margin%=t_print_puzzle_top%
      @set_margin_dialog
      ~OBJC_DRAW(margins_dialog%,0,3,margins_x%,margins_y%,margins_w%,margins_h%)
      margins_exit%=FORM_DO(margins_dialog%,0)
      top_margin%=(margins_exit% AND &H7FFF)-2
      OB_STATE(margins_dialog%,margins_exit%)=BCLR(OB_STATE(margins_dialog%,margins_exit%),0)
      @set_print
      '
    CASE t_print_puzzle_bottom%
      @get_print
      DO
        ~GRAF_MKSTATE(event_mouse_x%,event_mouse_y%,mouse_button%,key_state%)
      LOOP UNTIL mouse_button%=0
      temp_margin%=t_print_puzzle_bottom%
      @set_margin_dialog
      ~OBJC_DRAW(margins_dialog%,0,3,margins_x%,margins_y%,margins_w%,margins_h%)
      margins_exit%=FORM_DO(margins_dialog%,0)
      bottom_margin%=(margins_exit% AND &H7FFF)-2
      OB_STATE(margins_dialog%,margins_exit%)=BCLR(OB_STATE(margins_dialog%,margins_exit%),0)
      @set_print
      '
    CASE t_print_puzzle_left%
      @get_print
      DO
        ~GRAF_MKSTATE(event_mouse_x%,event_mouse_y%,mouse_button%,key_state%)
      LOOP UNTIL mouse_button%=0
      temp_margin%=t_print_puzzle_left%
      @set_margin_dialog
      ~OBJC_DRAW(margins_dialog%,0,3,margins_x%,margins_y%,margins_w%,margins_h%)
      margins_exit%=FORM_DO(margins_dialog%,0)
      left_margin%=(margins_exit% AND &H7FFF)-2
      OB_STATE(margins_dialog%,margins_exit%)=BCLR(OB_STATE(margins_dialog%,margins_exit%),0)
      @set_print
      '
    CASE t_print_puzzle_right%
      @get_print
      DO
        ~GRAF_MKSTATE(event_mouse_x%,event_mouse_y%,mouse_button%,key_state%)
      LOOP UNTIL mouse_button%=0
      temp_margin%=t_print_puzzle_right%
      @set_margin_dialog
      ~OBJC_DRAW(margins_dialog%,0,3,margins_x%,margins_y%,margins_w%,margins_h%)
      margins_exit%=FORM_DO(margins_dialog%,0)
      right_margin%=(margins_exit% AND &H7FFF)-2
      OB_STATE(margins_dialog%,margins_exit%)=BCLR(OB_STATE(margins_dialog%,margins_exit%),0)
      @set_print
      '
    CASE t_print_puzzle_dialogs%
      @get_print
      DO
        ~GRAF_MKSTATE(event_mouse_x%,event_mouse_y%,mouse_button%,key_state%)
      LOOP UNTIL mouse_button%=0
      ~OBJC_DRAW(dialogs_dialog%,0,3,dialogs_x%,dialogs_y%,dialogs_w%,dialogs_h%)
      dialogs_exit%=FORM_DO(dialogs_dialog%,0)
      dialog_type%=(dialogs_exit% AND &H7FFF)-2
      OB_STATE(dialogs_dialog%,dialogs_exit%)=BCLR(OB_STATE(dialogs_dialog%,dialogs_exit%),0)
      ~OBJC_DRAW(print_puzzle_dialog%,t_print_puzzle_dialogs%,3,print_puzzle_x%,print_puzzle_y%,print_puzzle_w%,print_puzzle_h%)
      @set_print
      '
    CASE t_print_puzzle_driver%
      '
      @get_print
      DO
        ~GRAF_MKSTATE(event_mouse_x%,event_mouse_y%,mouse_button%,key_state%)
      LOOP UNTIL mouse_button%=0
      IF gdos% THEN
        FOR x%=0 TO 9
          CHAR{{OB_SPEC(driver_dialog%,x%+2)}}=STR$(x%+21)+" "+driver$(x%)
          IF driver$(x%)="-Unused-" THEN
            OB_STATE(driver_dialog%,x%+2)=BCLR(OB_STATE(driver_dialog%,x%+2),0)
            OB_STATE(driver_dialog%,x%+2)=BSET(OB_STATE(driver_dialog%,x%+2),3)
            OB_FLAGS(driver_dialog%,x%+2)=BCLR(OB_FLAGS(driver_dialog%,x%+2),6)
            '
          ELSE
            OB_STATE(driver_dialog%,x%+2)=BCLR(OB_STATE(driver_dialog%,x%+2),3)
            OB_FLAGS(driver_dialog%,x%+2)=BSET(OB_FLAGS(driver_dialog%,x%+2),6)
            '
          ENDIF
          '
        NEXT x%
        '
        ~OBJC_DRAW(driver_dialog%,0,3,driver_x%,driver_y%,driver_w%,driver_h%)
        driver_exit%=FORM_DO(driver_dialog%,0)
        driver%=(driver_exit% AND &H7FFF)+19
        OB_STATE(driver_dialog%,driver_exit%)=BCLR(OB_STATE(driver_dialog%,driver_exit%),0)
        '
        @check_driver
        @set_print
      ENDIF
      '
    CASE b_print_puzzle_title_color%
      @get_print
      DO
        ~GRAF_MKSTATE(event_mouse_x%,event_mouse_y%,mouse_button%,key_state%)
      LOOP UNTIL mouse_button%=0
      temp_color%=b_print_puzzle_title_color%
      @set_color_dialog
      ~OBJC_DRAW(gdos_color_dialog%,0,3,gdos_color_x%,gdos_color_y%,gdos_color_w%,gdos_color_h%)
      gdos_color_exit%=FORM_DO(gdos_color_dialog%,0)
      gdos_title_color%=(gdos_color_exit% AND &H7FFF)-2
      OB_STATE(gdos_color_dialog%,gdos_color_exit%)=BCLR(OB_STATE(gdos_color_dialog%,gdos_color_exit%),0)
      @set_print
      '
    CASE b_print_puzzle_puzzle_color%
      @get_print
      DO
        ~GRAF_MKSTATE(event_mouse_x%,event_mouse_y%,mouse_button%,key_state%)
      LOOP UNTIL mouse_button%=0
      temp_color%=b_print_puzzle_puzzle_color%
      @set_color_dialog
      ~OBJC_DRAW(gdos_color_dialog%,0,3,gdos_color_x%,gdos_color_y%,gdos_color_w%,gdos_color_h%)
      gdos_color_exit%=FORM_DO(gdos_color_dialog%,0)
      gdos_puzzle_color%=(gdos_color_exit% AND &H7FFF)-2
      OB_STATE(gdos_color_dialog%,gdos_color_exit%)=BCLR(OB_STATE(gdos_color_dialog%,gdos_color_exit%),0)
      @set_print
      '
    CASE b_print_puzzle_wordlist_color%
      @get_print
      DO
        ~GRAF_MKSTATE(event_mouse_x%,event_mouse_y%,mouse_button%,key_state%)
      LOOP UNTIL mouse_button%=0
      temp_color%=b_print_puzzle_wordlist_color%
      @set_color_dialog
      ~OBJC_DRAW(gdos_color_dialog%,0,3,gdos_color_x%,gdos_color_y%,gdos_color_w%,gdos_color_h%)
      gdos_color_exit%=FORM_DO(gdos_color_dialog%,0)
      gdos_wordlist_color%=(gdos_color_exit% AND &H7FFF)-2
      OB_STATE(gdos_color_dialog%,gdos_color_exit%)=BCLR(OB_STATE(gdos_color_dialog%,gdos_color_exit%),0)
      @set_print
      '
    CASE b_print_puzzle_answers_color%
      @get_print
      DO
        ~GRAF_MKSTATE(event_mouse_x%,event_mouse_y%,mouse_button%,key_state%)
      LOOP UNTIL mouse_button%=0
      temp_color%=b_print_puzzle_answers_color%
      @set_color_dialog
      ~OBJC_DRAW(gdos_color_dialog%,0,3,gdos_color_x%,gdos_color_y%,gdos_color_w%,gdos_color_h%)
      gdos_color_exit%=FORM_DO(gdos_color_dialog%,0)
      gdos_answers_color%=(gdos_color_exit% AND &H7FFF)-2
      OB_STATE(gdos_color_dialog%,gdos_color_exit%)=BCLR(OB_STATE(gdos_color_dialog%,gdos_color_exit%),0)
      @set_print
      '
    CASE t_print_puzzle_page%
      @get_print
      DO
        ~GRAF_MKSTATE(event_mouse_x%,event_mouse_y%,mouse_button%,key_state%)
      LOOP UNTIL mouse_button%=0
      ~OBJC_DRAW(page_dialog%,0,3,page_x%,page_y%,page_w%,page_h%)
      page_exit%=FORM_DO(page_dialog%,0)
      landscape%=(page_exit% AND &H7FFF)-2
      OB_STATE(page_dialog%,page_exit%)=BCLR(OB_STATE(page_dialog%,page_exit%),0)
      @set_print
      '
    CASE b_print_puzzle_fit%
      @get_print
      IF puzzle_ready%=1 THEN
        @best_fit
      ENDIF
      @set_print
      DO
        ~GRAF_MKSTATE(event_mouse_x%,event_mouse_y%,mouse_button%,key_state%)
      LOOP UNTIL mouse_button%=0
      '
    CASE b_print_puzzle_save%
      @get_print
      @inf_save
      '
    CASE b_print_puzzle_load%
      @get_print
      @inf_load
      @check_driver
      FOR check%=1 TO 18
        IF check%<=gdos_fonts% THEN
          face%=VQT_NAME(check%,temp_name$)
          IF font_name$=temp_name$ THEN
            current_font%=check%
            check%=18
          ENDIF
        ENDIF
      NEXT check%
      @select_font
      @set_print
      '
    CASE b_print_puzzle_ok%
      @get_print
      print_puzzle_done%=3
      '
    CASE b_print_puzzle_print%
      @get_print
      print_puzzle_done%=2
      '
    CASE b_print_puzzle_cancel%
      print_puzzle_done%=1
      '
    ENDSELECT
  LOOP UNTIL print_puzzle_done%
  DO
    ~GRAF_MKSTATE(event_mouse_x%,event_mouse_y%,mouse_button%,key_state%)
  LOOP UNTIL mouse_button%=0
  er%=WIND_UPDATE(2)
  er%=WIND_UPDATE(0)
  ~FORM_DIAL(3,0,0,0,0,print_puzzle_x%,print_puzzle_y%,print_puzzle_w%,print_puzzle_h%)
  @multi_check
  '
  SELECT print_puzzle_done%
  CASE 1
    output%=old_output%
    driver%=old_driver%
    landscape%=old_landscape%
    top_margin%=old_top_margin%
    bottom_margin%=old_bottom_margin%
    left_margin%=old_left_margin%
    right_margin%=old_right_margin%
    word_place%=old_word_place%
    gdos_title_color%=old_title_color%
    gdos_puzzle_color%=old_puzzle_color%
    gdos_wordlist_color%=old_wordlist_color%
    gdos_answers_color%=old_answers_color%
    dialog_type%=old_dialog_type%
    print_copies%=old_print_copies%
    print_extra%=old_print_extra%
    print_answers%=old_print_answers%
    shadow_title%=old_shadow_title%
    shadow_puzzle%=old_shadow_puzzle%
    shadow_wordlist%=old_shadow_wordlist%
    outline_title%=old_outline_title%
    outline_puzzle%=old_outline_puzzle%
    outline_wordlist%=old_outline_wordlist%
    current_font%=old_current_font%
    font_height%=old_font_height%
    '
  CASE 2
    IF puzzle_ready%=1 THEN
      IF output%=1 THEN
        IF gdos% THEN
          IF print_answers% OR print_copies% THEN
            IF OUT?(0) THEN
              @puzzle_printer_print
            ELSE
              DO
                alert$(0)="Print Puzzle"
                alert$(1)=""
                alert$(2)="Printer is off-line."
                alert$(3)="Check Printer and"
                alert$(4)="I will try again."
                alert$(5)=""
                alert$(6)="OK"
                alert$(7)=""
                alert$(8)="Cancel"
                button_default%=0
                @alert(alert_button%,button_default%,alert$())
              LOOP UNTIL OUT?(0) OR alert_button%=2
              IF alert_button%=0 AND OUT?(0) THEN
                @puzzle_printer_print
              ENDIF
            ENDIF
          ENDIF
        ELSE
          alert$(0)="Print Puzzle"
          alert$(1)=""
          alert$(2)="Sorry, GDOS must be installed"
          alert$(3)="to print a puzzle to the"
          alert$(4)="'Printer' (Try 'File' output)."
          alert$(5)=""
          alert$(6)=""
          alert$(7)="OK"
          alert$(8)=""
          button_default%=1
          @alert(alert_button%,button_default%,alert$())
        ENDIF
      ELSE
        @puzzle_file_print
      ENDIF
    ELSE
      alert$(0)="Puzzle print"
      alert$(1)=""
      alert$(2)=""
      alert$(3)="Sorry, no puzzle to print."
      alert$(4)=""
      alert$(5)=""
      alert$(6)=""
      alert$(7)="OK"
      alert$(8)=""
      button_default%=1
      @alert(alert_button%,button_default%,alert$())
    ENDIF
    '
  ENDSELECT
  IF print_puzzle_done%>1 THEN
    IF old_current_font%<>current_font% OR old_font_height%<>font_height% THEN
      @menu_words_size
      @menu_puzzle_size
    ELSE
      IF old_outline_wordlist%<>outline_wordlist% OR old_outline_puzzle%<>outline_puzzle% THEN
        IF old_outline_wordlist%<>outline_wordlist% THEN
          @menu_words_size
        ENDIF
        IF old_outline_puzzle%<>outline_puzzle% THEN
          @menu_puzzle_size
        ENDIF
      ELSE
        IF old_puzzle_color%<>gdos_puzzle_color% OR old_answers_color%<>gdos_answers_color% THEN
          @update_puzzle
        ENDIF
        IF old_wordlist_color%<>gdos_wordlist_color% THEN
          @update_words
        ENDIF
      ENDIF
    ENDIF
  ENDIF
  '
RETURN
'
> PROCEDURE best_fit
  @workstation_setup
  '
  IF gdos_handle%<>0 THEN
    CONTRL(0)=2  ! V_CLSWK
    CONTRL(1)=0
    CONTRL(3)=0
    CONTRL(6)=gdos_handle%
    VDISYS
    '
    V~H=-1
    '
    gdos_current_font%=current_font%
    gdos_current_face%=VQT_NAME(gdos_current_font%,gdos_font_name$)
    '
    CONTRL(0)=21  ! VST_FONT
    CONTRL(1)=0
    CONTRL(3)=1
    CONTRL(6)=my_handle%
    INTIN(0)=gdos_current_face%
    VDISYS
    ' gdos_current_face%=INTOUT(0)
    '
    try%=1
    landscape%=0
    word_place%=0
    @try_fit
    try1%=wordlist_points%
    '
    word_place%=1
    @try_fit
    try2%=wordlist_points%
    IF try2%>try1% THEN
      try%=2
      try1%=try2%
    ENDIF
    '
    SWAP x_rez%,y_rez%
    SWAP xmicrons%,ymicrons%
    SWAP top_margin%,left_margin%
    SWAP bottom_margin%,right_margin%
    '
    landscape%=1
    word_place%=0
    @try_fit
    try3%=wordlist_points%
    IF try3%>try1% THEN
      try%=3
      try1%=try3%
    ENDIF
    '
    word_place%=1
    @try_fit
    try4%=wordlist_points%
    IF try4%>try1% THEN
      try%=4
    ENDIF
    '
    @select_font
    SELECT try%
    CASE 1
      landscape%=0
      word_place%=0
    CASE 2
      landscape%=0
      word_place%=1
    CASE 3
      landscape%=1
      word_place%=0
    CASE 4
      landscape%=1
      word_place%=1
    ENDSELECT
    '
  ENDIF
RETURN
'
> PROCEDURE try_fit
  top_offset%=(25400/ymicrons%)*top_margin
  bottom_offset%=(25400/ymicrons%)*bottom_margin
  left_offset%=(25400/xmicrons%)*left_margin
  right_offset%=(25400/xmicrons%)*right_margin
  '
  page_width%=x_rez%-(left_offset%+right_offset%)
  page_height%=y_rez%-(top_offset%+bottom_offset%)
  '
  gdos_current_xpoints%=INT(page_width%/longest_puzzle%)
  gdos_current_ypoints%=INT(page_height%/(puzzle_grid_y%+3))
  '
  max_points%=MAX(gdos_current_xpoints%,gdos_current_ypoints%)+1
  '
  IF outline_puzzle% THEN
    DEFTEXT ,16
  ELSE
    DEFTEXT ,0
  ENDIF
  '
  DO
    DEC max_points%
    temp_points%=max_points%
    @temp_set_points
    gdos_points%=PTSOUT(7)
    '
  LOOP UNTIL (gdos_points%<=gdos_current_ypoints% AND gdos_points%<=gdos_current_xpoints%) OR escape%=1
  wordlist_points%=max_points%*(100-print_extra%)/100
  '
  temp_points%=wordlist_points%
  @temp_set_points
  widest_gdos_word%=1
  IF outline_wordlist% THEN
    DEFTEXT ,16
  ELSE
    DEFTEXT ,0
  ENDIF
  bigest_word%=0
  FOR x%=0 TO last_puzzle_word%
    ~VQT_EXTENT(puzzle_words$(x%)+"A",d%,d%,z%,d%,d%,d%,d%,d%)
    IF z%>widest_gdos_word%
      bigest_word%=x%
    ENDIF
    widest_gdos_word%=MAX(widest_gdos_word%,z%)
  NEXT x%
  '
  p_fit%=0
  DO
    temp_points%=wordlist_points%
    @temp_set_points
    real_points%=PTSOUT(7)
    '
    IF outline_wordlist% THEN
      DEFTEXT ,16
    ELSE
      DEFTEXT ,0
    ENDIF
    ~VQT_EXTENT(puzzle_words$(bigest_word%)+"I",d%,d%,widest_gdos_word%,d%,d%,d%,d%,d%)
    '
    IF word_place%=0 THEN
      word_rows%=INT(page_width%/widest_gdos_word%)
      IF word_rows%=0 THEN
        word_rows%=1
      ENDIF
      word_lines%=INT((last_puzzle_word%+1)/word_rows%)
      IF last_puzzle_word%+1>word_lines%*word_rows% THEN
        INC word_lines%
      ENDIF
      '
      IF puzzle_grid_y%*gdos_points%+(word_lines%+2)*real_points%<page_height%-10 THEN
        p_fit%=1
      ENDIF
      '
    ELSE
      word_lines%=INT(page_height%/real_points%)-2
      word_rows%=INT((page_width%-(gdos_points%*(puzzle_grid_x%+1)))/widest_gdos_word%)
      '
      IF word_lines%*word_rows%>=last_puzzle_word%+1 THEN
        p_fit%=1
        word_lines%=INT(last_puzzle_word%/word_rows%)
        IF word_lines%*word_rows%<last_puzzle_word%+1 THEN
          INC word_lines%
        ENDIF
      ENDIF
      '
    ENDIF
    '
    IF p_fit%=0 THEN
      DEC max_points%
      temp_points%=max_points%
      @temp_set_points
      gdos_points%=PTSOUT(7)
      wordlist_points%=max_points%*(100-print_extra%)/100
      '
    ENDIF
  LOOP UNTIL p_fit%=1
  '
RETURN
'
> PROCEDURE temp_set_points
  CONTRL(0)=12  ! VST_HEIGHT
  CONTRL(1)=1
  CONTRL(3)=0
  CONTRL(6)=my_handle%
  PTSIN(0)=0
  PTSIN(1)=temp_points%
  VDISYS
  '
  CONTRL(0)=131  ! VQT_FONTINFO
  CONTRL(1)=0
  CONTRL(3)=0
  CONTRL(6)=my_handle%
  VDISYS
  '
RETURN
'
> PROCEDURE set_print_dialog
  output_x%=OB_X(print_puzzle_dialog%,t_print_puzzle_output%-1)+print_puzzle_x%-4
  OB_X(output_dialog%,0)=output_x%
  output_y%=OB_Y(print_puzzle_dialog%,t_print_puzzle_output%-1)+print_puzzle_y%-4
  OB_Y(output_dialog%,0)=output_y%
  '
  driver_x%=OB_X(print_puzzle_dialog%,t_print_puzzle_driver%-1)+print_puzzle_x%-4
  OB_X(driver_dialog%,0)=driver_x%
  driver_y%=OB_Y(print_puzzle_dialog%,t_print_puzzle_driver%-1)+print_puzzle_y%-4
  OB_Y(driver_dialog%,0)=driver_y%
  '
  page_x%=OB_X(print_puzzle_dialog%,t_print_puzzle_page%-1)+print_puzzle_x%-4
  OB_X(page_dialog%,0)=page_x%
  page_y%=OB_Y(print_puzzle_dialog%,t_print_puzzle_page%-1)+print_puzzle_y%-4
  OB_Y(page_dialog%,0)=page_y%
  '
  word_place_x%=OB_X(print_puzzle_dialog%,t_print_puzzle_place%-1)+print_puzzle_x%-4
  OB_X(word_place_dialog%,0)=word_place_x%
  word_place_y%=OB_Y(print_puzzle_dialog%,t_print_puzzle_place%-1)+print_puzzle_y%-4
  OB_Y(word_place_dialog%,0)=word_place_y%
  '
  dialogs_x%=OB_X(print_puzzle_dialog%,t_print_puzzle_dialogs%-1)+print_puzzle_x%-4
  OB_X(dialogs_dialog%,0)=dialogs_x%
  dialogs_y%=OB_Y(print_puzzle_dialog%,t_print_puzzle_dialogs%-1)+print_puzzle_y%-4
  OB_Y(dialogs_dialog%,0)=dialogs_y%
RETURN
'
> PROCEDURE set_colors
  FOR x%=0 TO 15
    '
    temp%=OB_SPEC(gdos_color_dialog%,x%+2)
    c%=x%
    IF screen_colors%<16 THEN
      temp%=temp% AND &HFFFFFF8F
      temp%=temp% OR SHL((c% AND &H7),4)
      '
    ELSE
      temp%=temp% AND &HFFFFFFF0
      temp%=temp% OR c%
      '
    ENDIF
    OB_SPEC(gdos_color_dialog%,x%+2)=temp%
    '
    IF x%<gdos_colors% THEN
      OB_STATE(gdos_color_dialog%,x%+2)=BCLR(OB_STATE(gdos_color_dialog%,x%+2),3)
      OB_FLAGS(gdos_color_dialog%,x%+2)=BSET(OB_FLAGS(gdos_color_dialog%,x%+2),6)
      '
    ELSE
      OB_STATE(gdos_color_dialog%,x%+2)=BSET(OB_STATE(gdos_color_dialog%,x%+2),3)
      OB_FLAGS(gdos_color_dialog%,x%+2)=BCLR(OB_FLAGS(gdos_color_dialog%,x%+2),6)
      '
    ENDIF
    '
  NEXT x%
  '
RETURN
'
> PROCEDURE set_color_dialog
  gdos_color_x%=OB_X(print_puzzle_dialog%,temp_color%-1)+print_puzzle_x%-4
  OB_X(gdos_color_dialog%,0)=gdos_color_x%
  gdos_color_y%=OB_Y(print_puzzle_dialog%,temp_color%-1)+print_puzzle_y%-4
  OB_Y(gdos_color_dialog%,0)=gdos_color_y%
  '
RETURN
'
> PROCEDURE set_margin_dialog
  margins_x%=OB_X(print_puzzle_dialog%,temp_margin%-1)+print_puzzle_x%-4
  OB_X(margins_dialog%,0)=margins_x%
  margins_y%=OB_Y(print_puzzle_dialog%,temp_margin%-1)+print_puzzle_y%-4
  OB_Y(margins_dialog%,0)=margins_y%
  '
RETURN
'
> PROCEDURE set_print
  IF output%=0 THEN
    CHAR{{OB_SPEC(print_puzzle_dialog%,t_print_puzzle_output%)}}="File   "
  ELSE
    CHAR{{OB_SPEC(print_puzzle_dialog%,t_print_puzzle_output%)}}="Printer"
  ENDIF
  '
  IF gdos% THEN
    CHAR{{OB_SPEC(print_puzzle_dialog%,t_print_puzzle_driver%)}}=STR$(driver%)+" "+driver$(driver%-21)
    OB_FLAGS(print_puzzle_dialog%,t_print_puzzle_driver%)=BSET(OB_FLAGS(print_puzzle_dialog%,t_print_puzzle_driver%),6)
    OB_STATE(print_puzzle_dialog%,t_print_puzzle_driver%)=BCLR(OB_STATE(print_puzzle_dialog%,t_print_puzzle_driver%),3)
  ELSE
    CHAR{{OB_SPEC(print_puzzle_dialog%,t_print_puzzle_driver%)}}="No drivers."
    OB_FLAGS(print_puzzle_dialog%,t_print_puzzle_driver%)=BCLR(OB_FLAGS(print_puzzle_dialog%,t_print_puzzle_driver%),6)
    OB_STATE(print_puzzle_dialog%,t_print_puzzle_driver%)=BSET(OB_STATE(print_puzzle_dialog%,t_print_puzzle_driver%),3)
  ENDIF
  '
  IF landscape%=0 THEN
    CHAR{{OB_SPEC(print_puzzle_dialog%,t_print_puzzle_page%)}}="Portrait "
  ELSE
    CHAR{{OB_SPEC(print_puzzle_dialog%,t_print_puzzle_page%)}}="Landscape"
  ENDIF
  '
  IF word_place%=0 THEN
    CHAR{{OB_SPEC(print_puzzle_dialog%,t_print_puzzle_place%)}}="Bottom"
  ELSE
    CHAR{{OB_SPEC(print_puzzle_dialog%,t_print_puzzle_place%)}}="Side  "
  ENDIF
  '
  SELECT top_margin%
  CASE 0
    CHAR{{OB_SPEC(print_puzzle_dialog%,t_print_puzzle_top%)}}="0.0"+CHR$(34)+" "
  CASE 1
    CHAR{{OB_SPEC(print_puzzle_dialog%,t_print_puzzle_top%)}}="0.25"+CHR$(34)
  CASE 2
    CHAR{{OB_SPEC(print_puzzle_dialog%,t_print_puzzle_top%)}}="0.5"+CHR$(34)+" "
  CASE 3
    CHAR{{OB_SPEC(print_puzzle_dialog%,t_print_puzzle_top%)}}="0.75"+CHR$(34)
  CASE 4
    CHAR{{OB_SPEC(print_puzzle_dialog%,t_print_puzzle_top%)}}="1.0"+CHR$(34)+" "
  ENDSELECT
  '
  SELECT bottom_margin%
  CASE 0
    CHAR{{OB_SPEC(print_puzzle_dialog%,t_print_puzzle_bottom%)}}="0.0"+CHR$(34)+" "
  CASE 1
    CHAR{{OB_SPEC(print_puzzle_dialog%,t_print_puzzle_bottom%)}}="0.25"+CHR$(34)
  CASE 2
    CHAR{{OB_SPEC(print_puzzle_dialog%,t_print_puzzle_bottom%)}}="0.5"+CHR$(34)+" "
  CASE 3
    CHAR{{OB_SPEC(print_puzzle_dialog%,t_print_puzzle_bottom%)}}="0.75"+CHR$(34)
  CASE 4
    CHAR{{OB_SPEC(print_puzzle_dialog%,t_print_puzzle_bottom%)}}="1.0"+CHR$(34)+" "
  ENDSELECT
  '
  SELECT left_margin%
  CASE 0
    CHAR{{OB_SPEC(print_puzzle_dialog%,t_print_puzzle_left%)}}="0.0"+CHR$(34)+" "
  CASE 1
    CHAR{{OB_SPEC(print_puzzle_dialog%,t_print_puzzle_left%)}}="0.25"+CHR$(34)
  CASE 2
    CHAR{{OB_SPEC(print_puzzle_dialog%,t_print_puzzle_left%)}}="0.5"+CHR$(34)+" "
  CASE 3
    CHAR{{OB_SPEC(print_puzzle_dialog%,t_print_puzzle_left%)}}="0.75"+CHR$(34)
  CASE 4
    CHAR{{OB_SPEC(print_puzzle_dialog%,t_print_puzzle_left%)}}="1.0"+CHR$(34)+" "
  ENDSELECT
  '
  SELECT right_margin%
  CASE 0
    CHAR{{OB_SPEC(print_puzzle_dialog%,t_print_puzzle_right%)}}="0.0"+CHR$(34)+" "
  CASE 1
    CHAR{{OB_SPEC(print_puzzle_dialog%,t_print_puzzle_right%)}}="0.25"+CHR$(34)
  CASE 2
    CHAR{{OB_SPEC(print_puzzle_dialog%,t_print_puzzle_right%)}}="0.5"+CHR$(34)+" "
  CASE 3
    CHAR{{OB_SPEC(print_puzzle_dialog%,t_print_puzzle_right%)}}="0.75"+CHR$(34)
  CASE 4
    CHAR{{OB_SPEC(print_puzzle_dialog%,t_print_puzzle_right%)}}="1.0"+CHR$(34)+" "
  ENDSELECT
  '
  CHAR{{OB_SPEC(print_puzzle_dialog%,t_print_puzzle_copies%)}}=STR$(print_copies%)
  CHAR{{OB_SPEC(print_puzzle_dialog%,t_print_puzzle_extra%)}}=STR$(print_extra%)
  '
  IF gdos_title_color%>gdos_colors%-1 THEN
    gdos_title_color%=gdos_colors%-1
  ENDIF
  temp%=OB_SPEC(print_puzzle_dialog%,b_print_puzzle_title_color%)
  IF screen_colors%<16 THEN
    temp%=temp% AND &HFFFFFF8F
    temp%=temp% OR SHL((gdos_title_color% AND &H7),4)
  ELSE
    temp%=temp% AND &HFFFFFFF0
    temp%=temp% OR gdos_title_color%
  ENDIF
  OB_SPEC(print_puzzle_dialog%,b_print_puzzle_title_color%)=temp%
  '
  IF gdos_puzzle_color%>gdos_colors%-1 THEN
    gdos_puzzle_color%=gdos_colors%-1
  ENDIF
  temp%=OB_SPEC(print_puzzle_dialog%,b_print_puzzle_puzzle_color%)
  IF screen_colors%<16 THEN
    temp%=temp% AND &HFFFFFF8F
    temp%=temp% OR SHL((gdos_puzzle_color% AND &H7),4)
  ELSE
    temp%=temp% AND &HFFFFFFF0
    temp%=temp% OR gdos_puzzle_color%
  ENDIF
  OB_SPEC(print_puzzle_dialog%,b_print_puzzle_puzzle_color%)=temp%
  '
  IF gdos_wordlist_color%>gdos_colors%-1 THEN
    gdos_wordlist_color%=gdos_colors%-1
  ENDIF
  temp%=OB_SPEC(print_puzzle_dialog%,b_print_puzzle_wordlist_color%)
  IF screen_colors%<16 THEN
    temp%=temp% AND &HFFFFFF8F
    temp%=temp% OR SHL((gdos_wordlist_color% AND &H7),4)
  ELSE
    temp%=temp% AND &HFFFFFFF0
    temp%=temp% OR gdos_wordlist_color%
  ENDIF
  OB_SPEC(print_puzzle_dialog%,b_print_puzzle_wordlist_color%)=temp%
  '
  IF gdos_answers_color%>gdos_colors%-1 THEN
    gdos_answers_color%=gdos_colors%-1
  ENDIF
  temp%=OB_SPEC(print_puzzle_dialog%,b_print_puzzle_answers_color%)
  IF screen_colors%<16 THEN
    temp%=temp% AND &HFFFFFF8F
    temp%=temp% OR SHL((gdos_answers_color% AND &H7),4)
  ELSE
    temp%=temp% AND &HFFFFFFF0
    temp%=temp% OR gdos_answers_color%
  ENDIF
  OB_SPEC(print_puzzle_dialog%,b_print_puzzle_answers_color%)=temp%
  '
  IF landscape% THEN
    SWAP gdos_x_rez%,gdos_y_rez%
  ENDIF
  '
  CHAR{{OB_SPEC(print_puzzle_dialog%,t_print_puzzle_xrez%)}}=STR$(gdos_x_rez%)
  CHAR{{OB_SPEC(print_puzzle_dialog%,t_print_puzzle_yrez%)}}=STR$(gdos_y_rez%)
  CHAR{{OB_SPEC(print_puzzle_dialog%,t_print_puzzle_font%)}}=font_name$
  CHAR{{OB_SPEC(print_puzzle_dialog%,t_print_puzzle_points%)}}=STR$(font_height%)
  CHAR{{OB_SPEC(print_puzzle_dialog%,t_print_puzzle_shadow%)}}=STR$(shadow)
  '
  IF print_answers% THEN
    OB_STATE(print_puzzle_dialog%,b_print_puzzle_answers%)=BSET(OB_STATE(print_puzzle_dialog%,b_print_puzzle_answers%),0)
  ELSE
    OB_STATE(print_puzzle_dialog%,b_print_puzzle_answers%)=BCLR(OB_STATE(print_puzzle_dialog%,b_print_puzzle_answers%),0)
  ENDIF
  '
  IF shadow_title% THEN
    OB_STATE(print_puzzle_dialog%,b_print_puzzle_shadow_title%)=BSET(OB_STATE(print_puzzle_dialog%,b_print_puzzle_shadow_title%),0)
  ELSE
    OB_STATE(print_puzzle_dialog%,b_print_puzzle_shadow_title%)=BCLR(OB_STATE(print_puzzle_dialog%,b_print_puzzle_shadow_title%),0)
  ENDIF
  '
  IF shadow_puzzle% THEN
    OB_STATE(print_puzzle_dialog%,b_print_puzzle_shadow_puzzle%)=BSET(OB_STATE(print_puzzle_dialog%,b_print_puzzle_shadow_puzzle%),0)
  ELSE
    OB_STATE(print_puzzle_dialog%,b_print_puzzle_shadow_puzzle%)=BCLR(OB_STATE(print_puzzle_dialog%,b_print_puzzle_shadow_puzzle%),0)
  ENDIF
  '
  IF shadow_wordlist% THEN
    OB_STATE(print_puzzle_dialog%,b_print_puzzle_shadow_wordlist%)=BSET(OB_STATE(print_puzzle_dialog%,b_print_puzzle_shadow_wordlist%),0)
  ELSE
    OB_STATE(print_puzzle_dialog%,b_print_puzzle_shadow_wordlist%)=BCLR(OB_STATE(print_puzzle_dialog%,b_print_puzzle_shadow_wordlist%),0)
  ENDIF
  '
  IF outline_title% THEN
    OB_STATE(print_puzzle_dialog%,b_print_puzzle_outline_title%)=BSET(OB_STATE(print_puzzle_dialog%,b_print_puzzle_outline_title%),0)
  ELSE
    OB_STATE(print_puzzle_dialog%,b_print_puzzle_outline_title%)=BCLR(OB_STATE(print_puzzle_dialog%,b_print_puzzle_outline_title%),0)
  ENDIF
  '
  IF outline_puzzle% THEN
    OB_STATE(print_puzzle_dialog%,b_print_puzzle_outline_puzzle%)=BSET(OB_STATE(print_puzzle_dialog%,b_print_puzzle_outline_puzzle%),0)
  ELSE
    OB_STATE(print_puzzle_dialog%,b_print_puzzle_outline_puzzle%)=BCLR(OB_STATE(print_puzzle_dialog%,b_print_puzzle_outline_puzzle%),0)
  ENDIF
  '
  IF outline_wordlist% THEN
    OB_STATE(print_puzzle_dialog%,b_print_puzzle_outline_wordlist%)=BSET(OB_STATE(print_puzzle_dialog%,b_print_puzzle_outline_wordlist%),0)
  ELSE
    OB_STATE(print_puzzle_dialog%,b_print_puzzle_outline_wordlist%)=BCLR(OB_STATE(print_puzzle_dialog%,b_print_puzzle_outline_wordlist%),0)
  ENDIF
  '
  SELECT dialog_type%
  CASE 0
    CHAR{{OB_SPEC(print_puzzle_dialog%,t_print_puzzle_dialogs%)}}="Mouse "
  CASE 1
    CHAR{{OB_SPEC(print_puzzle_dialog%,t_print_puzzle_dialogs%)}}="Center"
  CASE 2
    CHAR{{OB_SPEC(print_puzzle_dialog%,t_print_puzzle_dialogs%)}}="Last  "
  ENDSELECT
  '
RETURN
'
> PROCEDURE get_print
  '
  print_copies%=VAL(CHAR{{OB_SPEC(print_puzzle_dialog%,t_print_puzzle_copies%)}})
  print_extra%=VAL(CHAR{{OB_SPEC(print_puzzle_dialog%,t_print_puzzle_extra%)}})
  t_shadow=VAL(CHAR{{OB_SPEC(print_puzzle_dialog%,t_print_puzzle_shadow%)}})
  '
  IF t_shadow>=min_shadow% AND t_shadow<=max_shadow% THEN
    shadow=t_shadow
  ENDIF
  '
  IF BTST(OB_STATE(print_puzzle_dialog%,b_print_puzzle_answers%),0) THEN
    print_answers%=1
  ELSE
    print_answers%=0
  ENDIF
  '
  IF BTST(OB_STATE(print_puzzle_dialog%,b_print_puzzle_shadow_title%),0) THEN
    shadow_title%=1
  ELSE
    shadow_title%=0
  ENDIF
  '
  IF BTST(OB_STATE(print_puzzle_dialog%,b_print_puzzle_shadow_puzzle%),0) THEN
    shadow_puzzle%=1
  ELSE
    shadow_puzzle%=0
  ENDIF
  '
  IF BTST(OB_STATE(print_puzzle_dialog%,b_print_puzzle_shadow_wordlist%),0) THEN
    shadow_wordlist%=1
  ELSE
    shadow_wordlist%=0
  ENDIF
  '
  IF BTST(OB_STATE(print_puzzle_dialog%,b_print_puzzle_outline_title%),0) THEN
    outline_title%=1
  ELSE
    outline_title%=0
  ENDIF
  '
  IF BTST(OB_STATE(print_puzzle_dialog%,b_print_puzzle_outline_puzzle%),0) THEN
    outline_puzzle%=1
  ELSE
    outline_puzzle%=0
  ENDIF
  '
  IF BTST(OB_STATE(print_puzzle_dialog%,b_print_puzzle_outline_wordlist%),0) THEN
    outline_wordlist%=1
  ELSE
    outline_wordlist%=0
  ENDIF
  '
RETURN
'
> PROCEDURE puzzle_file_print
  FILESELECT #"PRINT PUZZLE",puzzle_print_path$+"*.ASC",puzzle_print_name$,work_file$
  DO
    ~GRAF_MKSTATE(event_mouse_x%,event_mouse_y%,mouse_button%,key_state%)
  LOOP UNTIL mouse_button%=0
  IF work_file$<>"" AND RIGHT$(work_file$)<>"\" THEN
    ext$=".ASC"
    @add_ext
    @clip_name
    ~FSETDTA(dta%)
    search_file$=work_file$+CHR$(0)
    finished%=GEMDOS(78,L:V:search_file$,&X100111)
    '
    alert_button%=0
    IF finished%=0 THEN
      alert$(0)="Print puzzle"
      alert$(1)=work_name$+" exist,"
      alert$(2)=""
      alert$(3)="OK to overwrite it ?"
      alert$(4)=""
      alert$(5)=""
      alert$(6)="OK"
      alert$(7)=""
      alert$(8)="Cancel"
      button_default%=0
      @alert(alert_button%,button_default%,alert$())
      '
    ENDIF
    '
    IF alert_button%=0 THEN
      puzzle_print_path$=work_path$
      puzzle_print_name$=work_name$
      ~GRAF_MOUSE(2,0)
      OPEN "O",#1,work_file$
      '
      size%=LEN(puzzle_title$)
      IF size%<longest_puzzle%+1 THEN
        PRINT #1,SPACE$(INT(longest_puzzle%+1-size%)/2)+puzzle_title$
      ELSE
        PRINT #1,puzzle_title$
      ENDIF
      FOR x%=0 TO puzzle_grid_y%
        PRINT #1,puzzle$(x%)
      NEXT x%
      '
      h_fit%=INT(puzzle_grid_x%/(longest_puzzle_word%+1))
      IF h_fit%=0 THEN
        h_fit%=1
      ENDIF
      current_word%=0
      column%=0
      PRINT #1
      temp$=SPACE$(puzzle_grid_x%)
      DO
        MID$(temp$,column%*(longest_puzzle_word%+1)+1,LEN(puzzle_words$(current_word%)))=puzzle_words$(current_word%)
        INC current_word%
        INC column%
        IF column%=h_fit% THEN
          PRINT #1,temp$
          column%=0
          temp$=SPACE$(puzzle_grid_x%)
        ENDIF
      LOOP UNTIL current_word%>last_puzzle_word%
      '
      IF print_answers% THEN
        PRINT #1
        PRINT #1,"*** ANSWERS ***"
        PRINT #1,""
        PRINT #1,"      1"
        PRINT #1,"      |"
        PRINT #1,"   8  |  2"
        PRINT #1,"    \ | /"
        PRINT #1,"     \|/"
        PRINT #1," 7----*----3"
        PRINT #1,"     /|\"
        PRINT #1,"    / | \"
        PRINT #1,"   6  |  4"
        PRINT #1,"      |"
        PRINT #1,"      5"
        PRINT #1,""
        size%=longest_puzzle_word%+10
        FOR x%=0 TO last_puzzle_word%
          temp$=SPACE$(size%)
          IF puzzle%(0,x%)<9 THEN
            MID$(temp$,2,2)=STR$(puzzle%(0,x%)+1)
          ELSE
            MID$(temp$,1,2)=STR$(puzzle%(0,x%)+1)
          ENDIF
          IF puzzle%(1,x%)<9 THEN
            MID$(temp$,5,2)=STR$(puzzle%(1,x%)+1)
          ELSE
            MID$(temp$,4,2)=STR$(puzzle%(1,x%)+1)
          ENDIF
          MID$(temp$,7,2)=STR$(puzzle%(2,x%)+1)
          MID$(temp$,9)=puzzle_words$(x%)
          PRINT #1,temp$
        NEXT x%
        '
      ENDIF
      '
      CLOSE #1
      ~FSETDTA(dta%)
      ~GRAF_MOUSE(0,0)
    ENDIF
  ENDIF
  '
RETURN
'
> PROCEDURE check_driver
  CONTRL(0)=1  ! V_OPNWK
  CONTRL(1)=0
  CONTRL(3)=11
  CONTRL(6)=0
  INTIN(0)=driver%
  INTIN(1)=1
  INTIN(2)=1
  INTIN(3)=1
  INTIN(4)=1
  INTIN(5)=current_font%
  INTIN(6)=1
  INTIN(7)=1
  INTIN(8)=1
  INTIN(9)=1
  INTIN(10)=2
  VDISYS
  gdos_handle%=CONTRL(6)
  '
  IF gdos_handle%<>0 THEN
    '
    V~H=gdos_handle%
    gdos_x_rez%=INTOUT(0)+1
    gdos_y_rez%=INTOUT(1)+1
    gdos_colors%=INTOUT(13)
    '
    CONTRL(0)=2  ! V_CLSWK
    CONTRL(1)=0
    CONTRL(3)=0
    CONTRL(6)=gdos_handle%
    VDISYS
    '
    V~H=-1
  ELSE
    gdos_x_rez%=0
    gdos_y_rez%=0
    gdos_colors%=2
  ENDIF
  @set_colors
  '
RETURN
'
> PROCEDURE puzzle_printer_print
  '
  SELECT dialog_type%
  CASE 0
    gdos_print_x%=event_mouse_x%-(gdos_print_w%/2)
    IF gdos_print_x%<mwx% THEN
      gdos_print_x%=mwx%
    ENDIF
    IF gdos_print_x%+gdos_print_w%>screen_width% THEN
      gdos_print_x%=screen_width%-gdos_print_w%
    ENDIF
    OB_X(gdos_print_dialog%,0)=gdos_print_x%
    gdos_print_y%=event_mouse_y%-(gdos_print_h%/2)
    IF gdos_print_y%<mwy% THEN
      gdos_print_y%=mwy%
    ENDIF
    IF gdos_print_y%+gdos_print_h%>screen_height% THEN
      gdos_print_y%=screen_height%-gdos_print_h%
    ENDIF
    OB_Y(gdos_print_dialog%,0)=gdos_print_y%
  CASE 1
    ~FORM_CENTER(gdos_print_dialog%,gdos_print_x%,gdos_print_y%,gdos_print_w%,gdos_print_h%)
  ENDSELECT
  '
  ~GRAF_MOUSE(2,0)
  ~FORM_DIAL(0,0,0,0,0,gdos_print_x%,gdos_print_y%,gdos_print_w%,gdos_print_h%)
  er%=WIND_UPDATE(1)
  '
  @workstation_setup
  IF gdos_handle%<>0 THEN
    CHAR{{OB_SPEC(gdos_print_dialog%,t_gdos_print_text%)}}="Loading fonts..."
    V~H=-1
    ~OBJC_DRAW(gdos_print_dialog%,0,2,gdos_print_x%,gdos_print_y%,gdos_print_w%,gdos_print_h%)
    V~H=gdos_handle%
    '
    escape%=0
    @puzzle_do_printer_print
    '
    ~VST_UNLOAD_FONTS(0)
    '
    CONTRL(0)=2  ! V_CLSWK
    CONTRL(1)=0
    CONTRL(3)=0
    CONTRL(6)=gdos_handle%
    VDISYS
    '
    V~H=-1
  ENDIF
  '
  er%=WIND_UPDATE(0)
  ~FORM_DIAL(3,0,0,0,0,gdos_print_x%,gdos_print_y%,gdos_print_w%,gdos_print_h%)
  ~GRAF_MOUSE(0,0)
  '
  @multi_check
  '
  IF gdos_handle%=0 THEN
    alert$(0)="Print puzzle"
    alert$(1)=""
    alert$(2)=""
    alert$(3)="Error opening workstation ?"
    alert$(4)=""
    alert$(5)=""
    alert$(6)=""
    alert$(7)="OK"
    alert$(8)=""
    button_default%=1
    @alert(alert_button%,button_default%,alert$())
  ENDIF
  '
RETURN
'
> PROCEDURE workstation_setup
  CONTRL(0)=1  ! V_OPNWK
  CONTRL(1)=0
  CONTRL(3)=11
  CONTRL(6)=0
  INTIN(0)=driver%
  INTIN(1)=1
  INTIN(2)=1
  INTIN(3)=1
  INTIN(4)=1
  INTIN(5)=current_font%
  INTIN(6)=1
  INTIN(7)=1
  INTIN(8)=1
  INTIN(9)=1
  INTIN(10)=2
  VDISYS
  gdos_handle%=CONTRL(6)
  '
  IF gdos_handle%<>0 THEN
    '
    V~H=gdos_handle%
    x_rez%=INTOUT(0)+1
    y_rez%=INTOUT(1)+1
    xmicrons%=INTOUT(3)
    ymicrons%=INTOUT(4)
    gdos_colors%=INTOUT(13)
    '
    SELECT top_margin%
    CASE 0
      top_margin=0
    CASE 1
      top_margin=0.25
    CASE 2
      top_margin=0.5
    CASE 3
      top_margin=0.75
    CASE 4
      top_margin=1
    ENDSELECT
    '
    SELECT bottom_margin%
    CASE 0
      bottom_margin=0
    CASE 1
      bottom_margin=0.25
    CASE 2
      bottom_margin=0.5
    CASE 3
      bottom_margin=0.75
    CASE 4
      bottom_margin=1
    ENDSELECT
    '
    SELECT left_margin%
    CASE 0
      left_margin=0
    CASE 1
      left_margin=0.25
    CASE 2
      left_margin=0.5
    CASE 3
      left_margin=0.75
    CASE 4
      left_margin=1
    ENDSELECT
    '
    SELECT right_margin%
    CASE 0
      right_margin=0
    CASE 1
      right_margin=0.25
    CASE 2
      right_margin=0.5
    CASE 3
      right_margin=0.75
    CASE 4
      right_margin=1
    ENDSELECT
    '
    CONTRL(0)=5  ! V_CLEAR_DISP_LIST
    CONTRL(1)=0
    CONTRL(3)=0
    CONTRL(5)=22
    CONTRL(6)=gdos_handle%
    VDISYS
    '
  ENDIF
  '
RETURN
'
> PROCEDURE escape_print
  '
  IF GEMDOS(11) THEN
    k%=INP(2)
    IF k%=13 THEN
      escape%=1
    ENDIF
    '
  ENDIF
  '
RETURN
'
> PROCEDURE dec_points
  CONTRL(0)=12  ! VST_HEIGHT
  CONTRL(1)=1
  CONTRL(3)=0
  CONTRL(6)=gdos_handle%
  PTSIN(0)=0
  PTSIN(1)=temp_points%
  VDISYS
  '
  CONTRL(0)=131  ! VQT_FONTINFO
  CONTRL(1)=0
  CONTRL(3)=0
  CONTRL(6)=gdos_handle%
  VDISYS
  '
RETURN
'
> PROCEDURE set_gcell
  FOR x%=65 TO 90
    CONTRL(0)=117  ! VQT_WIDTH
    CONTRL(1)=0
    CONTRL(3)=1
    CONTRL(6)=gdos_handle%
    INTIN(0)=x% ! ASCII CHAR
    VDISYS
    cell_width%=PTSOUT(0)
    cell_left%=PTSOUT(2)
    cell_right%=PTSOUT(4)
    gcell%(x%)=cell_width%+(cell_left%+cell_right%)
    @escape_print
    IF escape%=1 THEN
      x%=90
    ENDIF
  NEXT x%
RETURN
'
> PROCEDURE puzzle_do_printer_print
  '
  CLIP 0,0,x_rez%-1,y_rez%-1
  DEFFILL 0,2,8
  DEFLINE ,1
  PBOX 0,0,x_rez%-1,y_rez%-1
  '
  IF landscape% THEN
    SWAP x_rez%,y_rez%
    SWAP xmicrons%,ymicrons%
    SWAP top_margin%,left_margin%
    SWAP bottom_margin%,right_margin%
    '
  ENDIF
  '
  top_offset%=(25400/ymicrons%)*top_margin
  bottom_offset%=(25400/ymicrons%)*bottom_margin
  left_offset%=(25400/xmicrons%)*left_margin
  right_offset%=(25400/xmicrons%)*right_margin
  '
  page_width%=x_rez%-(left_offset%+right_offset%)
  page_height%=y_rez%-(top_offset%+bottom_offset%)
  '
  gdos_current_xpoints%=INT(page_width%/longest_puzzle%)
  gdos_current_ypoints%=INT(page_height%/(puzzle_grid_y%+2))
  '
  CONTRL(0)=119  ! VST_LOAD_FONTS
  CONTRL(1)=0
  CONTRL(3)=1
  CONTRL(6)=gdos_handle%
  INTIN(0)=0
  VDISYS
  '
  gdos_current_font%=current_font%
  gdos_current_face%=VQT_NAME(gdos_current_font%,gdos_font_name$)
  '
  CONTRL(0)=21  ! VST_FONT
  CONTRL(1)=0
  CONTRL(3)=1
  CONTRL(6)=gdos_handle%
  INTIN(0)=gdos_current_face%
  VDISYS
  ' gdos_current_face%=INTOUT(0)
  '
  CONTRL(0)=39  ! VST_ALIGNMENT
  CONTRL(1)=0
  CONTRL(3)=2
  CONTRL(6)=gdos_handle%
  INTIN(0)=0    ! LEFT JUSTIFIED
  INTIN(1)=2    ! ASCENT LINE (TOP OF UPPER CASE)
  VDISYS
  '
  max_points%=MAX(gdos_current_xpoints%,gdos_current_ypoints%)+1
  '
  CHAR{{OB_SPEC(gdos_print_dialog%,t_gdos_print_text%)}}="Page setup in progress..."
  V~H=-1
  ~OBJC_DRAW(gdos_print_dialog%,b_gdos_print_box%,2,gdos_print_x%,gdos_print_y%,gdos_print_w%,gdos_print_h%)
  V~H=gdos_handle%
  '
  IF outline_puzzle% THEN
    DEFTEXT ,16
  ELSE
    DEFTEXT ,0
  ENDIF
  DO
    DEC max_points%
    temp_points%=max_points%
    @dec_points
    gdos_points%=PTSOUT(7)
    @escape_print
    '
  LOOP UNTIL (gdos_points%<=gdos_current_ypoints% AND gdos_points%<=gdos_current_xpoints%) OR escape%=1
  wordlist_points%=max_points%*(100-print_extra%)/100
  '
  temp_points%=wordlist_points%
  @dec_points
  widest_gdos_word%=1
  IF outline_wordlist% THEN
    DEFTEXT ,16
  ELSE
    DEFTEXT ,0
  ENDIF
  bigest_word%=0
  FOR x%=0 TO last_puzzle_word%
    ~VQT_EXTENT(puzzle_words$(x%)+"A",d%,d%,z%,d%,d%,d%,d%,d%)
    IF z%>widest_gdos_word%
      bigest_word%=x%
    ENDIF
    widest_gdos_word%=MAX(widest_gdos_word%,z%)
  NEXT x%
  '
  p_fit%=0
  DO
    IF escape%=0 THEN
      temp_points%=wordlist_points%
      @dec_points
      real_points%=PTSOUT(7)
      '
      IF outline_wordlist% THEN
        DEFTEXT ,16
      ELSE
        DEFTEXT ,0
      ENDIF
      ~VQT_EXTENT(puzzle_words$(bigest_word%)+"I",d%,d%,widest_gdos_word%,d%,d%,d%,d%,d%)
      '
      IF word_place%=0 THEN
        word_rows%=INT(page_width%/widest_gdos_word%)
        IF word_rows%=0 THEN
          word_rows%=1
        ENDIF
        word_lines%=INT((last_puzzle_word%+1)/word_rows%)
        IF last_puzzle_word%+1>word_lines%*word_rows% THEN
          INC word_lines%
        ENDIF
        '
        IF puzzle_grid_y%*gdos_points%+(word_lines%+2)*real_points%<=page_height%-10 THEN
          p_fit%=1
        ENDIF
        '
      ELSE
        word_lines%=INT(page_height%/real_points%)-2
        word_rows%=INT((page_width%-(gdos_points%*(puzzle_grid_x%+1)))/widest_gdos_word%)
        '
        IF word_lines%*word_rows%>=last_puzzle_word%+1 THEN
          p_fit%=1
          word_lines%=INT(last_puzzle_word%/word_rows%)
          ok%=0
          DO
            IF word_lines%*word_rows%<last_puzzle_word%+1 THEN
              INC word_lines%
            ELSE
              ok%=1
            ENDIF
          LOOP UNTIL ok%
        ENDIF
        '
      ENDIF
      '
      IF p_fit%=0 THEN
        DEC max_points%
        temp_points%=max_points%
        @dec_points
        gdos_points%=PTSOUT(7)
        wordlist_points%=max_points%*(100-print_extra%)/100
        '
      ENDIF
      @escape_print
    ENDIF
  LOOP UNTIL p_fit%=1 OR escape%=1
  '
  IF escape%=0 THEN
    '
    IF outline_puzzle% THEN
      DEFTEXT ,16
    ELSE
      DEFTEXT ,0
    ENDIF
    '
    temp_points%=wordlist_points%
    @dec_points
    @set_gcell
    '
    CONTRL(0)=117  ! VQT_WIDTH
    CONTRL(1)=0
    CONTRL(3)=1
    CONTRL(6)=gdos_handle%
    INTIN(0)=65 !  ASCII CHAR
    VDISYS
    cell_width%=PTSOUT(0)
    cell_left%=PTSOUT(2)
    cell_right%=PTSOUT(4)
    a_offset%=(cell_width%-(cell_left%+cell_right%))
    '
    IF word_place%=0 THEN
      puzzle_left_offset%=(page_width%-(puzzle_grid_x%*gdos_points%))/2
      '
      top_puzzle%=real_points%*1.5
      top_list%=puzzle_grid_y%*gdos_points%+top_puzzle%+real_points%*0.5
      left_list%=(page_width%-(widest_gdos_word%*MIN(word_rows%,last_puzzle_word%+1)))/2
      '
      max_out_x%=x_rez%
      max_out_y%=top_offset%+top_list%+(word_lines%+1)*real_points%
      IF landscape% THEN
        SWAP max_out_x%,max_out_y%
      ENDIF
    ELSE
      puzzle_left_offset%=0
      '
      top_puzzle%=real_points%*1.5
      top_list%=top_puzzle%
      left_list%=gdos_points%*puzzle_grid_x%
      '
      max_out_x%=x_rez%
      max_out_y%=top_offset%+top_list%+MAX((word_lines%+1)*real_points%,(puzzle_grid_y%+1)*gdos_points%)
      IF landscape% THEN
        SWAP max_out_x%,max_out_y%
      ENDIF
    ENDIF
    '
    @escape_print
    '
  ENDIF
  '
  @gdos_print
  '
RETURN
'
> PROCEDURE gdos_print
  '
  DEFLINE 1
  '
  IF escape%=0 THEN
    IF print_copies% THEN
      copies%=1
      DO
        CHAR{{OB_SPEC(gdos_print_dialog%,t_gdos_print_text%)}}="Printing copy "+STR$(copies%)+" of "+STR$(print_copies%)+"..."
        V~H=-1
        ~OBJC_DRAW(gdos_print_dialog%,b_gdos_print_box%,2,gdos_print_x%,gdos_print_y%,gdos_print_w%,gdos_print_h%)
        V~H=gdos_handle%
        @puzzle_dump
        @escape_print
        IF escape%=0 THEN
          CONTRL(0)=5  ! V_OUTPUT_WINDOW
          CONTRL(1)=2
          CONTRL(3)=0
          CONTRL(5)=21
          CONTRL(6)=gdos_handle%
          PTSIN(0)=0
          PTSIN(1)=0
          PTSIN(2)=max_out_x%
          PTSIN(3)=max_out_y%
          VDISYS
          '
          CONTRL(0)=5  ! V_FORM_ADV
          CONTRL(1)=0
          CONTRL(3)=0
          CONTRL(5)=20
          CONTRL(6)=gdos_handle%
          VDISYS
          '
          INC copies%
          @escape_print
        ENDIF
      LOOP UNTIL copies%>print_copies% OR escape%=1
    ENDIF
  ENDIF
  '
  IF print_answers% AND escape%=0 THEN
    '
    CHAR{{OB_SPEC(gdos_print_dialog%,t_gdos_print_text%)}}="Printing answers..."
    V~H=-1
    ~OBJC_DRAW(gdos_print_dialog%,b_gdos_print_box%,2,gdos_print_x%,gdos_print_y%,gdos_print_w%,gdos_print_h%)
    V~H=gdos_handle%
    IF print_copies%=0 THEN
      @puzzle_dump
    ENDIF
    @escape_print
    IF escape%=0 THEN
      FOR current_puzzle_word%=0 TO last_puzzle_word%
        x%=puzzle%(0,current_puzzle_word%)
        y%=puzzle%(1,current_puzzle_word%)
        derection%=puzzle%(2,current_puzzle_word%)
        size%=LEN(puzzle_words$(current_puzzle_word%))
        SELECT derection%
        CASE 0
          y2%=y%+1-size%
          x2%=x%
        CASE 1
          y2%=y%+1-size%
          x2%=x%+size%-1
        CASE 2
          x2%=x%+size%-1
          y2%=y%
        CASE 3
          x2%=x%+size%-1
          y2%=y%+size%-1
        CASE 4
          x2%=x%
          y2%=y%+size%-1
        CASE 5
          x2%=x%+1-size%
          y2%=y%+size%-1
        CASE 6
          x2%=x%+1-size%
          y2%=y%
        CASE 7
          x2%=x%+1-size%
          y2%=y%+1-size%
        ENDSELECT
        '
        x3%=left_offset%+puzzle_left_offset%+(x%+0.5)*gdos_points%
        y3%=top_offset%+top_puzzle%+gdos_points%*y%+real_points%*0.65
        IF landscape% THEN
          x3%=x_rez%-x3%
          SWAP x3%,y3%
        ENDIF
        '
        x4%=left_offset%+puzzle_left_offset%+(x2%+0.5)*gdos_points%
        y4%=top_offset%+top_puzzle%+gdos_points%*y2%+real_points%*0.65
        IF landscape% THEN
          x4%=x_rez%-x4%
          SWAP x4%,y4%
        ENDIF
        '
        GRAPHMODE 2
        COLOR gdos_answers_color%
        DEFLINE ,1
        CIRCLE x3%,y3%,real_points%/2
        LINE x3%,y3%,x4%,y4%
        COLOR 1
        GRAPHMODE 1
        '
        @escape_print
        IF escape%=1 THEN
          current_puzzle_word%=last+puzzle_word%
        ENDIF
      NEXT current_puzzle_word%
      '
      CONTRL(0)=5  ! V_OUTPUT_WINDOW
      CONTRL(1)=2
      CONTRL(3)=0
      CONTRL(5)=21
      CONTRL(6)=gdos_handle%
      PTSIN(0)=0
      PTSIN(1)=0
      PTSIN(2)=max_out_x%
      PTSIN(3)=max_out_y%
      VDISYS
      '
      CONTRL(0)=5  ! V_FORM_ADV
      CONTRL(1)=0
      CONTRL(3)=0
      CONTRL(5)=20
      CONTRL(6)=gdos_handle%
      VDISYS
      '
    ENDIF
    '
  ENDIF
  '
RETURN
'
> PROCEDURE puzzle_dump
  IF escape%=0 THEN
    IF outline_title% THEN
      DEFTEXT ,16
    ELSE
      DEFTEXT ,0
    ENDIF
    fit%=0
    temp_points%=wordlist_points%
    DO
      CONTRL(0)=116  ! VQT_EXTENT
      CONTRL(1)=0
      CONTRL(3)=LEN(puzzle_title$)
      CONTRL(6)=gdos_handle%
      FOR x%=0 TO LEN(puzzle_title$)-1
        INTIN(x%)=ASC(MID$(puzzle_title$,x%+1,1))
      NEXT x%
      INTIN(x%)=0
      VDISYS
      x1%=PTSOUT(0)
      y1%=PTSOUT(1)
      x2%=PTSOUT(2)
      y2%=PTSOUT(3)
      x3%=PTSOUT(4)
      y3%=PTSOUT(5)
      x4%=PTSOUT(6)
      y4%=PTSOUT(7)
      DEC temp_points%
      @dec_points
      IF x3%<page_width% THEN
        fit%=1
      ENDIF
    LOOP UNTIL fit%=1
    '
    x%=left_offset%+((page_width%-x3%)/2)
    y%=top_offset% ! +y3%
    IF landscape% THEN
      x%=x_rez%-x%
      SWAP x%,y%
    ENDIF
    t_text$=puzzle_title$
    handle%=gdos_handle%
    IF landscape% THEN
      CONTRL(0)=13  ! VST_ROTATION
      CONTRL(1)=0
      CONTRL(3)=1
      CONTRL(6)=gdos_handle%
      INTIN(0)=900
      VDISYS
    ENDIF
    IF shadow_title% AND gdos_title_color%<>1 THEN
      x_text%=x%+shadow
      IF landscape% THEN
        y_text%=y%-shadow
      ELSE
        y_text%=y%+shadow
      ENDIF
      DEFTEXT 1
      @text
    ENDIF
    x_text%=x%
    y_text%=y%
    DEFTEXT gdos_title_color%
    @text
    @escape_print
  ENDIF
  '
  IF escape%=0 THEN
    temp_points%=wordlist_points%
    @dec_points
    IF outline_puzzle% THEN
      DEFTEXT ,16
    ELSE
      DEFTEXT ,0
    ENDIF
    '
    FOR y%=0 TO puzzle_grid_y%-1
      FOR x%=0 TO longest_puzzle%-1
        char%=ASC(MID$(puzzle$(y%),x%+1,1))
        x1%=left_offset%+puzzle_left_offset%+x%*gdos_points%+((gdos_points%-gcell%(char%))/2)
        y1%=top_offset%+top_puzzle%+gdos_points%*y%
        IF landscape% THEN
          x1%=x_rez%-x1%
          SWAP x1%,y1%
        ENDIF
        '
        t_text$=CHR$(char%)
        handle%=gdos_handle%
        IF shadow_puzzle% AND gdos_puzzle_color%<>1 THEN
          x_text%=x1%+shadow
          IF landscape% THEN
            y_text%=y1%-shadow
          ELSE
            y_text%=y1%+shadow
          ENDIF
          DEFTEXT 1
          @text
        ENDIF
        '
        x_text%=x1%
        y_text%=y1%
        DEFTEXT gdos_puzzle_color%
        @text
        @escape_print
        IF escape%=1 THEN
          x%=longest_puzzle%
          y%=puzzle_grid_y%
        ENDIF
      NEXT x%
    NEXT y%
  ENDIF
  '
  current_word%=0
  column%=0
  row%=0
  '
  IF escape%=0 THEN
    IF outline_wordlist% THEN
      DEFTEXT ,16
    ELSE
      DEFTEXT ,0
    ENDIF
    DO
      x1%=left_offset%+left_list%+column%+a_offset%
      y1%=top_offset%+top_list%+real_points%*row%
      '
      IF landscape% THEN
        x1%=x_rez%-x1%
        SWAP x1%,y1%
      ENDIF
      t_text$=puzzle_words$(current_word%)
      handle%=gdos_handle%
      IF shadow_wordlist% AND gdos_wordlist_color%<>1 THEN
        x_text%=x1%+shadow
        IF landscape% THEN
          y_text%=y1%-shadow
        ELSE
          y_text%=y1%+shadow
        ENDIF
        DEFTEXT 1
        @text
      ENDIF
      x_text%=x1%
      y_text%=y1%
      DEFTEXT gdos_wordlist_color%
      @text
      INC current_word%
      IF word_place%=0 THEN
        column%=column%+widest_gdos_word%
        IF column%+widest_gdos_word%>page_width% THEN
          column%=0
          INC row%
        ENDIF
      ELSE
        INC row%
        IF row%=word_lines% THEN
          row%=0
          column%=column%+widest_gdos_word%
        ENDIF
      ENDIF
      @escape_print
    LOOP UNTIL current_word%>last_puzzle_word% OR escape%=1
  ENDIF
  '
  IF landscape% THEN
    CONTRL(0)=13  ! VST_ROTATION
    CONTRL(1)=0
    CONTRL(3)=1
    CONTRL(6)=gdos_handle%
    INTIN(0)=0
    VDISYS
  ENDIF
  '
RETURN
'
> PROCEDURE mask_save
  FILESELECT #"SAVE MASK",mask_path$+"*.WSM",mask_name$,work_file$
  DO
    ~GRAF_MKSTATE(event_mouse_x%,event_mouse_y%,mouse_button%,key_state%)
  LOOP UNTIL mouse_button%=0
  IF work_file$<>"" AND RIGHT$(work_file$)<>"\" THEN
    ext$=".WSM"
    @add_ext
    @clip_name
    ~FSETDTA(dta%)
    search_file$=work_file$+CHR$(0)
    finished%=GEMDOS(78,L:V:search_file$,&X100111)
    '
    alert_button%=0
    IF finished%=0 THEN
      alert$(0)="Save mask"
      alert$(1)=work_name$+" exist,"
      alert$(2)=""
      alert$(3)="OK to overwrite it ?"
      alert$(4)=""
      alert$(5)=""
      alert$(6)="OK"
      alert$(7)=""
      alert$(8)="Cancel"
      button_default%=0
      @alert(alert_button%,button_default%,alert$())
      '
    ENDIF
    '
    IF alert_button%=0 THEN
      ~GRAF_MOUSE(2,0)
      mask_name$=work_name$
      mask_path$=work_path$
      OPEN "O",#1,work_file$
      PRINT #1,"WSM1"
      PRINT #1,grid_x%
      PRINT #1,grid_y%
      FOR x%=0 TO grid_x%-1
        FOR y%=0 TO grid_y%-1 STEP 8
          temp%=0
          FOR bit%=0 TO 7
            IF grid(x%,y%+bit%)=1 THEN
              temp%=BSET(temp%,bit%)
            ENDIF
          NEXT bit%
          OUT #1,temp%
        NEXT y%
      NEXT x%
      CLOSE #1
      ~FSETDTA(dta%)
      mask_save%=1
      @mask_title
      ~GRAF_MOUSE(0,0)
    ENDIF
  ENDIF
RETURN
'
> PROCEDURE mask_load
  alert_button%=0
  kind%=0
  IF grid_used%>0 THEN
    IF mask_load_type%=0 THEN
      alert$(0)="Load mask"
    ELSE
      alert$(0)="Import icon"
    ENDIF
    alert$(1)=""
    alert$(2)="What should I do with"
    alert$(3)="the mask in memory ?"
    alert$(4)=""
    alert$(5)=""
    alert$(6)="Replace"
    alert$(7)="Merge"
    alert$(8)="Cancel"
    button_default%=0
    @alert(alert_button%,button_default%,alert$())
    kind%=alert_button%
  ENDIF
  IF kind%<>2 THEN
    IF kind%=0 THEN
      IF mask_load_type%=0 THEN
        FILESELECT #"LOAD MASK",mask_path$+"*.WSM",mask_name$,work_file$
      ELSE
        FILESELECT #"LOAD ICON",mask_path$+"*.ICN",mask_name$,work_file$
      ENDIF
    ELSE
      IF mask_load_type%=0 THEN
        FILESELECT #"MERGE MASK",mask_path$+"*.WSM",mask_name$,work_file$
      ELSE
        FILESELECT #"MERGE ICON",mask_path$+"*.ICN",mask_name$,work_file$
      ENDIF
    ENDIF
    DO
      ~GRAF_MKSTATE(event_mouse_x%,event_mouse_y%,mouse_button%,key_state%)
    LOOP UNTIL mouse_button%=0
    @get_grid
  ENDIF
RETURN
'
> PROCEDURE get_grid
  IF work_file$<>"" AND RIGHT$(work_file$)<>"\" THEN
    ~FSETDTA(dta%)
    search_file$=work_file$+CHR$(0)
    finished%=GEMDOS(78,L:V:search_file$,&X100111)
    '
    IF finished%=0 THEN
      mask_file_size%=LPEEK(dta%+26)
      @clip_name
      IF mask_file_size%>0 THEN
        mask_type%=0
        old_x%=grid_x%
        old_y%=grid_y%
        IF RIGHT$(work_file$,4)=".WSM" THEN
          mask_type%=1
        ENDIF
        IF RIGHT$(work_file$,4)=".ICN" THEN
          mask_type%=2
        ENDIF
        IF mask_type% THEN
          ~GRAF_MOUSE(2,0)
          MAT CLR temp()
          OPEN "I",#1,work_file$
          mask_load%=1
          IF mask_type%=1 THEN
            @get_mask
          ELSE
            @get_icon
          ENDIF
          CLOSE #1
          ~FSETDTA(dta%)
          IF mask_load% THEN
            mask_path$=work_path$
            mask_name$=work_name$
            IF kind%=1 THEN
              grid_x%=MAX(old_x%,grid_x%)
              grid_y%=MAX(old_y%,grid_y%)
              FOR x%=0 TO grid_x%-1
                FOR y%=0 TO grid_y%-1
                  IF grid(x%,y%)=0 AND temp(x%,y%)=1 THEN
                    INC grid_used%
                    grid(x%,y%)=1
                  ENDIF
                NEXT y%
              NEXT x%
            ELSE
              MAT CPY grid()=temp()
              grid_used%=temp_grid_used%
            ENDIF
            '
            mask_hview%=0
            mask_vview%=0
            mask_save%=1
            full_flag%=1
            @set_new_mask_size
            @menu_mask_top
          ENDIF
          ~GRAF_MOUSE(0,0)
        ENDIF
      ENDIF
    ENDIF
  ENDIF
RETURN
'
> PROCEDURE get_mask
  '
  INPUT #1,temp$
  IF temp$="WSM1" THEN
    IF drawing%=1 THEN
      drawing%=0
      @clr_draw
    ENDIF
    @undo
    undo_x%=grid_x%
    undo_y%=grid_y%
    INPUT #1,temp_grid_x%
    INPUT #1,temp_grid_y%
    IF kind%=1 THEN
      grid_x%=MAX(grid_x%,temp_grid_x%)
      grid_y%=MAX(grid_y%,temp_grid_y%)
    ELSE
      grid_x%=temp_grid_x%
      grid_y%=temp_grid_y%
    ENDIF
    temp_grid_used%=0
    MAT CLR temp()
    FOR x%=0 TO temp_grid_x%-1
      FOR y%=0 TO temp_grid_y%-1 STEP 8
        temp%=INP(#1)
        FOR bit%=0 TO 7
          IF BTST(temp%,bit%)=0 THEN
          ELSE
            INC temp_grid_used%
            temp(x%,y%+bit%)=1
          ENDIF
        NEXT bit%
      NEXT y%
    NEXT x%
  ELSE
    alert$(0)="Load mask"
    alert$(1)=""
    alert$(2)="Sorry but "+work_name$+" is not"
    alert$(3)="a mask file."
    alert$(4)=""
    alert$(5)=""
    alert$(6)=""
    alert$(7)="OK"
    alert$(8)=""
    button_default%=1
    @alert(alert_button%,button_default%,alert$())
    mask_load%=0
  ENDIF
  '
RETURN
'
> PROCEDURE get_icon
  INPUT #1,temp$
  IF temp$="/* GEM Icon Definition: */" OR temp$="/* DEGAS Elite Icon Definition */" THEN
    IF drawing%=1 THEN
      drawing%=0
      @clr_draw
    ENDIF
    @undo
    undo_x%=grid_x%
    undo_y%=grid_y%
    INPUT #1,temp$
    iwidth%=VAL("&H"+RIGHT$(temp$,4))
    INPUT #1,temp$
    iheight%=VAL("&H"+RIGHT$(temp$,4))
    INPUT #1,temp$
    INPUT #1,temp$
    temp_grid_used%=0
    MAT CLR temp()
    FOR y%=0 TO iheight%-1
      FOR x%=0 TO (iwidth%/16)-1
        DO
          INPUT #1,temp$
        LOOP UNTIL temp$<>" "
        word%=VAL("&H"+RIGHT$(temp$,4))
        FOR z%=0 TO 15
          IF BTST(word%,15-z%) THEN
            temp(x%*16+z%,y%)=1
            INC temp_grid_used%
          ENDIF
        NEXT z%
        '
      NEXT x%
    NEXT y%
    IF kind%=1 THEN
      grid_x%=MAX(grid_x%,iwidth%)
      grid_y%=MAX(grid_y%,iheight%)
    ELSE
      grid_x%=iwidth%
      grid_y%=iheight%
    ENDIF
  ELSE
    alert$(0)="Load mask"
    alert$(1)=""
    alert$(2)="Sorry, "+work_name$+" is not"
    alert$(3)="an ICON file that I know."
    alert$(4)=""
    alert$(5)=""
    alert$(6)=""
    alert$(7)="OK"
    alert$(8)=""
    button_default%=1
    @alert(alert_button%,button_default%,alert$())
    mask_load%=0
  ENDIF
  '
RETURN
'
> PROCEDURE words_load
  alert_button%=0
  IF last_word%>-1 AND last_word%<max_word% THEN
    IF words_load_type%=0 THEN
      alert$(0)="Load words"
    ELSE
      alert$(0)="Import words"
    ENDIF
    alert$(1)=""
    alert$(2)="What should I do with"
    alert$(3)="the words in memory ?"
    alert$(4)=""
    alert$(5)=""
    alert$(6)="Replace"
    alert$(7)="Merge"
    alert$(8)="Cancel"
    button_default%=0
    @alert(alert_button%,button_default%,alert$())
    kind%=alert_button%
  ELSE
    IF last_word%=max_word%-1 THEN
      IF words_load_type%=0 THEN
        alert$(0)="Load words"
      ELSE
        alert$(0)="Import words"
      ENDIF
      alert$(1)=""
      alert$(2)="The word list is full, OK to"
      alert$(3)="replace the words in memory ?"
      alert$(4)=""
      alert$(5)=""
      alert$(6)="OK"
      alert$(7)=""
      alert$(8)="Cancel"
      button_default%=0
      @alert(alert_button%,button_default%,alert$())
      kind%=alert_button%
    ENDIF
  ENDIF
  IF alert_button%<>2 THEN
    IF alert_button%=0 THEN
      IF words_load_type%=0 THEN
        FILESELECT #"LOAD WORDLIST",words_path$+"*.WSL",words_name$,work_file$
      ELSE
        FILESELECT #"IMPORT WORDLIST",words_path$+"*.*",words_name$,work_file$
      ENDIF
    ELSE
      IF words_load_type%=0 THEN
        FILESELECT #"MERGE WORDLIST",words_path$+"*.WSL",words_name$,work_file$
      ELSE
        FILESELECT #"MERGE WORDLIST",words_path$+"*.*",words_name$,work_file$
      ENDIF
    ENDIF
    DO
      ~GRAF_MKSTATE(event_mouse_x%,event_mouse_y%,mouse_button%,key_state%)
    LOOP UNTIL mouse_button%=0
    @words_read
  ENDIF
RETURN
'
> PROCEDURE words_read
  IF work_file$<>"" AND RIGHT$(work_file$)<>"\" THEN
    ~FSETDTA(dta%)
    search_file$=work_file$+CHR$(0)
    finished%=GEMDOS(78,L:V:search_file$,&X100111)
    '
    IF finished%=0 THEN
      word_file_size%=LPEEK(dta%+26)
      @clip_name
      IF word_file_size%>0 THEN
        word_buffer%=GEMDOS(72,L:word_file_size%)
        IF word_buffer%>0 THEN
          ~GRAF_MOUSE(2,0)
          IF alert_button%=0 THEN
            IF last_word%>-1 THEN
              FOR x%=0 TO last_word%
                words$(x%)=""
                words%(x%)=0
              NEXT x%
              word_list$=SPACE$(max_word%*max_char%)
              last_word%=-1
            ENDIF
          ELSE
            FOR x%=0 TO last_word%
              words%(x%)=0
            NEXT x%
          ENDIF
          words_path$=work_path$
          words_name$=work_name$
          BLOAD work_file$,word_buffer%
          ~FSETDTA(dta%)
          @get_words
          d%=GEMDOS(73,L:word_buffer%) ! RELEASE MEMORY
          words_hview%=0
          words_vview%=0
          words_save%=1
          full_flag%=1
          word_ext_flag%=1
          @set_new_words_size
          @menu_words_top
          ~GRAF_MOUSE(0,0)
        ELSE
          IF words_load_type%=0 THEN
            alert$(0)="Load word list"
          ELSE
            alert$(0)="Import word list"
          ENDIF
          alert$(1)=""
          alert$(2)="Sorry, this file is larger"
          alert$(3)="than the available memory."
          alert$(4)=""
          alert$(5)=""
          alert$(6)=""
          alert$(7)="OK"
          alert$(8)=""
          button_default%=1
          @alert(alert_button%,button_default%,alert$())
        ENDIF
      ENDIF
    ENDIF
  ENDIF
  '
RETURN
'
> PROCEDURE get_words
  SELECT dialog_type%
  CASE 0
    word_load_x%=event_mouse_x%-(word_load_w%/2)
    IF word_load_x%<mwx% THEN
      word_load_x%=mwx%
    ENDIF
    IF word_load_x%+word_load_w%>screen_width% THEN
      word_load_x%=screen_width%-word_load_w%
    ENDIF
    OB_X(word_load_dialog%,0)=word_load_x%
    word_load_y%=event_mouse_y%-(word_load_button_y%+(word_load_button_h%/2))
    IF word_load_y%<mwy% THEN
      word_load_y%=mwy%
    ENDIF
    IF word_load_y%+word_load_h%>screen_height% THEN
      word_load_y%=screen_height%-word_load_h%
    ENDIF
    OB_Y(word_load_dialog%,0)=word_load_y%
  CASE 1
    ~FORM_CENTER(word_load_dialog%,word_load_x%,word_load_y%,word_load_w%,word_load_h%)
  ENDSELECT
  '
  ~FORM_DIAL(0,0,0,0,0,word_load_x%,word_load_y%,word_load_w%,word_load_h%)
  er%=WIND_UPDATE(1)
  er%=WIND_UPDATE(3)
  CHAR{{OB_SPEC(word_load_dialog%,t_word_load_word%)}}="..."
  ~GRAF_MOUSE(2,0)
  ~OBJC_DRAW(word_load_dialog%,0,2,word_load_x%,word_load_y%,word_load_w%,word_load_h%)
  '
  flag%=1
  byte%=0
  last_test%=0
  DO WHILE last_word%<max_word%-1
    bad_letter%=0
    temp$=""
    DO
      char%=PEEK(word_buffer%+byte%)
      IF (char%>64 AND char%<91) OR (char%>96 AND char%<123) THEN
        temp$=temp$+CHR$(char%)
      ELSE
        bad_letter%=1
      ENDIF
      INC byte%
    LOOP UNTIL byte%=word_file_size% OR bad_letter%
    IF temp$<>"" AND LEN(temp$)>2 THEN
      temp$=MID$(UPPER$(temp$),1,max_char%)
      IF INSTR(temp$,"A") OR INSTR(temp$,"E") OR INSTR(temp$,"I") OR INSTR(temp$,"O") OR INSTR(temp$,"U") OR INSTR(temp$,"Y") THEN
        keep_flag%=1
        keep%=0
        DO
          INC keep%
          t$=MID$(temp$,keep%,1)
          IF MID$(temp$,keep%+1,1)=t$ THEN
            IF MID$(temp$,keep%+2,1)=t$ THEN
              keep_flag%=0
            ENDIF
          ENDIF
        LOOP UNTIL keep%=LEN(temp$)-2 OR keep_flag%=0
        IF keep_flag%=1 THEN
          test$=SPACE$(max_char%)
          MID$(test$,1,LEN(temp$))=temp$
          test%=INSTR(word_list$,test$)
          '
          IF test%=0 THEN
            INC last_word%
            words$(last_word%)=temp$
            words%(last_word%)=0
            FOR test%=last_test% TO max_word%-1
              IF MID$(word_list$,test%*max_char%+1,max_char%)=SPACE$(max_char%) THEN
                MID$(word_list$,test%*max_char%+1,max_char%)=test$
                last_test%=test%+1
                test%=max_word%
              ENDIF
            NEXT test%
            CHAR{{OB_SPEC(word_load_dialog%,t_word_load_word%)}}=temp$
            ~OBJC_DRAW(word_load_dialog%,t_word_load_box%,2,word_load_x%,word_load_y%,word_load_w%,word_load_h%)
          ENDIF
        ENDIF
      ENDIF
    ENDIF
    ~GRAF_MKSTATE(event_mouse_x%,event_mouse_y%,mouse_button%,key_state%)
    IF mouse_button%=1 THEN
      escape%=OBJC_FIND(word_load_dialog%,0,2,event_mouse_x%,event_mouse_y%)
      '
      IF escape%=b_word_load_cancel% THEN
        flag%=0
      ENDIF
      '
      IF escape%=b_word_load_move% THEN
        OB_STATE(word_load_dialog%,exit%)=BCLR(OB_STATE(word_load_dialog%,exit%),0)
        er%=WIND_UPDATE(2)
        er%=WIND_UPDATE(0)
        ~FORM_DIAL(3,0,0,0,0,word_load_x%,word_load_y%,word_load_w%,word_load_h%)
        '
        ~GRAF_DRAGBOX(word_load_w%,word_load_h%,word_load_x%,word_load_y%,mwx%,mwy%,mww%,mwh%,word_load_x%,word_load_y%)
        OB_X(word_load_dialog%,0)=word_load_x%
        OB_Y(word_load_dialog%,0)=word_load_y%
        event_mouse_x%=word_load_x%+(word_load_w%/2)
        event_mouse_y%=word_load_y%+word_load_button_y%+(word_load_button_h%/2)
        '
        @multi_check
        '
        ~FORM_DIAL(0,0,0,0,0,word_load_x%,word_load_y%,word_load_w%,word_load_h%)
        er%=WIND_UPDATE(1)
        er%=WIND_UPDATE(3)
        ~OBJC_DRAW(word_load_dialog%,0,2,word_load_x%,word_load_y%,word_load_w%,word_load_h%)
      ENDIF
      '
    ENDIF
    IF GEMDOS(11) THEN
      k%=INP(2)
      IF k%=13 THEN
        flag%=0
      ENDIF
    ENDIF
    '
  LOOP UNTIL byte%=word_file_size% OR flag%<>1
  '
  er%=WIND_UPDATE(2)
  er%=WIND_UPDATE(0)
  ~FORM_DIAL(3,0,0,0,0,word_load_x%,word_load_y%,word_load_w%,word_load_h%)
  ~GRAF_MOUSE(0,0)
RETURN
'
> PROCEDURE words_save
  IF last_word%>-1 THEN
    FILESELECT #"SAVE WORDLIST",words_path$+"*.WSL",words_name$,work_file$
    DO
      ~GRAF_MKSTATE(event_mouse_x%,event_mouse_y%,mouse_button%,key_state%)
    LOOP UNTIL mouse_button%=0
    IF work_file$<>"" AND RIGHT$(work_file$)<>"\" THEN
      ext$=".WSL"
      @add_ext
      @clip_name
      ~FSETDTA(dta%)
      search_file$=work_file$+CHR$(0)
      finished%=GEMDOS(78,L:V:search_file$,&X100111)
      '
      alert_button%=0
      IF finished%=0 THEN
        alert$(0)="Save words"
        alert$(1)=work_name$+" exists"
        alert$(2)=""
        alert$(3)="should I overwrite it ?"
        alert$(4)=""
        alert$(5)=""
        alert$(6)="OK"
        alert$(7)=""
        alert$(8)="Cancel"
        button_default%=0
        @alert(alert_button%,button_default%,alert$())
        '
      ENDIF
      '
      IF alert_button%=0 THEN
        words_path$=work_path$
        words_name$=work_name$
        ~GRAF_MOUSE(2,0)
        OPEN "O",#1,work_file$
        STORE #1,words$(),last_word%+1
        CLOSE #1
        ~FSETDTA(dta%)
        words_save%=1
        @words_title
        ~GRAF_MOUSE(0,0)
      ENDIF
    ENDIF
    '
  ENDIF
RETURN
'
> PROCEDURE make_puzzle
  SELECT dialog_type%
  CASE 0
    make_x%=event_mouse_x%-(make_w%/2)
    IF make_x%<mwx% THEN
      make_x%=mwx%
    ENDIF
    IF make_x%+make_w%>screen_width% THEN
      make_x%=screen_width%-make_w%
    ENDIF
    OB_X(make_dialog%,0)=make_x%
    make_y%=event_mouse_y%-(make_button_y%+(make_button_h%/2))
    IF make_y%<mwy% THEN
      make_y%=mwy%
    ENDIF
    IF make_y%+make_h%>screen_height% THEN
      make_y%=screen_height%-make_h%
    ENDIF
    OB_Y(make_dialog%,0)=make_y%
  CASE 1
    ~FORM_CENTER(make_dialog%,make_x%,make_y%,make_w%,make_h%)
  ENDSELECT
  '
  ~FORM_DIAL(0,0,0,0,0,make_x%,make_y%,make_w%,make_h%)
  er%=WIND_UPDATE(1)
  er%=WIND_UPDATE(3)
  CHAR{{OB_SPEC(make_dialog%,t_make_word%)}}="..."
  ~OBJC_DRAW(make_dialog%,0,2,make_x%,make_y%,make_w%,make_h%)
  ~GRAF_MOUSE(2,0)
  MAT CPY temp()=grid()
  FOR mixup%=0 TO grid_x%-1
    placex%(mixup%)=mixup%
  NEXT mixup%
  FOR mixup%=0 TO grid_y%-1
    placey%(mixup%)=mixup%
  NEXT mixup%
  no_fit$=""
  longest_puzzle_word%=longest_word%
  last_puzzle_word%=last_word%
  '
  place%=0
  FOR try%=longest_puzzle_word% TO 3 STEP -1
    FOR x%=0 TO last_word%
      puzzle_words$(x%)=words$(x%)
      IF LEN(words$(x%))=try% THEN
        size(place%)=x%
        INC place%
      ENDIF
    NEXT x%
  NEXT try%
  '
  FOR x%=0 TO 7
    derections%(x%)=0
  NEXT x%
  '
  FOR word%=0 TO last_word%
    CHAR{{OB_SPEC(make_dialog%,t_make_word%)}}=words$(size(word%))
    ~OBJC_DRAW(make_dialog%,t_make_box%,2,make_x%,make_y%,make_w%,make_h%)
    @mix_place
    @mixup
    ok%=0
    FOR derection%=0 TO 7
      FOR try_x%=0 TO grid_x%-1
        FOR try_y%=0 TO grid_y%-1
          placex%=placex%(try_x%)
          placey%=placey%(try_y%)
          '
          IF grid(placex%,placey%)=1 THEN
            flag%=0
            @look
            @escape
            IF flag%=0 THEN
              ok%=1
              IF no_fit$<>"*" THEN
                @insert_word
              ENDIF
              derection%=7
              try_x%=grid_x%
              try_y%=grid_y%
            ENDIF
          ENDIF
          '
        NEXT try_y%
      NEXT try_x%
    NEXT derection%
    '
    IF ok%=0 THEN
      no_fit$=words$(size(word%))
      word%=last_word%
    ENDIF
    '
  NEXT word%
  '
  IF no_fit$="" THEN
    CHAR{{OB_SPEC(make_dialog%,t_make_word%)}}="All words placed."
    ~OBJC_DRAW(make_dialog%,t_make_box%,2,make_x%,make_y%,make_w%,make_h%)
    puzzle_ready%=1
    puzzle_save%=0
    puzzle_grid_x%=grid_x%
    puzzle_grid_y%=grid_y%
    FOR y%=0 TO puzzle_grid_y%-1
      puzzle$(y%)=""
      FOR x%=0 TO puzzle_grid_x%-1
        IF temp(x%,y%)>1 THEN
          puzzle$(y%)=puzzle$(y%)+CHR$(temp(x%,y%))
        ELSE
          IF temp(x%,y%)=1 THEN
            puzzle$(y%)=puzzle$(y%)+CHR$(INT(RND(0)*26)+65)
          ELSE
            puzzle$(y%)=puzzle$(y%)+" "
          ENDIF
        ENDIF
        '
      NEXT x%
    NEXT y%
    '
    longest_puzzle%=puzzle_grid_x%
    '
    er%=WIND_UPDATE(2)
    er%=WIND_UPDATE(0)
    ~FORM_DIAL(3,0,0,0,0,make_x%,make_y%,make_w%,make_h%)
    full_flag%=1
    @set_new_puzzle_size
    @menu_puzzle_top
    ~GRAF_MOUSE(0,0)
    '
  ELSE
    er%=WIND_UPDATE(2)
    er%=WIND_UPDATE(0)
    ~FORM_DIAL(3,0,0,0,0,make_x%,make_y%,make_w%,make_h%)
    @multi_check
    puzzle_ready%=0
    puzzle_save%=1
    longest_puzzle%=0
    puzzle_grid_x%=0
    puzzle_grid_y%=0
    full_flag%=1
    @set_new_puzzle_size
    ~GRAF_MOUSE(0,0)
    IF no_fit$<>"*" THEN
      alert$(0)="Create puzzle"
      alert$(1)=""
      alert$(2)="I could not fit the"
      alert$(3)="word '"+no_fit$+"'"
      alert$(4)="into the puzzle."
      alert$(5)=""
      alert$(6)=""
      alert$(7)="OK"
      alert$(8)=""
      button_default%=1
      @alert(alert_button%,button_default%,alert$())
    ENDIF
  ENDIF
  '
RETURN
'
> PROCEDURE escape
  '
  ~GRAF_MKSTATE(event_mouse_x%,event_mouse_y%,mouse_button%,key_state%)
  IF mouse_button%=1 THEN
    escape%=OBJC_FIND(make_dialog%,0,2,event_mouse_x%,event_mouse_y%)
    '
    IF escape%=b_make_cancel% THEN
      no_fit$="*"
      flag%=0
      word%=last_word%
    ENDIF
    '
    IF escape%=b_make_move% THEN
      OB_STATE(make_dialog%,exit%)=BCLR(OB_STATE(make_dialog%,exit%),0)
      er%=WIND_UPDATE(2)
      er%=WIND_UPDATE(0)
      ~FORM_DIAL(3,0,0,0,0,make_x%,make_y%,make_w%,make_h%)
      '
      ~GRAF_DRAGBOX(make_w%,make_h%,make_x%,make_y%,mwx%,mwy%,mww%,mwh%,make_x%,make_y%)
      OB_X(make_dialog%,0)=make_x%
      OB_Y(make_dialog%,0)=make_y%
      event_mouse_x%=make_x%+(make_w%/2)
      event_mouse_y%=make_y%+make_button_y%+(make_button_h%/2)
      '
      @multi_check
      '
      ~FORM_DIAL(0,0,0,0,0,make_x%,make_y%,make_w%,make_h%)
      er%=WIND_UPDATE(1)
      er%=WIND_UPDATE(3)
      ~OBJC_DRAW(make_dialog%,0,2,make_x%,make_y%,make_w%,make_h%)
      '
    ENDIF
  ENDIF
  '
  IF GEMDOS(11) THEN
    k%=INP(2)
    IF k%=13 THEN
      no_fit$="*"
      flag%=0
      word%=last_word%
    ENDIF
    '
  ENDIF
  '
RETURN
'
> PROCEDURE look
  x%=placex%
  y%=placey%
  num%=0
  FOR check%=1 TO LEN(words$(size(word%)))
    the_letter%=ASC(MID$(words$(size(word%)),check%,1))
    IF temp(x%,y%)=the_letter% OR temp(x%,y%)=1 THEN
      IF temp(x%,y%)=the_letter% THEN
        INC num%
      ENDIF
      IF check%<>LEN(words$(size(word%)))
        SELECT mixup(derection%)
        CASE 0
          DEC y%
          IF y%<0 THEN
            flag%=1
          ENDIF
        CASE 1
          DEC y%
          INC x%
          IF x%=grid_x% OR y%<0 THEN
            flag%=1
          ENDIF
        CASE 2
          INC x%
          IF x%=grid_x% THEN
            flag%=1
          ENDIF
        CASE 3
          INC y%
          INC x%
          IF y%=grid_y% OR x%=grid_x% THEN
            flag%=1
          ENDIF
        CASE 4
          INC y%
          IF y%=grid_y% THEN
            flag%=1
          ENDIF
        CASE 5
          DEC x%
          INC y%
          IF x%<0 OR y%=grid_y% THEN
            flag%=1
          ENDIF
        CASE 6
          DEC x%
          IF x%<0 THEN
            flag%=1
          ENDIF
        CASE 7
          DEC x%
          DEC y%
          IF x%<0 OR y%<0 THEN
            flag%=1
          ENDIF
        ENDSELECT
      ENDIF
    ELSE
      flag%=1
    ENDIF
    IF flag%=1 THEN
      check%=LEN(words$(size(word%)))
    ENDIF
  NEXT check%
  IF num%=LEN(words$(size(word%))) THEN
    flag%=1
  ENDIF
  '
RETURN
'
> PROCEDURE insert_word
  '
  puzzle%(0,size(word%))=placex%
  puzzle%(1,size(word%))=placey%
  puzzle%(2,size(word%))=mixup(derection%)
  INC derections%(mixup(derection%))
  FOR letter%=1 TO LEN(words$(size(word%)))
    temp%=ASC(MID$(words$(size(word%)),letter%,1))
    temp(placex%,placey%)=temp%
    SELECT mixup(derection%)
    CASE 0
      DEC placey%
    CASE 1
      DEC placey%
      INC placex%
    CASE 2
      INC placex%
    CASE 3
      INC placex%
      INC placey%
    CASE 4
      INC placey%
    CASE 5
      DEC placex%
      INC placey%
    CASE 6
      DEC placex%
    CASE 7
      DEC placex%
      DEC placey%
    ENDSELECT
  NEXT letter%
  '
RETURN
'
> PROCEDURE mixup
  '
  mix_max%=0
  FOR mixx%=0 TO 7
    used%(mixx%)=0
    mix_max%=MAX(mix_max%,derections%(mixx%))
  NEXT mixx%
  '
  FOR mixx%=0 TO 7
    '
    temp%=mix_max%
    FOR mixy%=0 TO 7
      IF used%(mixy%)=0 AND derections%(mixy%)<=temp% THEN
        temp%=derections%(mixy%)
        current_mix%=mixy%
      ENDIF
    NEXT mixy%
    '
    used%(current_mix%)=1
    mixup(mixx%)=current_mix%
  NEXT mixx%
  '
RETURN
'
> PROCEDURE mix_place
  '
  FOR mix%=0 TO 2
    FOR mixup%=0 TO grid_x%-1
      x%=INT(RND(0)*grid_x%)
      temp%=placex%(mixup%)
      placex%(mixup%)=placex%(x%)
      placex%(x%)=temp%
    NEXT mixup%
    '
    FOR mixup%=0 TO grid_y%-1
      x%=INT(RND(0)*grid_y%)
      temp%=placey%(mixup%)
      placey%(mixup%)=placey%(x%)
      placey%(x%)=temp%
    NEXT mixup%
  NEXT mix%
  '
RETURN
'
> PROCEDURE size_mask
  '
  SELECT dialog_type%
  CASE 0
    size_x%=event_mouse_x%-(size_w%/2)
    IF size_x%<mwx% THEN
      size_x%=mwx%
    ENDIF
    IF size_x%+size_w%>screen_width% THEN
      size_x%=screen_width%-size_w%
    ENDIF
    OB_X(size_dialog%,0)=size_x%
    size_y%=event_mouse_y%-(size_h%/2)
    IF size_y%<mwy% THEN
      size_y%=mwy%
    ENDIF
    IF size_y%+size_h%>screen_height% THEN
      size_y%=screen_height%-size_h%
    ENDIF
    OB_Y(size_dialog%,0)=size_y%
  CASE 1
    ~FORM_CENTER(size_dialog%,size_x%,size_y%,size_w%,size_h%)
  ENDSELECT
  '
  size_done%=0
  ~FORM_DIAL(0,0,0,0,0,size_x%,size_y%,size_w%,size_h%)
  er%=WIND_UPDATE(1)
  er%=WIND_UPDATE(3)
  '
  CHAR{{OB_SPEC(size_dialog%,t_size_grid_x%)}}=STR$(grid_x%)
  CHAR{{OB_SPEC(size_dialog%,t_size_grid_y%)}}=STR$(grid_y%)
  CHAR{{OB_SPEC(size_dialog%,t_size_box%)}}=STR$(grid_box_sizey%)
  DO
    ~OBJC_DRAW(size_dialog%,0,2,size_x%,size_y%,size_w%,size_h%)
    exit%=FORM_DO(size_dialog%,t_size_grid_x%)
    exit%=exit% AND &H7FFF
    OB_STATE(size_dialog%,exit%)=BCLR(OB_STATE(size_dialog%,exit%),0)
    '
    SELECT exit%
    CASE b_size_move%
      OB_STATE(size_dialog%,exit%)=BCLR(OB_STATE(size_dialog%,exit%),0)
      er%=WIND_UPDATE(2)
      er%=WIND_UPDATE(0)
      ~FORM_DIAL(3,0,0,0,0,size_x%,size_y%,size_w%,size_h%)
      '
      ~GRAF_DRAGBOX(size_w%,size_h%,size_x%,size_y%,mwx%,mwy%,mww%,mwh%,size_x%,size_y%)
      OB_X(size_dialog%,0)=size_x%
      OB_Y(size_dialog%,0)=size_y%
      '
      @multi_check
      '
      ~FORM_DIAL(0,0,0,0,0,size_x%,size_y%,size_w%,size_h%)
      er%=WIND_UPDATE(1)
      er%=WIND_UPDATE(3)
      '
    CASE b_size_ok%
      temp_x%=VAL(CHAR{{OB_SPEC(size_dialog%,t_size_grid_x%)}})
      temp_y%=VAL(CHAR{{OB_SPEC(size_dialog%,t_size_grid_y%)}})
      temp_box%=VAL(CHAR{{OB_SPEC(size_dialog%,t_size_box%)}})
      change_flag%=0
      '
      IF temp_box%>=min_box% AND temp_box%<=max_box% AND temp_box%<>grid_box_sizey% THEN
        change_flag%=1
      ENDIF
      '
      IF temp_x%>=min_grid% AND temp_x%<=max_grid% AND temp_x%<>grid_x% THEN
        change_flag%=2
      ENDIF
      '
      IF temp_y%>=min_grid% AND temp_y%<=max_grid% AND temp_y%<>grid_y% THEN
        change_flag%=2
      ENDIF
      '
      SELECT change_flag%
      CASE 1
        grid_box_sizey%=temp_box%
        grid_box_sizex%=grid_box_sizey%*raito
        @set_new_box_size
        '
      CASE 2
        @undo
        IF temp_x%>=min_grid% AND temp_x%<=max_grid% AND temp_x%<>grid_x% THEN
          grid_x%=temp_x%
        ENDIF
        IF temp_y%>=min_grid% AND temp_y%<=max_grid% AND temp_y%<>grid_y% THEN
          grid_y%=temp_y%
        ENDIF
        @count_mask
        IF temp_y%>=min_grid% AND temp_y%<=max_grid% AND temp_y%<>grid_y% THEN
          grid_box_sizey%=temp_box%
          grid_box_sizex%=grid_box_sizey%*raito
        ENDIF
        @set_new_mask_size
        '
      ENDSELECT
      '
      size_done%=1
      '
    CASE b_size_cancel%
      size_done%=1
      '
    ENDSELECT
  LOOP UNTIL size_done%
  DO
    ~GRAF_MKSTATE(event_mouse_x%,event_mouse_y%,mouse_button%,key_state%)
  LOOP UNTIL mouse_button%=0
  er%=WIND_UPDATE(2)
  er%=WIND_UPDATE(0)
  ~FORM_DIAL(3,0,0,0,0,size_x%,size_y%,size_w%,size_h%)
  '
RETURN
'
> PROCEDURE scale_mask
  '
  SELECT dialog_type%
  CASE 0
    scale_x%=event_mouse_x%-(scale_w%/2)
    IF scale_x%<mwx% THEN
      scale_x%=mwx%
    ENDIF
    IF scale_x%+scale_w%>screen_width% THEN
      scale_x%=screen_width%-scale_w%
    ENDIF
    OB_X(scale_dialog%,0)=scale_x%
    scale_y%=event_mouse_y%-(scale_h%/2)
    IF scale_y%<mwy% THEN
      scale_y%=mwy%
    ENDIF
    IF scale_y%+scale_h%>screen_height% THEN
      scale_y%=screen_height%-scale_h%
    ENDIF
    OB_Y(scale_dialog%,0)=scale_y%
  CASE 1
    ~FORM_CENTER(scale_dialog%,scale_x%,scale_y%,scale_w%,scale_h%)
  ENDSELECT
  '
  scale_done%=0
  ~FORM_DIAL(0,0,0,0,0,scale_x%,scale_y%,scale_w%,scale_h%)
  er%=WIND_UPDATE(1)
  er%=WIND_UPDATE(3)
  '
  CHAR{{OB_SPEC(scale_dialog%,t_scale_x%)}}=STR$(grid_x%)
  CHAR{{OB_SPEC(scale_dialog%,t_scale_y%)}}=STR$(grid_y%)
  IF grid_x%<=INT(max_grid%/2) AND grid_y%<=INT(max_grid%/2) THEN
    OB_FLAGS(scale_dialog%,b_scale_double%)=BSET(OB_FLAGS(scale_dialog%,b_scale_double%),0)
    OB_FLAGS(scale_dialog%,b_scale_double%)=BSET(OB_FLAGS(scale_dialog%,b_scale_double%),6)
    OB_STATE(scale_dialog%,b_scale_double%)=BCLR(OB_STATE(scale_dialog%,b_scale_double%),3)
  ELSE
    OB_FLAGS(scale_dialog%,b_scale_double%)=BCLR(OB_FLAGS(scale_dialog%,b_scale_double%),0)
    OB_FLAGS(scale_dialog%,b_scale_double%)=BCLR(OB_FLAGS(scale_dialog%,b_scale_double%),6)
    OB_STATE(scale_dialog%,b_scale_double%)=BSET(OB_STATE(scale_dialog%,b_scale_double%),3)
  ENDIF
  IF grid_x%>=min_grid%*2 AND grid_y%>=min_grid%*2 THEN
    OB_FLAGS(scale_dialog%,b_scale_half%)=BSET(OB_FLAGS(scale_dialog%,b_scale_half%),0)
    OB_FLAGS(scale_dialog%,b_scale_half%)=BSET(OB_FLAGS(scale_dialog%,b_scale_half%),6)
    OB_STATE(scale_dialog%,b_scale_half%)=BCLR(OB_STATE(scale_dialog%,b_scale_half%),3)
  ELSE
    OB_FLAGS(scale_dialog%,b_scale_half%)=BCLR(OB_FLAGS(scale_dialog%,b_scale_half%),0)
    OB_FLAGS(scale_dialog%,b_scale_half%)=BCLR(OB_FLAGS(scale_dialog%,b_scale_half%),6)
    OB_STATE(scale_dialog%,b_scale_half%)=BSET(OB_STATE(scale_dialog%,b_scale_half%),3)
  ENDIF
  DO
    ~OBJC_DRAW(scale_dialog%,0,2,scale_x%,scale_y%,scale_w%,scale_h%)
    exit%=FORM_DO(scale_dialog%,0)
    exit%=exit% AND &H7FFF
    OB_STATE(scale_dialog%,exit%)=BCLR(OB_STATE(scale_dialog%,exit%),0)
    '
    SELECT exit%
    CASE b_scale_move%
      OB_STATE(scale_dialog%,exit%)=BCLR(OB_STATE(scale_dialog%,exit%),0)
      er%=WIND_UPDATE(2)
      er%=WIND_UPDATE(0)
      ~FORM_DIAL(3,0,0,0,0,scale_x%,scale_y%,scale_w%,scale_h%)
      '
      ~GRAF_DRAGBOX(scale_w%,scale_h%,scale_x%,scale_y%,mwx%,mwy%,mww%,mwh%,scale_x%,scale_y%)
      OB_X(scale_dialog%,0)=scale_x%
      OB_Y(scale_dialog%,0)=scale_y%
      '
      @multi_check
      '
      ~FORM_DIAL(0,0,0,0,0,scale_x%,scale_y%,scale_w%,scale_h%)
      er%=WIND_UPDATE(1)
      er%=WIND_UPDATE(3)
      '
    CASE b_scale_double%
      IF BTST(OB_STATE(scale_dialog%,b_scale_double%),3)=0
        scale_done%=2
      ENDIF
      '
    CASE b_scale_half%
      IF BTST(OB_STATE(scale_dialog%,b_scale_half%),3)=0
        scale_done%=3
      ENDIF
      '
    CASE b_scale_cancel%
      scale_done%=1
      '
    ENDSELECT
  LOOP UNTIL scale_done%
  DO
    ~GRAF_MKSTATE(event_mouse_x%,event_mouse_y%,mouse_button%,key_state%)
  LOOP UNTIL mouse_button%=0
  er%=WIND_UPDATE(2)
  er%=WIND_UPDATE(0)
  ~FORM_DIAL(3,0,0,0,0,scale_x%,scale_y%,scale_w%,scale_h%)
  SELECT scale_done%
  CASE 2
    @mask_double
    '
  CASE 3
    @mask_half
    '
  ENDSELECT
  '
RETURN
'
> PROCEDURE mask_double
  ~GRAF_MOUSE(2,0)
  @undo
  '
  temp_x%=grid_x%*2
  temp_y%=grid_y%*2
  '
  MAT CLR temp()
  '
  FOR y%=0 TO grid_y%-1
    FOR x%=0 TO grid_x%-1
      IF grid(x%,y%) THEN
        temp(x%*2,y%*2)=1
        temp(x%*2+1,y%*2)=1
        temp(x%*2,y%*2+1)=1
        temp(x%*2+1,y%*2+1)=1
      ENDIF
    NEXT x%
  NEXT y%
  '
  IF BTST(OB_STATE(scale_dialog%,b_scale_smooth%),0) THEN
    FOR y%=0 TO grid_y%-1
      FOR x%=0 TO grid_x%-1
        temp_1%=grid(x%,y%)
        temp_2%=grid(x%+1,y%)
        temp_3%=grid(x%,y%+1)
        temp_4%=grid(x%+1,y%+1)
        IF temp_1%+temp_2%+temp_3%+temp_4%=1 THEN
          IF temp_1%=1 THEN
            temp(x%*2+1,y%*2+1)=0
          ENDIF
          IF temp_2%=1 THEN
            temp(x%*2+2,y%*2+1)=0
          ENDIF
          IF temp_3%=1 THEN
            temp(x%*2+1,y%*2+2)=0
          ENDIF
          IF temp_4%=1 THEN
            temp(x%*2+2,y%*2+2)=0
          ENDIF
        ENDIF
        IF temp_1%+temp_2%+temp_3%+temp_4%=3 THEN
          IF temp_1%=0 THEN
            temp(x%*2+1,y%*2+1)=1
          ENDIF
          IF temp_2%=0 THEN
            temp(x%*2+2,y%*2+1)=1
          ENDIF
          IF temp_3%=0 THEN
            temp(x%*2+1,y%*2+2)=1
          ENDIF
          IF temp_4%=0 THEN
            temp(x%*2+2,y%*2+2)=1
          ENDIF
        ENDIF
      NEXT x%
    NEXT y%
  ENDIF
  '
  grid_x%=temp_x%
  grid_y%=temp_y%
  '
  MAT CLR grid()
  MAT CPY grid()=temp(),grid_x%,grid_y%
  '
  ~GRAF_MOUSE(0,0)
  @count_mask
  @set_new_mask_size
  '
RETURN
'
> PROCEDURE mask_half
  ~GRAF_MOUSE(2,0)
  @undo
  '
  temp_x%=INT(grid_x%/2)
  temp_y%=INT(grid_y%/2)
  '
  MAT CLR temp()
  '
  FOR y%=0 TO grid_y%-1 STEP 2
    FOR x%=0 TO grid_x%-1 STEP 2
      temp%=grid(x%,y%)
      temp%=temp%+grid(x%+1,y%)
      temp%=temp%+grid(x%,y%+1)
      temp%=temp%+grid(x%+1,y%+1)
      IF temp%>=2 THEN
        temp(x%/2,y%/2)=1
      ENDIF
    NEXT x%
  NEXT y%
  '
  grid_x%=temp_x%
  grid_y%=temp_y%
  '
  MAT CLR grid()
  MAT CPY grid()=temp(),grid_x%,grid_y%
  '
  ~GRAF_MOUSE(0,0)
  @count_mask
  @set_new_mask_size
  '
RETURN
'
> PROCEDURE count_mask
  grid_used%=0
  FOR x%=0 TO grid_x%-1
    FOR y%=0 TO grid_y%-1
      IF grid(x%,y%)=1 THEN
        INC grid_used%
      ENDIF
    NEXT y%
  NEXT x%
  '
RETURN
'
> PROCEDURE edit_words
  '
  SELECT dialog_type%
  CASE 0
    edit_x%=event_mouse_x%-(edit_w%/2)
    IF edit_x%<mwx% THEN
      edit_x%=mwx%
    ENDIF
    IF edit_x%+edit_w%>screen_width% THEN
      edit_x%=screen_width%-edit_w%
    ENDIF
    OB_X(edit_dialog%,0)=edit_x%
    edit_y%=event_mouse_y%-(edit_h%/2)
    IF edit_y%<mwy% THEN
      edit_y%=mwy%
    ENDIF
    IF edit_y%+edit_h%>screen_height% THEN
      edit_y%=screen_height%-edit_h%
    ENDIF
    OB_Y(edit_dialog%,0)=edit_y%
  CASE 1
    ~FORM_CENTER(edit_dialog%,edit_x%,edit_y%,edit_w%,edit_h%)
  ENDSELECT
  '
  ~FORM_DIAL(0,0,0,0,0,edit_x%,edit_y%,edit_w%,edit_h%)
  er%=WIND_UPDATE(1)
  er%=WIND_UPDATE(3)
  edit_done%=0
  word_add%=0
  '
  DO
    old_edit_word$=words$(current_word%)
    IF words$(current_word%)=" " THEN
      words$(current_word%)=""
    ENDIF
    CHAR{{OB_SPEC(edit_dialog%,t_edit_word%)}}=words$(current_word%)
    ~OBJC_DRAW(edit_dialog%,0,2,edit_x%,edit_y%,edit_w%,edit_h%)
    exit%=FORM_DO(edit_dialog%,t_edit_word%)
    exit%=exit% AND &H7FFF
    ~OBJC_DRAW(edit_dialog%,exit%,2,edit_x%,edit_y%,edit_w%,edit_h%)
    OB_STATE(edit_dialog%,exit%)=BCLR(OB_STATE(edit_dialog%,exit%),0)
    '
    SELECT exit%
    CASE b_edit_move%
      OB_STATE(edit_dialog%,exit%)=BCLR(OB_STATE(edit_dialog%,exit%),0)
      er%=WIND_UPDATE(2)
      er%=WIND_UPDATE(0)
      ~FORM_DIAL(3,0,0,0,0,edit_x%,edit_y%,edit_w%,edit_h%)
      '
      ~GRAF_DRAGBOX(edit_w%,edit_h%,edit_x%,edit_y%,mwx%,mwy%,mww%,mwh%,edit_x%,edit_y%)
      OB_X(edit_dialog%,0)=edit_x%
      OB_Y(edit_dialog%,0)=edit_y%
      '
      @multi_check
      '
      ~FORM_DIAL(0,0,0,0,0,edit_x%,edit_y%,edit_w%,edit_h%)
      er%=WIND_UPDATE(1)
      er%=WIND_UPDATE(3)
      '
    CASE b_edit_ok%
      temp$=UPPER$(CHAR{{OB_SPEC(edit_dialog%,t_edit_word%)}})
      @edit_word_add
      IF word_add%=1 THEN
        @set_new_words_size
      ENDIF
      edit_done%=1
      '
    CASE b_edit_next%
      temp$=UPPER$(CHAR{{OB_SPEC(edit_dialog%,t_edit_word%)}})
      IF temp$<>old_edit_word$ THEN
        @edit_word_add
        IF word_add%=1 THEN
          @set_new_words_size
          er%=WIND_UPDATE(0)
          @multi_check
          er%=WIND_UPDATE(1)
        ENDIF
      ENDIF
      INC current_word%
      IF current_word%=max_word%-1 THEN
        edit_done%=2
      ENDIF
      '
    CASE b_edit_cancel%
      edit_done%=1
      '
    ENDSELECT
    DO
      ~GRAF_MKSTATE(event_mouse_x%,event_mouse_y%,mouse_button%,key_state%)
    LOOP UNTIL mouse_button%=0
  LOOP UNTIL edit_done%
  er%=WIND_UPDATE(2)
  er%=WIND_UPDATE(0)
  ~FORM_DIAL(3,0,0,0,0,edit_x%,edit_y%,edit_w%,edit_h%)
  @multi_check
  IF edit_done%=2 THEN
    alert$(0)="Add words"
    alert$(1)=""
    alert$(2)="Sorry, the word list is full,"
    alert$(3)="Try deleting some words."
    alert$(4)=""
    alert$(5)=""
    alert$(6)=""
    alert$(7)="OK"
    alert$(8)=""
    button_default%=1
    @alert(alert_button%,button_default%,alert$())
  ENDIF
  '
RETURN
'
> PROCEDURE edit_word_add
  word_add%=0
  test%=INSTR(temp$," ")
  IF test% THEN
    temp$=MID$(temp$,1,test%-1)
  ENDIF
  IF temp$<>"" AND LEN(temp$)>2 AND temp$<>old_edit_word$ THEN
    words$(current_word%)=temp$
    words%(current_word%)=0
    temp$=SPACE$(max_char%)
    MID$(temp$,1,LEN(words$(current_word%)))=words$(current_word%)
    test%=INSTR(word_list$,temp$)
    '
    IF test%=0 THEN
      FOR test%=0 TO max_word%-1
        IF MID$(word_list$,test%*max_char%+1,max_char%)=SPACE$(max_char%) THEN
          MID$(word_list$,test%*max_char%+1,max_char%)=temp$
          test%=max_word%
        ENDIF
      NEXT test%
      words_save%=0
      INC last_word%
      word_add%=1
    ENDIF
  ENDIF
  '
RETURN
'
> PROCEDURE help
  '
  SELECT dialog_type%
  CASE 0
    help_x%=event_mouse_x%-(help_w%/2)
    IF help_x%<mwx% THEN
      help_x%=mwx%
    ENDIF
    IF help_x%+help_w%>screen_width% THEN
      help_x%=screen_width%-help_w%
    ENDIF
    OB_X(help_dialog%,0)=help_x%
    help_y%=event_mouse_y%-(help_h%/2)
    IF help_y%<mwy% THEN
      help_y%=mwy%
    ENDIF
    IF help_y%+help_h%>screen_height% THEN
      help_y%=screen_height%-help_h%
    ENDIF
    OB_Y(help_dialog%,0)=help_y%
  CASE 1
    ~FORM_CENTER(help_dialog%,help_x%,help_y%,help_w%,help_h%)
  ENDSELECT
  '
  ~FORM_DIAL(0,0,0,0,0,help_x%,help_y%,help_w%,help_h%)
  er%=WIND_UPDATE(1)
  er%=WIND_UPDATE(3)
  '
  help_done%=0
  ~OBJC_DRAW(help_dialog%,0,2,help_x%,help_y%,help_w%,help_h%)
  DO
    exit%=FORM_DO(help_dialog%,0)
    exit%=exit% AND &H7FFF
    '
    SELECT exit%
    CASE b_help_move%
      OB_STATE(help_dialog%,exit%)=BCLR(OB_STATE(help_dialog%,exit%),0)
      er%=WIND_UPDATE(2)
      er%=WIND_UPDATE(0)
      ~FORM_DIAL(3,0,0,0,0,help_x%,help_y%,help_w%,help_h%)
      '
      ~GRAF_DRAGBOX(help_w%,help_h%,help_x%,help_y%,mwx%,mwy%,mww%,mwh%,help_x%,help_y%)
      OB_X(help_dialog%,0)=help_x%
      OB_Y(help_dialog%,0)=help_y%
      '
      @multi_check
      '
      ~FORM_DIAL(0,0,0,0,0,help_x%,help_y%,help_w%,help_h%)
      er%=WIND_UPDATE(1)
      er%=WIND_UPDATE(3)
      ~OBJC_DRAW(help_dialog%,0,2,help_x%,help_y%,help_w%,help_h%)
      '
    CASE b_help_cancel%
      OB_STATE(help_dialog%,exit%)=BCLR(OB_STATE(help_dialog%,exit%),0)
      help_done%=1
      '
    ENDSELECT
    DO
      ~GRAF_MKSTATE(event_mouse_x%,event_mouse_y%,mouse_button%,key_state%)
    LOOP UNTIL mouse_button%=0
  LOOP UNTIL help_done%
  er%=WIND_UPDATE(2)
  er%=WIND_UPDATE(0)
  ~FORM_DIAL(3,0,0,0,0,help_x%,help_y%,help_w%,help_h%)
  @multi_check
  '
RETURN
'
> PROCEDURE set_font
  '
  old_font_height%=font_height%
  old_font%=current_font%
  SELECT dialog_type%
  CASE 0
    set_font_x%=event_mouse_x%-(set_font_w%/2)
    IF set_font_x%<mwx% THEN
      set_font_x%=mwx%
    ENDIF
    IF set_font_x%+set_font_w%>screen_width% THEN
      set_font_x%=screen_width%-set_font_w%
    ENDIF
    OB_X(set_font_dialog%,0)=set_font_x%
    set_font_y%=event_mouse_y%-(font_button_y%+(font_button_h%/2))
    IF set_font_y%<mwy% THEN
      set_font_y%=mwy%
    ENDIF
    IF set_font_y%+set_font_h%>screen_height% THEN
      set_font_y%=screen_height%-set_font_h%
    ENDIF
    OB_Y(set_font_dialog%,0)=set_font_y%
  CASE 1
    ~FORM_CENTER(set_font_dialog%,set_font_x%,set_font_y%,set_font_w%,set_font_h%)
  ENDSELECT
  '
  ~FORM_DIAL(0,0,0,0,0,set_font_x%,set_font_y%,set_font_w%,set_font_h%)
  er%=WIND_UPDATE(1)
  er%=WIND_UPDATE(3)
  '
  set_font_done%=0
  @set_pick
  CHAR{{OB_SPEC(set_font_dialog%,t_set_font_points%)}}=STR$(font_height%)
  CHAR{{OB_SPEC(set_font_dialog%,t_set_font_name%)}}=font_name$
  ~OBJC_DRAW(set_font_dialog%,0,2,set_font_x%,set_font_y%,set_font_w%,set_font_h%)
  @show_font
  DO
    exit%=FORM_DO(set_font_dialog%,t_set_font_points%)
    exit%=exit% AND &H7FFF
    '
    temp%=VAL(CHAR{{OB_SPEC(set_font_dialog%,t_set_font_points%)}})
    IF temp%>0 THEN
      font_height%=temp%
    ENDIF
    '
    SELECT exit%
    CASE t_set_font_name%
      DO
        ~GRAF_MKSTATE(event_mouse_x%,event_mouse_y%,mouse_button%,key_state%)
      LOOP UNTIL mouse_button%=0
      IF gdos% THEN
        ~OBJC_DRAW(font_dialog%,0,3,font_x%,font_y%,font_w%,font_h%)
        font_exit%=FORM_DO(font_dialog%,0)
        current_font%=(font_exit% AND &H7FFF)-1
        OB_STATE(font_dialog%,font_exit%)=BCLR(OB_STATE(font_dialog%,font_exit%),0)
        @select_font
        CHAR{{OB_SPEC(set_font_dialog%,t_set_font_name%)}}=font_name$
        ~OBJC_DRAW(set_font_dialog%,0,2,set_font_x%,set_font_y%,set_font_w%,set_font_h%)
        @show_font
      ENDIF
      '
    CASE b_set_font_move%
      OB_STATE(set_font_dialog%,exit%)=BCLR(OB_STATE(set_font_dialog%,exit%),0)
      er%=WIND_UPDATE(2)
      er%=WIND_UPDATE(0)
      ~FORM_DIAL(3,0,0,0,0,set_font_x%,set_font_y%,set_font_w%,set_font_h%)
      '
      ~GRAF_DRAGBOX(set_font_w%,set_font_h%,set_font_x%,set_font_y%,mwx%,mwy%,mww%,mwh%,set_font_x%,set_font_y%)
      OB_X(set_font_dialog%,0)=set_font_x%
      OB_Y(set_font_dialog%,0)=set_font_y%
      '
      @multi_check
      '
      ~FORM_DIAL(0,0,0,0,0,set_font_x%,set_font_y%,set_font_w%,set_font_h%)
      er%=WIND_UPDATE(1)
      er%=WIND_UPDATE(3)
      @set_pick
      ~OBJC_DRAW(set_font_dialog%,0,2,set_font_x%,set_font_y%,set_font_w%,set_font_h%)
      @show_font
      '
    CASE b_set_font_box%
      ~OBJC_DRAW(set_font_dialog%,b_set_font_box%,1,set_font_x%,set_font_y%,set_font_w%,set_font_h%)
      @show_font
      '
    CASE b_set_font_ok%
      OB_STATE(set_font_dialog%,exit%)=BCLR(OB_STATE(set_font_dialog%,exit%),0)
      IF font_height%<>old_font_height% OR font_name$<>old_font_name$
        @select_font
        @menu_words_size
        @menu_puzzle_size
      ENDIF
      set_font_done%=1
      '
    CASE b_set_font_cancel%
      OB_STATE(set_font_dialog%,exit%)=BCLR(OB_STATE(set_font_dialog%,exit%),0)
      set_font_done%=1
      font_height%=old_font_height%
      current_font%=old_font%
      @select_font
      '
    ENDSELECT
    DO
      ~GRAF_MKSTATE(event_mouse_x%,event_mouse_y%,mouse_button%,key_state%)
    LOOP UNTIL mouse_button%=0
  LOOP UNTIL set_font_done%
  er%=WIND_UPDATE(2)
  er%=WIND_UPDATE(0)
  ~FORM_DIAL(3,0,0,0,0,set_font_x%,set_font_y%,set_font_w%,set_font_h%)
  @multi_check
  '
RETURN
'
> PROCEDURE show_font
  '
  current_font_x%=OB_X(set_font_dialog%,b_set_font_box%)+set_font_x%
  current_font_y%=OB_Y(set_font_dialog%,b_set_font_box%)+set_font_y%
  current_font_w%=OB_W(set_font_dialog%,b_set_font_box%)
  current_font_h%=OB_H(set_font_dialog%,b_set_font_box%)
  '
  @select_font
  CLIP current_font_x%,current_font_y%,current_font_w%,current_font_h%
  DEFTEXT ,0
  ~VQT_EXTENT(font_name$,x1%,y1%,x2%,y2%,x3%,y3%,x4%,y4%)
  GRAPHMODE 2
  x_text%=current_font_x%+(current_font_w%/2)-(x3%/2)
  y_text%=current_font_y%+(current_font_h%/2)+(y3%/4)
  t_text$=font_name$
  handle%=my_handle%
  DEFTEXT 1
  @text
  GRAPHMODE 1
  '
RETURN
'
> PROCEDURE select_font
  current_face%=VQT_NAME(current_font%,font_name$)
  '
  CONTRL(0)=21  ! VST_FONT
  CONTRL(1)=0
  CONTRL(3)=1
  CONTRL(6)=my_handle%
  INTIN(0)=current_face%
  VDISYS
  ' current_face%=INTOUT(0)
  '
  CONTRL(0)=12  ! VST_HEIGHT
  CONTRL(1)=1
  CONTRL(3)=0
  CONTRL(6)=my_handle%
  PTSIN(0)=0
  PTSIN(1)=font_height%
  VDISYS
  ' points_width%=PTSOUT(2)
  ' points_height%=PTSOUT(3)
  '
  CONTRL(0)=131  ! VQT_FONTINFO
  CONTRL(1)=0
  CONTRL(3)=0
  CONTRL(6)=my_handle%
  VDISYS
  points_height%=PTSOUT(7)
  '
  points_width%=1
  FOR x%=65 TO 90
    CONTRL(0)=117  ! VQT_WIDTH
    CONTRL(1)=0
    CONTRL(3)=1
    CONTRL(6)=my_handle%
    INTIN(0)=x% ! ASCII CHAR
    VDISYS
    cell_width%=PTSOUT(0)
    cell_left%=PTSOUT(2)
    cell_right%=PTSOUT(4)
    cell%(x%)=cell_width%
    points_width%=MAX(points_width%,cell_width%-(cell_left%+cell_right%))
  NEXT x%
  screen_points%=MAX(points_width%,points_height%)
  IF current_font%=1 THEN
    screen_points%=screen_points%+4
  ENDIF
  '
RETURN
'
> PROCEDURE set_pick
  font_x%=OB_X(set_font_dialog%,t_set_font_name%-1)+set_font_x%-4
  OB_X(font_dialog%,0)=font_x%
  font_y%=OB_Y(set_font_dialog%,t_set_font_name%-1)+set_font_y%-4
  OB_Y(font_dialog%,0)=font_y%
  '
RETURN
'
> PROCEDURE words_setup
  ~GRAF_MOUSE(2,0)
  IF last_word%>-1 THEN
    QSORT words$(-),last_word%+found%+1,words%()
    QSORT words$(+),last_word%+1,words%()
    total_letters%=0
    longest_word%=0
    x%=0
    DO WHILE words$(x%)<>""
      longest_word%=MAX(longest_word%,LEN(words$(x%)))
      total_letters%=total_letters%+LEN(words$(x%))
      INC x%
    LOOP UNTIL x%=last_word%
  ELSE
    longest_word%=0
    total_letters%=0
  ENDIF
  found%=0
  ~GRAF_MOUSE(0,0)
  '
RETURN
'
> PROCEDURE bell
  '
  FOR x%=1 TO 7
    SOUND 0,15-x%,10,5,1
  NEXT x%
  SOUND 0,0,0,0,0
  '
RETURN
'
> PROCEDURE clip_name
  work_test%=RINSTR(work_file$,"\")
  IF work_test% THEN
    work_path$=MID$(work_file$,1,work_test%)
    work_name$=MID$(work_file$,work_test%+1)
  ELSE
    work_path$="\"
    work_name$=work_file$
  ENDIF
  '
  '
RETURN
'
> PROCEDURE add_ext
  IF RIGHT$(work_file$,4)<>ext$ THEN
    '
    temp%=RINSTR(work_file$,"\")
    IF temp%=0 THEN
      temp$=work_file$
    ELSE
      temp$=MID$(work_file$,temp%)
    ENDIF
    '
    temp%=RINSTR(temp$,".")
    IF temp%=0 THEN
      work_file$=work_file$+ext$
    ENDIF
    '
  ENDIF
  '
RETURN
'
> PROCEDURE hide_mouse
  CONTRL(0)=123
  CONTRL(1)=0
  CONTRL(3)=0
  CONTRL(6)=my_handle%
  INTIN(0)=1
  VDISYS
  '
RETURN
'
> PROCEDURE show_mouse
  CONTRL(0)=122
  CONTRL(1)=0
  CONTRL(3)=0
  CONTRL(6)=my_handle%
  INTIN(0)=1
  VDISYS
  '
RETURN
'
> PROCEDURE set_new_puzzle_size
  @puzzle_title
  @puzzle_info_line
  IF full_flag% THEN
    @puzzle_full
    full_flag%=0
  ENDIF
  flag%=WIND_SET(puzzle_window%,5,puzzle_wx%,puzzle_wy%,puzzle_ww%,puzzle_wh%)     ! SIZE WINDOW
  flag%=WIND_GET(puzzle_window%,4,puzzle_iwx%,puzzle_iwy%,puzzle_iww%,puzzle_iwh%) ! GET INSIDE SIZE
  @size_puzzle_slider
  @update_puzzle
  '
  IF puzzle_ready% THEN
    ~MENU_IENABLE(menu%,m_puzzle_save%,1)
    ~MENU_IENABLE(menu%,m_puzzle_delete%,1)
  ELSE
    ~MENU_IENABLE(menu%,m_puzzle_save%,0)
    ~MENU_IENABLE(menu%,m_puzzle_delete%,0)
  ENDIF
  '
RETURN
'
> PROCEDURE set_new_words_size
  @words_setup
  @words_title
  IF outline_wordlist% THEN
    DEFTEXT ,16
  ELSE
    DEFTEXT ,0
  ENDIF
  widest_word%=1
  IF word_ext_flag%=1 THEN
    FOR x%=0 TO last_word%
      ~VQT_EXTENT(words$(x%),d%,d%,d%,d%,z%,d%,d%,d%)
      widest_word%=MAX(widest_word%,z%)
    NEXT x%
    word_ext_flag%=0
  ENDIF
  @words_info_line
  IF full_flag% THEN
    @words_full
    full_flag%=0
  ENDIF
  flag%=WIND_SET(words_window%,5,words_wx%,words_wy%,words_ww%,words_wh%)     ! SIZE WINDOW
  flag%=WIND_GET(words_window%,4,words_iwx%,words_iwy%,words_iww%,words_iwh%) ! GET INSIDE SIZE
  @size_words_slider
  @update_words
  '
RETURN
'
> PROCEDURE set_new_mask_size
  IF drawing%=1 THEN
    drawing%=0
    @clr_draw
  ENDIF
  @mask_title
  @mask_info_line
  IF full_flag% THEN
    @mask_full
    full_flag%=0
  ENDIF
  flag%=WIND_SET(mask_window%,5,mask_wx%,mask_wy%,mask_ww%,mask_wh%)     ! SIZE WINDOW
  flag%=WIND_GET(mask_window%,4,mask_iwx%,mask_iwy%,mask_iww%,mask_iwh%) ! GET INSIDE SIZE
  @size_mask_slider
  @update_grid
RETURN
'
> PROCEDURE set_new_box_size
  IF full_flag% THEN
    @mask_full
    full_flag%=0
  ENDIF
  flag%=WIND_SET(mask_window%,5,mask_wx%,mask_wy%,mask_ww%,mask_wh%)     ! SIZE WINDOW
  flag%=WIND_GET(mask_window%,4,mask_iwx%,mask_iwy%,mask_iww%,mask_iwh%) ! GET INSIDE SIZE
  @size_mask_slider
  @update_grid
RETURN
'
> PROCEDURE stats
  MAT CLR mixup()
  FOR x%=0 TO last_puzzle_word%
    INC mixup(puzzle%(2,x%))
  NEXT x%
  FOR x%=0 TO 7
    stat$(x%)="     "
    LSET stat$(x%)=STR$(mixup(x%))
  NEXT x%
  tempx$=STR$(puzzle_grid_x%)+"x"+STR$(puzzle_grid_y%)
  tempx$=tempx$+"  "+STR$(last_puzzle_word%+1)+" words."
  tempx%=(30-LEN(tempx$))/2
  '
  DO
    ~GRAF_MKSTATE(event_mouse_x%,event_mouse_y%,mouse_button%,key_state%)
  LOOP UNTIL mouse_button%=0
  alert$(0)="Puzzle stats"
  alert$(1)=""
  alert$(2)="        "+stat$(7)+stat$(0)+stat$(1)
  alert$(3)="        "+stat$(6)+"     "+stat$(2)
  alert$(4)="        "+stat$(5)+stat$(4)+stat$(3)
  alert$(5)=SPACE$(tempx%)+tempx$
  alert$(6)=""
  alert$(7)="OK"
  alert$(8)=""
  button_default%=1
  @alert(alert_button%,button_default%,alert$())
  '
RETURN
'
> PROCEDURE alert(VAR button%,button_default%,alert_text$())
  SELECT dialog_type%
  CASE 0
    alert_x%=event_mouse_x%-(alert_w%/2)
    IF alert_x%<mwx% THEN
      alert_x%=mwx%
    ENDIF
    IF alert_x%+alert_w%>screen_width% THEN
      alert_x%=screen_width%-alert_w%
    ENDIF
    OB_X(alert_dialog%,0)=alert_x%
    alert_y%=event_mouse_y%-(alert_button_y%+(alert_button_h%/2))
    IF alert_y%<mwy% THEN
      alert_y%=mwy%
    ENDIF
    IF alert_y%+alert_h%>screen_height% THEN
      alert_y%=screen_height%-alert_h%
    ENDIF
    OB_Y(alert_dialog%,0)=alert_y%
  CASE 1
    ~FORM_CENTER(alert_dialog%,alert_x%,alert_y%,alert_w%,alert_h%)
  ENDSELECT
  ~GRAF_MOUSE(0,0)
  ~FORM_DIAL(0,0,0,0,0,alert_x%,alert_y%,alert_w%,alert_h%)
  er%=WIND_UPDATE(1)
  er%=WIND_UPDATE(3)
  alert_done%=0
  CHAR{{OB_SPEC(alert_dialog%,t_alert_title%)}}=alert_text$(0)
  FOR x%=0 TO 4
    CHAR{{OB_SPEC(alert_dialog%,t_alert_line1%+x%)}}=alert_text$(x%+1)
  NEXT x%
  FOR x%=0 TO 2
    OB_FLAGS(alert_dialog%,b_alert_button1%+x%)=BCLR(OB_FLAGS(alert_dialog%,b_alert_button1%+x%),1)
    IF alert_text$(x%+6)<>"" THEN
      OB_FLAGS(alert_dialog%,b_alert_button1%+x%)=BCLR(OB_FLAGS(alert_dialog%,b_alert_button1%+x%),7)
      CHAR{OB_SPEC(alert_dialog%,b_alert_button1%+x%)}=alert_text$(x%+6)
    ELSE
      OB_FLAGS(alert_dialog%,b_alert_button1%+x%)=BSET(OB_FLAGS(alert_dialog%,b_alert_button1%+x%),7)
    ENDIF
  NEXT x%
  OB_FLAGS(alert_dialog%,b_alert_button1%+button_default%)=BSET(OB_FLAGS(alert_dialog%,b_alert_button1%+button_default%),1)
  ~OBJC_DRAW(alert_dialog%,0,2,alert_x%,alert_y%,alert_w%,alert_h%)
  '
  DO
    event%=EVNT_MULTI(&X11,1,1,1,0,0,0,0,0,0,0,0,0,0,buffer%,1,mouse_x%,mouse_y%,b&,key_state&,key&,clicks&)
    IF event%=&X10 THEN
      exit%=OBJC_FIND(alert_dialog%,0,1,mouse_x%,mouse_y%)
      '
      SELECT exit%
      CASE b_alert_button1% TO b_alert_button3%
        OB_STATE(alert_dialog%,exit%)=BCLR(OB_STATE(alert_dialog%,exit%),0)
        button%=exit%-b_alert_button1%
        alert_done%=1
        '
      CASE b_alert_move%
        OB_STATE(alert_dialog%,exit%)=BCLR(OB_STATE(alert_dialog%,exit%),0)
        er%=WIND_UPDATE(2)
        er%=WIND_UPDATE(0)
        ~FORM_DIAL(3,0,0,0,0,alert_x%,alert_y%,alert_w%,alert_h%)
        '
        ~GRAF_DRAGBOX(alert_w%,alert_h%,alert_x%,alert_y%,mwx%,mwy%,mww%,mwh%,alert_x%,alert_y%)
        OB_X(alert_dialog%,0)=alert_x%
        OB_Y(alert_dialog%,0)=alert_y%
        event_mouse_x%=alert_x%+(alert_w%/2)
        event_mouse_y%=alert_y%+alert_button_y%+(alert_button_h%/2)
        '
        @multi_check
        '
        ~FORM_DIAL(0,0,0,0,0,alert_x%,alert_y%,alert_w%,alert_h%)
        er%=WIND_UPDATE(1)
        er%=WIND_UPDATE(3)
        ~OBJC_DRAW(alert_dialog%,0,2,alert_x%,alert_y%,alert_w%,alert_h%)
        '
      ENDSELECT
    ENDIF
    IF event%=&X1 THEN
      IF SHR(key& AND &HFF00,8)=28 THEN
        button%=button_default%
        alert_done%=1
      ENDIF
    ENDIF
  LOOP UNTIL alert_done%=1
  DO
    ~GRAF_MKSTATE(event_mouse_x%,event_mouse_y%,mouse_button%,key_state%)
  LOOP UNTIL mouse_button%=0
  er%=WIND_UPDATE(2)
  er%=WIND_UPDATE(0)
  ~FORM_DIAL(3,0,0,0,0,alert_x%,alert_y%,alert_w%,alert_h%)
  @multi_check
  '
RETURN
'
> PROCEDURE inf_load
  search_file$=search_inf$+CHR$(0)
  ~FSETDTA(dta%)
  test%=GEMDOS(78,L:V:search_file$,&X100111)
  IF test%=0 THEN
    OPEN "I",#1,search_file$
    DO WHILE EOF(#1)=0
      INPUT #1,temp$
      test%=RINSTR(temp$,"=")
      IF test%>1 THEN
        inf_command$=MID$(temp$,1,test%-1)
        inf_set$=MID$(temp$,test%+1)
        IF inf_command$="DIALOGS"
          SELECT VAL(inf_set$)
          CASE 0
            IF inf_set$="0" THEN
              dialog_type%=0
            ENDIF
          CASE 1,2
            dialog_type%=VAL(inf_set$)
          ENDSELECT
        ENDIF
        IF inf_command$="OUTPUT"
          SELECT VAL(inf_set$)
          CASE 1
            output%=1
          ENDSELECT
        ENDIF
        IF inf_command$="GDOS FONT HEIGHT"
          SELECT VAL(inf_set$)
          CASE 1 TO 999
            font_height%=VAL(inf_set$)
          ENDSELECT
        ENDIF
        IF inf_command$="LANDSCAPE"
          SELECT VAL(inf_set$)
          CASE 0
            IF inf_set$="0" THEN
              landscape%=0
            ENDIF
          CASE 1
            landscape%=1
          ENDSELECT
        ENDIF
        IF inf_command$="TOP MARGIN"
          SELECT VAL(inf_set$)
          CASE 0
            IF inf_set$="0" THEN
              top_margin%=0
            ENDIF
          CASE 1,2,3,4
            top_margin%=VAL(inf_set$)
          ENDSELECT
        ENDIF
        IF inf_command$="BOTTOM MARGIN"
          SELECT VAL(inf_set$)
          CASE 0
            IF inf_set$="0" THEN
              bottom_margin%=0
            ENDIF
          CASE 1,2,3,4
            bottom_margin%=VAL(inf_set$)
          ENDSELECT
        ENDIF
        IF inf_command$="LEFT MARGIN"
          SELECT VAL(inf_set$)
          CASE 0
            IF inf_set$="0" THEN
              left_margin%=0
            ENDIF
          CASE 1,2,3,4
            left_margin%=VAL(inf_set$)
          ENDSELECT
        ENDIF
        IF inf_command$="RIGHT MARGIN"
          SELECT VAL(inf_set$)
          CASE 0
            IF inf_set$="0" THEN
              right_margin%=0
            ENDIF
          CASE 1,2,3,4
            right_margin%=VAL(inf_set$)
          ENDSELECT
        ENDIF
        IF inf_command$="WORD PLACE"
          SELECT VAL(inf_set$)
          CASE 1
            word_place%=1
          ENDSELECT
        ENDIF
        IF inf_command$="GDOS FONT NAME"
          font_name$=inf_set$
        ENDIF
        IF inf_command$="DRIVER"
          SELECT VAL(inf_set$)
          CASE 21 TO 30
            driver%=VAL(inf_set$)
          ENDSELECT
        ENDIF
        IF inf_command$="EXTRA SPACE"
          print_extra%=VAL(inf_set$)
        ENDIF
        IF inf_command$="TITLE COLOR"
          SELECT VAL(inf_set$)
          CASE 0 TO 15
            gdos_title_color%=VAL(inf_set$)
          ENDSELECT
        ENDIF
        IF inf_command$="PUZZLE COLOR"
          SELECT VAL(inf_set$)
          CASE 0 TO 15
            gdos_puzzle_color%=VAL(inf_set$)
          ENDSELECT
        ENDIF
        IF inf_command$="WORDLIST COLOR"
          SELECT VAL(inf_set$)
          CASE 0 TO 15
            gdos_wordlist_color%=VAL(inf_set$)
          ENDSELECT
        ENDIF
        IF inf_command$="ANSWERS COLOR"
          SELECT VAL(inf_set$)
          CASE 0 TO 15
            gdos_answers_color%=VAL(inf_set$)
          ENDSELECT
        ENDIF
        IF inf_command$="TITLE SHADOW"
          SELECT VAL(inf_set$)
          CASE 0
            IF inf_set$="0" THEN
              shadow_title%=0
            ENDIF
          CASE 1
            shadow_title%=1
          ENDSELECT
        ENDIF
        IF inf_command$="PUZZLE SHADOW"
          SELECT VAL(inf_set$)
          CASE 0
            IF inf_set$="0" THEN
              shadow_puzzle%=0
            ENDIF
          CASE 1
            shadow_puzzle%=1
          ENDSELECT
        ENDIF
        IF inf_command$="WORDLIST SHADOW"
          SELECT VAL(inf_set$)
          CASE 0
            IF inf_set$="0" THEN
              shadow_wordlist%=0
            ENDIF
          CASE 1
            shadow_wordlist%=1
          ENDSELECT
        ENDIF
        IF inf_command$="SHADOW DISTANCE"
          SELECT VAL(inf_set$)
          CASE min_shadow% TO max_shadow%
            shadow=VAL(inf_set$)
          ENDSELECT
        ENDIF
        IF inf_command$="TITLE OUTLINE"
          SELECT VAL(inf_set$)
          CASE 0
            IF inf_set$="0" THEN
              outline_title%=0
            ENDIF
          CASE 1
            outline_title%=1
          ENDSELECT
        ENDIF
        IF inf_command$="PUZZLE OUTLINE"
          SELECT VAL(inf_set$)
          CASE 0
            IF inf_set$="0" THEN
              outline_puzzle%=0
            ENDIF
          CASE 1
            outline_puzzle%=1
          ENDSELECT
        ENDIF
        IF inf_command$="WORDLIST OUTLINE"
          SELECT VAL(inf_set$)
          CASE 0
            IF inf_set$="0" THEN
              outline_wordlist%=0
            ENDIF
          CASE 1
            outline_wordlist%=1
          ENDSELECT
        ENDIF
      ENDIF
    LOOP UNTIL EOF(#1)
    CLOSE #1
    '
  ENDIF
RETURN
'
> PROCEDURE inf_save
  '
  OPEN "O",#1,search_inf$
  '
  temp$="DIALOGS="+STR$(dialog_type%)
  PRINT #1,temp$
  '
  temp$="dialogs: 0=mouse , 1=center, 2=last."
  PRINT #1,temp$
  '
  temp$=""
  PRINT #1,temp$
  '
  temp$="OUTPUT="+STR$(output%)
  PRINT #1,temp$
  '
  temp$="output: 0=file, 1=printer."
  PRINT #1,temp$
  '
  temp$=""
  PRINT #1,temp$
  '
  temp$="GDOS FONT HEIGHT="+STR$(font_height%)
  PRINT #1,temp$
  '
  temp$="font height can be 1 to 999."
  PRINT #1,temp$
  '
  temp$=""
  PRINT #1,temp$
  '
  temp$="LANDSCAPE="+STR$(landscape%)
  PRINT #1,temp$
  '
  temp$="landscape: 0=protrait, 1=landscape."
  PRINT #1,temp$
  '
  temp$=""
  PRINT #1,temp$
  '
  temp$="TOP MARGIN="+STR$(top_margin%)
  PRINT #1,temp$
  '
  temp$="BOTTOM MARGIN="+STR$(bottom_margin%)
  PRINT #1,temp$
  '
  temp$="LEFT MARGIN="+STR$(left_margin%)
  PRINT #1,temp$
  '
  temp$="RIGHT MARGIN="+STR$(right_margin%)
  PRINT #1,temp$
  '
  temp$="margins: 0=0'', 1=0.25'', 2=0.5'', 3=0.75'', 4=1''."
  PRINT #1,temp$
  '
  temp$=""
  PRINT #1,temp$
  '
  temp$="WORD PLACE="+STR$(word_place%)
  PRINT #1,temp$
  '
  temp$="word place: 0=bottom, 1=side."
  PRINT #1,temp$
  '
  temp$=""
  PRINT #1,temp$
  '
  temp$="EXTRA SPACE="+STR$(print_extra%)
  PRINT #1,temp$
  '
  temp$="extra space can be 0% to 99%"
  PRINT #1,temp$
  '
  temp$=""
  PRINT #1,temp$
  '
  temp$="GDOS FONT NAME="+font_name$
  gdos_font_name$=inf_set$
  PRINT #1,temp$
  '
  temp$="font name can be any valid font name."
  PRINT #1,temp$
  '
  temp$=""
  PRINT #1,temp$
  '
  temp$="DRIVER="+STR$(driver%)
  PRINT #1,temp$
  '
  temp$="the printer driver can be GDOS device 21 to 30."
  PRINT #1,temp$
  '
  temp$=""
  PRINT #1,temp$
  '
  temp$="TITLE COLOR="+STR$(gdos_title_color%)
  PRINT #1,temp$
  '
  temp$="PUZZLE COLOR="+STR$(gdos_puzzle_color%)
  PRINT #1,temp$
  '
  temp$="WORDLIST COLOR="+STR$(gdos_wordlist_color%)
  PRINT #1,temp$
  '
  temp$="ANSWERS COLOR="+STR$(gdos_answers_color%)
  PRINT #1,temp$
  '
  temp$="the colors can be 0 to 15."
  PRINT #1,temp$
  '
  temp$=""
  PRINT #1,temp$
  '
  temp$="TITLE SHADOW="+STR$(shadow_title%)
  PRINT #1,temp$
  temp$="PUZZLE SHADOW="+STR$(shadow_puzzle%)
  PRINT #1,temp$
  temp$="WORDLIST SHADOW="+STR$(shadow_wordlist%)
  PRINT #1,temp$
  temp$="shadow: 0=off, 1=on."
  PRINT #1,temp$
  '
  temp$=""
  PRINT #1,temp$
  '
  temp$="SHADOW DISTANCE="+STR$(shadow)
  PRINT #1,temp$
  '
  temp$="shadow:can be 1 to 10."
  PRINT #1,temp$
  '
  temp$=""
  PRINT #1,temp$
  '
  temp$="TITLE OUTLINE="+STR$(outline_title%)
  PRINT #1,temp$
  temp$="PUZZLE OUTLINE="+STR$(outline_puzzle%)
  PRINT #1,temp$
  temp$="WORDLIST OUTLINE="+STR$(outline_wordlist%)
  PRINT #1,temp$
  temp$="outline: 0=off, 1=on."
  PRINT #1,temp$
  '
  CLOSE #1
  '
RETURN
'
> PROCEDURE undo
  IF undo%=1 THEN
    undo%=0
    MAT CLR temp()
    MAT CPY temp()=grid(),grid_x%,grid_y%
    MAT CPY grid()=undo()
    MAT CPY undo()=temp()
    SWAP undo_x%,grid_x%
    SWAP undo_y%,grid_y%
    IF undo_x%<>grid_x% OR undo_y%<>grid_y% THEN
      @count_mask
    ENDIF
    @set_new_mask_size
    '
  ELSE
    undo_x%=grid_x%
    undo_y%=grid_y%
    MAT CLR undo()
    MAT CPY undo()=grid(),grid_x%,grid_y%
    '
  ENDIF
  '
RETURN
'
> PROCEDURE text
  GRAPHMODE 2
  CONTRL(0)=8  ! V_GTEXT
  CONTRL(1)=1
  CONTRL(3)=LEN(t_text$)
  CONTRL(6)=handle%
  PTSIN(0)=x_text%
  PTSIN(1)=y_text%
  FOR set%=0 TO LEN(t_text$)-1
    INTIN(set%)=ASC(MID$(t_text$,set%+1,1))
  NEXT set%
  INTIN(set%)=0
  VDISYS
  GRAPHMODE 1
  '
RETURN
'
> PROCEDURE trying_to_quit
  '
  alert$(0)="Quit"
  IF words_save%=0 OR (mask_save%=0 AND grid_used%>0) OR puzzle_save%=0 THEN
    alert$(1)="Sure you want to QUIT ?"
    alert$(2)=""
  ELSE
    alert$(1)=""
    alert$(2)=""
    alert$(3)="Sure you want to QUIT ?"
  ENDIF
  alert$(4)=""
  alert$(5)=""
  alert$(6)="OK"
  alert$(7)=""
  alert$(8)="Cancel"
  current_alert%=3
  IF words_save%=0 THEN
    alert$(current_alert%)="The word list is not saved."
    INC current_alert%
  ENDIF
  IF mask_save%=0 AND grid_used%>0 THEN
    alert$(current_alert%)="The mask is not saved."
    INC current_alert%
  ENDIF
  IF puzzle_save%=0 THEN
    alert$(current_alert%)="The puzzle is not saved."
  ENDIF
  button_default%=0
  @alert(alert_button%,button_default%,alert$())
  '
  IF alert_button%=0 THEN
    ~FSETDTA(old_dta%)
    d%=GEMDOS(73,L:dta%)           ! RELEASE MEMORY
    d%=GEMDOS(73,L:window_stuff%)  ! RELEASE MEMORY
    d%=GEMDOS(73,L:raster_buffer%) ! RELEASE MEMORY
    IF mask_window_status%=1 THEN
      flag%=WIND_CLOSE(mask_window%)         ! CLOSE WINDOW
    ENDIF
    flag%=WIND_DELETE(mask_window%)        ! DELETE WINDOW
    IF words_window_status%=1 THEN
      flag%=WIND_CLOSE(words_window%)        ! CLOSE WINDOW
    ENDIF
    flag%=WIND_DELETE(words_window%)       ! DELETE WINDOW
    IF puzzle_window_status%=1 THEN
      flag%=WIND_CLOSE(puzzle_window%)       ! CLOSE WINDOW
    ENDIF
    flag%=WIND_DELETE(puzzle_window%)      ! DELETE WINDOW
    IF gdos%=1 THEN
      ~VST_UNLOAD_FONTS(0)
    ENDIF
    ~MENU_BAR(menu%,0)
    ~RSRC_FREE()                   ! FREE RSC MEMORY
    END
  ENDIF
  '
RETURN
