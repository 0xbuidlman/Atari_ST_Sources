' LINES
$m50000
' RESERVE 4000000
'
@main
'
> PROCEDURE main
  '
  ' COMMAND LINE, COMMAND$ IS PATH+FILENAME OF PROCESS THAT
  ' STARTED PROGRAM. TAIL$ IS FILENAME THAT WAS DROPED ON ME
  shell%=SHEL_READ(command$,tail$)
  '
  ' GET VDI HANDLE OF PROGRAMS WORKSTATION
  handle&=V~H
  '
  ' GET CURRENT DIRECTORY
  current_drive%=GEMDOS(25)
  from_path$=DIR$(current_drive%+1)+"\"
  '
  ' ADD DRIVE LETTER IF NOT PRESENT
  IF MID$(from_path$,1,1)="\" THEN
    from_path$=CHR$(current_drive%+65)+":"+from_path$
    '
  ELSE
    IF MID$(from_path$,2,1)<>":" THEN
      from_path$=CHR$(current_drive%+65)+":\"+from_path$
      '
    ENDIF
    '
  ENDIF
  '
  ' STRIP FILENAME FROM PATH
  test%=RINSTR(command$,"\")
  IF test% THEN
    my_path$=MID$(command$,1,test%)
  ELSE
    my_path$=from_path$
  ENDIF
  '
  ' GET PRG ID
  ap_id&=APPL_INIT()
  '
  @prg
  '
RETURN
'
> PROCEDURE prg
  '
  @pre_init
  '
  @window_setup
  @pattern
  DEFMOUSE 0
  '
  DO
    c_type%=EVNT_MULTI(&X10011,1,2,2,0,0,0,0,0,0,0,0,0,0,buffer%,100,mx%,my%,b%,key_state%,key%,d%)
    @check_event
    '
  LOOP
  '
RETURN
'
> PROCEDURE pre_init
  '
  screen_colors%=WORK_OUT(13)  ! 2,4,16,256,256(TRUE COLOR)
  '
  CONTRL(0)=102  ! 'VQ_EXTND' - GET EXTRA INFO ABOUT WORKSTATION
  CONTRL(1)=0
  CONTRL(3)=1
  CONTRL(6)=handle&
  INTIN(0)=1
  VDISYS
  screen_bits%=INTOUT(4)  ! GET # OF SCREEN PLANES
  '
  DIM source_mfdb%(8),destination_mfdb%(8),parameters%(8)
  '
  max_line%=40
  pic_width%=128
  pic_height%=128
  pic_size%=((256*screen_bits%)/8)*256*4
  pic%=GEMDOS(72,L:pic_size%)
  IF pic%<1 THEN
    END
  ENDIF
  '
  FOR zero%=4 TO 8
    source_mfdb%(zero%)=0
    destination_mfdb%(zero%)=0
  NEXT zero%
  '
  parameters%(8)=3 ! REPLACE MODE
  '
  rsc$=my_path$+"LINES.RSC"         ! RSC FILENAME
  pic_path$=my_path$
  '
  @rsc_setup
  '
  ' MESSAGE BUFFER FOR EVENT CALL
  DIM buffer&(15)
  buffer%=VARPTR(buffer&(0))
  '
  ' MESSAGE BUFFER FOR ME TO SEND EVENT MESSAGES
  DIM my_buffer&(15)
  my_buffer%=VARPTR(my_buffer&(0))
  '
  DEFFILL 0,2,8
  COLOR 1
  '
RETURN
'
> PROCEDURE rsc_setup
  '
  IF EXIST(rsc$) THEN
    rsc%=RSRC_LOAD(rsc$)
    @rsc_do
    '
  ELSE
    ' CANT FIND RSC FILE
    PRINT rsc$
    END
    '
  ENDIF
  '
RETURN
'
> PROCEDURE rsc_do
  '
  ' GET ADDRESS TREE
  ~RSRC_GADDR(0,0,menu%)
  '
  ~MENU_BAR(menu%,1)
  '
RETURN
'
> PROCEDURE window_setup
  '
  flag%=WIND_GET(0,4,wx%,wy%,ww%,wh%)
  '
  ~WIND_CALC(1,&X1011,wx%,wy%,ww%,wh%,main_iwx%,main_iwy%,main_iww%,main_iwh%)
  '
  main_iww%=512
  main_iwh%=512
  '
  ~WIND_CALC(0,&X1011,main_iwx%,main_iwy%,main_iww%,main_iwh%,main_wx%,main_wy%,main_ww%,main_wh%)
  '
  main_win%=WIND_CREATE(&X1011,main_wx%,main_wy%,main_ww%,main_wh%)
  '
  flag%=WIND_OPEN(main_win%,main_wx%,main_wy%,main_ww%,main_wh%)
  flag%=WIND_GET(main_win%,4,main_iwx%,main_iwy%,main_iww%,main_iwh%)
  '
  INLINE window_title%,128
  @title
  '
RETURN
'
> PROCEDURE title
  window_title$="Size="+STR$(pic_width%)+"x"+STR$(pic_height%)+"Lines="+STR$(max_line%)
  CHAR{window_title%}=window_title$+CHR$(0)+CHR$(0)
  ~WIND_SET(main_win%,2,CARD(SWAP(window_title%)),CARD(window_title%),0,0)
  '
RETURN
'
> PROCEDURE check_event
  '
  ' MENU/WINDOW EVENT
  IF c_type% AND &X10000 THEN
    '
    ' TYPE OF EVENT
    command%=buffer&(0)
    IF command%=10 THEN
      '
      ' MENU ITEM
      @the_menu
      '
    ELSE
      '
      ' WINDOW EVENT
      @a_window
      '
    ENDIF
    '
  ENDIF
  '
  IF c_type% AND &X10 THEN      ! BUTTON
    @pattern
  ENDIF
  '
  IF c_type% AND &X1 THEN      ! KEY
    @event_key
    '
  ENDIF
  '
RETURN
'
> PROCEDURE the_menu
  '
  ' WHICH MENU TITLE ?
  tit%=buffer&(3)
  '
  ' MAKE MENU TITLE NORMAL AGAIN
  ~MENU_TNORMAL(menu%,tit%,1)
  '
  ' WHICH MENU ITEM WAS SELECTED
  item%=buffer&(4)
  '
  IF item%=6
    @pic_save
    '
  ENDIF
  '
RETURN
'
> PROCEDURE a_window
  '
  ' HANDLE OF WINDOW THAT TRIGGERED EVENT
  win%=buffer&(3)
  '
  ' BE SURE IT WAS OUR WINDOW
  IF win%=main_win% THEN
    SELECT command%
      '
      ' WIND UPDATE
    CASE 20
      @repair
      '
      ' WINDOW CLICKED ON
    CASE 21
      ' WINDOW SET TO TOP
      flag%=WIND_SET(main_win%,10,0,0,0,0)
      DEFMOUSE 0
      '
      ' CLOSE WINDOW
    CASE 22
      @prg_exit
      '
    CASE 28        ! WINDOW MOVED
      main_wx%=buffer&(4)      ! X POSITION OF WINDOW
      main_wy%=buffer&(5)      ! Y      "    "    "
      main_ww%=buffer&(6)      ! WIDTH  "    "    "
      main_wh%=buffer&(7)      ! HEIGHT "    "    "
      '
      flag%=WIND_SET(main_win%,5,main_wx%,main_wy%,main_ww%,main_wh%)
      flag%=WIND_GET(main_win%,4,main_iwx%,main_iwy%,main_iww%,main_iwh%)
    ENDSELECT
    '
  ENDIF
  '
RETURN
'
> PROCEDURE event_key
  '
  scan_code&=SHR(key% AND &HFF00,8)  ! KEYBOARD SCAN CODE
  '
  SELECT scan_code&
  CASE 57          ! 'SPACE' UPDATE OR TOP STIS
    @pattern
    '
  CASE 31           ! 'S' SAVE STIS
    @pic_save
    '
  CASE 16           ! 'Q' QUIT PROGRAM
    @prg_exit
    '
  CASE 72,80,75,77  ! ARROWS UP, DOWN, LEFT, RIGHT
    SELECT scan_code&
    CASE 72
      max_line%=max_line%+1
    CASE 80
      max_line%=max_line%-1
    CASE 75
      IF pic_width%>32 AND pic_height%>32 THEN
        pic_width%=pic_width%-16
        pic_height%=pic_height%-16
      ENDIF
    CASE 77
      IF pic_width%<256 AND pic_height%<256 THEN
        pic_width%=pic_width%+16
        pic_height%=pic_height%+16
      ENDIF
    ENDSELECT
    IF max_line%<3 THEN
      max_line%=3
    ENDIF
    IF max_line%>300 THEN
      max_line%=300
    ENDIF
    '
    @title
    '
  ENDSELECT
  '
RETURN
'
> PROCEDURE prg_exit
  '
  flag%=WIND_CLOSE(main_win%)
  flag%=WIND_DELETE(main_win%)
  ~MENU_BAR(menu%,0)
  d%=GEMDOS(73,L:pic%)  ! RELEASE MEMORY
  ~RSRC_FREE()
  END
  '
RETURN
'
> PROCEDURE repair
  '
  ' TELL GEM WE ARE TAKING OVER SCREEN AND MOUSE
  er%=WIND_UPDATE(1)
  er%=WIND_UPDATE(3)
  '
  ' GET FIRST RECTANGLE FROM LIST
  er%=WIND_GET(main_win%,11,fx%,fy%,fx2%,fy2%)
  '
  ' GET DIRTY AREA
  fix_wx%=buffer&(4)
  fix_wy%=buffer&(5)
  fix_ww%=buffer&(6)
  fix_wh%=buffer&(7)
  '
  ' CALC AREA THAT OVERLAPS DIRTY AREA
  fix_flag%=RC_INTERSECT(fix_wx%,fix_wy%,fix_ww%,fix_wh%,fx%,fy%,fx2%,fy2%)
  '
  IF fix_flag% THEN
    @pic_copy
    '
  ENDIF
  '
  fix_done%=0
  '
  ' SAME AS ABOVE FOR THE OTHER RECTANGLES FROM LIST
  DO
    er%=WIND_GET(main_win%,12,fx%,fy%,fx2%,fy2%)
    '
    IF fx2%+fy2%=0 THEN
      fix_done%=1
    ELSE
      fix_wx%=buffer&(4)
      fix_wy%=buffer&(5)
      fix_ww%=buffer&(6)
      fix_wh%=buffer&(7)
      fix_flag%=RC_INTERSECT(fix_wx%,fix_wy%,fix_ww%,fix_wh%,fx%,fy%,fx2%,fy2%)
      IF fix_flag% THEN
        @pic_copy
        '
      ENDIF
    ENDIF
    '
  LOOP UNTIL fix_done%=1
  '
  er%=WIND_UPDATE(2)
  er%=WIND_UPDATE(0)                      !  DONE!
  '
RETURN
'
> PROCEDURE update
  '
  my_buffer&(0)=20
  my_buffer&(3)=main_win%
  my_buffer&(4)=main_iwx%
  my_buffer&(5)=main_iwy%
  my_buffer&(6)=main_iww%
  my_buffer&(7)=main_iwh%
  ~APPL_WRITE(ap_id&,16,my_buffer%)
  '
RETURN
'
> PROCEDURE pattern
  lin%=0
  PBOX main_iwx%,main_iwy%,main_iwx%+main_iww%-1,main_iwy%+main_iwh%-1
  pic_cols%=INT(512/pic_width%)
  pic_rows%=INT(512/pic_height%)
  DO
    x%=INT(RND(0)*pic_width%)
    y%=INT(RND(0)*pic_height%)
    cx1%=INT(RND(0)*pic_width%)
    cy1%=INT(RND(0)*pic_height%)
    cx2%=INT(RND(0)*pic_width%)
    cy2%=INT(RND(0)*pic_height%)
    type%=INT(RND(0)*6)
    col%=INT(RND(0)*screen_colors%)+1
    COLOR col%
    SELECT type%
    CASE 0
      CURVE main_iwx%+x%,main_iwy%,main_iwx%+cx1%,main_iwy%+cy1%,main_iwx%+cx2%,main_iwy%+cy2%,main_iwx%+pic_width%-1,main_iwy%+y%
      CURVE main_iwx%+x%,main_iwy%+pic_height%-1,main_iwx%+cx1%,main_iwy%+cy1%,main_iwx%+cx2%,main_iwy%+cy2%,main_iwx%,main_iwy%+y%
      '
    CASE 1
      CURVE main_iwx%+x%,main_iwy%,main_iwx%+cx1%,main_iwy%+cy1%,main_iwx%+cx2%,main_iwy%+cy2%,main_iwx%+y%,main_iwy%+pic_height%-1
      CURVE main_iwx%+x%,main_iwy%+pic_height%-1,main_iwx%+cx1%,main_iwy%+cy1%,main_iwx%+cx2%,main_iwy%+cy2%,main_iwx%+y%,main_iwy%
      '
    CASE 2
      CURVE main_iwx%+x%,main_iwy%,main_iwx%+cx1%,main_iwy%+cy1%,main_iwx%+cx2%,main_iwy%+cy2%,main_iwx%,main_iwy%+y%
      CURVE main_iwx%+x%,main_iwy%+pic_height%-1,main_iwx%+cx1%,main_iwy%+cy1%,main_iwx%+cx2%,main_iwy%+cy2%,main_iwx%+pic_width%-1,main_iwy%+y%
      '
    CASE 3
      CURVE main_iwx%+pic_width%-1,main_iwy%+y%,main_iwx%+cx1%,main_iwy%+cy1%,main_iwx%+cx2%,main_iwy%+cy2%,main_iwx%+x%,main_iwy%+pic_height%-1
      CURVE main_iwx%,main_iwy%+y%,main_iwx%+cx1%,main_iwy%+cy1%,main_iwx%+cx2%,main_iwy%+cy2%,main_iwx%+x%,main_iwy%
      '
    CASE 4
      CURVE main_iwx%+pic_width%-1,main_iwy%+y%,main_iwx%+cx1%,main_iwy%+cy1%,main_iwx%+cx2%,main_iwy%+cy2%,main_iwx%,main_iwy%+x%
      CURVE main_iwx%,main_iwy%+y%,main_iwx%+cx1%,main_iwy%+cy1%,main_iwx%+cx2%,main_iwy%+cy2%,main_iwx%+pic_width%-1,main_iwy%+x%
      '
    CASE 5
      CURVE main_iwx%+x%,main_iwy%+pic_height%-1,main_iwx%+cx1%,main_iwy%+cy1%,main_iwx%+cx2%,main_iwy%+cy2%,main_iwx%,main_iwy%+y%
      CURVE main_iwx%+x%,main_iwy%,main_iwx%+cx1%,main_iwy%+cy1%,main_iwx%+cx2%,main_iwy%+cy2%,main_iwx%+pic_width%-1,main_iwy%+y%
      '
    ENDSELECT
    '
    INC lin%
  LOOP UNTIL lin%=max_line%
  '
  source_mfdb%(0)=0
  '
  destination_mfdb%(0)=pic%
  destination_mfdb%(1)=pic_width%*pic_cols%
  destination_mfdb%(2)=pic_height%*pic_rows%
  destination_mfdb%(3)=pic_width%*pic_cols%/16
  destination_mfdb%(5)=screen_bits%
  '
  parameters%(0)=main_iwx%
  parameters%(1)=main_iwy%
  parameters%(2)=main_iwx%+pic_width%-1
  parameters%(3)=main_iwy%+pic_height%-1
  parameters%(4)=0
  parameters%(5)=0
  parameters%(6)=pic_width%-1
  parameters%(7)=pic_height%-1
  '
  BITBLT source_mfdb%(),destination_mfdb%(),parameters%()
  '
  @pic_make
  @update
  '
RETURN
'
> PROCEDURE pic_make
  FOR x%=0 TO pic_cols%-1
    FOR y%=0 TO pic_rows%-1
      '
      IF x%=0 AND y%=0 THEN
      ELSE
        source_mfdb%(0)=pic%
        source_mfdb%(1)=pic_width%*pic_cols%
        source_mfdb%(2)=pic_height%*pic_rows%
        source_mfdb%(3)=pic_width%*pic_cols%/16
        source_mfdb%(5)=screen_bits%
        '
        destination_mfdb%(0)=pic%
        destination_mfdb%(1)=pic_width%*pic_cols%
        destination_mfdb%(2)=pic_height%*pic_rows%
        destination_mfdb%(3)=pic_width%*pic_cols%/16
        destination_mfdb%(5)=screen_bits%
        '
        x1%=x%*pic_width%
        y1%=y%*pic_height%
        x2%=x1%+pic_width%-1
        y2%=y1%+pic_height%-1
        '
        parameters%(0)=0
        parameters%(1)=0
        parameters%(2)=pic_width%-1
        parameters%(3)=pic_height%-1
        parameters%(4)=x1%
        parameters%(5)=y1%
        parameters%(6)=x2%
        parameters%(7)=y2%
        '
        BITBLT source_mfdb%(),destination_mfdb%(),parameters%()
        '
      ENDIF
      '
    NEXT y%
  NEXT x%
  '
RETURN
'
> PROCEDURE pic_copy
  CLIP fx%,fy%,fx2%,fy2%
  '
  source_mfdb%(0)=pic%
  source_mfdb%(1)=pic_width%*pic_cols%
  source_mfdb%(2)=pic_height%*pic_rows%
  source_mfdb%(3)=pic_width%*pic_cols%/16
  source_mfdb%(5)=screen_bits%
  '
  destination_mfdb%(0)=0
  '
  parameters%(0)=fx%-main_iwx%
  parameters%(1)=fy%-main_iwy%
  parameters%(2)=fx%+fx2%-(main_iwx%+1)
  parameters%(3)=fy%+fy2%-(main_iwy%+1)
  parameters%(4)=fx%
  parameters%(5)=fy%
  parameters%(6)=fx%+fx2%-1
  parameters%(7)=fy%+fy2%-1
  '
  BITBLT source_mfdb%(),destination_mfdb%(),parameters%()
  '
RETURN
'
> PROCEDURE pic_save
  '
  test%=RINSTR(pic_name$,"\")
  IF test% THEN
    pic_name$=MID$(pic_name$,test%+1)
  ENDIF
  '
  FILESELECT #"Save TPI image",pic_path$+"*.*",pic_name$,pic_name$
  '
  IF pic_name$<>"" THEN
    '
    button%=1
    '
    IF EXIST(pic_name$)
      txt$=" |"+pic_name$+" |exist, overwrite it ? | "
      ALERT 2,txt$,1,"OK|Cancel",button%
    ENDIF
    '
    test%=RINSTR(pic_name$,"\")
    '
    IF test% THEN
      pic_path$=MID$(pic_name$,1,test%)
    ELSE
      pic_path$="\"
    ENDIF
    '
    IF button%=1 THEN
      '
      OPEN "O",#3,pic_name$
      '
      ' P N T CHR$(0)
      OUT #3,80,78,84,0
      OUT& #3,256,screen_colors%
      '
      hi%=INT(pic_width%/256)
      lo%=pic_width%-(hi%*256)
      OUT #3,hi%,lo%
      '
      hi%=INT(pic_height%/256)
      lo%=pic_height%-(hi%*256)
      OUT #3,hi%,lo%
      '
      OUT& #3,screen_bits%,0
      OUT% #3,((pic_width%*screen_bits%)/8)*pic_height%
      '
      FOR headder%=10 TO 63
        OUT& #3,0
      NEXT headder%
      '
      FOR color%=0 TO screen_colors%-1
        '
        CONTRL(0)=26
        CONTRL(1)=0
        CONTRL(3)=2
        CONTRL(6)=handle&
        INTIN(0)=color%
        INTIN(1)=0
        VDISYS
        red&=INTOUT(1)
        green&=INTOUT(2)
        blue&=INTOUT(3)
        OUT& #3,red&,green&,blue&
        '
      NEXT color%
      '
      FOR row%=0 TO pic_height%-1
        BPUT #3,pic%+row%*((pic_width%*pic_cols%*screen_bits%)/8),(pic_width%*screen_bits%)/8
      NEXT row%
      '
      CLOSE #3
      '
    ENDIF
    '
  ENDIF
  '
RETURN
