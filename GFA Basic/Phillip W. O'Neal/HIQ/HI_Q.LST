' HI-Q
$m40000
' RESERVE 2000000
'
@main
'
> PROCEDURE main
  '
  shell%=SHEL_READ(command$,tail$)
  '
  ' GET VDI HANDLE OF PROGRAMS WORKSTATION
  handle&=V~H
  '
  ' GET CURRENT DIRECTORY
  current_drive%=GEMDOS(25)
  from_path$=DIR$(current_drive%+1)+"\"
  '
  ' ADD DRIVE LETTER IF NOT PRESENT
  IF MID$(from_path$,1,1)="\" THEN
    from_path$=CHR$(current_drive%+65)+":"+from_path$
    '
  ELSE
    IF MID$(from_path$,2,1)<>":" THEN
      from_path$=CHR$(current_drive%+65)+":\"+from_path$
      '
    ENDIF
    '
  ENDIF
  '
  ' STRIP FILENAME FROM PATH
  test%=RINSTR(command$,"\")
  IF test% THEN
    my_path$=MID$(command$,1,test%)
  ELSE
    my_path$=from_path$
  ENDIF
  rsc$=my_path$+"HI_Q.RSC"
  '
  @check_for_mint
  '
  ' GET PRG ID
  ap_id&=APPL_INIT()
  '
  DIM buffer&(15)
  buffer%=VARPTR(buffer&(0))
  '
  DIM my_buffer&(15)
  my_buffer%=VARPTR(my_buffer&(0))
  '
  INLINE window_title%,8
  '
  OPTION BASE 0
  DIM triangle%(15,3,1),cross%(45,3,1)
  board%=0
  jump_from%=0
  won%=0
  '
  RESTORE cross_data
  FOR set%=1 TO 45
    FOR x%=0 TO 3
      READ cross%(set%,x%,0)
      READ cross%(set%,x%,1)
    NEXT x%
  NEXT set%
  '
  RESTORE triangle_data
  FOR set%=1 TO 15
    FOR x%=0 TO 3
      READ triangle%(set%,x%,0)
      READ triangle%(set%,x%,1)
    NEXT x%
  NEXT set%
  '
  flag%=WIND_GET(0,4,window_mwx%,window_mwy%,window_mww%,window_mwh%)
  flag%=WIND_CALC(1,&X1011,window_mwx%,window_mwy%,window_mww%,window_mwh%,d%,d%,d%,max_height%)
  window_wx%=window_mwx%
  window_wy%=window_mwy%
  '
  @rsc_setup
  '
  IF mint% THEN
    '
    acc%=0
    @prg
    '
  ELSE
    '
    IF ap_id&>0
      acc%=1
      @acc
    ELSE
      acc%=0
      @prg
    ENDIF
    '
  ENDIF
  '
RETURN
'
> PROCEDURE acc
  '
  ' PUT PRG NAME IN MENU
  me_id&=MENU_REGISTER(ap_id&,"  HI-Q")
  '
  DO
    ~EVNT_MESAG(buffer%)
    IF buffer&(0)=40 THEN ! 40=OPEN ACC
      done%=0
      DEFMOUSE 0
      @window_setup
      '
      DO
        c_type%=EVNT_MULTI(&X10010,1,1,1,0,0,0,0,0,0,0,0,0,0,buffer%,100,mx%,my%,b%,key_state%,key%,d%)
        @check_event
        '
      LOOP UNTIL done%
      '
    ENDIF
    '
  LOOP
  '
RETURN
'
> PROCEDURE prg
  '
  IF mint% THEN
    '
    ' PUT PRG NAME IN MENU
    me_id&=MENU_REGISTER(ap_id&,"  HI-Q")
    '
  ENDIF
  '
  @window_setup
  DEFMOUSE 0
  '
  DO
    c_type%=EVNT_MULTI(&X10010,1,1,1,0,0,0,0,0,0,0,0,0,0,buffer%,100,mx%,my%,b%,key_state%,key%,d%)
    @check_event
    '
  LOOP
  '
RETURN
'
> PROCEDURE check_for_mint
  '
  ' CHECK FOR MINT COOKIE
  '
  INLINE cookie%,6
  CHAR{cookie%}="    "+CHR$(0)+CHR$(0)
  '
  ' GET ADDRESS OF COOKIE JAR
  jar%=LPEEK(1440)
  '
  mint%=0
  '
  IF jar% THEN
    DO
      IF LPEEK(jar%) THEN
        LPOKE cookie%,LPEEK(jar%)
        cookie$=CHAR{cookie%}
        jar%=jar%+8
        IF cookie$="MiNT" OR cookie$="MagX" THEN
          mint%=1
          jar%=0
        ENDIF
        '
      ELSE
        jar%=0
        '
      ENDIF
      '
    LOOP UNTIL jar%=0
    '
  ENDIF
  '
RETURN
'
> PROCEDURE rsc_setup
  '
  rsc%=RSRC_LOAD(rsc$)
  IF rsc% THEN
    @rsc_do
    '
  ELSE
    ' CANT FIND RSC FILE
    END
    '
  ENDIF
  '
RETURN
'
> PROCEDURE rsc_do
  '
  ' GET ADDRESS TREE
  ~RSRC_GADDR(0,0,menu%)
  ~RSRC_GADDR(0,1,triangle%)
  ~RSRC_GADDR(0,2,cross%)
  '
  ' SET VARS TO OBJ NUMBERS
  m_about%=7
  m_quit%=16
  '
  b_triangle_reset%=1
  b_triangle_cross%=2
  t_triangle%=3
  i_triangle%=4
  '
  b_cross_reset%=1
  b_cross_triangle%=2
  t_cross%=3
  i_cross%=4
  '
  y1%=OB_Y(triangle%,i_triangle%)
  y2%=OB_Y(triangle%,i_triangle%+1)
  IF y2%-y1%<>32 THEN
    OB_H(triangle%,0)=OB_H(triangle%,0)+80
    '
    OB_H(triangle%,i_triangle%)=OB_H(triangle%,i_triangle%)+16
    '
    FOR x%=1 TO 2
      OB_Y(triangle%,i_triangle%+x%)=OB_Y(triangle%,i_triangle%+x%)+16
      OB_H(triangle%,i_triangle%+x%)=OB_H(triangle%,i_triangle%+x%)+16
    NEXT x%
    '
    FOR x%=3 TO 5
      OB_Y(triangle%,i_triangle%+x%)=OB_Y(triangle%,i_triangle%+x%)+32
      OB_H(triangle%,i_triangle%+x%)=OB_H(triangle%,i_triangle%+x%)+16
    NEXT x%
    '
    FOR x%=6 TO 9
      OB_Y(triangle%,i_triangle%+x%)=OB_Y(triangle%,i_triangle%+x%)+48
      OB_H(triangle%,i_triangle%+x%)=OB_H(triangle%,i_triangle%+x%)+16
    NEXT x%
    '
    FOR x%=10 TO 14
      OB_Y(triangle%,i_triangle%+x%)=OB_Y(triangle%,i_triangle%+x%)+64
      OB_H(triangle%,i_triangle%+x%)=OB_H(triangle%,i_triangle%+x%)+16
    NEXT x%
    '
  ENDIF
  '
  y1%=OB_Y(cross%,i_cross%)
  y2%=OB_Y(cross%,i_cross%+3)
  IF y2%-y1%<>32 THEN
    OB_H(cross%,0)=OB_H(cross%,0)+144
    '
    FOR x%=0 TO 2
      OB_H(cross%,i_cross%+x%)=OB_H(cross%,i_cross%+x%)+16
    NEXT x%
    '
    FOR x%=3 TO 5
      OB_Y(cross%,i_cross%+x%)=OB_Y(cross%,i_cross%+x%)+16
      OB_H(cross%,i_cross%+x%)=OB_H(cross%,i_cross%+x%)+16
    NEXT x%
    '
    FOR x%=6 TO 8
      OB_Y(cross%,i_cross%+x%)=OB_Y(cross%,i_cross%+x%)+32
      OB_H(cross%,i_cross%+x%)=OB_H(cross%,i_cross%+x%)+16
    NEXT x%
    '
    FOR x%=9 TO 17
      OB_Y(cross%,i_cross%+x%)=OB_Y(cross%,i_cross%+x%)+48
      OB_H(cross%,i_cross%+x%)=OB_H(cross%,i_cross%+x%)+16
    NEXT x%
    '
    FOR x%=18 TO 26
      OB_Y(cross%,i_cross%+x%)=OB_Y(cross%,i_cross%+x%)+64
      OB_H(cross%,i_cross%+x%)=OB_H(cross%,i_cross%+x%)+16
    NEXT x%
    '
    FOR x%=27 TO 35
      OB_Y(cross%,i_cross%+x%)=OB_Y(cross%,i_cross%+x%)+80
      OB_H(cross%,i_cross%+x%)=OB_H(cross%,i_cross%+x%)+16
    NEXT x%
    '
    FOR x%=36 TO 38
      OB_Y(cross%,i_cross%+x%)=OB_Y(cross%,i_cross%+x%)+96
      OB_H(cross%,i_cross%+x%)=OB_H(cross%,i_cross%+x%)+16
    NEXT x%
    '
    FOR x%=39 TO 41
      OB_Y(cross%,i_cross%+x%)=OB_Y(cross%,i_cross%+x%)+112
      OB_H(cross%,i_cross%+x%)=OB_H(cross%,i_cross%+x%)+16
    NEXT x%
    '
    FOR x%=42 TO 44
      OB_Y(cross%,i_cross%+x%)=OB_Y(cross%,i_cross%+x%)+128
      OB_H(cross%,i_cross%+x%)=OB_H(cross%,i_cross%+x%)+16
    NEXT x%
    '
  ENDIF
  '
  ' GET SIZE OF FORM
  ~FORM_CENTER(triangle%,triangle_x%,triangle_y%,triangle_w%,triangle_h%)
  ~FORM_CENTER(cross%,cross_x%,cross_y%,cross_w%,cross_h%)
  '
  FOR set%=0 TO 14
    OB_STATE(triangle%,i_triangle%+set%)=BSET(OB_STATE(triangle%,i_triangle%+set%),0)
  NEXT set%
  FOR set%=0 TO 44
    OB_STATE(cross%,i_cross%+set%)=BSET(OB_STATE(cross%,i_cross%+set%),0)
  NEXT set%
  '
  CHAR{{OB_SPEC(triangle%,t_triangle%)}}="   Select peg to remove...   "
  CHAR{{OB_SPEC(cross%,t_cross%)}}="   Select peg to remove...   "
  '
  IF mint%=0 AND acc%=0 THEN
    ~MENU_BAR(menu%,1)
    '
  ENDIF
  '
RETURN
'
> PROCEDURE window_setup
  '
  ' CREATE WINDOW WITH TITLE, MOVE, AND CLOSE BOX
  old_wx%=window_wx%
  old_wy%=window_wy%
  IF board%=0 THEN
    IF triangle_h%>max_height% THEN
      window_type%=&X100001011
    ELSE
      window_type%=&X1011
    ENDIF
  ELSE
    IF cross_h%>max_height% THEN
      window_type%=&X100001011
    ELSE
      window_type%=&X1011
    ENDIF
  ENDIF
  window%=WIND_CREATE(window_type%,window_mwx%,window_mwy%,window_mww%,window_mwh%)
  '
  ' SET TITLE
  CHAR{window_title%}="HI-Q"
  flag%=WIND_SET(window%,2,CARD(SWAP(window_title%)),CARD(window_title%),0,0)
  '
  IF board%=0 THEN
    flag%=WIND_CALC(0,window_type%,triangle_x%,triangle_y%,triangle_w%,triangle_h%,d%,d%,window_ww%,window_wh%)
    IF triangle_h%>max_height% THEN
      window_wh%=window_mwh%
    ENDIF
  ELSE
    flag%=WIND_CALC(0,window_type%,cross_x%,cross_y%,cross_w%,cross_h%,d%,d%,window_ww%,window_wh%)
    IF cross_h%>max_height% THEN
      window_wh%=window_mwh%
    ENDIF
  ENDIF
  window_wx%=old_wx%
  window_wy%=old_wy%
  flag%=WIND_OPEN(window%,window_wx%,window_wy%,window_ww%,window_wh%)
  flag%=WIND_GET(window%,4,window_iwx%,window_iwy%,window_iww%,window_iwh%)
  IF board%=0 THEN
    OB_X(triangle%,0)=window_iwx%
    OB_Y(triangle%,0)=window_iwy%
    IF triangle_h%>window_iwh% THEN
      @size_slider
    ENDIF
  ELSE
    OB_X(cross%,0)=window_iwx%
    OB_Y(cross%,0)=window_iwy%
    IF cross_h%>window_iwh% THEN
      @size_slider
    ENDIF
  ENDIF
  '
RETURN
'
> PROCEDURE check_event
  '
  IF c_type% AND &X10 THEN
    '
    ' MOUSE EVENT
    @button
    '
  ENDIF
  '
  ' MENU/WINDOW EVENT
  IF c_type% AND &X10000 THEN
    '
    ' TYPE OF EVENT
    command%=buffer&(0)
    IF command%=10 THEN
      '
      ' MENU ITEM
      @the_menu
      '
    ELSE
      '
      ' WINDOW EVENT
      @a_window
      '
    ENDIF
    '
  ENDIF
  '
RETURN
'
> PROCEDURE the_menu
  '
  ' WHICH MENU TITLE ?
  tit%=buffer&(3)
  '
  ' MAKE MENU TITLE NORMAL AGAIN
  ~MENU_TNORMAL(menu%,tit%,1)
  '
  ' WHICH MENU ITEM WAS SELECTED
  item%=buffer&(4)
  '
  SELECT item%
    '
  CASE m_about%
    ALERT 0," |HI-Q  |Freeware  |By Phillip O'Neal  ",0," OK ",d%
    '
  CASE m_quit% ! QUIT
    ~WIND_CLOSE(window%)
    ~WIND_DELETE(window%)
    @prg_exit
    '
  ENDSELECT
  '
RETURN
'
> PROCEDURE button
  '
  window_over%=WIND_FIND(mx%,my%)
  IF window%=window_over% THEN
    '
    IF board%=0 THEN
      object%=OBJC_FIND(triangle%,0,2,mx%,my%)
      ' DID MOUSE CLICK ON A DESKTOP BUTTON ?
      '
      SELECT object%
      CASE 0,t_triangle%
        '
      CASE b_triangle_reset%
        @main_select
        FOR set%=0 TO 14
          OB_STATE(triangle%,i_triangle%+set%)=BSET(OB_STATE(triangle%,i_triangle%+set%),0)
        NEXT set%
        IF jump_from%>0 THEN
          OB_STATE(triangle%,jump_from%+i_cross%-1)=BCLR(OB_STATE(triangle%,jump_from%+i_cross%-1),3)
        ENDIF
        won%=0
        first%=0
        jump_from%=0
        CHAR{{OB_SPEC(triangle%,t_triangle%)}}="   Select peg to remove...   "
        object%=0
        @update_display
        '
      CASE b_triangle_cross%
        @main_select
        ~WIND_CLOSE(window%)
        ~WIND_DELETE(window%)
        board%=1
        @window_setup
        OB_X(cross%,0)=window_iwx%
        OB_Y(cross%,0)=window_iwy%
        IF jump_from%>0 THEN
          OB_STATE(triangle%,jump_from%+i_cross%-1)=BCLR(OB_STATE(triangle%,jump_from%+i_cross%-1),3)
        ENDIF
        won%=0
        first%=0
        jump_from%=0
        FOR set%=0 TO 44
          OB_STATE(cross%,i_cross%+set%)=BSET(OB_STATE(cross%,i_cross%+set%),0)
        NEXT set%
        CHAR{{OB_SPEC(cross%,t_cross%)}}="   Select peg to remove...   "
        '
      DEFAULT
        SELECT jump_from%
        CASE 0
          @remove_first
        CASE -1
          @select_peg
        DEFAULT
          @check_jump
          '
        ENDSELECT
        '
      ENDSELECT
      '
    ELSE
      object%=OBJC_FIND(cross%,0,2,mx%,my%)
      ' DID MOUSE CLICK ON A DESKTOP BUTTON ?
      '
      SELECT object%
      CASE 0,t_cross%
        '
      CASE b_cross_reset%
        @main_select
        FOR set%=0 TO 44
          OB_STATE(cross%,i_cross%+set%)=BSET(OB_STATE(cross%,i_cross%+set%),0)
        NEXT set%
        IF jump_from%>0 THEN
          OB_STATE(cross%,jump_from%+i_cross%-1)=BCLR(OB_STATE(cross%,jump_from%+i_cross%-1),3)
        ENDIF
        won%=0
        first%=0
        jump_from%=0
        CHAR{{OB_SPEC(cross%,t_cross%)}}="   Select peg to remove...   "
        object%=0
        @update_display
        '
      CASE b_cross_triangle%
        @main_select
        ~WIND_CLOSE(window%)
        ~WIND_DELETE(window%)
        board%=0
        @window_setup
        OB_X(triangle%,0)=window_iwx%
        OB_Y(triangle%,0)=window_iwy%
        IF jump_from%>0 THEN
          OB_STATE(cross%,jump_from%+i_cross%-1)=BCLR(OB_STATE(cross%,jump_from%+i_cross%-1),3)
        ENDIF
        won%=0
        first%=0
        jump_from%=0
        CHAR{{OB_SPEC(triangle%,t_triangle%)}}="   Select peg to remove...   "
        FOR set%=0 TO 14
          OB_STATE(triangle%,i_triangle%+set%)=BSET(OB_STATE(triangle%,i_triangle%+set%),0)
        NEXT set%
        object%=0
        @update_display
        '
      DEFAULT
        '
        SELECT jump_from%
        CASE 0
          @remove_first
        CASE -1
          @select_peg
        DEFAULT
          @check_jump
          '
        ENDSELECT
        '
      ENDSELECT
      '
    ENDIF
    '
    IF won%=1 THEN
      IF first%=last% THEN
        ALERT 0," |You won,  |you must be a genius.  | ",0," OK ",d%
      ELSE
        ALERT 0,"You won, your pretty smart.  |You could do better if the  |last peg was in the empty  |hole you started with. ",0," OK ",d%
      ENDIF
      won%=0
      first%=0
    ENDIF
    '
  ENDIF
  '
RETURN
'
> PROCEDURE a_window
  '
  ' HANDLE OF WINDOW THAT TRIGGERED EVENT
  win%=buffer&(3)
  '
  ' BE SURE IT WAS OUR WINDOW
  IF win%=window% THEN
    SELECT command%
      '
      ' WIND UPDATE
    CASE 20
      @repair
      '
      ' WINDOW CLICKED ON
    CASE 21
      ' WINDOW SET TO TOP
      flag%=WIND_SET(window%,10,0,0,0,0)
      DEFMOUSE 0
      '
      ' CLOSE WINDOW
    CASE 22
      flag%=WIND_CLOSE(window%)
      flag%=WIND_DELETE(window%)
      IF acc%=1 THEN
        done%=1
      ELSE
        @prg_exit
      ENDIF
      '
      ' WINDOW MOVED
    CASE 24,26
      @event_slider
      '
    CASE 28
      window_wx%=buffer&(4)
      window_wy%=buffer&(5)
      flag%=WIND_SET(window%,5,window_wx%,window_wy%,window_ww%,window_wh%)
      flag%=WIND_GET(window%,4,window_iwx%,window_iwy%,window_iww%,window_iwh%)
      '
      ' SET FORM POS TO WINDOW POS
      IF board%=0 THEN
        OB_X(triangle%,0)=window_iwx%
        OB_Y(triangle%,0)=window_iwy%-view%
      ELSE
        OB_X(cross%,0)=window_iwx%
        OB_Y(cross%,0)=window_iwy%-view%
      ENDIF
      '
    ENDSELECT
    '
  ENDIF
  '
RETURN
'
> PROCEDURE event_slider
  '
  SELECT command%
  CASE 24
    slider_event%=buffer&(4)
    SELECT slider_event%
    CASE 0 ! 'ABOVE SLIDER'
      '
      view%=view%-window_iwh%
      IF view%<0 THEN
        view%=0
      ENDIF
      @fix_slider
      '
    CASE 1 ! 'BELOW SLIDER'
      '
      view%=view%+window_iwh%
      IF view%>max_slide% THEN
        view%=max_slide%
      ENDIF
      @fix_slider
      '
    ENDSELECT
  CASE 26 ! 'SLIDER BOX'
    slider_position=buffer&(4)
    view%=(slider_position/1000)*max_slide%
    @fix_slider
    '
  ENDSELECT
  '
RETURN
'
> PROCEDURE fix_slider
  '
  slider_position=(view%/max_slide%)*1000
  flag%=WIND_SET(window%,9,slider_position,0,0,0)
  IF board%=0 THEN
    OB_Y(triangle%,0)=window_iwy%-view%
  ELSE
    OB_Y(cross%,0)=window_iwy%-view%
  ENDIF
  object%=0
  @update_display
  '
RETURN
'
> PROCEDURE size_slider
  '
  IF board%=0 THEN
    max_slide%=triangle_h%-(window_iwh%+1)
    slider_size=(window_iwh%/triangle_h%)*1000
  ELSE
    max_slide%=cross_h%-(window_iwh%+1)
    slider_size=(window_iwh%/cross_h%)*1000
  ENDIF
  view%=0
  slider_position=0
  '
  flag%=WIND_SET(window%,9,slider_position,0,0,0)
  flag%=WIND_SET(window%,16,slider_size,0,0,0)
  '
RETURN
'
> PROCEDURE remove_first
  '
  IF board%=0 THEN
    test%=BTST(OB_STATE(triangle%,object%),0)
    IF test% THEN
      first%=object%
      OB_STATE(triangle%,object%)=BCLR(OB_STATE(triangle%,object%),0)
      @update_display
      CHAR{{OB_SPEC(triangle%,t_triangle%)}}="    Select peg to move...    "
      object%=t_triangle%
      @update_display
      jump_from%=-1
    ENDIF
  ELSE
    test%=BTST(OB_STATE(cross%,object%),0)
    ' MAKE BUTTON SELECTED / DRAW IT
    IF test% THEN
      first%=object%
      OB_STATE(cross%,object%)=BCLR(OB_STATE(cross%,object%),0)
      @update_display
      CHAR{{OB_SPEC(cross%,t_cross%)}}="    Select peg to move...    "
      object%=t_cross%
      @update_display
      jump_from%=-1
    ENDIF
  ENDIF
  DO
  LOOP UNTIL MOUSEK=0
  '
RETURN
'
> PROCEDURE select_peg
  '
  IF board%=0 THEN
    test%=BTST(OB_STATE(triangle%,object%),0)
    IF test% THEN
      OB_STATE(triangle%,object%)=BSET(OB_STATE(triangle%,object%),3)
      @update_display
      jump_from%=object%+1-i_cross%
      CHAR{{OB_SPEC(triangle%,t_triangle%)}}="Select hole to move in..."
      object%=t_triangle%
      @update_display
    ENDIF
  ELSE
    test%=BTST(OB_STATE(cross%,object%),0)
    ' MAKE BUTTON SELECTED / DRAW IT
    IF test% THEN
      OB_STATE(cross%,object%)=BSET(OB_STATE(cross%,object%),3)
      @update_display
      jump_from%=object%+1-i_cross%
      CHAR{{OB_SPEC(cross%,t_cross%)}}="Select hole to move in..."
      object%=t_cross%
      @update_display
    ENDIF
  ENDIF
  DO
  LOOP UNTIL MOUSEK=0
  '
RETURN
'
> PROCEDURE check_jump
  jump_to%=object%+1-i_cross%
  last%=object%
  good_move%=0
  IF board%=0 THEN
    FOR try%=0 TO 3
      IF triangle%(jump_from%,try%,0)+triangle%(jump_from%,try%,1)>0 THEN
        IF triangle%(jump_from%,try%,0)=jump_to% THEN
          IF BTST(OB_STATE(triangle%,triangle%(jump_from%,try%,0)+i_cross%-1),0)=0
            IF BTST(OB_STATE(triangle%,triangle%(jump_from%,try%,1)+i_cross%-1),0)
              good_move%=try%+1
              '
            ENDIF
          ENDIF
        ENDIF
      ENDIF
      '
    NEXT try%
    '
  ELSE
    FOR try%=0 TO 3
      IF cross%(jump_from%,try%,0)=jump_to% THEN
        IF cross%(jump_from%,try%,0)+cross%(jump_from%,try%,1)>0 THEN
          IF BTST(OB_STATE(cross%,cross%(jump_from%,try%,0)+i_cross%-1),0)=0
            IF BTST(OB_STATE(cross%,cross%(jump_from%,try%,1)+i_cross%-1),0)
              good_move%=try%+1
              '
            ENDIF
          ENDIF
        ENDIF
      ENDIF
      '
    NEXT try%
    '
  ENDIF
  '
  IF good_move%>0 THEN
    IF board%=0 THEN
      object%=jump_from%+i_cross%-1
      OB_STATE(triangle%,object%)=BCLR(OB_STATE(triangle%,object%),0)
      OB_STATE(triangle%,object%)=BCLR(OB_STATE(triangle%,object%),3)
      @update_display
      object%=triangle%(jump_from%,good_move%-1,0)+i_cross%-1
      OB_STATE(triangle%,object%)=BSET(OB_STATE(triangle%,object%),0)
      @update_display
      object%=triangle%(jump_from%,good_move%-1,1)+i_cross%-1
      OB_STATE(triangle%,object%)=BCLR(OB_STATE(triangle%,object%),0)
      @update_display
      CHAR{{OB_SPEC(triangle%,t_triangle%)}}="    Select peg to move...    "
      object%=t_triangle%
      @update_display
      won%=0
      FOR check%=0 TO 14
        IF BTST(OB_STATE(triangle%,i_triangle%+check%),0) THEN
          INC won%
        ENDIF
      NEXT check%
      '
    ELSE
      object%=jump_from%+i_cross%-1
      OB_STATE(cross%,object%)=BCLR(OB_STATE(cross%,object%),0)
      OB_STATE(cross%,object%)=BCLR(OB_STATE(cross%,object%),3)
      @update_display
      object%=cross%(jump_from%,good_move%-1,0)+i_cross%-1
      OB_STATE(cross%,object%)=BSET(OB_STATE(cross%,object%),0)
      @update_display
      object%=cross%(jump_from%,good_move%-1,1)+i_cross%-1
      OB_STATE(cross%,object%)=BCLR(OB_STATE(cross%,object%),0)
      @update_display
      CHAR{{OB_SPEC(cross%,t_cross%)}}="    Select peg to move...    "
      object%=t_cross%
      @update_display
      won%=0
      FOR check%=0 TO 44
        IF BTST(OB_STATE(cross%,i_cross%+check%),0) THEN
          INC won%
        ENDIF
      NEXT check%
      '
    ENDIF
    '
  ELSE
    '
    IF board%=0 THEN
      object%=jump_from%+i_cross%-1
      OB_STATE(triangle%,object%)=BCLR(OB_STATE(triangle%,object%),3)
      @update_display
      CHAR{{OB_SPEC(triangle%,t_triangle%)}}="    Select peg to move...    "
      object%=t_triangle%
      @update_display
    ELSE
      object%=jump_from%+i_cross%-1
      OB_STATE(cross%,object%)=BCLR(OB_STATE(cross%,object%),3)
      @update_display
      CHAR{{OB_SPEC(cross%,t_cross%)}}="    Select peg to move...    "
      object%=t_cross%
      @update_display
    ENDIF
  ENDIF
  '
  jump_from%=-1
  DO
  LOOP UNTIL MOUSEK=0
  '
RETURN
'
> PROCEDURE main_select
  '
  ' MAKE BUTTON SELECTED / DRAW IT
  IF board%=0 THEN
    OB_STATE(triangle%,object%)=BSET(OB_STATE(triangle%,object%),0)
  ELSE
    OB_STATE(cross%,object%)=BSET(OB_STATE(cross%,object%),0)
  ENDIF
  @update_display
  '
  DO
  LOOP UNTIL MOUSEK=0
  '
  ' MAKE BUTTON UNSELECTED / DRAW IT
  IF board%=0 THEN
    OB_STATE(triangle%,object%)=BCLR(OB_STATE(triangle%,object%),0)
  ELSE
    OB_STATE(cross%,object%)=BCLR(OB_STATE(cross%,object%),0)
  ENDIF
  @update_display
  '
RETURN
'
> PROCEDURE prg_exit
  '
  IF mint%=0 THEN
    ~MENU_BAR(menu%,0)
  ENDIF
  '
  ~RSRC_FREE()
  END
  '
RETURN
'
> PROCEDURE repair
  '
  ' TELL GEM WE ARE TAKING OVER SCREEN AND MOUSE
  er%=WIND_UPDATE(1)
  er%=WIND_UPDATE(3)
  '
  ' GET FIRST RECTANGLE FROM LIST
  er%=WIND_GET(window%,11,fx%,fy%,fx2%,fy2%)
  '
  ' GET DIRTY AREA
  fix_wx%=buffer&(4)
  fix_wy%=buffer&(5)
  fix_ww%=buffer&(6)
  fix_wh%=buffer&(7)
  '
  ' CALC AREA THAT OVERLAPS DIRTY AREA
  fix_flag%=RC_INTERSECT(fix_wx%,fix_wy%,fix_ww%,fix_wh%,fx%,fy%,fx2%,fy2%)
  '
  IF fix_flag% THEN
    IF board%=0 THEN
      ~OBJC_DRAW(triangle%,0,1,fx%,fy%,fx2%,fy2%)
    ELSE
      ~OBJC_DRAW(cross%,0,1,fx%,fy%,fx2%,fy2%)
    ENDIF
    '
  ENDIF
  '
  fix_done%=0
  '
  ' SAME AS ABOVE FOR THE OTHER RECTANGLES FROM LIST
  DO
    er%=WIND_GET(window%,12,fx%,fy%,fx2%,fy2%)
    '
    IF fx2%+fy2%=0 THEN
      fix_done%=1
    ELSE
      fix_wx%=buffer&(4)
      fix_wy%=buffer&(5)
      fix_ww%=buffer&(6)
      fix_wh%=buffer&(7)
      fix_flag%=RC_INTERSECT(fix_wx%,fix_wy%,fix_ww%,fix_wh%,fx%,fy%,fx2%,fy2%)
      IF fix_flag% THEN
        IF board%=0 THEN
          ~OBJC_DRAW(triangle%,0,1,fx%,fy%,fx2%,fy2%)
        ELSE
          ~OBJC_DRAW(cross%,0,1,fx%,fy%,fx2%,fy2%)
        ENDIF
      ENDIF
    ENDIF
    '
  LOOP UNTIL fix_done%=1
  '
  er%=WIND_UPDATE(2)
  er%=WIND_UPDATE(0)                      !  DONE!
  '
RETURN
'
> PROCEDURE update_display
  '
  IF board%=0 THEN
    ~OBJC_OFFSET(triangle%,object%,offset_x%,offset_y%)
    offset_w%=OB_W(triangle%,object%)
    offset_h%=OB_H(triangle%,object%)
  ELSE
    ~OBJC_OFFSET(cross%,object%,offset_x%,offset_y%)
    offset_w%=OB_W(cross%,object%)
    offset_h%=OB_H(cross%,object%)
  ENDIF
  '
  my_buffer&(0)=20
  my_buffer&(3)=window%
  my_buffer&(4)=offset_x%
  my_buffer&(5)=offset_y%
  my_buffer&(6)=offset_w%
  my_buffer&(7)=offset_h%
  ~APPL_WRITE(ap_id&,16,my_buffer%)
  '
  c_type%=EVNT_MULTI(&X10000,1,1,1,0,0,0,0,0,0,0,0,0,0,buffer%,10,mx%,my%,b%,key_state%,key%,d%)
  IF c_type% AND &X10000 THEN
    command%=buffer&(0)
    IF command%=20 THEN
      @a_window
    ENDIF
  ENDIF
  '
RETURN
'
DATA 0,1,2,3,4,5,6,7
'
cross_data:
DATA 3,2,7,4,0,0,0,0
DATA 8,5,0,0,0,0,0,0
DATA 1,2,9,6,0,0,0,0
DATA 6,5,13,7,0,0,0,0
DATA 14,8,0,0,0,0,0,0
DATA 4,5,15,9,0,0,0,0
DATA 1,4,9,8,22,13,0,0
DATA 2,5,23,14,0,0,0,0
DATA 3,6,7,8,24,15,0,0
DATA 12,11,28,19,0,0,0,0
DATA 13,12,29,20,0,0,0,0
DATA 10,11,14,13,30,21,0,0
DATA 4,7,11,12,15,14,31,22
DATA 5,8,12,13,16,15,32,23
DATA 6,9,13,14,17,16,33,24
DATA 14,15,18,17,34,25,0,0
DATA 15,16,35,26,0,0,0,0
DATA 16,17,36,27,0,0,0,0
DATA 21,20,0,0,0,0,0,0
DATA 22,21,0,0,0,0,0,0
DATA 19,20,23,22,0,0,0,0
DATA 7,13,20,21,24,23,37,31
DATA 8,14,21,22,25,24,38,32
DATA 9,15,22,23,26,25,39,33
DATA 23,24,27,26,0,0,0,0
DATA 24,25,0,0,0,0,0,0
DATA 25,26,0,0,0,0,0,0
DATA 10,19,30,29,0,0,0,0
DATA 11,20,31,30,0,0,0,0
DATA 12,21,28,29,32,31,0,0
DATA 13,22,29,30,33,32,40,37
DATA 14,23,30,31,34,33,41,38
DATA 15,24,31,32,35,34,42,39
DATA 16,25,32,33,36,35,0,0
DATA 17,26,33,34,0,0,0,0
DATA 18,27,34,35,0,0,0,0
DATA 22,31,39,38,43,40,0,0
DATA 23,32,44,41,0,0,0,0
DATA 24,33,37,38,45,42,0,0
DATA 31,37,42,41,0,0,0,0
DATA 32,38,0,0,0,0,0,0
DATA 33,39,40,41,0,0,0,0
DATA 37,40,45,44,0,0,0,0
DATA 38,41,0,0,0,0,0,0
DATA 39,42,43,44,0,0,0,0
'
triangle_data:
DATA 4,2,6,3,0,0,0,0
DATA 7,4,9,5,0,0,0,0
DATA 8,5,10,6,0,0,0,0
DATA 1,2,6,5,11,7,13,8
DATA 12,8,14,9,0,0,0,0
DATA 1,3,4,5,13,9,15,10
DATA 2,4,9,8,0,0,0,0
DATA 3,5,10,9,0,0,0,0
DATA 2,5,7,8,0,0,0,0
DATA 3,6,8,9,0,0,0,0
DATA 4,7,13,12,0,0,0,0
DATA 5,8,14,13,0,0,0,0
DATA 4,8,6,9,11,12,15,14
DATA 5,9,12,13,0,0,0,0
DATA 6,10,13,14,0,0,0,0
