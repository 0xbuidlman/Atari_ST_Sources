' RESERVE 8000000
$M8000000
@init_variables
DO
  @event ! JUST WAIT FOR THE USER TO DO SOMETHING
LOOP
> PROCEDURE event
  '
  event_type&=EVNT_MULTI(&X110011,1,1,1,0,0,0,0,0,0,0,0,0,0,buffer%,1000,x_mouse&,y_mouse&,button_state&,key_state&,key_press&,num_clicks&)
  @check_event
  '
RETURN
> PROCEDURE event_update
  '
  event_type&=EVNT_MULTI(&X110000,1,1,1,0,0,0,0,0,0,0,0,0,0,buffer%,1000,x_mouse&,y_mouse&,button_state&,key_state&,key_press&,num_clicks&)
  IF buffer&(0)=20 THEN
    @event_window
  ENDIF
  '
RETURN
> PROCEDURE init_variables
  '
  my_handle&=V~H  ! GET VDI HANDLE OF PROGRAMS WORKSTATION
  handle&=APPL_INIT()
  @check_jar
  '
  IF id$<>"_SPD"
    END
  ENDIF
  '
  OPTION BASE 0
  DIM font_name$(100),face%(100)
  DIM buffer&(7)  ! EVENT BUFFER FOR EVENT_MULTI CALL
  buffer%=VARPTR(buffer&(0))
  DIM my_buffer&(7)
  my_buffer%=VARPTR(my_buffer&(0))
  '
  max_object%=512
  max_point_int%=32
  max_point_pnt%=512
  DIM object%(3,max_object%+2),points_in&(max_object%,max_point_pnt%*2+2),integer_in&(max_object%,max_point_int%+2)
  DIM x&(max_point_pnt%*2+2),y&(max_point_pnt%*2+2)
  object%(0,0)=-1
  object%(0,max_object%+1)=-1
  '
  screen_width%=WORK_OUT(0)
  screen_height%=WORK_OUT(1)
  screen_colors%=WORK_OUT(13)
  '
  CONTRL(0)=102  ! 'VQ_EXTND' - GET EXTRA INFO ABOUT WORKSTATION
  CONTRL(1)=0
  CONTRL(3)=1
  CONTRL(6)=handle&
  INTIN(0)=1
  VDISYS
  screen_bits%=INTOUT(4)  ! GET # OF SCREEN PLANES
  '
  DEFFILL 0,2,8  ! COLOR 0 SOLID FILL PATTERN
  '
  current_drive%=GEMDOS(25)            ! DRIVE PROGRAM WAS RAN FROM
  my_path$=DIR$(current_drive%+1)+"\"  ! PATH     "     "   "   "
  IF MID$(my_path$,1,1)="\" THEN
    my_path$=CHR$(current_drive%+65)+":"+my_path$
  ENDIF
  rsc$=my_path$+"BANNER.RSC"
  '
  DIM source_mfdb%(8),destination_mfdb%(8),parameters%(8)
  '
  FOR zero%=4 TO 8
    source_mfdb%(zero%)=0
    destination_mfdb%(zero%)=0
  NEXT zero%
  '
  source_mfdb%(5)=screen_bits%
  destination_mfdb%(5)=screen_bits%
  parameters%(8)=3 ! REPLACE MODE
  '
  INLINE banner%,40
  banner$=""
  CHAR{banner%}=banner$
  fonts%=VST_LOAD_FONTS(0)
  FOR x%=1 TO MIN(fonts%+1,100)
    face%(x%)=VQT_NAME(x%,font_name$(x%))
  NEXT x%
  outline!=FALSE
  IF fonts%>1 THEN
    font%=2
  ELSE
    font%=1
  ENDIF
  points%=24
  driver%=21
  gdos_text_color%=1
  gem_buffer%=0
  @font_set
  '
  CONTRL(0)=39 ! VST_ALIGNMENT
  CONTRL(1)=0
  CONTRL(3)=2
  CONTRL(6)=my_handle&
  INTIN(0)=0
  INTIN(1)=5
  VDISYS
  '
  preview_open%=0
  @rsc_setup
  @window_setup
  DEFMOUSE 0  ! BE SURE MOUSE SHAPE IS A POINTER
  '
RETURN
> PROCEDURE window_setup
  '
  ~MENU_BAR(menu%,1)           ! TURN MENU ON
  INLINE window_title%,8
  INLINE preview_title%,8
  flag%=WIND_GET(0,4,mwx%,mwy%,mww%,mwh%)
  '
  window_x%=mwx%
  window_y%=mwy%
  '
  ~WIND_CALC(0,&X1011,window_x%,window_y%,main_w%,main_h%,d%,d%,window_w%,window_h%)
  '
  window_handle%=WIND_CREATE(&X1011,window_x%,window_y%,mww%,mwh%)
  '
  window_title$="Banner"+CHR$(0)
  CHAR{window_title%}=window_title$
  flag%=WIND_SET(window_handle%,2,CARD(SWAP(window_title%)),CARD(window_title%),0,0)
  '
  ~WIND_OPEN(window_handle%,window_x%,window_y%,window_w%,window_h%)
  ~WIND_GET(window_handle%,4,window_ix%,window_iy%,window_iw%,window_ih%)
  '
  OB_X(main%,0)=window_ix%
  OB_Y(main%,0)=window_iy%
  '
  preview_x%=mwx%
  preview_y%=mwy%
  preview_h%=mwh%
  preview_w%=mww%
  preview_handle%=WIND_CREATE(&X1011,preview_x%,preview_y%,preview_w%,preview_h%)
  '
  preview_title$="Preview"+CHR$(0)
  CHAR{preview_title%}=preview_title$
  flag%=WIND_SET(preview_handle%,2,CARD(SWAP(preview_title%)),CARD(preview_title%),0,0)
  '
  preview_y%=window_y%+window_h%
  '
RETURN
> PROCEDURE preview_open
  ~WIND_OPEN(preview_handle%,preview_x%,preview_y%,preview_w%,preview_h%)
  preview_open%=1
  @set_preview_size
  '
RETURN
> PROCEDURE set_preview_size
  '
  old_w%=preview_iw%
  old_h%=preview_ih%
  '
  preview_w%=screen_width%-preview_x%
  preview_h%=screen_height%-preview_y%
  '
  ~WIND_CALC(1,&X1011,preview_x%,preview_y%,preview_w%,preview_h%,d%,d%,preview_iw%,preview_ih%)
  preview_size%=LEN(banner$)
  IF preview_size%>0 THEN
    '
    FOR try%=512 TO 4 STEP -2
      points%=try%
      @font_set
      temp$=" "+banner$+" "
      ~VQT_EXTENT(temp$,x1%,y1%,x2%,y2%,x3%,y3%,x4%,y4%)
      IF x3%<=preview_iw% AND y3%<=preview_ih% THEN
        try%=4
      ENDIF
    NEXT try%
    '
    preview_iw%=x3%
    preview_ih%=y3%
    ~WIND_CALC(0,&X1011,preview_x%,preview_y%,preview_iw%,preview_ih%,d%,d%,preview_w%,preview_h%)
  ELSE
    preview_w%=192
    preview_h%=128
  ENDIF
  '
  ~WIND_SET(preview_handle%,5,preview_x%,preview_y%,preview_w%,preview_h%)
  ~WIND_GET(preview_handle%,4,preview_ix%,preview_iy%,preview_iw%,preview_ih%)
  '
  IF old_w%<>preview_iw% OR old_h%<>preview_ih% THEN
    IF gem_raster%>0 THEN
      ~GEMDOS(73,L:gem_raster%)
    ENDIF
    gem_raster%=0
  ENDIF
  '
RETURN
> PROCEDURE check_event
  '
  IF event_type& AND &X1 THEN        ! KEY
    @event_keypress
    '
  ENDIF
  '
  IF event_type& AND &X10 THEN      ! BUTTON
    @event_button
    '
  ENDIF
  '
  IF event_type& AND &X10000 THEN   ! MENU OR WINDOW EVENT
    '
    command%=buffer&(0)       ! TYPE OF EVENT
    '
    IF command%=10 THEN             ! MENU ITEM
      @event_menu
    ELSE          ! WINDOW EVENT
      @event_window
    ENDIF
    '
  ENDIF
  '
RETURN
> PROCEDURE event_menu
  '
  tit%=buffer&(3)   ! WHICH MENU TITLE ?
  ~MENU_TNORMAL(menu%,tit%,1)  ! MAKE MENU TITLE NORMAL AGAIN
  item%=buffer&(4)  ! WHICH MENU ITEM WAS SELECTED
  '
  SELECT item%
  CASE m_about%
    ALERT 0," |GDOS Banner Maker  |½1995 by Phillip O'Neal  | ",1,"OK",d%
    '
  CASE m_print%
    '
  CASE m_quit%
    trying_to_quit
    '
  ENDSELECT
  '
RETURN
> PROCEDURE event_window
  '
  current_window%=buffer&(3) ! HANDLE OF WINDOW
  '
  SELECT command%
    '
  CASE 20     ! WIND UPDATE
    @repair
    '
  CASE 21     ! WINDOW CLICKED ON
    flag%=WIND_SET(current_window%,10,0,0,0,0) ! WINDOW SET TO TOP
    DEFMOUSE 0
    '
  CASE 22 ! CLOSE WINDOW
    IF current_window%=window_handle% THEN
      @trying_to_quit
    ENDIF
    IF current_window%=preview_handle% THEN
      ~WIND_CLOSE(preview_handle%)
      preview_open%=0
    ENDIF
    '
  CASE 28 ! WINDOW MOVED
    '
    IF current_window%=window_handle% THEN
      window_x%=buffer&(4) ! GET NEW WINDOW POSITION/SIZE
      window_y%=buffer&(5)
      '
      flag%=WIND_SET(window_handle%,5,window_x%,window_y%,window_w%,window_h%)     ! SIZE WINDOW
      flag%=WIND_GET(window_handle%,4,window_ix%,window_iy%,window_iw%,window_ih%) ! GET INSIDE SIZE
      '
      OB_X(main%,0)=window_ix%
      OB_Y(main%,0)=window_iy%
      '
    ENDIF
    '
    IF current_window%=preview_handle% THEN
      preview_x%=buffer&(4) ! GET NEW WINDOW POSITION/SIZE
      preview_y%=buffer&(5)
      '
      IF preview_x%+preview_w%>screen_width% THEN
        preview_x%=screen_width%-preview_w%
      ENDIF
      IF preview_y%+preview_h%>screen_height% THEN
        preview_y%=screen_height%-preview_h%
      ENDIF
      '
      flag%=WIND_SET(preview_handle%,5,preview_x%,preview_y%,preview_w%,preview_h%)     ! SIZE WINDOW
      flag%=WIND_GET(preview_handle%,4,preview_ix%,preview_iy%,preview_iw%,preview_ih%) ! GET INSIDE SIZE
      '
      vek_x%=preview_ix%+preview_iw%*gem_x
      vek_y%=preview_iy%+preview_ih%*gem_y
      '
    ENDIF
    '
  ENDSELECT
  '
RETURN
> PROCEDURE event_keypress
  '
  code&=SHR(key_press& AND &HFF00,8)
  ' UPPER BYTE OF WORD CONTAINS SCAN CODE
  '
  SELECT code&
    '
  CASE 16 ! 'Q'UIT
    dialog_button%=b_quit%
    @process_button
    '
  CASE 25 ! 'P'RINT
    dialog_button%=b_print%
    @process_button
    '
  ENDSELECT
  '
RETURN
> PROCEDURE event_button
  '
  ~WIND_GET(0,10,top%,d%,d%,d%) ! WINDOW SET TO TOP
  wind_found%=WIND_FIND(x_mouse&,y_mouse&) ! WHICH WINDOW UNDER MOUSE
  '
  IF wind_found%=window_handle% AND top%=window_handle% THEN
    dialog_button%=OBJC_FIND(main%,0,4,x_mouse&,y_mouse&)
    DO
    LOOP UNTIL MOUSEK=0
    @process_button
    '
  ENDIF
  '
  IF wind_found%=preview_handle% AND top%=preview_handle% THEN
    '
    tx%=vek_x%
    ty%=vek_y%
    tw%=vek_w%
    th%=vek_h%
    '
    mx%=x_mouse&
    my%=y_mouse&
    '
    flag%=RC_INTERSECT(tx%,ty%,tw%,th%,mx%,my%,mx%,my%)
    IF flag% THEN
      '
      IF x_mouse&>vek_x%+vek_w%*0.95 AND y_mouse&>vek_y%+vek_h%*0.95 THEN
        IF MOUSEK=1 THEN
          ~GRAF_RUBBERBOX(vek_x%,vek_y%,10,10,temp_w%,temp_h%)
          IF vek_x%+temp_w%<=preview_ix%+preview_iw% THEN
            gem_w=temp_w%/preview_iw%
            IF gem_raster%>0 THEN
              ~GEMDOS(73,L:gem_raster%)
            ENDIF
            gem_raster%=0
          ENDIF
          IF vek_y%+temp_h%<=preview_iy%+preview_ih% THEN
            gem_h=temp_h%/preview_ih%
            IF gem_raster%>0 THEN
              ~GEMDOS(73,L:gem_raster%)
            ENDIF
            gem_raster%=0
          ENDIF
          @update_preview
        ENDIF
      ELSE
        IF x_mouse&<vek_x%+vek_w%*0.05 AND y_mouse&>vek_y%+vek_h%*0.95 THEN
          IF object_width%>object_height% THEN
            raito=object_width%/object_height%
            gem_h=vek_w%*raito/preview_ih%
          ELSE
            raito=object_height%/object_width%
            gem_w=vek_h%*raito/preview_iw%
          ENDIF
          IF gem_raster%>0 THEN
            ~GEMDOS(73,L:gem_raster%)
          ENDIF
          gem_raster%=0
          @update_preview
        ELSE
          IF MOUSEK=1 THEN
          ENDIF
          IF MOUSEK=1 THEN
            ~GRAF_DRAGBOX(vek_w%,vek_h%,vek_x%,vek_y%,preview_ix%,preview_iy%,preview_iw%,preview_ih%,temp_x%,temp_y%)
            gem_x=(temp_x%-preview_ix%)/preview_iw%
            gem_y=(temp_y%-preview_iy%)/preview_ih%
            vek_x%=preview_ix%+preview_iw%*gem_x
            vek_y%=preview_iy%+preview_ih%*gem_y
            @update_preview
          ENDIF
        ENDIF
      ENDIF
      '
    ENDIF
    '
  ENDIF
  '
RETURN
> PROCEDURE process_button
  SELECT dialog_button%
  CASE t_banner%
    @edit_text
    '
  CASE t_font%
    DO
    LOOP UNTIL MOUSEK=0
    @font_pick
    '
  CASE b_text_color%
    DO
    LOOP UNTIL MOUSEK=0
    @text_color_pick
    '
  CASE b_preview%
    @set_button
    IF preview_open%=0 THEN
      @preview_open
      flag%=WIND_SET(window_handle%,10,0,0,0,0) ! WINDOW SET TO TOP
    ENDIF
    @reset_button
    '
  CASE b_load%
    @set_button
    @gem_load
    @reset_button
    '
  CASE b_erase%
    @set_button
    IF object%(0,0)<>-1 THEN
      IF gem_raster%>0 THEN
        ~GEMDOS(73,L:gem_raster%)
      ENDIF
      gem_raster%=0
      object%(0,0)=-1
      @update_preview
    ENDIF
    @reset_button
    '
  CASE b_print%
    @set_button
    check_printer%=0
    DO
      IF OUT?(0) THEN
        @print
        check_printer%=1
      ELSE
        ALERT 0,"Sorry, but your printer is  |off-line. Please check the  |printer and I will try again.  | ",1,"OK|Cancel",button%
        IF button%=2 THEN
          check_printer%=1
        ENDIF
      ENDIF
    LOOP UNTIL check_printer%=1
    @reset_button
    '
  CASE b_outline%
    IF outline!=TRUE THEN
      outline!=FALSE
      @reset_button
    ELSE
      outline!=TRUE
      @set_button
    ENDIF
    IF preview_open% THEN
      @set_preview_size
      @update_preview
    ENDIF
    '
  CASE b_quit%
    @set_button
    @trying_to_quit
    @reset_button
    '
  ENDSELECT
  '
RETURN
> PROCEDURE reset_button
  IF BTST(OB_STATE(main%,dialog_button%),0) THEN
    OB_STATE(main%,dialog_button%)=BCLR(OB_STATE(main%,dialog_button%),0)
    update_main%=dialog_button%
    @update_main
  ENDIF
  '
RETURN
> PROCEDURE set_button
  IF BTST(OB_STATE(main%,dialog_button%),0)=0 THEN
    OB_STATE(main%,dialog_button%)=BSET(OB_STATE(main%,dialog_button%),0)
    update_main%=dialog_button%
    @update_main
  ENDIF
  '
RETURN
> PROCEDURE repair
  '
  ~WIND_UPDATE(1)      ! TELL GEM WE ARE TAKING OVER
  '
  '                    GET FIRST RECTANGLE
  ~WIND_GET(current_window%,11,fix_x%,fix_y%,fix_w%,fix_h%)
  '
  '
  fix_wx%=buffer&(4)
  fix_wy%=buffer&(5)
  fix_ww%=buffer&(6)
  fix_wh%=buffer&(7)
  '
  @do_repair
  '
  fix_done%=0
  '
  DO
    '                  GET NEXT RECTANGLE
    ~WIND_GET(current_window%,12,fix_x%,fix_y%,fix_w%,fix_h%)
    '
    @do_repair
    '
  LOOP UNTIL fix_done%=1
  '
  ~WIND_UPDATE(0)          ! DONE!
  '
RETURN
> PROCEDURE do_repair
  IF fix_w%+fix_h%=0 THEN   ! ANY MORE RECTANGLES ?
    fix_done%=1
  ELSE
    fix_flag%=RC_INTERSECT(fix_wx%,fix_wy%,fix_ww%,fix_wh%,fix_x%,fix_y%,fix_w%,fix_h%)
    IF fix_flag% THEN
      CLIP fix_x%,fix_y%,fix_w%,fix_h%
      IF current_window%=window_handle% THEN
        ~OBJC_DRAW(main%,0,3,fix_x%,fix_y%,fix_w%,fix_h%)
      ENDIF
      IF current_window%=preview_handle% THEN
        GRAPHMODE 1
        DEFFILL 0,2,8
        PBOX fix_x%,fix_y%,fix_x%+fix_w%-1,fix_y%+fix_h%-1
        IF object%(0,0)<>-1 THEN
          IF gem_raster%>0 THEN
            @gem_put
          ELSE
            @gem_get
          ENDIF
          DEFLINE 3,1,0,0
          DEFFILL 1
          BOUNDARY 1
          BOX vek_x%-2,vek_y%-2,vek_x%+vek_w%+1,vek_y%+vek_h%+1
          BOX vek_x%,vek_y%+vek_h%*0.95,vek_x%+vek_w%*0.05,vek_y%+vek_h%+1
          BOX vek_x%+vek_w%*0.95,vek_y%+vek_h%*0.95,vek_x%+vek_w%+1,vek_y%+vek_h%+1
        ENDIF
        IF banner$<>"" THEN
          DEFTEXT gdos_text_color%
          temp$=" "+banner$+" "
          GRAPHMODE 2
          TEXT preview_ix%,preview_iy%-preview_ih%*0.1,temp$
          GRAPHMODE 1
        ENDIF
      ENDIF
    ENDIF
  ENDIF
RETURN
> PROCEDURE update_main
  '
  ~OBJC_OFFSET(main%,update_main%,rx%,ry%)
  rw%=OB_W(main%,update_main%)
  rh%=OB_H(main%,update_main%)
  '
  my_buffer&(0)=20
  my_buffer&(3)=window_handle%
  my_buffer&(4)=rx%-2
  my_buffer&(5)=ry%-2
  my_buffer&(6)=rw%+4
  my_buffer&(7)=rh%+4
  ~APPL_WRITE(handle&,16,my_buffer%)
  @event_update
  '
RETURN
> PROCEDURE update_preview
  '
  my_buffer&(0)=20
  my_buffer&(3)=preview_handle%
  my_buffer&(4)=preview_ix%
  my_buffer&(5)=preview_iy%
  my_buffer&(6)=preview_iw%
  my_buffer&(7)=preview_ih%
  ~APPL_WRITE(handle&,16,my_buffer%)
  @event_update
  '
RETURN
> PROCEDURE gem_draw(page_width%,page_height%,xoff%,yoff%)
  '
  scalex=(page_width%/object_width%)*gem_w
  scaley=(page_height%/object_height%)*gem_h
  '
  offset_x%=page_width%*gem_x
  offset_y%=page_height%*gem_y
  '
  current_object%=0
  '
  DO WHILE object%(0,current_object%)<>-1
    '
    SELECT object%(0,current_object%)
    CASE 6 ! POLYLINE
      FOR in%=0 TO object%(2,current_object%)-1
        x&(in%)=xoff%+offset_x%+points_in&(current_object%,in%*2)*scalex
        y&(in%)=yoff%+offset_y%+points_in&(current_object%,in%*2+1)*scaley
      NEXT in%
      POLYLINE object%(2,current_object%),x&(),y&()
      '
    CASE 7 ! POLYMARKER
      FOR in%=0 TO object%(2,current_object%)-1
        x&(in%)=xoff%+offset_x%+points_in&(current_object%,in%*2)*scalex
        y&(in%)=yoff%+offset_y%+points_in&(current_object%,in%*2+1)*scaley
      NEXT in%
      POLYMARK object%(2,current_object%),x&(),y&()
      '
    CASE 9 ! FILL AREA
      FOR in%=0 TO object%(2,current_object%)-1
        x&(in%)=xoff%+offset_x%+points_in&(current_object%,in%*2)*scalex
        y&(in%)=yoff%+offset_y%+points_in&(current_object%,in%*2+1)*scaley
      NEXT in%
      POLYFILL object%(2,current_object%),x&(),y&()
      '
    CASE 11
      SELECT object%(1,current_object%)
      CASE 1 ! BAR
        x1%=xoff%+offset_x%+points_in&(current_object%,0)*scalex
        y1%=yoff%+offset_y%+points_in&(current_object%,1)*scaley
        x2%=xoff%+offset_x%+points_in&(current_object%,2)*scalex
        y2%=yoff%+offset_y%+points_in&(current_object%,3)*scaley
        PBOX x1%,y1%,x2%,y2%
      CASE 2 ! ARC
        a1%=integer_in&(current_object%,0)
        a2%=integer_in&(current_object%,1)
        x%=xoff%+offset_x%+points_in&(current_object%,0)*scalex
        y%=yoff%+offset_y%+points_in&(current_object%,1)*scaley
        rx%=points_in&(current_object%,6)*scalex
        ry%=points_in&(current_object%,6)*scaley
        ELLIPSE x%,y%,rx%,ry%,a1%,a2%
      CASE 3 ! PIE
        a1%=integer_in&(current_object%,0)
        a2%=integer_in&(current_object%,1)
        x%=xoff%+offset_x%+points_in&(current_object%,0)*scalex
        y%=yoff%+offset_y%+points_in&(current_object%,1)*scaley
        rx%=points_in&(current_object%,6)*scalex
        ry%=points_in&(current_object%,6)*scaley
        PELLIPSE x%,y%,rx%,ry%,a1%,a2%
      CASE 4 ! CIRCLE
        x%=xoff%+offset_x%+points_in&(current_object%,0)*scalex
        y%=yoff%+offset_y%+points_in&(current_object%,1)*scaley
        rx%=points_in&(current_object%,4)*scalex
        ry%=points_in&(current_object%,4)*scaley
        PELLIPSE x%,y%,rx%,ry%
      CASE 5 ! ELLIPSE CIRCLE
        x%=xoff%+offset_x%+points_in&(current_object%,0)*scalex
        y%=yoff%+offset_y%+points_in&(current_object%,1)*scaley
        rx%=points_in&(current_object%,2)*scaley
        ry%=points_in&(current_object%,3)*scaley
        PELLIPSE x%,y%,rx%,ry%
      CASE 6 ! ELLIPSE ARC
        a1%=integer_in&(current_object%,0)
        a2%=integer_in&(current_object%,1)
        x%=xoff%+offset_x%+points_in&(current_object%,0)*scalex
        y%=yoff%+offset_y%+points_in&(current_object%,1)*scaley
        rx%=points_in&(current_object%,2)*scaley
        ry%=points_in&(current_object%,3)*scaley
        ELLIPSE x%,y%,rx%,ry%,a1%,a2%
      CASE 7 ! ELLIPSE PIE
        a1%=integer_in&(current_object%,0)
        a2%=integer_in&(current_object%,1)
        x%=xoff%+offset_x%+points_in&(current_object%,0)*scalex
        y%=yoff%+offset_y%+points_in&(current_object%,1)*scaley
        rx%=points_in&(current_object%,2)*scaley
        ry%=points_in&(current_object%,3)*scaley
        PELLIPSE x%,y%,rx%,ry%,a1%,a2%
      CASE 8 ! ROUNDED RECTANGLE
        x1%=xoff%+offset_x%+points_in&(current_object%,0)*scalex
        y1%=yoff%+offset_y%+points_in&(current_object%,1)*scaley
        x2%=xoff%+offset_x%+points_in&(current_object%,2)*scalex
        y2%=yoff%+offset_y%+points_in&(current_object%,3)*scaley
        RBOX x1%,y1%,x2%,y2%
      CASE 9 ! FILLED ROUNDED RECTANGLE
        x1%=xoff%+offset_x%+points_in&(current_object%,0)*scalex
        y1%=yoff%+offset_y%+points_in&(current_object%,1)*scaley
        x2%=xoff%+offset_x%+points_in&(current_object%,2)*scalex
        y2%=yoff%+offset_y%+points_in&(current_object%,3)*scaley
        PRBOX x1%,y1%,x2%,y2%
      ENDSELECT
      '
    CASE 15 ! POLYLINE TYPE
      c%=integer_in&(current_object%,0)
      DEFLINE c%
    CASE 16 ! POLYLINE WIDTH
      c%=points_in&(current_object%,0)*MIN(scalex,scaley)
      DEFLINE ,c%
    CASE 17 ! POLYLINE COLOR
      c%=integer_in&(current_object%,0)
      COLOR c%
    CASE 18 ! POLYMARKER TYPE
      c%=integer_in&(current_object%,0)
      DEFMARK ,c%
    CASE 19 ! POLYMARKER HEIGHT
      c%=points_in&(current_object%,1)*MIN(scalex,scaley)
      DEFMARK ,,c%
    CASE 20 ! POLYMARKER COLOR
      c%=integer_in&(current_object%,0)
      DEFMARK c%
    CASE 23 ! FILL STYLE
      c%=integer_in&(current_object%,0)
      DEFFILL ,c%
    CASE 24 ! FILL INDEX
      c%=integer_in&(current_object%,0)
      DEFFILL ,,c%
    CASE 25 ! FILL COLOR
      c%=integer_in&(current_object%,0)
      DEFFILL c%
    CASE 32 ! WRITEMODE
      c%=integer_in&(current_object%,0)
      GRAPHMODE c%
    CASE 103 ! CONTOUR FILL
      c%=integer_in&(current_object%,0)
      x%=xoff%+offset_x%+points_in&(current_object%,0)*scalex
      y%=yoff%+offset_y%+points_in&(current_object%,1)*scaley
      FILL x%,y%
    CASE 104 ! PERIMETER
      c%=integer_in&(current_object%,0)
      BOUNDARY c%
    CASE 108 ! POLYLINE ENDS
      c1%=integer_in&(current_object%,0)
      c2%=integer_in&(current_object%,1)
      DEFLINE ,,c1%,c2%
    CASE 112 ! DEFINE USER FILL
      c$=""
      FOR in%=0 TO object%(3,current_object%)-1
        c$=MKI$(integer_in&(object%,in%))
      NEXT in%
      DEFFILL ,c$
    CASE 113 ! DEFINE USER LINE
      c%=integer_in&(current_object%,0)
      DEFLINE c%
    CASE 114 ! FILLED RECTANGLE
      x1%=xoff%+offset_x%+points_in&(current_object%,0)*scalex
      y1%=yoff%+offset_y%+points_in&(current_object%,1)*scaley
      x2%=xoff%+offset_x%+points_in&(current_object%,2)*scalex
      y2%=yoff%+offset_y%+points_in&(current_object%,3)*scaley
      PBOX x1%,y1%,x2%,y2%
    ENDSELECT
    '
    INC current_object%
    '
  LOOP
  '
RETURN
> PROCEDURE gem_get
  '
  vek_x%=preview_ix%+preview_iw%*gem_x
  vek_y%=preview_iy%+preview_ih%*gem_y
  vek_w%=preview_iw%*gem_w
  vek_h%=preview_ih%*gem_h
  '
  @gem_draw(preview_iw%,preview_ih%,preview_ix%,preview_iy%)
  '
  ~WIND_GET(0,10,top%,d%,d%,d%)
  IF top%=preview_handle% THEN
    vek_w2%=((vek_w%*16)/16)+16
    '
    raster_size%=((vek_w%*screen_bits%)/8)*vek_h%
    gem_raster%=GEMDOS(72,L:raster_size%)
    '
    source_mfdb%(0)=0
    '
    destination_mfdb%(0)=gem_raster%
    destination_mfdb%(1)=vek_w2%
    destination_mfdb%(2)=vek_h%
    destination_mfdb%(3)=vek_w2%/16
    destination_mfdb%(5)=screen_bits%
    '
    parameters%(0)=vek_x%
    parameters%(1)=vek_y%
    parameters%(2)=vek_x%+vek_w%-1
    parameters%(3)=vek_y%+vek_h%-1
    parameters%(4)=0
    parameters%(5)=0
    parameters%(6)=vek_w%-1
    parameters%(7)=vek_h%-1
    BITBLT source_mfdb%(),destination_mfdb%(),parameters%()
  ENDIF
  '
RETURN
> PROCEDURE gem_put
  '
  source_mfdb%(0)=gem_raster%
  source_mfdb%(1)=vek_w2%
  source_mfdb%(2)=vek_h%
  source_mfdb%(3)=vek_w2%/16
  source_mfdb%(5)=screen_bits%
  '
  destination_mfdb%(0)=0
  '
  parameters%(0)=0
  parameters%(1)=0
  parameters%(2)=vek_w%-1
  parameters%(3)=vek_h%-1
  parameters%(4)=vek_x%
  parameters%(5)=vek_y%
  parameters%(6)=vek_x%+vek_w%-1
  parameters%(7)=vek_y%+vek_h%-1
  BITBLT source_mfdb%(),destination_mfdb%(),parameters%()
  '
RETURN
> PROCEDURE gem_load
  '
  FILESELECT #"Load GEM image",my_path$+"*.GEM",gem_name$,gem_name$
  '
  IF EXIST(gem_name$) THEN
    '
    test%=RINSTR(gem_name$,"\")
    '
    IF test% THEN
      my_path$=MID$(gem_name$,1,test%)
      gem_name$=MID$(gem_name$,test%+1)
    ELSE
      my_path$="\"
    ENDIF
    '
    OPEN "I",#1,my_path$+gem_name$
    gem_size%=LOF(#1)
    CLOSE #1
    '
    gem_buffer%=GEMDOS(72,L:gem_size%)
    '
    IF gem_buffer%>0 THEN
      BLOAD my_path$+gem_name$,gem_buffer%
      @gem_in
      ~GEMDOS(73,L:gem_buffer%)
      IF preview_open% THEN
        @set_preview_size
        @update_preview
      ENDIF
    ELSE
      ' NO MEM
    ENDIF
    '
  ENDIF
  '
RETURN
> PROCEDURE gem_in
  '
  headder%=DPEEK(gem_buffer%)
  IF headder%=65535 THEN
    pointer%=gem_buffer%+2
    '
    @read_word
    headder_size%=INT{pointer%}
    pointer%=pointer%+2
    '
    @read_word
    version%=INT{pointer%}
    pointer%=pointer%+2
    '
    @read_word
    coordinates%=INT{pointer%}
    pointer%=pointer%+2
    '
    @read_word
    min_x%=INT{pointer%}
    pointer%=pointer%+2
    '
    @read_word
    min_y%=INT{pointer%}
    pointer%=pointer%+2
    '
    @read_word
    max_x%=INT{pointer%}
    pointer%=pointer%+2
    '
    @read_word
    max_y%=INT{pointer%}
    pointer%=pointer%+2
    '
    @read_word
    page_width%=INT{pointer%}
    pointer%=pointer%+2
    '
    @read_word
    page_height%=INT{pointer%}
    pointer%=pointer%+2
    '
    @read_word
    coord_x1%=INT{pointer%}
    pointer%=pointer%+2
    '
    @read_word
    coord_y2%=INT{pointer%}
    pointer%=pointer%+2
    '
    @read_word
    coord_x2%=INT{pointer%}
    pointer%=pointer%+2
    '
    @read_word
    coord_y1%=INT{pointer%}
    pointer%=pointer%+2
    '
    object_width%=(max_x%-min_x%)+1
    object_height%=(max_y%-min_y%)+1
    '
    pointer%=gem_buffer%+headder_size%*2
    '
    object%=0
    DO
      @read_word
      command%=INT{pointer%}
      pointer%=pointer%+2
      '
      IF command%<>-1 THEN
        @read_word
        points_in%=INT{pointer%}
        pointer%=pointer%+2
        '
        @read_word
        integer_in%=INT{pointer%}
        pointer%=pointer%+2
        '
        @read_word
        sub_opcode%=INT{pointer%}
        pointer%=pointer%+2
        '
        object%(0,object%)=command%
        object%(1,object%)=sub_opcode%
        object%(2,object%)=points_in%
        object%(3,object%)=integer_in%
        '
        IF object%(2,object%)>0
          @read_pts
        ENDIF
        IF object%(3,object%)>0
          @read_int
        ENDIF
        '
        SELECT command%
        CASE 6,7,9,103,114
          FOR in%=0 TO object%(2,object%)*2-1 STEP 2
            points_in&(object%,in%)=points_in&(object%,in%)-min_x%
            points_in&(object%,in%+1)=points_in&(object%,in%+1)-min_y%
          NEXT in%
          INC object%
        CASE 11
          SELECT sub_opcode%
          CASE 1,8,9
            FOR in%=0 TO object%(2,object%)*2-1 STEP 2
              points_in&(object%,in%)=points_in&(object%,in%)-min_x%
              points_in&(object%,in%+1)=points_in&(object%,in%+1)-min_y%
            NEXT in%
            INC object%
          CASE 2 TO 7
            points_in&(object%,0)=points_in&(object%,0)-min_x%
            points_in&(object%,1)=points_in&(object%,1)-min_y%
            INC object%
          ENDSELECT
        CASE 15 TO 20,23 TO 25,32,104,108,112,113
          INC object%
        ENDSELECT
        '
      ENDIF
      '
    LOOP UNTIL command%=-1 OR object%=max_object% OR pointer%>=gem_buffer%+gem_size%
    object%(0,object%)=-1
    '
    IF gem_raster%>0 THEN
      ~GEMDOS(73,L:gem_raster%)
    ENDIF
    gem_raster%=0
    '
    gem_x=0.1
    gem_y=0.1
    gem_w=0.8
    gem_h=0.8
    '
  ELSE
    IF gem_buffer%>0 THEN
      ~GEMDOS(73,L:gem_buffer%)
    ENDIF
    ' NOT GEM
    '
  ENDIF
RETURN
> PROCEDURE read_pts
  FOR in%=0 TO object%(2,object%)*2-1
    @read_word
    points_in&(object%,in%)=INT{pointer%}
    pointer%=pointer%+2
  NEXT in%
  '
RETURN
> PROCEDURE read_int
  FOR in%=0 TO object%(3,object%)-1
    @read_word
    integer_in&(object%,in%)=INT{pointer%}
    pointer%=pointer%+2
  NEXT in%
  '
RETURN
> PROCEDURE read_word
  BMOVE pointer%,gem_buffer%,1
  BMOVE pointer%+1,pointer%,1
  BMOVE gem_buffer%,pointer%+1,1
  '
RETURN
> PROCEDURE trying_to_quit
  '
  txt$=" |Sure you want to quit ?  | "
  ALERT 2,txt$,1,"OK|Cancel",button%
  '
  IF button%=1 THEN
    '
    IF gem_raster%>0 THEN
      ~GEMDOS(73,L:gem_raster%)
    ENDIF
    ~VST_UNLOAD_FONTS(0)
    ~WIND_CLOSE(window_handle%)
    ~WIND_CLOSE(preview_handle%)
    ~WIND_DELETE(window_handle%)
    ~WIND_DELETE(preview_handle%)
    ~MENU_BAR(stis_menu%,0)
    ~RSRC_FREE()
    END
    '
  ENDIF
  '
RETURN
> PROCEDURE rsc_setup
  '
  IF EXIST(rsc$) THEN
    rsc%=RSRC_LOAD(rsc$)
  ELSE ! CAN'T FIND RSC FILE
    END
  ENDIF
  '
  ~RSRC_GADDR(0,0,menu%)
  ~RSRC_GADDR(0,1,main%)
  ~RSRC_GADDR(0,2,font_name%)
  ~RSRC_GADDR(0,3,font_color%)
  '
  m_about%=7
  m_print%=16
  m_quit%=18
  '
  t_banner%=2
  t_font%=5
  b_text_color%=8
  b_outline%=9
  b_preview%=10
  b_load%=12
  b_erase%=13
  b_print%=14
  b_quit%=15
  '
  ~FORM_CENTER(main%,main_x%,main_y%,main_w%,main_h%)
  ~FORM_CENTER(font_name%,font_name_x%,font_name_y%,font_name_w%,font_name_h%)
  ~FORM_CENTER(font_color%,font_color_x%,font_color_y%,font_color_w%,font_color_h%)
  '
  CHAR{{OB_SPEC(main%,t_banner%)}}=banner$
  @set_font_name
  @set_text_color
  '
RETURN
> PROCEDURE check_jar
  jar%=LPEEK(1440) ! ADDRESS OF COOKIE JAR
  IF jar% THEN     ! IF JAR PRESENT THEN jar%=ADDRESS OF JAR
    cookie_num%=0
    DO
      cookie%=LPEEK(jar%+cookie_num%*8)
      cookie$=CHR$(SHR(cookie% AND &HFF000000,24))
      cookie$=cookie$+CHR$(SHR(cookie% AND &HFF0000,16))
      cookie$=cookie$+CHR$(SHR(cookie% AND &HFF00,8))
      cookie$=cookie$+CHR$(cookie% AND &HFF)
      IF cookie$="FSMC" THEN
        '
        id%=LPEEK(LPEEK(jar%+cookie_num%*8+4))
        id$=CHR$(SHR(id% AND &HFF000000,24))
        id$=id$+CHR$(SHR(id% AND &HFF0000,16))
        id$=id$+CHR$(SHR(id% AND &HFF00,8))
        id$=id$+CHR$(id% AND &HFF)
        '
      ENDIF
      INC cookie_num%
    LOOP UNTIL cookie%=0
  ENDIF
RETURN
> PROCEDURE font_set
  '
  face%=VQT_NAME(font%,font_name$)
  IF outline!=TRUE THEN
    DEFTEXT ,16,,,face%
  ELSE
    DEFTEXT ,0,,,face%
  ENDIF
  '
  CONTRL(0)=246  ! VST_ARBPT
  CONTRL(1)=0
  CONTRL(3)=1
  CONTRL(6)=my_handle&
  INTIN(0)=points%
  VDISYS
  '
RETURN
> PROCEDURE set_font_name
  test$=font_name$(font%)
  temp$=CHAR{{OB_SPEC(main%,t_font%)}}
  IF temp$<>test$ THEN
    CHAR{{OB_SPEC(main%,t_font%)}}=test$
    update_main%=t_font%
    @update_main
  ENDIF
  '
RETURN
> PROCEDURE set_font_pick
  IF temp_font%=1 THEN
    OB_STATE(font_name%,1)=BSET(OB_STATE(font_name%,1),3)
  ELSE
    OB_STATE(font_name%,1)=BCLR(OB_STATE(font_name%,1),3)
  ENDIF
  IF temp_font%=fonts%+1 THEN
    OB_STATE(font_name%,3)=BSET(OB_STATE(font_name%,3),3)
  ELSE
    OB_STATE(font_name%,3)=BCLR(OB_STATE(font_name%,3),3)
  ENDIF
  '
  CHAR{{OB_SPEC(font_name%,2)}}=font_name$(temp_font%)
  '
RETURN
> PROCEDURE font_pick
  old_font%=font%
  temp_font%=font%
  @set_font_pick
  ~OBJC_OFFSET(main%,t_font%,rx%,ry%)
  font_name_x%=rx%
  font_name_y%=ry%-OB_Y(font_name%,2)
  OB_X(font_name%,0)=font_name_x%
  OB_Y(font_name%,0)=font_name_y%
  CLIP font_name_x%-1,font_name_y%-1,font_name_w%+2,font_name_h%+2
  ~FORM_DIAL(0,0,0,0,0,font_name_x%-1,font_name_y%-1,font_name_w%+2,font_name_h%+2)
  cx%=font_name_x%
  cy%=font_name_y%
  cw%=font_name_w%
  ch%=font_name_h%
  exit%=0
  er%=WIND_UPDATE(1)
  ~OBJC_DRAW(font_name%,0,2,font_name_x%-1,font_name_y%-1,font_name_w%+2,font_name_h%+2)
  DO
    event_type&=EVNT_MULTI(&X110,0,0,0,0,cx%,cy%,cw%,ch%,0,0,0,0,0,buffer_address%,0,x_mouse&,y_mouse&,button_state&,key_state&,key_press&,num_clicks&)
    IF event_type& AND &X100 THEN ! IN
      button%=OBJC_FIND(font_name%,0,1,x_mouse&,y_mouse&)
      IF button%>0 THEN
        IF BTST(OB_STATE(font_name%,button%),3)=0 THEN
          SELECT button%
          CASE 1
            IF button_state&=1 THEN
              OB_STATE(font_name%,button%)=BSET(OB_STATE(font_name%,button%),0)
              ~OBJC_DRAW(font_name%,button%,1,font_name_x%-1,font_name_y%-1,font_name_w%+2,font_name_h%+2)
              DEC temp_font%
              @set_font_pick
              PAUSE 5
              OB_STATE(font_name%,button%)=BCLR(OB_STATE(font_name%,button%),0)
              ~OBJC_DRAW(font_name%,0,2,font_name_x%-1,font_name_y%-1,font_name_w%+2,font_name_h%+2)
              PAUSE 10
            ENDIF
          CASE 2
            IF button_state&=1 THEN
              exit%=2
            ENDIF
          CASE 3
            IF button_state&=1 THEN
              OB_STATE(font_name%,button%)=BSET(OB_STATE(font_name%,button%),0)
              ~OBJC_DRAW(font_name%,button%,1,font_name_x%-1,font_name_y%-1,font_name_w%+2,font_name_h%+2)
              INC temp_font%
              @set_font_pick
              PAUSE 5
              OB_STATE(font_name%,button%)=BCLR(OB_STATE(font_name%,button%),0)
              ~OBJC_DRAW(font_name%,0,2,font_name_x%-1,font_name_y%-1,font_name_w%+2,font_name_h%+2)
              PAUSE 10
            ENDIF
          ENDSELECT
        ENDIF
      ENDIF
    ELSE
      exit%=1
    ENDIF
  LOOP UNTIL exit%>0
  er%=WIND_UPDATE(0)
  ~FORM_DIAL(3,0,0,0,0,font_name_x%-1,font_name_y%-1,font_name_w%+2,font_name_h%+2)
  IF exit%=2 THEN
    font%=temp_font%
    IF font%<>old_font% THEN
      @set_font_name
      IF preview_open% THEN
        @set_preview_size
        @update_preview
      ENDIF
      IF gem_raster%>0 THEN
        ~GEMDOS(73,L:gem_raster%)
      ENDIF
      gem_raster%=0
    ENDIF
  ENDIF
RETURN
> PROCEDURE set_text_color
  OB_SPEC(main%,b_text_color%)=(OB_SPEC(main%,b_text_color%) AND &HFFFFFFF0) OR gdos_text_color%
  update_main%=b_text_color%
  @update_main
  '
RETURN
> PROCEDURE text_color_pick
  old_text_color%=gdos_text_color%
  ~OBJC_OFFSET(main%,b_text_color%,rx%,ry%)
  font_color_x%=rx%-2
  font_color_y%=ry%-(OB_Y(font_color%,14)+4)
  OB_X(font_color%,0)=font_color_x%
  OB_Y(font_color%,0)=font_color_y%
  CLIP font_color_x%-1,font_color_y%-1,font_color_w%+2,font_color_h%+2
  ~FORM_DIAL(0,0,0,0,0,font_color_x%-1,font_color_y%-1,font_color_w%+2,font_color_h%+2)
  cx%=font_color_x%
  cy%=font_color_y%
  cw%=font_color_w%
  ch%=font_color_h%
  exit%=0
  er%=WIND_UPDATE(1)
  ~OBJC_DRAW(font_color%,0,2,font_color_x%-1,font_color_y%-1,font_color_w%+2,font_color_h%+2)
  DO
    event_type&=EVNT_MULTI(&X110,0,0,0,0,cx%,cy%,cw%,ch%,0,0,0,0,0,buffer_address%,0,x_mouse&,y_mouse&,button_state&,key_state&,key_press&,num_clicks&)
    IF event_type& AND &X100 THEN ! IN
      button%=OBJC_FIND(font_color%,0,2,x_mouse&,y_mouse&)
      IF button%>1 THEN
        IF button_state&=1 THEN
          temp_color%=button%-2
          exit%=2
        ENDIF
      ENDIF
    ELSE
      exit%=1
    ENDIF
  LOOP UNTIL exit%>0
  er%=WIND_UPDATE(0)
  ~FORM_DIAL(3,0,0,0,0,font_color_x%-1,font_color_y%-1,font_color_w%+2,font_color_h%+2)
  IF exit%=2 THEN
    gdos_text_color%=temp_color%
    IF gdos_text_color%<>old_text_color% THEN
      @set_text_color
      IF preview_open% THEN
        @update_preview
      ENDIF
    ENDIF
  ENDIF
RETURN
> PROCEDURE edit_text
  '
  old_banner$=banner$
  er%=WIND_UPDATE(1)
  exit%=FORM_DO(main%,t_banner%)
  exit%=exit% AND &H7FFF
  er%=WIND_UPDATE(0)
  dialog_button%=exit%
  @reset_button
  banner$=CHAR{{OB_SPEC(main%,t_banner%)}}
  IF old_banner$<>banner$ THEN
    IF preview_open% THEN
      @set_preview_size
      @update_preview
    ENDIF
    IF gem_raster%>0 THEN
      ~GEMDOS(73,L:gem_raster%)
    ENDIF
    gem_raster%=0
    '
  ENDIF
  '
RETURN
> PROCEDURE print
  @open_workstation
  IF gdos_handle%<>0 THEN
    V~H=gdos_handle%
    '
    CONTRL(0)=119  ! VST_LOAD_FONTS
    CONTRL(1)=0
    CONTRL(3)=1
    CONTRL(6)=gdos_handle%
    INTIN(0)=0
    VDISYS
    '
    gdos_font%=font%
    gdos_face%=VQT_NAME(gdos_font%,gdos_name$)
    '
    IF outline!=TRUE THEN
      DEFTEXT ,16,,,gdos_face%
    ELSE
      DEFTEXT ,0,,,gdos_face%
    ENDIF
    '
    CONTRL(0)=39  ! VST_ALIGNMENT
    CONTRL(1)=0
    CONTRL(3)=2
    CONTRL(6)=gdos_handle%
    INTIN(0)=0    ! LEFT JUSTIFIED
    INTIN(1)=5    ! TOP LINE
    VDISYS
    '
    FOR try%=1024 TO 4 STEP -2
      points%=try%
      CONTRL(0)=246  ! VST_ARBPT
      CONTRL(1)=0
      CONTRL(3)=1
      CONTRL(6)=gdos_handle%
      INTIN(0)=points%
      VDISYS
      temp$=" "+banner$+" "
      ~VQT_EXTENT(temp$,x1%,y1%,x2%,y2%,x3%,y3%,x4%,y4%)
      IF y3%<=gdos_y_rez% THEN
        try%=4
        '
      ENDIF
    NEXT try%
    CLIP 0,0,gdos_x_rez%-1,gdos_y_rez%-1
    place%=0
    DO WHILE place%<x3%
      '
      @gem_draw(x3%,y3%,-place%,0)
      '
      DEFTEXT gdos_text_color%
      temp$=" "+banner$+" "
      GRAPHMODE 2
      TEXT -place%,-gdos_y_rez%*0.1,temp$
      GRAPHMODE 1
      '
      CONTRL(0)=4  ! V_UPDWK
      CONTRL(1)=0
      CONTRL(3)=0
      CONTRL(6)=gdos_handle%
      VDISYS
      '
      CONTRL(0)=3  ! V_CLRWK
      CONTRL(1)=0
      CONTRL(3)=0
      CONTRL(6)=gdos_handle%
      VDISYS
      '
      place%=place%+gdos_x_rez%
    LOOP
    '
    ~VST_UNLOAD_FONTS(0)
    '
    CONTRL(0)=2  ! V_CLSWK
    CONTRL(1)=0
    CONTRL(3)=0
    CONTRL(6)=gdos_handle%
    VDISYS
    '
    V~H=-1
    '
  ELSE
    ' NO WORKSTATION
  ENDIF
RETURN
> PROCEDURE open_workstation
  CONTRL(0)=1  ! V_OPNWK
  CONTRL(1)=0
  CONTRL(3)=11
  CONTRL(6)=0
  INTIN(0)=driver%
  INTIN(1)=1
  INTIN(2)=1
  INTIN(3)=1
  INTIN(4)=1
  INTIN(5)=font%
  INTIN(6)=1
  INTIN(7)=1
  INTIN(8)=1
  INTIN(9)=1
  INTIN(10)=2
  VDISYS
  gdos_handle%=CONTRL(6)
  '
  IF gdos_handle%<>0 THEN
    '
    gdos_x_rez%=INTOUT(0)+1
    gdos_y_rez%=INTOUT(1)+1
    gdos_colors%=INTOUT(13)
    '
  ENDIF
  '
RETURN
