$m40000
'
@init
@main
'
> PROCEDURE init
  '
  ' COMMAND LINE, COMMAND$ IS PATH+FILENAME OF PROCESS THAT
  ' STARTED PROGRAM. TAIL$ IS FILENAME THAT WAS DROPED ON ME
  shell%=SHEL_READ(command$,tail$)
  '
  ' GET CURRENT DIRECTORY
  current_drive%=GEMDOS(25)
  from_path$=DIR$(current_drive%+1)+"\"
  '
  ' ADD DRIVE LETTER IF NOT PRESENT
  IF MID$(from_path$,1,1)="\" THEN
    from_path$=CHR$(current_drive%+65)+":"+from_path$
    '
  ELSE
    IF MID$(from_path$,2,1)<>":" THEN
      from_path$=CHR$(current_drive%+65)+":\"+from_path$
      '
    ENDIF
    '
  ENDIF
  '
  ' STRIP FILENAME FROM PATH
  test%=RINSTR(command$,"\")
  IF test% THEN
    my_path$=MID$(command$,1,test%)
  ELSE
    my_path$=from_path$
  ENDIF
  '
  ' BUFFER FOR WINDOW TITLE
  INLINE window_title%,16
  '
  OPTION BASE 0
  DIM puzzle%(7)
  FOR set%=1 TO 7
    puzzle%(set%)=INT(RND(0)*4)+1
  NEXT set%
  '
  d$="abcdefg hifklmno"
  acc$="  Puzzle  "
  '
  @rsc_setup
  '
  moves%=0
  won%=0
  @set_puzzle
  '
  ' CALC SIZE OF WINDOW FROM RSC FORM SIZE
  ~WIND_GET(0,4,mwx%,mwy%,mww%,mwh%)
  ~WIND_CALC(0,&X1011,main_x%,main_y%,main_w%,main_h%,main_wx%,main_wy%,main_ww%,main_wh%)
  '
  ' MESSAGE BUFFER FOR EVENT CALL
  DIM buffer&(15)
  buffer%=VARPTR(buffer&(0))
RETURN
'
> PROCEDURE main
  '
  ' PUT PRG NAME IN MENU
  ap_id&=APPL_INIT()
  acc_id&=MENU_REGISTER(ap_id&,acc$)
  '
  DO
    ~EVNT_MESAG(buffer%)
    IF buffer&(0)=40 THEN ! 40=OPEN ACC
      done%=0
      DEFMOUSE 0
      @window_setup
      '
      DO
        c_type%=EVNT_MULTI(&X110010,1,1,1,0,0,0,0,0,0,0,0,0,0,buffer%,10,mx%,my%,b%,key_state%,key%,d%)
        @check_event
        '
      LOOP UNTIL done%
      '
      flag%=WIND_CLOSE(main_win%)
      flag%=WIND_DELETE(main_win%)
      '
      ' END
      '
    ENDIF
    '
  LOOP
  '
RETURN
'
> PROCEDURE rsc_setup
  '
  rsc%=RSRC_LOAD(my_path$+"PUZZLE.RSC")
  '
  IF rsc%=0 THEN
    END
    ' DO
    ' ~EVNT_MESAG(buffer%)
    ' LOOP
  ELSE
    @rsc_do
  ENDIF
  '
RETURN
'
> PROCEDURE rsc_do
  '
  ' GET ADDRESS TREE
  ~RSRC_GADDR(0,0,main%)
  '
  ' SET VARS TO OBJ NUMBERS
  '
  b_arrow_1%=1
  b_arrow_7%=7
  t_moves%=9
  '
  b_new%=10
  b_cancel%=11
  '
  ' GET SIZE OF FORM
  ~FORM_CENTER(main%,main_x%,main_y%,main_w%,main_h%)
  '
RETURN
'
> PROCEDURE window_setup
  '
  ' CREATE WINDOW WITH TITLE, MOVE, AND CLOSE BOX
  main_win%=WIND_CREATE(&X1011,main_wx%,main_wy%,main_ww%,main_wh%)
  '
  ' SET TITLE
  CHAR{window_title%}=acc$
  flag%=WIND_SET(main_win%,2,CARD(SWAP(window_title%)),CARD(window_title%),0,0)
  '
  IF main_wy%<mwy% THEN
    main_wy%=mwy%
  ENDIF
  flag%=WIND_OPEN(main_win%,main_wx%,main_wy%,main_ww%,main_wh%)
  flag%=WIND_GET(main_win%,4,main_iwx%,main_iwy%,main_iww%,main_iwh%)
  OB_X(main%,0)=main_iwx%
  OB_Y(main%,0)=main_iwy%
  '
RETURN
'
> PROCEDURE check_event
  '
  IF c_type% AND &X10 THEN
    '
    ' MOUSE EVENT
    @button
    '
  ENDIF
  '
  ' MENU/WINDOW EVENT
  IF c_type% AND &X10000 THEN
    '
    ' TYPE OF EVENT
    command%=buffer&(0)
    '
    ' WINDOW EVENT
    @a_window
    '
  ENDIF
  '
RETURN
'
> PROCEDURE button
  '
  window_over%=WIND_FIND(mx%,my%)
  IF main_win%=window_over% THEN
    '
    main_found%=OBJC_FIND(main%,0,2,mx%,my%)
    ' DID MOUSE CLICK ON A DESKTOP BUTTON ?
    '
    SELECT main_found%
      '
    CASE b_arrow_1% TO b_arrow_7%
      IF won%=0 THEN
        SELECT main_found%
        CASE 1
          main_obj%=7
          @turn
          @repair_button
          main_obj%=1
          @turn
          @repair_button
          main_obj%=2
          @turn
          @repair_button
        CASE 2 TO 6
          main_obj%=main_found%-1
          @turn
          @repair_button
          main_obj%=main_found%
          @turn
          @repair_button
          main_obj%=main_found%+1
          @turn
          @repair_button
        CASE 7
          main_obj%=6
          @turn
          @repair_button
          main_obj%=7
          @turn
          @repair_button
          main_obj%=1
          @turn
          @repair_button
        ENDSELECT
        INC moves%
        CHAR{{OB_SPEC(main%,t_moves%)}}=STR$(moves%)
        main_obj%=t_moves%
        @repair_button
        DO
        LOOP UNTIL MOUSEK=0
        @test_win
      ENDIF
      '
    CASE b_new%
      @main_select
      FOR set%=1 TO 7
        puzzle%(set%)=INT(RND(0)*4)+1
      NEXT set%
      moves%=0
      won%=0
      @set_puzzle
      FOR set%=1 TO 7
        main_obj%=set%
        @repair_button
      NEXT set%
      main_obj%=t_moves%
      @repair_button
      @main_select
      '
    CASE b_cancel%
      @main_select
      '
      @main_select
      done%=1
      '
    ENDSELECT
    '
  ENDIF
  '
RETURN
'
> PROCEDURE a_window
  '
  ' HANDLE OF WINDOW THAT TRIGGERED EVENT
  win%=buffer&(3)
  '
  ' BE SURE IT WAS OUR WINDOW
  IF win%=main_win% THEN
    SELECT command%
      '
      ' WIND UPDATE
    CASE 20
      main_obj%=0
      @repair
      '
      ' WINDOW CLICKED ON
    CASE 21
      ' WINDOW SET TO TOP
      flag%=WIND_SET(main_win%,10,0,0,0,0)
      DEFMOUSE 0
      '
      ' CLOSE WINDOW
    CASE 22
      done%=1
      '
      ' WINDOW MOVED
    CASE 28
      main_wx%=buffer&(4)
      main_wy%=buffer&(5)
      flag%=WIND_SET(main_win%,5,main_wx%,main_wy%,main_ww%,main_wh%)
      flag%=WIND_GET(main_win%,4,main_iwx%,main_iwy%,main_iww%,main_iwh%)
      '
      ' SET FORM POS TO WINDOW POS
      OB_X(main%,0)=main_iwx%
      OB_Y(main%,0)=main_iwy%
      '
    DEFAULT
      ' PRINT "EVENT:";
      ' FOR x%=0 TO 7
      ' PRINT buffer&(x%);" ";
      ' NEXT x%
      '
    ENDSELECT
    '
  ENDIF
  '
RETURN
'
> PROCEDURE main_select
  '
  ' MAKE BUTTON SELECTED / DRAW IT
  OB_STATE(main%,main_found%)=BCHG(OB_STATE(main%,main_found%),0)
  main_obj%=main_found%
  @repair_button
  '
  DO
  LOOP UNTIL MOUSEK=0
  '
RETURN
'
> PROCEDURE repair
  '
  ' TELL GEM WE ARE TAKING OVER SCREEN AND MOUSE
  er%=WIND_UPDATE(1)
  er%=WIND_UPDATE(3)
  '
  ' GET FIRST RECTANGLE FROM LIST
  er%=WIND_GET(main_win%,11,fx%,fy%,fx2%,fy2%)
  '
  ~OBJC_DRAW(main%,main_obj%,2,fx%,fy%,fx2%,fy2%)
  '
  fix_done%=0
  '
  ' SAME AS ABOVE FOR THE OTHER RECTANGLES FROM LIST
  DO
    er%=WIND_GET(main_win%,12,fx%,fy%,fx2%,fy2%)
    '
    IF fx2%+fy2%=0 THEN
      fix_done%=1
    ELSE
      ~OBJC_DRAW(main%,main_obj%,2,fx%,fy%,fx2%,fy2%)
    ENDIF
    '
  LOOP UNTIL fix_done%=1
  '
  er%=WIND_UPDATE(2)
  er%=WIND_UPDATE(0)                      !  DONE!
  '
RETURN
'
> PROCEDURE repair_button
  '
  ' TELL GEM WE ARE TAKING OVER SCREEN AND MOUSE
  er%=WIND_UPDATE(1)
  er%=WIND_UPDATE(3)
  '
  ~OBJC_DRAW(main%,main_obj%,2,main_iwx%,main_iwy%,main_iww%,main_iwh%)
  '
  er%=WIND_UPDATE(2)
  er%=WIND_UPDATE(0)                      !  DONE!
  '
RETURN
'
> PROCEDURE set_puzzle
  FOR set%=1 TO 7
    CHAR{{OB_SPEC(main%,set%)}}=CHR$(puzzle%(set%))
  NEXT set%
  temp$=STR$(moves%)
  DO WHILE LEN(temp$)<4
    temp$=temp$+" "
  LOOP
  CHAR{{OB_SPEC(main%,t_moves%)}}=temp$
  '
RETURN
'
> PROCEDURE turn
  SELECT puzzle%(main_obj%)
  CASE 1
    puzzle%(main_obj%)=3
  CASE 2
    puzzle%(main_obj%)=4
  CASE 3
    puzzle%(main_obj%)=2
  CASE 4
    puzzle%(main_obj%)=1
  ENDSELECT
  CHAR{{OB_SPEC(main%,main_obj%)}}=CHR$(puzzle%(main_obj%))
  '
RETURN
'
> PROCEDURE test_win
  won%=1
  FOR test%=1 TO 7
    IF puzzle%(test%)<>1 THEN
      won%=0
      test%=7
    ENDIF
  NEXT test%
  '
RETURN
