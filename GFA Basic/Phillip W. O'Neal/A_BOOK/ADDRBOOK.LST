$m600000
' free_memory%=FRE(0)
init
IF instal%=1 THEN
  ap_id&=APPL_INIT()
  IF ap_id&=0 THEN
    init1
    DO
      ON MENU 4
    LOOP
  ELSE
    mi_id&=MENU_REGISTER(ap_id&,"  Address Book")
    DO
      ~EVNT_MESAG(0)
      IF MENU(1)=40 THEN
        main
      ENDIF
    LOOP
  ENDIF
ELSE
  END
ENDIF
'
> PROCEDURE init
  DEFMOUSE 0
  r_size%=4000
  ' RESERVE FRE(0)-r_size%
  instal%=1
  IF RSRC_LOAD("ADDRBOOK.RSC")=0
    ALERT 0,"'ADDRBOOK.RSC' not found. ",1," Return ",a%
    ' RESERVE FRE(0)+r_size%
    instal%=0
  ENDIF
  ~RSRC_GADDR(0,0,mem.adr%)
  ~RSRC_GADDR(0,1,search.adr%)
  where%=0
  max_rec%=100
  DIM rec$(9,max_rec%+1),rec_sort$(max_rec%+1),rec_order%(max_rec%+1)
  DIM tone%(1,9),alpha%(25),size%(8),redo%(8),pal%(15),max_len%(9)
  FOR x%=0 TO 9
    READ max_len%(x%)
  NEXT x%
  FOR x%=0 TO 9
    READ t1%
    tone%(0,x%)=125000/t1%
    READ t2%
    tone%(1,x%)=125000/t2%
  NEXT x%
  FOR rec%=0 TO max_rec%+1
    rec_order%(rec%)=rec%
  NEXT rec%
  rec_add%=1
  drive%=GEMDOS(25)
  path$=DIR$(drive%+1)+"\"
  dfile$="ADDRBOOK.DAT"
  rez%=XBIOS(4)
  fix%=0
  IF rez%=0 OR rez%=1 THEN
    fix%=1
  ENDIF
  size_objs
  ~FORM_CENTER(mem.adr%,fdx%,fdy%,fdw%,fdh%)
  slide_pos%=0
  search$=""
  dat_saved%=1
  gap%=10
  SELECT rez%
  CASE 0
    cols%=15
  CASE 1
    cols%=3
  CASE 2
    cols%=1
  ENDSELECT
RETURN
'
> PROCEDURE init1
  DIM entry$(11)
  entry$(0)="DESK"
  entry$(1)=" QUIT"
  entry$(2)="  Address Book    "
  entry$(3)="1"
  entry$(4)="2"
  entry$(5)="3"
  entry$(6)="4"
  entry$(7)="5"
  entry$(8)="6"
  entry$(9)=""
  entry$(10)=""
  entry$(11)=""
  MENU entry$()
  ON MENU GOSUB dropdown
RETURN
'
> PROCEDURE dropdown
  MENU OFF
  IF MENU(1)=10 THEN
    IF MENU(0)=2
      main
    ELSE
      IF dat_saved%=0 THEN
        ALERT 0,"  Changes not saved.    ",2,"QUIT| CANCEL ",button%
        IF button%=1 THEN
          program_end
        ENDIF
      ELSE
        ALERT 0,"  Sure you want to QUIT ?    ",1,"YES| CANCEL ",button%
        IF button%=1 THEN
          program_end
        ENDIF
      ENDIF
    ENDIF
  ENDIF
RETURN
'
> PROCEDURE program_end
  ~RSRC_FREE()
  ' RESERVE FRE(0)+r_size%
  END
RETURN
'
> PROCEDURE main
  ~WIND_UPDATE(3)
  store_colors
  place_colors
  all_done%=0
  slide_min%=OB_X(mem.adr%,0)+OB_X(mem.adr%,but_slide%)
  rec_sort
  current%=rec_order%(where%)
  ~FORM_DIAL(0,0,0,0,0,fdx%,fdy%,fdw%,fdh%)
  ~OBJC_DRAW(mem.adr%,0,2,fdx%,fdy%,fdw%,fdh%)
  rec_get
  slide_pos
  setup
  info
  LINE fdx%,fdy%,fdx%,fdy%+fdh%-1
  DO
    setup
    ex_obj%=FORM_DO(mem.adr%,0)
    SELECT ex_obj%
    CASE but_close% ! QUIT
      ~OBJC_CHANGE(mem.adr%,ex_obj%,0,x%,y%,w%,h%,1,1)
      DO
      LOOP UNTIL MOUSEK=0
      ~OBJC_CHANGE(mem.adr%,ex_obj%,0,x%,y%,w%,h%,0,1)
      all_done%=1
    CASE but_credit% ! TITLE (INFO)
      ~OBJC_CHANGE(mem.adr%,ex_obj%,0,x%,y%,w%,h%,1,1)
      DO
      LOOP UNTIL MOUSEK=0
      ALERT 0,"½ 1993 By Phillip O'Neal   ",1," OK ",dummy%
      ~OBJC_CHANGE(mem.adr%,ex_obj%,0,x%,y%,w%,h%,0,1)
    CASE but_stats% ! INFO
      ~OBJC_CHANGE(mem.adr%,ex_obj%,0,x%,y%,w%,h%,1,1)
      DO
      LOOP UNTIL MOUSEK=0
      info$=STR$(total%)+" entries.  "
      ' info$=info$+"| USED:"+STR$(free_memory%-FRE(0))
      ALERT 0,info$,1," OK ",dummy%
      ~OBJC_CHANGE(mem.adr%,ex_obj%,0,x%,y%,w%,h%,0,1)
    CASE big_box% ! DONE WITH ENTER
      ~OBJC_CHANGE(mem.adr%,ex_obj%,0,x%,y%,w%,h%,0,1)
      test$=CHAR{{OB_SPEC(mem.adr%,elm_first%)}}
      test$=test$+CHAR{{OB_SPEC(mem.adr%,elm_i%)}}
      test$=test$+CHAR{{OB_SPEC(mem.adr%,elm_last%)}}
      test$=test$+CHAR{{OB_SPEC(mem.adr%,elm_address%)}}
      test$=test$+CHAR{{OB_SPEC(mem.adr%,elm_city%)}}
      test$=test$+CHAR{{OB_SPEC(mem.adr%,elm_state%)}}
      test$=test$+CHAR{{OB_SPEC(mem.adr%,elm_info%)}}
      test$=test$+CHAR{{OB_SPEC(mem.adr%,elm_zip1%)}}
      test$=test$+CHAR{{OB_SPEC(mem.adr%,elm_phone1%)}}
      IF test$<>"" THEN
        DEFMOUSE 2
        dat_saved%=0
        update
        temp_where%=current%
        rec_sort
        FOR x%=0 TO total%
          IF rec_order%(x%)=temp_where% THEN
            where%=x%
            x%=total%
          ENDIF
        NEXT x%
        current%=rec_order%(where%)
        rec_get
        slide_pos
        info
        DEFMOUSE 0
      ENDIF
    CASE but_left% ! LEFT ARROW
      IF where%>0 AND where%<>total% THEN
        ~OBJC_CHANGE(mem.adr%,ex_obj%,0,x%,y%,w%,h%,1,1)
        DEC where%
        current%=rec_order%(where%)
        rec_get
        ~OBJC_CHANGE(mem.adr%,ex_obj%,0,x%,y%,w%,h%,0,1)
        slide_pos
        PAUSE gap%
      ENDIF
    CASE but_right% ! RIGHT ARROW
      IF where%<total%-1 THEN
        ~OBJC_CHANGE(mem.adr%,ex_obj%,0,x%,y%,w%,h%,1,1)
        INC where%
        current%=rec_order%(where%)
        rec_get
        ~OBJC_CHANGE(mem.adr%,ex_obj%,0,x%,y%,w%,h%,0,1)
        slide_pos
        PAUSE gap%
      ENDIF
    CASE but_slide%
      IF where%<total% AND total%<>1 THEN
        IF total%>0 THEN
          offset%=total%/4
          IF MOUSEX>slide_min%+OB_X(mem.adr%,but_current%) THEN
            IF offset%<1 THEN
              INC where%
            ELSE
              where%=where%+offset%
            ENDIF
            IF where%>total%-1 THEN
              where%=total%-1
            ENDIF
          ELSE
            IF offset%<1 THEN
              DEC where%
            ELSE
              where%=where%-offset%
            ENDIF
            IF where%<0 THEN
              where%=0
            ENDIF
          ENDIF
          current%=rec_order%(where%)
          rec_get
          slide_pos
          PAUSE gap%*2
          ~OBJC_DRAW(mem.adr%,but_slide%,1,fdx%,fdy%,fdw%,fdh%)
        ENDIF
      ENDIF
    CASE but_current%
      IF where%<total% THEN
        IF total%>1 AND MOUSEK=1 THEN
          slide_pos%=GRAF_SLIDEBOX(mem.adr%,but_slide%,but_current%,0)
          current_pos%=slide_width%/1000*slide_pos%
          temp_where%=INT((current_pos%/slide_width%)*total%)
          IF temp_where%<>where% THEN
            where%=temp_where%
            IF where%>total%-1 THEN
              where%=total%-1
            ENDIF
            current%=rec_order%(where%)
            rec_get
            slide_pos
            ~OBJC_DRAW(mem.adr%,but_slide%,1,fdx%,fdy%,fdw%,fdh%)
          ENDIF
        ENDIF
      ENDIF
    CASE alpha1% TO alpha2%
      IF where%<total% THEN
        ~OBJC_CHANGE(mem.adr%,ex_obj%,0,x%,y%,w%,h%,1,1)
        test$=CHR$(65+ex_obj%-alpha1%)
        temp_where%=where%
        FOR x%=0 TO max_rec%
          IF MID$(rec_sort$(x%),1,1)=test$ THEN
            where%=x%
            current%=rec_order%(where%)
            x%=max_rec%+1
          ELSE
            IF MID$(rec_sort$(x%),1,1)>test$ THEN
              x%=max_rec%+1
            ENDIF
          ENDIF
        NEXT x%
        IF where%<>temp_where% THEN
          slide_pos
          rec_get
        ENDIF
        DO
        LOOP UNTIL MOUSEK=0
        ~OBJC_CHANGE(mem.adr%,ex_obj%,0,x%,y%,w%,h%,0,1)
      ENDIF
    CASE but_add% ! ADD
      IF where%<>total% AND total%<>0 AND total%<max_rec% THEN ! ADD
        ~OBJC_CHANGE(mem.adr%,ex_obj%,0,x%,y%,w%,h%,33,1)
        where%=total%
        current%=rec_order%(where%)
        rec_get
        slide_pos
        info
        DO
        LOOP UNTIL MOUSEK=0
        ~OBJC_CHANGE(mem.adr%,ex_obj%,0,x%,y%,w%,h%,32,1)
      ENDIF
    CASE but_delete% ! DELETE
      IF total%>0 AND where%<>total% THEN
        ~OBJC_CHANGE(mem.adr%,ex_obj%,0,x%,y%,w%,h%,33,1)
        DO
        LOOP UNTIL MOUSEK=0
        ALERT 0," Clear this entry ?  ",1,"YES| CANCEL ",button%
        IF button%=1 THEN
          rec_del
          rec_sort
          rec_get
          slide_pos
        ENDIF
        ~OBJC_CHANGE(mem.adr%,ex_obj%,0,x%,y%,w%,h%,32,1)
        IF button%=1
        ENDIF
      ENDIF
    CASE but_clear% ! CLEAR
      IF total%>0 THEN
        ~OBJC_CHANGE(mem.adr%,ex_obj%,0,x%,y%,w%,h%,33,1)
        DO
        LOOP UNTIL MOUSEK=0
        IF dat_saved%=0 THEN
          ALERT 0,"  Changes not saved.  |  Clear all data ?",1,"YES| CANCEL ",button%
        ELSE
          ALERT 0,"  Clear all data ?  ",1,"YES| CANCEL ",button%
        ENDIF
        IF button%=1 THEN
          rec_clear_all
          where%=0
          current%=rec_order%(where%)
          rec_get
          slide_pos
          info
        ENDIF
        ~OBJC_CHANGE(mem.adr%,ex_obj%,0,x%,y%,w%,h%,32,1)
        IF button%=1
        ENDIF
      ENDIF
    CASE but_search%
      IF total%>1 AND where%<>total% THEN
        ~OBJC_CHANGE(mem.adr%,ex_obj%,0,x%,y%,w%,h%,33,1)
        ~FORM_CENTER(search.adr%,sdx%,sdy%,sdw%,sdh%)
        CHAR{{OB_SPEC(search.adr%,elm_search%)}}=search$
        GET sdx%,sdy%,sdx%+sdw%-1,sdy%+sdh%-1,fix$
        ~OBJC_DRAW(search.adr%,0,1,fdx%,fdy%,fdw%,fdh%)
        s_obj%=FORM_DO(search.adr%,0)
        DO
        LOOP UNTIL MOUSEK=0
        IF s_obj%=but_search_done% THEN
          ~OBJC_CHANGE(search.adr%,s_obj%,0,x%,y%,w%,h%,0,1)
        ENDIF
        PUT sdx%,sdy%,fix$
        IF s_obj%=but_search_done% THEN
          search$=CHAR{{OB_SPEC(search.adr%,elm_search%)}}
          IF search$<>"" THEN
            search
            IF s_obj%=but_search_done% THEN
              IF sflag%=0 THEN
                no_match
              ELSE
                rec_get
                slide_pos
              ENDIF
            ENDIF
          ENDIF
        ENDIF
        ~OBJC_CHANGE(mem.adr%,ex_obj%,0,x%,y%,w%,h%,32,1)
      ENDIF
    CASE but_next%
      IF search$<>"" AND total%>1 AND where%<>total% THEN
        ~OBJC_CHANGE(mem.adr%,ex_obj%,0,x%,y%,w%,h%,33,1)
        search
        DO
        LOOP UNTIL MOUSEK=0
        ~OBJC_CHANGE(mem.adr%,ex_obj%,0,x%,y%,w%,h%,32,1)
        IF sflag%=0 THEN
          no_match
        ELSE
          rec_get
          slide_pos
        ENDIF
      ENDIF
      '
    CASE but_cancel% ! CANCEL
      ~OBJC_CHANGE(mem.adr%,ex_obj%,0,x%,y%,w%,h%,33,1)
      IF where%=total% THEN
        where%=0
        current%=rec_order%(where%)
      ENDIF
      DO
      LOOP UNTIL MOUSEK=0
      ~OBJC_CHANGE(mem.adr%,ex_obj%,0,x%,y%,w%,h%,32,1)
      rec_get
      slide_pos
      info
    CASE but_load% ! LOAD
      ~OBJC_CHANGE(mem.adr%,ex_obj%,0,x%,y%,w%,h%,33,1)
      DO
      LOOP UNTIL MOUSEK=0
      button%=1
      IF dat_saved%=0 THEN
        ALERT 0,"  Changes not saved.  ",1,"LOAD| CANCEL ",button%
      ENDIF
      IF button%=1 THEN
        FILESELECT #"Load data",path$,dfile$,file$
        IF EXIST(file$) THEN
          place%=RINSTR(file$,"\")
          IF place%=0 THEN
            path$="\"
            dfile$=file$
          ELSE
            path$=MID$(file$,1,place%)
            dfile$=MID$(file$,place%+1)
          ENDIF
          DEFMOUSE 2
          rec_clear_all
          OPEN "I",#1,file$
          RECALL #1,rec$(),-1,dummy%
          CLOSE #1
          dat_saved%=1
          @check_load
          @rec_sort
          where%=0
          current%=rec_order%(where%)
          DEFMOUSE 0
        ENDIF
      ENDIF
      rec_get
      slide_pos
      info
      ~OBJC_CHANGE(mem.adr%,ex_obj%,0,x%,y%,w%,h%,32,1)
    CASE but_save% ! SAVE
      IF total%>0 AND where%<>total% THEN
        ~OBJC_CHANGE(mem.adr%,ex_obj%,0,x%,y%,w%,h%,33,1)
        DO
        LOOP UNTIL MOUSEK=0
        FILESELECT #"Save data",path$,dfile$,file$
        IF file$<>"" THEN
          place%=RINSTR(file$,"\")
          IF place%=0 THEN
            path$="\"
            dfile$=file$
          ELSE
            path$=MID$(file$,1,place%)
            dfile$=MID$(file$,place%+1)
          ENDIF
          button%=1
          IF EXIST(file$) THEN
            info$=RIGHT$(file$,25)+"|EXIST, SHOULD I KILL IT ?  "
            ALERT 0,info$,1,"YES| CANCEL ",button%
          ENDIF
          IF button%=1 THEN
            DEFMOUSE 2
            OPEN "O",#1,file$
            FOR x%=0 TO total%-1
              FOR y%=0 TO 9
                PRINT #1,rec$(y%,rec_order%(x%))
              NEXT y%
            NEXT x%
            CLOSE #1
            dat_saved%=1
            DEFMOUSE 0
          ENDIF
        ENDIF
        ' ~OBJC_CHANGE(mem.adr%,ex_obj%,0,x%,y%,w%,h%,32,1)
      ENDIF
    CASE but_print% ! PRINT
      IF total%>0 AND where%<>total% THEN
        ~OBJC_CHANGE(mem.adr%,ex_obj%,0,x%,y%,w%,h%,33,1)
        DO
        LOOP UNTIL MOUSEK=0
        on_line
        IF on_line%<>0 THEN
          ALERT 0,"  Sort by NAME or NUMBER.  ",1,"NAME| NUMBER ",button%
          DEFMOUSE 2
          IF button%=1 THEN
            nam_print
          ELSE
            num_print
          ENDIF
          DEFMOUSE 0
        ENDIF
        ~OBJC_CHANGE(mem.adr%,ex_obj%,0,x%,y%,w%,h%,32,1)
      ENDIF
    CASE but_dial% ! DIAL
      IF MID$(phone$,6,1)=" " OR MID$(phone$,10,1)=" " OR where%=total% THEN
      ELSE
        ~OBJC_CHANGE(mem.adr%,ex_obj%,0,x%,y%,w%,h%,33,1)
        DO
        LOOP UNTIL MOUSEK=0
        dial
        ~OBJC_CHANGE(mem.adr%,ex_obj%,0,x%,y%,w%,h%,32,1)
      ENDIF
    ENDSELECT
  LOOP UNTIL all_done%=1
  restore_colors
  ~FORM_DIAL(3,0,0,0,0,fdx%,fdy%,fdw%,fdh%)
  ~WIND_UPDATE(2)
RETURN
'
> PROCEDURE info
  IF where%=total% THEN
    CHAR{{OB_SPEC(mem.adr%,but_info%)}}="Press 'RETURN' to add this record."
  ELSE
    CHAR{{OB_SPEC(mem.adr%,but_info%)}}="Press 'RETURN' to change this record."
  ENDIF
  ~OBJC_DRAW(mem.adr%,but_info%,1,fdx%,fdy%,fdw%,fdh%)
  LINE fdx%,fdy%,fdx%,fdy%+fdh%-1
RETURN
'
> PROCEDURE slide_pos
  left_arrow
  right_arrow
  IF total%=max_rec% AND where%=total% THEN
    OB_X(mem.adr%,but_current%)=0 ! slide_min%
  ELSE
    IF total%<2 OR where%=total% THEN
      OB_X(mem.adr%,but_current%)=0 ! slide_min%
    ELSE
      OB_X(mem.adr%,but_current%)=(INT(where%)/(total%-1))*slide_width%
    ENDIF
  ENDIF
  IF total%=0 OR where%=total% THEN ! SHOW SLIDE BOX VALUE OR EMPTY
    CHAR{{OB_SPEC(mem.adr%,but_current%)}}=""
  ELSE
    CHAR{{OB_SPEC(mem.adr%,but_current%)}}=STR$(where%+1)
  ENDIF
  ~OBJC_DRAW(mem.adr%,but_slide%,1,fdx%,fdy%,fdw%,fdh%)
RETURN
'
> PROCEDURE search
  usearch$=UPPER$(search$)
  DEFMOUSE 2
  sflag%=0
  FOR x%=where%+1 TO total%-1
    FOR y%=0 TO 8
      IF INSTR(UPPER$(rec$(y%,rec_order%(x%))),usearch$) THEN
        where%=x%
        current%=rec_order%(where%)
        x%=total%
        y%=10
        sflag%=1
      ENDIF
    NEXT y%
  NEXT x%
  DEFMOUSE 0
RETURN
'
> PROCEDURE no_match
  CHAR{{OB_SPEC(mem.adr%,but_info%)}}="No match found."
  ~OBJC_DRAW(mem.adr%,but_info%,0,fdx%,fdy%,fdw%,fdh%)
  LINE fdx%,fdy%,fdx%,fdy%+fdh%-1
  DELAY 1.5
  info
  ~OBJC_DRAW(mem.adr%,but_info%,0,fdx%,fdy%,fdw%,fdh%)
  LINE fdx%,fdy%,fdx%,fdy%+fdh%-1
RETURN
'
> PROCEDURE left_arrow
  IF where%>0 AND where%<>total% THEN ! LEFT ARROW
    ~OBJC_CHANGE(mem.adr%,but_left%,0,x%,y%,w%,h%,0,1)
  ELSE
    ~OBJC_CHANGE(mem.adr%,but_left%,0,x%,y%,w%,h%,8,1)
  ENDIF
RETURN
'
> PROCEDURE right_arrow
  IF where%<total%-1 THEN ! RIGHT ARROW
    ~OBJC_CHANGE(mem.adr%,but_right%,0,x%,y%,w%,h%,0,1)
  ELSE
    ~OBJC_CHANGE(mem.adr%,but_right%,0,x%,y%,w%,h%,8,1)
  ENDIF
RETURN
'
> PROCEDURE setup
  IF where%<>total% AND total%<>0 AND total%<max_rec% THEN ! ADD
    ~OBJC_CHANGE(mem.adr%,but_add%,0,x%,y%,w%,h%,32,1)
  ELSE
    ~OBJC_CHANGE(mem.adr%,but_add%,0,x%,y%,w%,h%,40,1)
  ENDIF
  '
  IF total%>1 AND where%<>total% THEN ! SEARCH
    ~OBJC_CHANGE(mem.adr%,but_search%,0,x%,y%,w%,h%,32,1)
  ELSE
    ~OBJC_CHANGE(mem.adr%,but_search%,0,x%,y%,w%,h%,40,1)
  ENDIF
  IF total%>1 AND where%<>total% AND search$<>"" THEN ! NEXT
    ~OBJC_CHANGE(mem.adr%,but_next%,0,x%,y%,w%,h%,32,1)
  ELSE
    ~OBJC_CHANGE(mem.adr%,but_next%,0,x%,y%,w%,h%,40,1)
  ENDIF
  '
  IF MID$(phone$,6,1)=" " OR MID$(phone$,10,1)=" " OR where%=total% THEN ! DIAL
    ~OBJC_CHANGE(mem.adr%,but_dial%,0,x%,y%,w%,h%,40,1)
  ELSE
    ~OBJC_CHANGE(mem.adr%,but_dial%,0,x%,y%,w%,h%,32,1)
  ENDIF
  IF total%>0 AND where%<>total% THEN ! DELETE
    ~OBJC_CHANGE(mem.adr%,but_delete%,0,x%,y%,w%,h%,32,1)
  ELSE
    ~OBJC_CHANGE(mem.adr%,but_delete%,0,x%,y%,w%,h%,40,1)
  ENDIF
  IF total%>0 THEN ! CLEAR
    ~OBJC_CHANGE(mem.adr%,but_clear%,0,x%,y%,w%,h%,32,1)
  ELSE
    ~OBJC_CHANGE(mem.adr%,but_clear%,0,x%,y%,w%,h%,40,1)
  ENDIF
  '
  IF total%>0 AND where%<>total% THEN ! SAVE, PRINT
    bits%=32
  ELSE
    bits%=40
  ENDIF
  ~OBJC_CHANGE(mem.adr%,but_save%,0,x%,y%,w%,h%,bits%,1)
  ~OBJC_CHANGE(mem.adr%,but_print%,0,x%,y%,w%,h%,bits%,1)
  '
RETURN
'
> PROCEDURE rec_get
  nam$=rec$(0,current%)
  mid_i$=rec$(1,current%)
  last$=rec$(2,current%)
  address$=rec$(3,current%)
  city$=rec$(4,current%)
  state$=rec$(5,current%)
  info$=rec$(6,current%)
  zip$=rec$(7,current%)
  phone$=rec$(8,current%)
  local%=ASC(rec$(9,current%))
  CHAR{{OB_SPEC(mem.adr%,elm_first%)}}=nam$
  CHAR{{OB_SPEC(mem.adr%,elm_i%)}}=mid_i$
  CHAR{{OB_SPEC(mem.adr%,elm_last%)}}=last$
  CHAR{{OB_SPEC(mem.adr%,elm_address%)}}=address$
  CHAR{{OB_SPEC(mem.adr%,elm_city%)}}=city$
  CHAR{{OB_SPEC(mem.adr%,elm_state%)}}=state$
  CHAR{{OB_SPEC(mem.adr%,elm_info%)}}=info$
  CHAR{{OB_SPEC(mem.adr%,elm_zip1%)}}=zip$
  CHAR{{OB_SPEC(mem.adr%,elm_phone1%)}}=phone$
  '
  IF local%=1 THEN
    ~OBJC_CHANGE(mem.adr%,but_local%,0,x%,y%,w%,h%,1,1)
  ELSE
    ~OBJC_CHANGE(mem.adr%,but_local%,0,x%,y%,w%,h%,0,1)
  ENDIF
  '
  redo
RETURN
'
> PROCEDURE redo
  FOR redo%=0 TO 8
    ~OBJC_DRAW(mem.adr%,redo%(redo%),0,fdx%,fdy%,fdw%,fdh%)
  NEXT redo%
RETURN
'
> PROCEDURE update
  rec$(0,current%)=CHAR{{OB_SPEC(mem.adr%,elm_first%)}}
  rec$(1,current%)=CHAR{{OB_SPEC(mem.adr%,elm_i%)}}
  rec$(2,current%)=CHAR{{OB_SPEC(mem.adr%,elm_last%)}}
  rec$(3,current%)=CHAR{{OB_SPEC(mem.adr%,elm_address%)}}
  rec$(4,current%)=CHAR{{OB_SPEC(mem.adr%,elm_city%)}}
  rec$(5,current%)=CHAR{{OB_SPEC(mem.adr%,elm_state%)}}
  rec$(6,current%)=CHAR{{OB_SPEC(mem.adr%,elm_info%)}}
  rec$(7,current%)=CHAR{{OB_SPEC(mem.adr%,elm_zip1%)}}
  rec$(8,current%)=CHAR{{OB_SPEC(mem.adr%,elm_phone1%)}}
  rec$(9,current%)=CHR$(OB_STATE(mem.adr%,but_local%))
RETURN
'
> PROCEDURE rec_del
  FOR rec%=0 TO 9
    rec$(rec%,current%)=""
  NEXT rec%
RETURN
'
> PROCEDURE rec_sort
  FOR rec%=0 TO max_rec%+1
    rec_order%(rec%)=rec%
    rec_sort$(rec%)=SPACE$(62)
    MID$(rec_sort$(rec%),1)=rec$(2,rec%)
    MID$(rec_sort$(rec%),35)=rec$(0,rec%)
    IF rec_sort$(rec%)=SPACE$(62) THEN
      rec_sort$(rec%)=CHR$(255)
    ENDIF
  NEXT rec%
  QSORT rec_sort$(),max_rec%+1,rec_order%()
  current%=rec_order%(where%)
  rec_max
RETURN
'
> PROCEDURE num_sort
  FOR rec%=0 TO max_rec%
    rec_order%(rec%)=rec%
    rec_sort$(rec%)=rec$(8,rec%)
    IF LEN(rec_sort$(rec%))=0 THEN
      rec_sort$(rec%)=CHR$(255)
    ENDIF
  NEXT rec%
  QSORT rec_sort$(),max_rec%+1,rec_order%()
RETURN
'
> PROCEDURE rec_max
  total%=0
  flag%=0
  now%=0
  DO
    mt_flag%=0
    FOR x%=0 TO 8
      IF rec$(x%,rec_order%(now%))<>"" THEN
        mt_flag%=1
        x%=9
      ENDIF
    NEXT x%
    IF mt_flag%=0 THEN
      total%=now%
      flag%=1
    ENDIF
    INC now%
  LOOP UNTIL flag%=1 OR now%=max_rec%+1
RETURN
'
> PROCEDURE rec_clear_all
  FOR rec%=0 TO total%
    FOR index%=0 TO 9
      rec$(index%,rec_order%(rec%))=""
    NEXT index%
  NEXT rec%
  rec_sort
RETURN
'
> PROCEDURE check_load
  FOR rec%=0 TO max_rec%-1
    FOR index%=0 TO 9
      IF LEN(rec$(index%,rec%))>max_len%(index%) THEN
        rec$(index%,rec%)=MID$(rec$(index%,rec%),1,max_len%(index%))
      ENDIF
    NEXT index%
  NEXT rec%
RETURN
'
> PROCEDURE size_objs
  item%=1
  but_close%=item%
  INC item%
  but_credit%=item%
  INC item%
  but_stats%=item%
  INC item%
  big_box%=item%
  INC item%
  p_first%=item%
  INC item%
  elm_first%=item%
  redo%(0)=item%
  INC item%
  p_i%=item%
  INC item%
  elm_i%=item%
  redo%(1)=item%
  INC item%
  p_last%=item%
  INC item%
  elm_last%=item%
  redo%(2)=item%
  INC item%
  p_address%=item%
  INC item%
  elm_address%=item%
  redo%(3)=item%
  INC item%
  p_city%=item%
  INC item%
  elm_city%=item%
  redo%(4)=item%
  INC item%
  p_state%=item%
  INC item%
  elm_state%=item%
  redo%(5)=item%
  INC item%
  p_info%=item%
  INC item%
  elm_info%=item%
  redo%(6)=item%
  INC item%
  p_zip1%=item%
  INC item%
  elm_zip1%=item%
  redo%(7)=item%
  INC item%
  p_phone1%=item%
  INC item%
  elm_phone1%=item%
  redo%(8)=item%
  INC item%
  but_local%=item%
  INC item%
  but_left%=item%
  INC item%
  but_slide%=item%
  INC item%
  but_current%=item%
  INC item%
  but_right%=item%
  FOR x%=0 TO 25
    INC item%
    alpha%(x%)=item%
  NEXT x%
  INC item%
  but_add%=item%
  INC item%
  but_delete%=item%
  INC item%
  but_clear%=item%
  INC item%
  but_search%=item%
  '
  INC item%
  but_next%=item%
  '
  INC item%
  but_load%=item%
  INC item%
  but_save%=item%
  INC item%
  but_print%=item%
  INC item%
  but_dial%=item%
  INC item%
  but_cancel%=item%
  INC item%
  but_info%=item%
  '
  OB_H(mem.adr%,0)=OB_H(mem.adr%,0)+34+9*fix%
  OB_W(mem.adr%,0)=OB_W(mem.adr%,0)+1
  '
  OB_X(mem.adr%,big_box%)=OB_X(mem.adr%,big_box%)+4
  OB_Y(mem.adr%,big_box%)=OB_Y(mem.adr%,big_box%)+7-fix%
  OB_W(mem.adr%,big_box%)=OB_W(mem.adr%,big_box%)+2
  OB_H(mem.adr%,big_box%)=OB_H(mem.adr%,big_box%)+1+7*fix%
  '
  FOR x%=but_close% TO but_stats%
    OB_Y(mem.adr%,x%)=OB_Y(mem.adr%,x%)+1
    OB_H(mem.adr%,x%)=OB_H(mem.adr%,x%)+1+fix%
  NEXT x%
  '
  OB_W(mem.adr%,but_credit%)=OB_W(mem.adr%,but_credit%)+1
  OB_X(mem.adr%,but_stats%)=OB_X(mem.adr%,but_stats%)+1
  '
  FOR x%=p_first% TO elm_phone1%
    OB_X(mem.adr%,x%)=OB_X(mem.adr%,x%)+1
    OB_H(mem.adr%,x%)=OB_H(mem.adr%,x%)+fix%
  NEXT x%
  '
  OB_X(mem.adr%,but_local%)=OB_X(mem.adr%,but_local%)+2
  OB_Y(mem.adr%,but_local%)=OB_Y(mem.adr%,but_local%)+1+fix%
  '
  OB_H(mem.adr%,but_left%)=OB_H(mem.adr%,but_left%)+1
  OB_H(mem.adr%,but_right%)=OB_H(mem.adr%,but_right%)+1
  '
  OB_H(mem.adr%,but_current%)=OB_H(mem.adr%,but_current%)+1
  OB_H(mem.adr%,but_slide%)=OB_H(mem.adr%,but_slide%)+1
  '
  FOR x%=elm_current% TO p_peroid%
    OB_Y(mem.adr%,x%)=OB_Y(mem.adr%,x%)+fix%
  NEXT x%
  '
  OB_Y(mem.adr%,p_last%)=OB_Y(mem.adr%,p_last%)+2*fix%
  OB_Y(mem.adr%,elm_last%)=OB_Y(mem.adr%,elm_last%)+2*fix%
  OB_Y(mem.adr%,p_address%)=OB_Y(mem.adr%,p_address%)+3*fix%
  OB_Y(mem.adr%,elm_address%)=OB_Y(mem.adr%,elm_address%)+3*fix%
  '
  FOR x%=p_city% TO elm_state%
    OB_Y(mem.adr%,x%)=OB_Y(mem.adr%,x%)+4*fix%
  NEXT x%
  '
  FOR x%=p_info% TO elm_zip1%
    OB_Y(mem.adr%,x%)=OB_Y(mem.adr%,x%)+5*fix%
  NEXT x%
  '
  FOR x%=p_phone1% TO but_local%
    OB_Y(mem.adr%,x%)=OB_Y(mem.adr%,x%)+6*fix%
  NEXT x%
  '
  OB_X(mem.adr%,but_current%)=OB_X(mem.adr%,but_current%)+6
  OB_Y(mem.adr%,but_slide%)=OB_Y(mem.adr%,but_slide%)+13+4*fix%
  OB_X(mem.adr%,but_slide%)=OB_X(mem.adr%,but_slide%)+6
  OB_W(mem.adr%,but_slide%)=OB_W(mem.adr%,but_slide%)+5
  '
  OB_Y(mem.adr%,but_left%)=OB_Y(mem.adr%,but_left%)+13+4*fix%
  OB_X(mem.adr%,but_left%)=OB_X(mem.adr%,but_left%)+6
  OB_Y(mem.adr%,but_right%)=OB_Y(mem.adr%,but_right%)+13+4*fix%
  OB_X(mem.adr%,but_right%)=OB_X(mem.adr%,but_right%)+11
  '
  FOR x%=0 TO 25
    OB_Y(mem.adr%,alpha%(x%))=OB_Y(mem.adr%,alpha%(x%))+18+5*fix%
    OB_X(mem.adr%,alpha%(x%))=OB_X(mem.adr%,alpha%(x%))+x%*3+6
    OB_W(mem.adr%,alpha%(x%))=OB_W(mem.adr%,alpha%(x%))+2
  NEXT x%
  '
  FOR x%=but_add% TO but_next%
    OB_Y(mem.adr%,x%)=OB_Y(mem.adr%,x%)+22+6*fix%
    OB_W(mem.adr%,x%)=OB_W(mem.adr%,x%)-2
  NEXT x%
  '
  FOR x%=but_load% TO but_cancel%
    OB_Y(mem.adr%,x%)=OB_Y(mem.adr%,x%)+28+7*fix%
    OB_W(mem.adr%,x%)=OB_W(mem.adr%,x%)-2
  NEXT x%
  '
  FOR x%=but_left% TO but_cancel%
    OB_X(mem.adr%,x%)=OB_X(mem.adr%,x%)+4
    OB_H(mem.adr%,x%)=OB_H(mem.adr%,x%)+fix%*2
  NEXT x%
  '
  OB_X(mem.adr%,but_add%)=OB_X(mem.adr%,but_add%)+1
  OB_X(mem.adr%,but_delete%)=OB_X(mem.adr%,but_delete%)+5
  OB_X(mem.adr%,but_clear%)=OB_X(mem.adr%,but_clear%)+9
  OB_X(mem.adr%,but_search%)=OB_X(mem.adr%,but_search%)+13
  OB_X(mem.adr%,but_next%)=OB_X(mem.adr%,but_next%)+17
  OB_X(mem.adr%,but_load%)=OB_X(mem.adr%,but_load%)+1
  OB_X(mem.adr%,but_save%)=OB_X(mem.adr%,but_save%)+5
  OB_X(mem.adr%,but_print%)=OB_X(mem.adr%,but_print%)+9
  OB_X(mem.adr%,but_dial%)=OB_X(mem.adr%,but_dial%)+13
  OB_X(mem.adr%,but_cancel%)=OB_X(mem.adr%,but_cancel%)+17
  '
  OB_W(mem.adr%,but_info%)=OB_W(mem.adr%,but_info%)+1
  OB_Y(mem.adr%,but_info%)=OB_Y(mem.adr%,but_info%)+34+8*fix%
  OB_H(mem.adr%,but_info%)=OB_H(mem.adr%,but_info%)+fix%*2
  '
  slide_width%=OB_W(mem.adr%,but_slide%)-OB_W(mem.adr%,but_current%)+1
  '
  alpha1%=alpha%(0)
  alpha2%=alpha%(25)
  '
  elm_search%=2
  but_search_cancel%=3
  but_search_done%=4
  '
  IF rez%=2 THEN
    ' OB_SPEC(mem.adr%,0)=BCLR(OB_SPEC(mem.adr%,0),6)
    ' OB_SPEC(mem.adr%,0)=BSET(OB_SPEC(mem.adr%,0),5)
    OB_SPEC(mem.adr%,0)=BSET(OB_SPEC(mem.adr%,0),4)
  ENDIF
RETURN
'
> PROCEDURE on_line
  DO
    button%=2
    on_line%=OUT?(0)
    IF on_line%=0 THEN
      ALERT 0,"The printer is ignoring me !  ",1,"RETRY| CANCEL ",button%
    ENDIF
  LOOP UNTIL button%=2
RETURN
'
> PROCEDURE num_print
  CHAR{{OB_SPEC(mem.adr%,but_info%)}}="Printing....."
  num_sort
  FOR x%=0 TO total%-1
    rec%=rec_order%(x%)
    temp$=rec$(8,rec%)
    rec$="(   )    -          "
    MID$(rec$,2,3)=MID$(temp$,1,3)
    MID$(rec$,7,3)=MID$(temp$,4,3)
    MID$(rec$,11,4)=MID$(temp$,7,4)
    rec$=rec$+rec$(0,rec%)+" "
    IF rec$(1,rec%)<>"" THEN
      rec$=rec$+rec$(1,rec%)+". "
    ENDIF
    rec$=rec$+rec$(2,rec%)
    LPRINT rec$
  NEXT x%
  rec_sort
  ~OBJC_DRAW(mem.adr%,but_info%,0,fdx%,fdy%,fdw%,fdh%)
  LINE fdx%,fdy%,fdx%,fdy%+fdh%-1
  info
  ~OBJC_DRAW(mem.adr%,but_info%,0,fdx%,fdy%,fdw%,fdh%)
  LINE fdx%,fdy%,fdx%,fdy%+fdh%-1
RETURN
'
> PROCEDURE nam_print
  CHAR{{OB_SPEC(mem.adr%,but_info%)}}="Printing....."
  t_size%=0
  FOR y%=0 TO 8
    size%(y%)=0
    FOR x%=0 TO total%-1
      rec%=rec_order%(x%)
      size%(y%)=MAX(size%(y%),LEN(rec$(y%,rec%)))
    NEXT x%
    IF size%(y)<>0 THEN
      t_size%=t_size%+size%(y%)+1
    ENDIF
  NEXT y%
  IF t_size%<81 THEN
    one_line
  ELSE
    m_line
  ENDIF
  ~OBJC_DRAW(mem.adr%,but_info%,0,fdx%,fdy%,fdw%,fdh%)
  LINE fdx%,fdy%,fdx%,fdy%+fdh%-1
  info
  ~OBJC_DRAW(mem.adr%,but_info%,0,fdx%,fdy%,fdw%,fdh%)
  LINE fdx%,fdy%,fdx%,fdy%+fdh%-1
RETURN
'
> PROCEDURE one_line
  FOR x%=0 TO total%-1
    rec%=rec_order%(x%)
    rec$=""
    '
    a_size%=0
    IF size%(0)<>0 THEN
      a_size%=size%(0)+1
    ENDIF
    IF size%(1)<>0 THEN
      a_size%=a_size%+size%(1)+2
    ENDIF
    IF size%(2)<>0 THEN
      a_size%=a_size%+size%(2)+1
    ENDIF
    IF a_size%<>0 THEN
      rec$=SPACE$(a_size%)
      IF rec$(0,rec%)<>"" THEN
        temp$=rec$(0,rec%)+" "
      ENDIF
      IF rec$(1,rec%)<>"" THEN
        temp$=temp$+rec$(1,rec%)+". "
      ENDIF
      IF rec$(2,rec%)<>"" THEN
        temp$=temp$+rec$(2,rec%)+" "
      ENDIF
      MID$(rec$,1)=temp$
    ENDIF
    '
    IF size%(3)<>0 THEN
      temp$=SPACE$(size%(3)+1)
      MID$(temp$,1)=rec$(3,rec%)
      rec$=rec$+temp$
    ENDIF
    '
    IF size%(4)<>0 THEN
      temp$=SPACE$(size%(4))+","
      MID$(temp$,1)=rec$(4,rec%)
      rec$=rec$+temp$
    ENDIF
    '
    IF size%(5)<>0 THEN
      temp$=SPACE$(size%(5)+1)
      MID$(temp$,1)=rec$(5,rec%)
      rec$=rec$+temp$
    ENDIF
    '
    IF size%(7)<>0 THEN
      a_size%=size%(7)+1-(size%(7)>5)
      temp$=SPACE$(a_size%)
      MID$(temp$,1)=MID$(rec$(7,rec%),1,5)
      IF size%(7)>5 AND LEN(rec$(7,rec%))>5 THEN
        MID$(temp$,6)="-"+MID$(rec$(7,rec%),6)
      ENDIF
      rec$=rec$+temp$
    ENDIF
    '
    IF size%(8)<>0 THEN
      a_size%=size%(8)+1
      temp$="(   )    -          "
      MID$(temp$,2,3)=MID$(rec$(8,rec%),1,3)
      MID$(temp$,7,3)=MID$(rec$(8,rec%),4,3)
      MID$(temp$,11,4)=MID$(rec$(8,rec%),7,4)
      MID$(temp$,16,4)=MID$(rec$(8,rec%),11,4)
      rec$=rec$+temp$
    ENDIF
    '
    rec$=rec$+rec$(6,rec%)
    '
    rec_sort$(x%)=rec$
  NEXT x%
  '
  FOR x%=0 TO total%-1
    LPRINT rec_sort$(x%)
  NEXT x%
RETURN
'
> PROCEDURE m_line
  t_rec$=SPACE$(159-(20*(size%(6)>0)))
  '
  FOR x%=0 TO total%-1
    rec%=rec_order%(x%)
    rec$=""
    '
    a_size%=0
    IF size%(0)<>0 THEN
      a_size%=size%(0)+1
    ENDIF
    IF size%(1)<>0 THEN
      a_size%=a_size%+size%(1)+2
    ENDIF
    IF size%(2)<>0 THEN
      a_size%=a_size%+size%(2)+1
    ENDIF
    IF a_size%<>0 THEN
      rec$=SPACE$(a_size%)
      IF rec$(0,rec%)<>"" THEN
        temp$=rec$(0,rec%)+" "
      ENDIF
      IF rec$(1,rec%)<>"" THEN
        temp$=temp$+rec$(1,rec%)+". "
      ENDIF
      IF rec$(2,rec%)<>"" THEN
        temp$=temp$+rec$(2,rec%)+" "
      ENDIF
      MID$(rec$,1)=temp$
    ENDIF
    '
    IF size%(8)<>0 THEN
      a_size%=size%(8)+1
      temp$="(   )    -          "
      MID$(temp$,2,3)=MID$(rec$(8,rec%),1,3)
      MID$(temp$,7,3)=MID$(rec$(8,rec%),4,3)
      MID$(temp$,11,4)=MID$(rec$(8,rec%),7,4)
      MID$(temp$,16,4)=MID$(rec$(8,rec%),11,4)
      rec$=rec$+temp$
    ENDIF
    '
    MID$(t_rec$,1)=rec$
    '
    rec$=""
    '
    IF size%(3)<>0 THEN
      temp$=SPACE$(size%(3)+1)
      MID$(temp$,1)=rec$(3,rec%)
      rec$=rec$+temp$
    ENDIF
    '
    IF size%(4)<>0 THEN
      temp$=SPACE$(size%(4))
      MID$(temp$,1)=rec$(4,rec%)+","
      rec$=rec$+temp$
    ENDIF
    '
    IF size%(5)<>0 THEN
      temp$=SPACE$(size%(5)+1)
      MID$(temp$,1)=rec$(5,rec%)
      rec$=rec$+temp$
    ENDIF
    '
    IF size%(7)<>0 THEN
      a_size%=size%(7)+1-(size%(7)>5)
      temp$=SPACE$(a_size%)
      MID$(temp$,1)=MID$(rec$(7,rec%),1,5)
      IF size%(7)>5 AND LEN(rec$(7,rec%))>5 THEN
        MID$(temp$,6)="-"+MID$(rec$(7,rec%),6)
      ENDIF
      rec$=rec$+temp$
    ENDIF
    '
    MID$(t_rec$,81)=rec$
    '
    IF size%(6)>0 THEN
      MID$(t_rec$,161)=rec$(6,rec%)
    ENDIF
    rec_sort$(x%)=t_rec$
  NEXT x%
  '
  FOR x%=0 TO total%-1
    LPRINT rec_sort$(x%)
    LPRINT
  NEXT x%
RETURN
'
> PROCEDURE dial
  temp$=rec$(8,current%)
  local%=ASC(rec$(9,current%))
  IF OUT?(1) AND 0 THEN
    IF local%=0 THEN
      OUT 1,VAL(MID$(temp$,x%,1))
      IF MID$(temp$,1,3)<>"   " THEN
        FOR x%=1 TO 3
          OUT 1,VAL(MID$(temp$,x%,1))
        NEXT x%
      ENDIF
    ENDIF
    FOR x%=4 TO 10
      OUT 1,VAL(MID$(temp$,x%,1))
    NEXT x%
  ELSE
    IF local%=0 THEN
      tone%=1
      make_tone
      IF MID$(temp$,1,3)<>"   " THEN
        FOR x%=1 TO 3
          tone%=VAL(MID$(temp$,x%,1))
          make_tone
        NEXT x%
      ENDIF
    ENDIF
    FOR x%=4 TO 10
      tone%=VAL(MID$(temp$,x%,1))
      make_tone
    NEXT x%
  ENDIF
RETURN
'
> PROCEDURE make_tone
  SOUND 1,15,#tone%(0,tone%),0
  SOUND 2,15,#tone%(1,tone%),0
  WAVE 3,3,11,1,3
  SOUND 1,0,0,0
  SOUND 2,0,0,0
  PAUSE 2
RETURN
'
> PROCEDURE store_colors
  FOR i%=0 TO cols%
    pal%(i%)=XBIOS(7,W:i%,W:-1)
  NEXT i%
RETURN
'
> PROCEDURE place_colors
  SELECT rez%
  CASE 0
    VSETCOLOR 0,15,15,15
    VSETCOLOR 1,0,0,0
    VSETCOLOR 2,15,0,0
    VSETCOLOR 3,0,0,15
  CASE 1
    VSETCOLOR 0,15,15,15
    VSETCOLOR 1,0,0,0
    VSETCOLOR 2,15,0,0
    VSETCOLOR 3,0,0,15
  CASE 2
    VSETCOLOR 0,15,15,15
    VSETCOLOR 1,0,0,0
  ENDSELECT
RETURN
'
> PROCEDURE restore_colors
  FOR i%=0 TO cols%
    ~XBIOS(7,W:i%,W:pal%(i%))
  NEXT i%
RETURN
'
DATA 26,1,32,29,23,2,17,9,14,1
'
'   0
DATA 941,1336
' 1,2,3
DATA 697,1209,697,1336,697,1477
' 4,5,6
DATA 770,1209,770,1336,770,1477
' 7,8,9
DATA 852,1209,852,1336,852,1477
