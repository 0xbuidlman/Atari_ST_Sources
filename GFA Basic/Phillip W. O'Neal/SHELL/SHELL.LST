$m100000            ! THIS PROGRAM WILL USE 100000 BYTES OF MEMORY
' SHELL
init_variables
'
DO
  c_type&=EVNT_MULTI(&X10011,1,1,1,0,0,0,0,0,0,0,0,0,0,buffer%,0,mx&,my&,b&,key_state&,key&,d&)
  check_menu
LOOP
'
> PROCEDURE init_variables
  '
  INLINE window_title%,128
  ' FIXED MEMORY LOCATION FOR WINDOW TITLE TEXT
  '
  '
  current_drive%=GEMDOS(25)            ! DRIVE PROGRAM WAS RAN FROM
  my_path$=DIR$(current_drive%+1)+"\" ! PATH     "     "   "   "
  rsc$=my_path$+"FULL_DIR.LST"      ! FILENAME
  '
  DIM buffer&(7)             ! MESSAGE BUFFER FOR EVENT CALL
  buffer%=VARPTR(buffer&(0))
  '
  ' ~MENU_BAR(menu%,1)        ! SHOW MY MENU
  '
  flag%=WIND_GET(0,4,wx%,wy%,ww%,wh%) ! GET SIZE OF DESKTOP-MENUBAR
  win%=WIND_CREATE(&X111111111111,wx%,wy%,ww%,wh%)
  ' CREATE WINDOW WITH ALL WIDGETS
  '
  window_title$="Show NVM"
  title
  '
  flag%=WIND_OPEN(win%,wx%,wy%,ww%,wh%)
  flag%=WIND_GET(win%,4,iwx%,iwy%,iww%,iwh%)  ! GET INSIDE WINDOW SIZE
  '
  DEFFILL 0,2,8
  DEFMOUSE 0
  '
RETURN
'
> PROCEDURE check_menu
  '
  IF c_type& AND &X10 THEN       ! MOUSE EVENT
    '
    ' obj%=OBJC_FIND(shell_tool%,0,2,mx&,my&)
    ' DID MOUSE CLICK ON A DESKTOP BUTTON ?
    '
    ' IF obj%>0 THEN
    ' OB_STATE(shell_tool%,obj%)=BSET(OB_STATE(shell_tool%,obj%),0)
    ' repair2
    ' PAUSE 5
    ' OB_STATE(shell_tool%,obj%)=BCLR(OB_STATE(shell_tool%,obj%),0)
    ' repair2
    ' ENDIF
    '
    SELECT obj%
    CASE 1 ! BUTTON 'CREDITS'
      txt$=" |SHELL ½1994  |By Phillip W. O'Neal  | "
      ALERT 0,txt$,1," OK ",d%
      '
    CASE 2 ! BUTTON 'QUIT'
      trying_to_quit
      '
    ENDSELECT
    '
  ENDIF
  '
  IF c_type& AND &X1 THEN        ! KEY PRESS EVENT
    '
    code&=SHR(key& AND &HFF00,8)
    ' UPPER BYTE OF WORD CONTAINS SCAN CODE
    '
    SELECT code&
      '
    CASE 23 !   'I'
      txt$=" |SHELL ½1994  |By Phillip W. O'Neal  | "
      ALERT 0,txt$,1," OK ",d%
      '
    CASE 16,28,114 !   'Q'
      trying_to_quit
      '
    ENDSELECT
  ENDIF
  '
  IF c_type& AND &X10000 THEN ! MENU/WINDOW EVENT
    command%=buffer&(0) ! KIND OF EVENT
    '
    IF command%=10 THEN ! MENU ITEM
      tit%=buffer&(3)   ! WHICH MENU TITLE ?
      ~MENU_TNORMAL(shell_menu%,tit%,1)  ! MAKE MENU TITLE NORMAL AGAIN
      item%=buffer&(4)  ! WHICH MENU ITEM WAS SELECTED
      '
      SELECT item%
        '
      CASE 7  ! CREDIT
        txt$=" |SHELL ½1994  |By Phillip W. O'Neal  | "
        ALERT 0,txt$,1," OK ",d%
        '
      CASE 16 ! QUIT
        trying_to_quit
        '
      ENDSELECT
      '
    ELSE !                         WINDOW EVENT
      twin%=buffer&(3)  ! HANDLE OF WINDOW THAT TRIGGERED EVENT
      '
      IF twin%=win% THEN ! BE SURE IT WAS OUR WINDOW
        SELECT command%
          '
        CASE 20     ! WIND UPDATE
          repair
          '
        CASE 21     ! WINDOW CLICKED ON
          flag%=WIND_SET(win%,10,0,0,0,0) ! WINDOW SET TO TOP
          DEFMOUSE 0
          '
        CASE 22 ! CLOSE WINDOW
          trying_to_quit
          '
        CASE 23 ! FULL WINDOW
          IF full% THEN
            flag%=WIND_GET(win%,6,wx%,wy%,ww%,wh%)     ! GET PREVIOUS SIZE
            flag%=WIND_SET(win%,5,wx%,wy%,ww%,wh%)
            flag%=WIND_GET(win%,4,iwx%,iwy%,iww%,iwh%)
            full%=0
          ELSE
            flag%=WIND_GET(win%,7,wx%,wy%,ww%,wh%)     ! GET MAX SIZE
            flag%=WIND_SET(win%,5,wx%,wy%,ww%,wh%)
            flag%=WIND_GET(win%,4,iwx%,iwy%,iww%,iwh%)
            full%=1
          ENDIF
          ' OB_X(shell_tool%,0)=iwx%  ! SET
          ' OB_Y(shell_tool%,0)=iwy%
          size_slide
          '
        CASE 24 ! ARROWS / SLIDERS CLICKED ON
          silders
          '
        CASE 25 ! HORZ SLIDER MOVED
          IF hslide<1000 THEN  ! ONLY DO THIS IF SLIDE IS NOT FULL SIZED
            hpos=buffer&(4)    ! NEW SLIDER POSITION
            flag%=WIND_SET(win%,8,hpos,0,0,0) ! SET SLIDER POSITION
            column=(hpos/1000)*(max_char%-max_col%)
            column=column-(column=0)
            repair3
          ENDIF
          '
        CASE 26 ! VERT SLIDER MOVED
          IF vslide<1000 THEN  ! ONLY DO THIS IF SLIDE IS NOT FULL SIZED
            vpos=buffer&(4)    ! NEW SLIDER POSITION
            flag%=WIND_SET(win%,9,vpos,0,0,0) ! SET SLIDER POSITION
            lpos=(vpos/1000)*(num_lines%-max_row%)
            repair3
          ENDIF
          '
        CASE 27,28 ! WINDOW SIZED, MOVED
          wx%=buffer&(4) ! GET NEW WINDOW POSITION/SIZE
          wy%=buffer&(5)
          ww%=buffer&(6)
          wh%=buffer&(7)
          flag%=WIND_SET(win%,5,wx%,wy%,ww%,wh%)     ! SIZE WINDOW
          flag%=WIND_GET(win%,4,iwx%,iwy%,iww%,iwh%) ! GET INSIDE SIZE
          ' OB_X(shell_tool%,0)=iwx%  ! SET
          ' OB_Y(shell_tool%,0)=iwy%
          IF command%=27 THEN ! IF SIZED THEN ADJUST SLIDER SIZES
            size_slide
          ENDIF
          '
        ENDSELECT
      ENDIF
    ENDIF
  ENDIF
RETURN
'
> PROCEDURE silders
  arrow=buffer&(4) ! WHAT WIDGET WAS CLICKED
  SELECT arrow
    '
  CASE 0 ! TOP HALF OF SLIDER
    IF vpos<>0 AND vslide<1000 THEN ! IF NOT MIN POS AND SLIDER NOT MAX SIZE
      vpos=vpos-big_vstep  ! CHANGE POSITION
      IF vpos<0 THEN
        vpos=0
      ENDIF
      lpos=(vpos/1000)*(num_lines%-max_row%)
      flag%=WIND_SET(win%,9,vpos,0,0,0) ! SET SLIDER POSITION
      repair3                            ! UPDATE WINDOW CONTENTS USING REC LIST3
    ENDIF
    '
  CASE 1 ! BOTTOM HALF OF SLIDER
    IF vpos<>1000 AND vslide<1000 THEN
      vpos=vpos+big_vstep
      IF vpos>1000 THEN
        vpos=1000
      ENDIF
      lpos=(vpos/1000)*(num_lines%-max_row%)
      flag%=WIND_SET(win%,9,vpos,0,0,0)
      repair3
    ENDIF
    '
  CASE 2 ! UP ARROW
    IF vpos<>0 AND vslide<1000 THEN
      vpos=vpos-(1000/max_row%)
      IF vpos<0 THEN
        vpos=0
      ENDIF
      lpos=(vpos/1000)*(num_lines%-max_row%)
      flag%=WIND_SET(win%,9,vpos,0,0,0)
      repair3
    ENDIF
    '
  CASE 3 ! DOWN ARROW
    IF vpos<>1000 AND vslide<1000 THEN
      vpos=vpos+(1000/max_row%)
      IF vpos>1000 THEN
        vpos=1000
      ENDIF
      lpos=(vpos/1000)*(num_lines%-max_row%)
      flag%=WIND_SET(win%,9,vpos,0,0,0)
      repair3
    ENDIF
    '
  CASE 4 ! LEFT OF SLIDER
    IF hpos<>0 THEN
      column=column-(1000/column)
      column=column-(column=0)
      hpos=1000/(max_char%-max_col%)*column
      flag%=WIND_SET(win%,8,hpos,0,0,0)
      repair3
    ENDIF
    '
  CASE 5 ! RIGHT OF SLIDER
    IF hpos<>1000 THEN
      column=column+(1000/column)
      hpos=1000/(max_char%-max_col%)*column
      flag%=WIND_SET(win%,8,hpos,0,0,0)
      repair3
    ENDIF
    '
  CASE 6 ! LEFT ARROW
    IF hpos<>0 AND hslide<1000 THEN
      DEC column
      column=column-(column=0)
      hpos=1000/(max_char%-max_col%)*column
      flag%=WIND_SET(win%,8,hpos,0,0,0)
      repair3
    ENDIF
    '
  CASE 7 ! RIGHT ARROW
    IF hpos<>1000 AND hslide<1000 THEN
      INC column
      hpos=1000/(max_char%-max_col%)*column
      flag%=WIND_SET(win%,8,hpos,0,0,0)
      repair3
    ENDIF
    '
  ENDSELECT
RETURN
'
> PROCEDURE title
  CHAR{window_title%}=window_title$+CHR$(0)+CHR$(0)
  ' FILL OUT TITLE BUFFER WITH STRING AND TERMINATOR CHARS
  '
  flag%=WIND_SET(win%,2,CARD(SWAP(window_title%)),CARD(window_title%),0,0)
  ' SET WINDOW TITLE
RETURN
'
> PROCEDURE info_line
  CHAR{info_line%}=info_line$+CHR$(0)+CHR$(0)
  ' FILL OUT INFOLINE BUFFER WITH STRING AND TERMINATOR CHARS
  '
  flag%=WIND_SET(win%,3,CARD(SWAP(info_line%)),CARD(info_line%),0,0)
  ' SET WINDOW INFOLINE
RETURN
'
> PROCEDURE repair
  er%=WIND_UPDATE(1)                      ! TELL GEM WE ARE TAKING OVER
  er%=WIND_GET(win%,11,fx%,fy%,fx2%,fy2%) ! GET FIRST RECTANGLE
  show_text
  obj%=0
  ' show_buttons
  fix_done%=0
  '
  DO
    er%=WIND_GET(win%,12,fx%,fy%,fx2%,fy2%)      ! GET NEXT RECTANGLE
    '
    IF fx2%+fy2%=0 THEN                          ! ANY MORE RECTANGLES ?
      fix_done%=1
    ELSE
      show_text
      ' obj%=0
      ' show_buttons
    ENDIF
    '
  LOOP UNTIL fix_done%=1
  '
  er%=WIND_UPDATE(0)                      !  DONE!
RETURN
'
> PROCEDURE show_text
  CLIP fx%,fy%,fx2%,fy2%
  PBOX fx%,fy%,fx%+fx2%-1,fy%+fy2%-1
  ' ERASE AREA
  er%=WIND_UPDATE(0)
  FOR row%=0 TO max_row%-1
    TEXT iwx%,iwy%+row%*char_height%+char_height%-2,MID$(source$(row%+lpos),column)
  NEXT row%
  er%=WIND_UPDATE(1)                      ! TELL GEM WE ARE TAKING OVER
RETURN
'
> PROCEDURE trying_to_quit
  txt$=" |SURE YOU WANT TO QUIT ?  "
  but$="OK| CANCEL "
  ALERT 2,txt$,1,but$,button%
  '
  IF button%=1 THEN
    flag%=WIND_CLOSE(win%)       ! CLOSE WINDOW
    flag%=WIND_DELETE(win%)      ! DELETE WINDOW
    END
  ENDIF
  '
RETURN
