$m50000
RESERVE 100000
@init
@trace
'
> PROCEDURE init
  COLOR 1
  DEFFILL 1,2,8
  '
  free%=INT(GEMDOS(72,L:-1)/10)*10
  buffer%=GEMDOS(72,L:free%)
  '
  DIM x%(44),y%(44),board!(63),board2!(63)
  DIM moves%(2,105),move%(44),max_check%(44)
  DIM turn%(6,44)
  board%=VARPTR(board!(0))
  board2%=VARPTR(board2!(0))
  '
  FOR x%=0 TO 105
    READ moves%(0,x%)
    READ moves%(1,x%)
    READ moves%(2,x%)
    '
  NEXT x%
  '
  FOR x%=0 TO 44
    READ x%(x%),y%(x%)
  NEXT x%
  '
  FOR x%=0 TO 44
    READ turn%(0,x%)
    READ turn%(1,x%)
    READ turn%(2,x%)
    READ turn%(3,x%)
    READ turn%(4,x%)
    READ turn%(5,x%)
    READ turn%(6,x%)
  NEXT x%
  screen_width%=WORK_OUT(0)+1
  screen_height%=WORK_OUT(1)+1
  peg_step%=11
  board_step%=peg_step%*10
  '
RETURN
'
> PROCEDURE trace
  start%=22
  FOR see%=0 TO 44
    board!(see%)=TRUE
    move%(see%)=0
    max_check%(see%)=0
  NEXT see%
  board!(start%)=FALSE
  move%(0)=buffer%
  BMOVE board%,move%(0),6
  LPOKE move%(0)+6,1
  '
  max_check%(0)=1
  '
  TEXT 0,16,"Max:"+STR$(free%/10)
  FOR move%=1 TO 44
    TEXT 0,32,"Move:"+STR$(move%)
    move%(move%)=move%(move%-1)+10*max_check%(move%-1)
    max_check%(move%)=0
    seed%=0
    DO
      TEXT 0,48,"Seed:"+STR$(seed%)+" "+"of "+STR$(max_check%(move%-1))+SPACE$(20)
      @test
      INC seed%
      IF INP?(2) THEN
        flag%=GEMDOS(73,L:buffer%)
        END
      ENDIF
    LOOP UNTIL seed%>=max_check%(move%-1)
    total%=total%+max_check%(move%)
  NEXT move%
  '
  flag%=GEMDOS(73,L:buffer%)
  '
RETURN
'
> PROCEDURE test
  FOR try%=0 TO 105
    '
    BMOVE move%(move%-1)+seed%*10,board%,6
    '
    IF board!(moves%(0,try%))=FALSE AND board!(moves%(1,try%))=TRUE AND board!(moves%(2,try%))=TRUE THEN
      board!(moves%(0,try%))=TRUE
      board!(moves%(1,try%))=FALSE
      board!(moves%(2,try%))=FALSE
      '
      IF max_check%(move%)>0 THEN
        test_a1%=LPEEK(board%)
        test_a2%=DPEEK(board%+4)
        '
        FOR x%=0 TO 44
          board2!(x%)=board!(turn%(0,x%))
        NEXT x%
        '
        test_b1%=LPEEK(board2%)
        test_b2%=DPEEK(board2%+4)
        '
        FOR x%=0 TO 44
          board2!(x%)=board!(turn%(1,x%))
        NEXT x%
        '
        test_c1%=LPEEK(board2%)
        test_c2%=DPEEK(board2%+4)
        '
        FOR x%=0 TO 44
          board2!(x%)=board!(turn%(2,x%))
        NEXT x%
        '
        test_d1%=LPEEK(board2%)
        test_d2%=DPEEK(board2%+4)
        '
        FOR x%=0 TO 44
          board2!(x%)=board!(turn%(3,x%))
        NEXT x%
        '
        test_e1%=LPEEK(board2%)
        test_e2%=DPEEK(board2%+4)
        '
        FOR x%=0 TO 44
          board2!(x%)=board!(turn%(4,x%))
        NEXT x%
        '
        test_f1%=LPEEK(board2%)
        test_f2%=DPEEK(board2%+4)
        '
        FOR x%=0 TO 44
          board2!(x%)=board!(turn%(5,x%))
        NEXT x%
        '
        test_g1%=LPEEK(board2%)
        test_g2%=DPEEK(board2%+4)
        '
        FOR x%=0 TO 44
          board2!(x%)=board!(turn%(6,x%))
        NEXT x%
        '
        test_h1%=LPEEK(board2%)
        test_h2%=DPEEK(board2%+4)
        '
        check_flag%=0
        FOR check%=0 TO max_check%(move%)-1
          temp1%=LPEEK(move%(move%)+check%*10)
          temp2%=DPEEK(move%(move%)+check%*10+4)
          IF test_a1%=temp1% AND test_a2%=temp2% THEN
            check_flag%=1
            check%=max_check%(move%)
          ENDIF
          IF test_b1%=temp1% AND test_b2%=temp2% THEN
            check_flag%=1
            check%=max_check%(move%)
          ENDIF
          IF test_c1%=temp1% AND test_c2%=temp2% THEN
            check_flag%=1
            check%=max_check%(move%)
          ENDIF
          IF test_d1%=temp1% AND test_d2%=temp2% THEN
            check_flag%=1
            check%=max_check%(move%)
          ENDIF
          IF test_e1%=temp1% AND test_e2%=temp2% THEN
            check_flag%=1
            check%=max_check%(move%)
          ENDIF
          IF test_f1%=temp1% AND test_f2%=temp2% THEN
            check_flag%=1
            check%=max_check%(move%)
          ENDIF
          IF test_g1%=temp1% AND test_g2%=temp2% THEN
            check_flag%=1
            check%=max_check%(move%)
          ENDIF
          IF test_h1%=temp1% AND test_h2%=temp2% THEN
            check_flag%=1
            check%=max_check%(move%)
          ENDIF
          '
        NEXT check%
        '
        IF check_flag%=0 THEN
          BMOVE board%,move%(move%)+max_check%(move%)*10,6
          LPOKE move%(move%)+max_check%(move%)*10+6,seed%
          INC max_check%(move%)
        ENDIF
      ELSE
        BMOVE board%,move%(move%)+max_check%(move%)*10,6
        LPOKE move%(move%)+max_check%(move%)*10+6,seed%
        INC max_check%(move%)
        '
      ENDIF
      '
    ENDIF
    '
    TEXT 0,64,"Total:"+STR$(total%+max_check%(move%))
  NEXT try%
  '
RETURN
'
> PROCEDURE show
  FOR bit%=0 TO 44
    IF board!(bit%)=TRUE THEN
      PCIRCLE x%(bit%)*peg_step%+board_x%+peg_step%,y%(bit%)*peg_step%+board_y%+peg_step%,peg_step%/2.5
    ELSE
      CIRCLE x%(bit%)*peg_step%+board_x%+peg_step%,y%(bit%)*peg_step%+board_y%+peg_step%,peg_step%/2.5
    ENDIF
    '
  NEXT bit%
  TEXT board_x%,+board_y%+16,STR$(move%)
  TEXT board_x%,+board_y%+32,STR$(try%)
  '
  board_x%=board_x%+board_step%
  IF board_x%>screen_width%-board_step% THEN
    board_x%=0
    board_y%=board_y%+board_step%
    IF board_y%>screen_height%-board_step% THEN
      board_x%=0
      board_y%=0
      DO
      LOOP UNTIL MOUSEK
      CLS
    ENDIF
  ENDIF
  '
RETURN
'
DATA 0,1,2,0,3,6
DATA 1,4,7
DATA 2,1,0,2,5,8
DATA 3,4,5,3,6,12
DATA 4,7,13
DATA 5,4,3,5,8,14
DATA 6,3,0,6,7,8,6,12,21
DATA 7,4,1,7,13,22
DATA 8,5,2,8,7,6,8,14,23
DATA 9,10,11,9,18,27
DATA 10,11,12,10,19,28
DATA 11,12,13,11,20,29,11,10,9
DATA 12,6,3,12,11,10,12,13,14,12,21,30
DATA 13,7,4,13,12,11,13,14,15,13,22,31
DATA 14,8,5,14,13,12,14,15,16,14,23,32
DATA 15,14,13,15,16,17,15,24,33
DATA 16,15,14,16,25,34
DATA 17,16,15,17,26,35
DATA 18,19,20
DATA 19,20,21
DATA 21,12,6,21,20,19,21,22,23,21,30,36
DATA 22,13,7,22,21,20,22,23,24,22,31,37
DATA 23,14,8,23,22,21,23,24,25,23,32,38
DATA 24,23,22,24,25,26
DATA 25,24,23
DATA 26,25,24
DATA 27,18,9,27,28,29
DATA 28,19,10,28,29,30
DATA 29,20,11,29,28,27,29,30,31
DATA 30,21,12,30,29,28,30,31,32,30,36,39
DATA 31,22,13,31,30,29,31,32,33,31,37,40
DATA 32,23,14,32,31,30,32,33,34,32,38,41
DATA 33,24,15,33,32,31,33,34,35
DATA 34,25,16,34,33,32
DATA 35,26,17,35,34,33
DATA 36,30,21,36,37,38,36,39,42
DATA 37,31,22,37,40,43
DATA 38,32,23,38,37,36,38,41,44
DATA 39,36,30,39,40,41
DATA 40,37,31
DATA 41,38,32,41,40,39
DATA 42,39,36,42,43,44
DATA 43,40,37
DATA 44,41,38,44,43,42
'
DATA 3,0,4,0,5,0
DATA 3,1,4,1,5,1
DATA 3,2,4,2,5,2
DATA 0,3,1,3,2,3,3,3,4,3,5,3,6,3,7,3,8,3
DATA 0,4,1,4,2,4,3,4,4,4,5,4,6,4,7,4,8,4
DATA 0,5,1,5,2,5,3,5,4,5,5,5,6,5,7,5,8,5
DATA 3,6,4,6,5,6
DATA 3,7,4,7,5,7
DATA 3,8,4,8,5,8
'
DATA 27,17,44,9,42,35,2
DATA 18,26,43,18,43,26,1
DATA 9,35,42,27,44,17,0
'
DATA 28,16,41,10,39,34,5
DATA 19,25,40,19,40,25,4
DATA 10,34,39,28,41,16,3
'
DATA 29,15,38,11,36,33,8
DATA 20,24,37,20,37,24,7
DATA 11,33,36,29,38,15,6
'
DATA 42,2,35,0,27,44,17
DATA 39,5,34,3,28,41,16
DATA 36,8,33,6,29,38,15
DATA 30,14,32,12,30,32,14
DATA 21,23,31,21,31,23,13
DATA 12,32,30,30,32,14,12
DATA 9,38,29,36,33,8,11
DATA 3,41,28,39,34,5,10
DATA 0,44,27,9,35,2,9
'
DATA 43,1,26,1,18,43,26
DATA 40,4,25,4,19,40,25
DATA 37,7,42,7,20,37,24
DATA 31,13,23,13,21,31,23
DATA 22,22,22,22,22,22,22
DATA 13,31,21,31,23,13,21
DATA 7,37,20,37,24,7,20
DATA 4,40,19,40,25,4,19
DATA 1,43,18,43,26,1,18
'
DATA 44,0,17,2,9,42,35
DATA 41,3,16,5,10,39,34
DATA 38,6,15,8,11,36,33
DATA 32,12,14,14,12,30,32
DATA 23,21,13,23,13,21,31
DATA 14,30,12,32,14,12,30
DATA 8,36,11,38,15,6,29
DATA 5,39,10,41,16,3,28
DATA 2,42,9,44,17,0,27
'
DATA 33,11,8,15,6,29,38
DATA 24,20,7,24,7,20,37
DATA 15,29,6,33,8,11,36
'
DATA 34,10,5,16,3,28,41
DATA 25,19,4,25,4,19,40
DATA 16,28,3,34,5,10,39
'
DATA 35,9,2,17,0,27,44
DATA 26,18,1,26,1,18,43
DATA 17,27,0,35,2,9,42
