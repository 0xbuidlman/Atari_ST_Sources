'  Code for using Falcon compatible XBIOS sound calls
' (For use on TT or STe, please use X-SOUND by Thothy)
' ====================================================
'  Example code by GokMasE 2000-04-17
'
' +-------------------------------------------------------------------------+
' | To play a an AVR-sample just call play_sound with full sample path.     |
' +-------------------------------------------------------------------------+
' | Play_sound will load the sample into a buffer and call :                |
' | Set_n_play that will check AVR sample format, set parameters and call : |
' | Xbios_play that will then do the necessary XBIOS-calls.                 |
' +-------------------------------------------------------------------------+
'
@play_sound(avr_path$)
'
> PROCEDURE play_sound(sample$)   ! Load sample
  LOCAL sample%
  OPEN "I",#1,sample$
  lof%=LOF(#1)
  sample%=MALLOC(lof%)          ! Allocate memory
  sample2%=ADD(sample%,lof%)    ! Marks end of sample
  IF sample%>0
    BGET #1,sample%,lof%
    @set_n_play(sample%)        ! Setup parameters needed and then play sample
  ENDIF
  ~MFREE(sample%)               ! Release allocated memory
  CLOSE #1
RETURN
> PROCEDURE set_n_play(sample%)   ! Setup parameters and play sample
  LOCAL temp_mod&,temp_scal&,temp_val&
  '
  ' Here follows complete definition of AVR-sample in case you need
  ' to do anything more advanced with them.
  '
  ' ======================================================================
  ' typedef struct
  ' {
  ' char magic[4];     /* must be '2BIT' */
  ' char name[8];      /* filename - may need appending to nameext */
  ' short stereo;      /* 0=mono, $ffff=stereo */
  ' short resolution;  /* 8=8-bit 12=12-bit 18=16-bit */
  ' short signed;      /* 0=unsigned $ffff=signed */
  ' short looping;     /* 0=no loop, $ffff=looping (other values used)
  ' short midinote;    /* $ffff=none, $ffxx= single note $llhh=split */
  ' long freq;         /* mask top byte, and rest = freq in Hz */
  ' long length;       /* in data bytes/words - ie *2 for 16-bit */
  ' long loopstart;    /* offset in data bytes/words */
  ' long loopend;      /* and again... */
  ' short midisplit;   /* dont use - split point for midi keyboards */
  ' short compression; /* do not use - fill with 0's */
  ' short resv;        /* reserved - fill with 0's   */
  ' char nameext[20];  /* more space for filename. Pad with 0's */
  ' char markers[64];  /* sample position markers. fill with 0's */
  ' ======================================================================
  '
  ' Detect if 0=8bit stereo , 1=16bit stereo or 2=8 bit mono
  '
  IF WORD{sample%+12}=0 ! Mono?
    temp_mod&=2 ! (8bit mono)
  ELSE
    temp_mod&=ABS(WORD{sample%+14}=&HFFFF)
  ENDIF
  '
  ' Detect frequence and setup proper inputs for xbios play
  '
  SELECT AND(LONG{sample%+22},&HFFFF)
  CASE 8195
    temp_scal&=11
  CASE 9834
    temp_scal&=9
  CASE 12292 TO 16389
    temp_scal&=7
  CASE 16390
    temp_scal&=5
  CASE 19668
    temp_scal&=4
  CASE 24585
    temp_scal&=3
  CASE 32780
    temp_scal&=2
  CASE 49170
    temp_scal&=1
  CASE 25033
    temp_val&=2
  CASE 50066
    temp_val&=3
  ENDSELECT
  ~@xbios_play(ADD(sample%,128),sample2%,temp_mod&,temp_scal&,temp_val&)
RETURN
> FUNCTION xbios_play(sam_begin%,sam_end%,mode&,scale&,value&) ! XBIOS-call
$F%
'
' Originally this routine was written in C by Anthony Jacques
' Translated to GFA by GokMasE 2000-04-11
'
IF XBIOS(136,-1)=FALSE  ! No playing going on right now?
  IF XBIOS(128)>0       ! <-- Lock sound?
    '
    ~XBIOS(&H86,0)      ! setmontrack -set output to first (0) track. zero on success
    ~XBIOS(&H85,1,0)    ! settrack -set number of tracks to 1 playback ! zero on success
    ~XBIOS(&H84,mode&)  ! setmode(mode) 0=8bitste 1=16bitste 2=8bitmono
    '
    ~XBIOS(130,value&,6)                  ! soundcmd(value,6) determines frequency
    ~XBIOS(131,0,L:sam_begin%,L:sam_end%) ! 0=play, 1=rec,
    '
    ~XBIOS(139,0,8,0,scale&,0) ! devconnect -connect DMA play to DAC.
    ~XBIOS(136,1)              ! buffoper(mode) , 0=stop, 1=play, 3=play & loop
    ~XBIOS(129)                ! Unlock sound
  ENDIF
ENDIF
'
' The frequency is determined by the prescale value. Below is a table which gives the
' frequency for each value. Any value not listed will give a mute condition.
' scale    freq (Hz)   value passed in Soundcmd(value,6);
' 11       8195              -
' 9        9834              -
' 7       12292              -
' 5       16390              -
' 4       19668              -
' 3       24585              -
' 2       32780              -
' 1       49170              -
' 0       125??              1
' 0       25033              2
' 0       50066              3
RETURN 0
ENDFUNC
