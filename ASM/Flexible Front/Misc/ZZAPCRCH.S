MAXSEARCH=$800
MAXPASSES=70
STRINGL=8        ;4 OR 8 ONLY!!!

 JMP START(PC)
BUFF: DS.B 2500,0

START:
 MOVE.L #SOURCEND-SOURCE,ORGLENGTH
 MOVE.L ORGLENGTH(PC),SAVELENGTH

   LEA MESS1,A6
   BSR PRINT
   MOVE.L ORGLENGTH,D0
   BSR DCIP

 LEA SOURCE,A0
 BSR CHECKSUM
 MOVE.L D0,CHECK1
   LEA MESS11,A6
   BSR PRINT
 BSR CRUNCH

   LEA MESS2,A6
   BSR PRINT
   MOVE.L SAVELENGTH,D0
   BSR DCIP
   LEA MESS3,A6
   BSR PRINT
   MOVEQ #0,D0
   MOVE.B SOURCE,D0
   BSR DCIP

   LEA MESS31,A6
   BSR PRINT

 BSR CRUNCH2

   LEA MESS35,A6
   BSR PRINT
   MOVE.L SAVELENGTH,D0
   BSR DCIP

   BSR SAVE
   MOVE.W #7,-(SP)
   TRAP #1
   ADDQ.L #2,SP

 ILLEGAL
 BSR DECRUNCH2
 BSR DECRUNCH
 LEA DEST,A0
 BSR CHECKSUM
 MOVE.L D0,CHECK1+4
 CMP.L CHECK1(PC),D0
 BNE.S CHCERROR
 ILLEGAL
CHCERROR:
 ILLEGAL
CHECK1: DC.L 0,0


CHECKSUM:
 MOVEQ #1,D3
 MOVEQ #0,D0
 MOVEQ #0,D1
 MOVE.L ORGLENGTH,D2
CH1:
 MOVE.B (A0)+,D1
 ADD.L D1,D0
 ADD.L D3,D0
 ADDQ.L #1,D3
 SUBQ.L #1,D2
 BNE.S CH1
 RTS


CRUNCH2:             ;STRING PACKER
 BSR CHECKOCC        ;FIND LEAST USED VALUE
   LEA OCCTAB(PC),A0
   MOVE.L (A0),D0
   MOVEQ #0,D5
   MOVE.W D5,D6
   MOVE.W #254,D1
C229:
   CMP.L (A0)+,D0
   BLE.S C228
     MOVE.L -4(A0),D0
     MOVE.B D5,D6
C228:
 ADDQ.B #1,D5
 DBRA D1,C229        ;D6 CONTAINS LEAST USED VALUE

 BSR C220            ;ELIMINATE LEAST USED VALUE
 LEA SOURCE,A0       ;LOOK FOR STRINGS
 LEA DEST,A1
 CLR.L COFFS
 MOVE.L A0,CSOUR
 MOVE.L A1,CDEST
 LEA DTAB,A5

C26:
 MOVE.L CSOUR(PC),A0
 MOVE.L A0,A6
 ADD.L SAVELENGTH(PC),A6 ;A6 POINTS AT SOURCEND
 ADD.L COFFS(PC),A0
C211:
 CLR.W C2FOUND
 MOVE.L MAXS,D7
C224:
   MOVE.L A0,A3          ;MAKE SURE THERE ARE NO HEADERS IN STRING
   MOVEQ #STRINGL-1,D0
C213:
   CMP.B (A3)+,D6
   DBEQ D0,C213
   TST.W D0
   BMI.S C214
     MOVEQ #STRINGL,D1
     SUB.W D0,D1
     ADD.W D1,A0
     ADDQ.L #1,A0
     LEA -STRINGL(A6),A1    ;REACHED END?
     CMP.L A0,A1
     BLE C25                ;YES
     BRA.S C224
C22:
   ADDQ.W #1,C2FOUND
   ADDQ.L #STRINGL-1,A2
   BRA.S C227
C214:
 LEA STRINGL(A0),A2
C24:
 MOVE.L A0,A3
 MOVE.L A2,A4
 MOVEQ #STRINGL-1,D0
C21:
 CMPM.B (A3)+,(A4)+
 DBNE D0,C21
 TST.W D0
 BMI.S C22              ;MATCH FOUND
C227:
 ADDQ.L #1,A2
 SUBQ.L #1,D7           ;MAX SEARCH?
 BEQ.S C215             ;YES
 CMP.L A2,A6            ;REACHED END?
 BGT.S C24              ;NO
C215:
   CMP.W #3,C2FOUND     ;CHECK IF WORTH PACKING
   BLO.S C25            ;NO
   MOVE.L A0,A3         ;YES
   MOVEQ #STRINGL-1,D0
C23:
   MOVE.B (A3)+,(A5)+   ;SAVE STRING IN DTAB
   DBRA D0,C23
   ADDQ.B #1,C2FOUND2   ;NO FOUND STRINGS
   MOVE.L A0,D0
   SUB.L CSOUR(PC),D0
   MOVE.L D0,COFFS      ;SAVE OFFSET
   BSR C27              ;PACK DATA
     CMP.B #255,C2FOUND2  ;MAX STRINGS?
     BEQ.S C2FIN          ;YES
   BRA C26              ;FIND NEXT
C25:
   CMP.B #$66,$FFFC02
   BEQ TEST
 ADDQ.L #1,A0
 LEA -STRINGL(A6),A1    ;REACHED END?
 CMP.L A0,A1
 BGT C211               ;NO

C2FIN:
 LEA SOURCE,A0          ;MAKE FINISHED PACKED DATA
 MOVE.L CSOUR,A1
 CMP.L A0,A1
 BEQ.S C216
   MOVE.L SAVELENGTH,D0
   MOVE.L CDEST,A1
C217:
   MOVE.B (A0)+,(A1)+
   SUBQ.L #1,D0
   BNE.S C217
   MOVE.L CDEST,CSOUR
C216:
 LEA SOURCE,A0
 MOVEQ #0,D0
 MOVE.B C2FOUND2,D0
 MOVE.W D0,D1
 LEA DTAB,A1
N@=3
   IFEQ STRINGL,4
N@=2
   ENDIF
 LSL.W #N@,D0           ;MULIPLY
 MOVE.L SAVELENGTH,D2
 MOVE.L D2,(A0)+        ;DATA LENGTH
 MOVE.L D0,(A0)+        ;DATA OFFSET
 MOVE.W D6,(A0)+        ;LEAST USED VALUE (STRING HEADER)
 ADD.L D0,SAVELENGTH
 SUBQ.W #1,D1
C218:
 MOVE.L (A1)+,(A0)+     ;DTAB'S
   IFEQ STRINGL,8
 MOVE.L (A1)+,(A0)+     ;
   ENDIF
 DBRA D1,C218

 LEA DEST,A1
C219:
 MOVE.B (A1)+,(A0)+     ;TRANSFER DATA
 SUBQ.L #1,D2
 BNE.S C219
 ADD.L #10,SAVELENGTH   ;ADD HEADER SPACE
 RTS
C2FOUND: DC.W 0
C2FOUND2: DC.W 0
CSOUR: DC.L 0
CDEST: DC.L 0
COFFS: DC.L 0
TEST: MOVE.W #$777,$FF8240
 ILLEGAL
C220:                   ;KILL LEAST USED VALUE BY DOUBLING THEM
 MOVE.L SAVELENGTH,D0
 LEA SOURCE,A0
 LEA DEST,A1
C222:
 MOVE.B (A0)+,D1
 CMP.B D1,D6
 BEQ.S C221
C223:
 MOVE.B D1,(A1)+
 SUBQ.L #1,D0
 BNE.S C222
   LEA DEST,A0
   SUB.L A0,A1
   MOVE.L A1,SAVELENGTH

 MOVE.L A1,D0
 LEA SOURCE,A1
C225:
 MOVE.B (A0)+,(A1)+
 SUBQ.L #1,D0
 BNE.S C225
 RTS
C221:
 MOVE.B D6,(A1)+
 BRA.S C223

C27:                    ;SUBROUTINE FOR PACK 1 STRING
 MOVEM.L A0-A6/D6,-(SP)
 MOVE.L CSOUR(PC),A0
 MOVE.B C2FOUND2,D2
 LEA -STRINGL(A5),A1          ;STRING TO PACK
 MOVE.L CDEST(PC),A4

 MOVE.L A0,A2
C29:
 MOVE.L A1,A3
 MOVEQ #STRINGL-1,D0
C28:
   MOVE.B (A2)+,D1
   MOVE.B D1,(A4)+
   CMP.B (A3)+,D1
 DBNE D0,C28
 TST.W D0               ;STRING FOUND?
 BPL C226               ;NO, CONTINUE
   LEA -STRINGL(A4),A4  ;YES, PACK IT
   MOVE.B D6,(A4)+      ;HEADER
   MOVE.B D2,(A4)+      ;STRING NR
C212:
 CMP.L A2,A6            ;END?
 BGT.S C29              ;NO
   MOVE.L CDEST(PC),A0  ;CALC NEW SIZE
   SUB.L A0,A4
   MOVE.L A4,SAVELENGTH
   MOVE.L CSOUR(PC),CDEST ;SWAP SOURCE/DEST ADDRESSES
   MOVE.L A0,CSOUR

     LEA MESS32,A6
     BSR PRINT
     MOVE.L SAVELENGTH,D0
     BSR DCIP
     LEA MESS33,A6
     BSR PRINT
     MOVE.L COFFS,D0
     BSR DCIP
     LEA MESS34,A6
     BSR PRINT
     MOVEQ #0,D0
     MOVE.B C2FOUND2,D0
     BSR DCIP

 MOVEM.L (SP)+,A0-A6/D6
 RTS
C226:
 CMP.W #STRINGL-1,D0
 BEQ C212
 SUBQ.L #1,A2
 SUBQ.L #1,A4
 BRA C212


CRUNCH:
C8:
 BSR CHECKOCC          ;D0=NO OCC  D2=VALUE

   MOVE.L SAVELENGTH(PC),D1   ;CHECK IF WORTH PACKING
   CMP.L #16,D1
   BLE CFIN
   LSR.L #3,D1
   CMP.L D0,D1
   BGE CFIN                   ;NO
   SUB.L D1,D0
   CMP.W #2,D1
   BLE CFIN                   ;NO

 MOVE.B VALUE,D7              ;YES
 LEA SOURCE,A0
 LEA DEST,A1
 LEA DTAB,A2
 MOVE.L SAVELENGTH,D6   ;LENGHT

 MOVEQ #1,D5
C2:               ;CRUNCH MAIN LOOP
 CMP.B (A0),D7
 BNE.S C1
   MOVE #16,CCR
   ROXL.L #1,D5
   BCC.S C3
     MOVE.L D5,(A2)+
     MOVEQ #1,D5
C3:
   ADDQ.L #1,A0
   BRA.S C5
C1:
 MOVE #0,CCR
 ROXL.L #1,D5
 BCC.S C4
   MOVE.L D5,(A2)+
   MOVEQ #1,D5
C4:
 MOVE.B (A0)+,(A1)+
C5:
 SUBQ.L #1,D6
 BNE.S C2
C9:
 ROXL.L #1,D5
 BCC.S C9
 MOVE.L D5,(A2)+

 MOVE.L A1,D0           ;CALC NEW LENGHT
 SUB.L #DEST,D0
 MOVE.L D0,NEWLENGTH1   ;LENGTH OF DATA
 MOVE.L A2,D1
 SUB.L #DTAB,D1
 MOVE.L D1,NEWLENGTH2   ;LENGTH OF DTAB
 ADD.L D1,D0
 ADDQ.L #6,D0           ;ADD HEADER
 MOVE.L D0,SAVELENGTH   ;LENGTH OF DATA+DTAB+HEADER

                        ;******
 LEA DEST,A0            ;RELOAD SOURCE WITH PACKED DATA
 LEA SOURCE,A1
 LEA DTAB,A2
 MOVE.L NEWLENGTH1,D0
 MOVE.L NEWLENGTH2,D1
 CLR.B (A1)+            ;DUMMY
 MOVE.B D7,(A1)+        ;VALUE
; MOVE.L D0,(A1)+        ;PACKDATA LENGTH
 MOVE.L D1,(A1)+        ;DTAB LENGTH
 LSR.L #2,D1
C6:
 MOVE.L (A2)+,(A1)+     ;DTAB'S
 SUBQ.L #1,D1
 BNE.S C6
C7:
 MOVE.B (A0)+,(A1)+     ;PACKDATA
 SUBQ.L #1,D0
 BNE.S C7

  SUBQ.W #1,PASSES
  BNE C8
CFIN:
 MOVEQ #MAXPASSES,D0
 SUB.W PASSES,D0
 MOVE.B D0,SOURCE       ;NO PASSES
 RTS
PASSES: DC.W MAXPASSES


CHECKOCC:
 LEA OCCTAB(PC),A1
 MOVE.L A1,A0
 MOVE.W #255,D0
CO1:
 CLR.L (A0)+
 DBRA D0,CO1

 MOVE.L SAVELENGTH,D0
 LEA SOURCE,A0
CO2:
 MOVEQ #0,D1
 MOVE.B (A0)+,D1
 LSL.W #2,D1
 ADDQ.L #1,(A1,D1.W)
 SUBQ.L #1,D0
 BNE.S CO2

 MOVEQ #0,D1
 MOVE.L D1,D0
 MOVE.L D1,D2
 MOVE.W #255,D3
CO4:
 MOVE.L (A1)+,D4
 CMP.L D4,D0
 BHI.S CO3
 MOVE.L D4,D0
 MOVE.B D1,D2
CO3:
 ADDQ.B #1,D1
 DBRA D3,CO4
 MOVE.B D2,VALUE

 LEA OCCTAB(PC),A1
 MOVE.W D2,D0
 LSL.W #2,D0
 MOVE.L (A1,D0.W),D0
 RTS
OCCTAB:
 DS.L 256,0


DECRUNCH2:
 LEA SOURCE,A0
 LEA DEST,A1
 MOVE.L (A0)+,D0      ;DATA LENGTH
 MOVE.L (A0)+,D1      ;DATA OFFSET
 MOVE.W (A0)+,D6      ;STRING HEADER BYTE
 LEA -STRINGL(A0),A2  ;A2 POINTS AT DTAB-STRINGL
 ADD.L D1,A0
DD22:
 MOVE.B (A0)+,D1
 CMP.B D1,D6
 BEQ.S DD21
 MOVE.B D1,(A1)+
DD24:
 SUBQ.L #1,D0
 BPL.S DD22
 RTS

DD21:
 MOVEQ #0,D1
 MOVE.B (A0)+,D1
 BEQ.S DD23
N@=3
   IFEQ STRINGL,4
N@=2
   ENDIF
 LSL.W #N@,D1
 LEA (A2,D1.W),A3
 MOVEQ #STRINGL-1,D1
DD25:
 MOVE.B (A3)+,(A1)+
 DBRA D1,DD25
 SUBQ.L #1,D0
 BRA DD24

DD23:
 SUBQ.L #1,D0
 BRA DD24


DSADD: DC.L 0
DDADD: DC.L 0
DDAD2: DC.L 0
DECRUNCH:
 LEA DEST,A0            ;SOURCE AFTER DECRUNCH2
 LEA DEST,A2            ;DEST 1
 LEA DEST+(SOURCEND-SOURCE),A1  ;DEST 2
 CLR.B FLIPFLAG
 MOVEQ #0,D0
 MOVE.B (A0),D0
 MOVE.B D0,DPASSES
 ROXR.W #1,D0
 BCC.S DC6
   ST.B FLIPFLAG
DC6:
 MOVE.L A0,DSADD
 MOVE.L A1,DDADD
 MOVE.L A2,DDAD2

DC5:                    ;PASS REPEAT LOOP
 MOVE.L DDADD,A1        ;DEST
 MOVE.L DSADD,A0        ;SOURCE
 LEA 6(A0),A2           ;DTAB START
 ADDQ.L #1,A0
 MOVE.B (A0)+,D7        ;VALUE
 MOVE.L (A0)+,D6        ;LENGTH OF DTAB'S
 ADD.L D6,A0            ;ADD LENGTH OF DTAB'S. A0 NOW POINTS AT PACKDATA

DC1:
 MOVE.L (A2)+,D5
 MOVEQ #31,D4
DC3:
  LSL.L #1,D5
  BCS.S DC2
    MOVE.B (A0)+,(A1)+
    BRA.S DC4
DC2:
  MOVE.B D7,(A1)+
DC4:
 DBRA D4,DC3
 SUBQ.L #4,D6
 BPL.S DC1

   MOVE.L DDADD(PC),D0
   MOVE.L D0,DSADD           ;OLD DEST BECOMES NEW SOURCE
   MOVE.L DDAD2(PC),DDADD
   MOVE.L D0,DDAD2
   SUBQ.B #1,DPASSES
   BNE DC5
DCFIN:
 TST.B FLIPFLAG
 BEQ.S DC7
   MOVE.L A1,D0
   MOVE.L DDADD(PC),A0
   MOVE.L DDAD2(PC),A1
   SUB.L A1,D0               ;D0=LENGTH
DC8:
   MOVE.B (A1)+,(A0)+
   SUBQ.L #1,D0
   BNE.S DC8
DC7:
 RTS
FLIPFLAG: DC.W 0
DPASSES:
 DC.W 0


PRINT:
 PEA (A6)
 MOVE.W #9,-(SP)
 TRAP #1
 ADDQ.L #6,SP
 RTS
DCIP:
 LEA TBUF,A0
 MOVE.L #'    ',D1
 MOVE.W #$0914,(A0)+
 MOVE.L D1,(A0)+
 MOVE.L D1,(A0)+
DCI1:
 CMP.L #10,D0
 BLO DCI2
 DIVU #10,D0
 SWAP D0
 ADD.W #$30,D0
 MOVE.B D0,-(A0)
 CLR.W D0
 SWAP D0
 BRA DCI1
DCI2:
 ADD.W #$30,D0
 MOVE.B D0,-(A0)
 LEA TBUF,A6
 BSR PRINT
 RTS
TBUF:
 DS.B 20,0

SAVE:
 LEA MESS6(PC),A6
 BSR PRINT
   MOVE.W #7,-(SP)
   TRAP #1
   ADDQ.W #2,SP
   CMP.B #'Y',D0
   BEQ.S SAVEYES
   CMP.B #'y',D0
   BEQ.S SAVEYES
   RTS
SAVEYES:
 LEA MESS5(PC),A6
 BSR PRINT
 PEA READBUF
 MOVE.W #$0A,-(SP)
 TRAP #1
 ADDQ.L #6,SP

 MOVE.W #0,-(SP)
 PEA READBUF+2
 MOVE.W #$3C,-(SP)
 TRAP #1
 ADDQ.L #8,SP
 MOVE.W D0,HAND

 PEA SOURCE
 MOVE.L SAVELENGTH,-(SP)
 MOVE.W HAND,-(SP)
 MOVE.W #$40,-(SP)
 TRAP #1
 ADD.L #12,SP

 MOVE.W HAND,-(SP)
 MOVE.W #$3E,-(SP)
 TRAP #1
 ADDQ.L #4,SP
 RTS
HAND:
 DC.W 0
READBUF:
 DC.B 15,0
 DS.B 16,0

MESS0:
 DC.B $0D,$0A,0
MESS1:
 DC.B 27,'E','ZZAP PACKER V1.0  -89',10,13,'*********************'
 DC.B 10,10,13,'  ORGINAL LENGTH: ',0
MESS11:
 DC.B 10,10,13,'  PACKING USING ZZAP METHOD...',0
MESS2:
 DC.B 10,10,13,'  NEW LENGTH: ',0
MESS3:
 DC.B 10,10,13,'  NR OF PASSES: ',0
MESS31:
 DC.B 10,10,10,13,'  PACKING USING STRING METHOD...',10,0
MESS32:
 DC.B 13,'  CURRENT LENGTH: ',0
MESS33:
 DC.B '  OFFSET: ',0
MESS34:
 DC.B '  STRINGS: ',0
MESS35:
 DC.B 10,13,'  FINAL LENGTH: ',0
MESS4:
 DC.B 10,10,13,'  CHECKSUM OK.',0
MESS5:
 DC.B 10,10,13,'  INPUT FILENAME: ',0
MESS6:
 DC.B 10,10,13,'  SAVE Y/N?',0
 ALIGN.W


MAXS: DC.L MAXSEARCH
VALUE: DC.B 0,0
NEWLENGTH1: DC.L 0
NEWLENGTH2: DC.L 0
SAVELENGTH: DC.L 0
ORGLENGTH: DC.L 0

SOURCE:
 IBYTES MAINMENU.TOS
 ALIGN.W
SOURCEND:

 BSS

DTAB:
 DS.B 100000
DEST:
 END

 