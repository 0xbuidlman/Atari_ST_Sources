***********************************************************************
***********																	***********
***********		 Tridi codes by SKYNET From ABSTRACT			***********
***********																	***********
***********				Version DSP										***********
***********																	***********
***********************************************************************

; VERSION 1.0 THE 20/06/94

***** VARIABLE POUR LE DSP *******
Pt_Fuite	equ		$6d3a				*
C_X		equ		160				*
C_Y		equ		100				*
DX			equ		320				*
DY			equ		200				*
NB_Inter	equ		50					*
**********************************

Nbr_Screen		equ	2

Size_Screen		equ	32000		; Taille de l'ecran en octet
Line_Widh		equ	160		; Largeur d'une ligne en octets

HTX				Equ		$ffffa204		; Host Transmit Data
HRX				Equ		$ffffa204		; Host Receive Data
IVR				Equ		$ffffa203		; Interrupt Vector Register
CVR				Equ		$ffffa201		; Command Vector Register
HCP				Equ		7					; Host Command Pending
HCR				Equ		$ffffa200		; Host Control Register
HF1				Equ		4					; Host Flag 1 control‚ par le 030
HF0				Equ		3					; Host Flag 0 control‚ par le 030
HTIE				Equ		1					; Host Transmit Interrupt Enable
HRIE				Equ		0					; Host Receive Interrupt Enable
HSR				Equ		$ffffa202		; Host Status Register
HF3				Equ		3					; Host Flag 3 control‚ par le DSP
HF2				Equ		2					; Host Flag 2 control‚ par le DSP
HTDE				Equ		1					; Host Transmit Data Empty
HRDF				Equ		0					; Host Receive Data Full

; D‚finition des Macros

Host_Send_Data		Macro
.Host_Request\@
		btst		#HTDE,HSR
		beq.s		.Host_Request\@
		move.l	\1,HTX
	EndM

Host_Get_Data		Macro
.Host_Request\@
		btst		#HRDF,HSR
		beq.s		.Host_Request\@
		move.l	HTX,\1
	EndM

		OPT		O+

		IncDir	'..\INITS\'
		Include	'MACROS.AST'

***********************************************************************
***********						Inits G‚n‚rales						***********
***********************************************************************

		Section	TEXT


		move.l	sp,Save_Stack			; Ancienne Pile restaur‚e

		clr.l		-(sp)						; Passage en Mode Supervisor
		move.w	#$20,-(sp)				; SUPER
		trap		#1							; Gemdos
		addq.l 	#6,sp

***********************************************************************
***********							Inits DSP							***********
***********************************************************************

		move.w	#113,-(sp)				; DSP_RequestUniqueAbility
		trap		#14						; XBios
		addq.l	#2,sp

		move.w	d0,-(sp)					; No Ability
		move.l	#DSP_Size,-(sp)					; Longueur en mot DSP du code DSP binaire
		pea.l		DSP_Code					; Adresse du code binaire
		move.w	#109,-(sp)				; Dsp_ExecProg
		trap		#14						; XBios
		lea.l		12(sp),sp

Connect	
		move.l	#$4321,HTX.w			; On se connect avec le DSP
		moveq.l	#0,d0

Conct_Get	
		btst.b	#HRDF,HSR.w				; On test pour savoir si on a recu une donn‚ de la part du DSP
		bne.s		DSP_Test					; yep, c'est bon
		addq.l	#1,d0
		cmp.l		#100000,d0
		beq		DSP_Error				; Les DSP est sourd, on s'arrete l… !
		bra.s		Conct_Get

DSP_Test	
		move.l	HRX.w,d0					; Valeur transmise par le DSP
		cmp.l		#12345678,d0			; On compare le Magic Number
		bne		DSP_Error				; Le DSP nous a renvoier n'importe quoi, on quitte

***********************************************************************
***********						Inits G‚n‚rales						***********
***********************************************************************

		move.w	#$2700,sr

		bsr		Save_System
		bsr		Init_System

		lea		Videl_320_200_16,a0			; 16 Couleurs
		move.w	#2-1,d0							; Deux ecrans
		lea.l	Adr_Screen1,a1
		lea.l	Screens,a2
		bsr		Init_Video

		bsr		Init_Falcon_Palette
		bsr		Init_IT

		lea		$ffff9800.w,a0					; On inititalise les couleurs
		move.l	#$00100030,(a0)+
	
		move.l	#$00500058,(a0)+
		move.l	#$00580060,(a0)+
		move.l	#$00600068,(a0)+
		move.l	#$00680070,(a0)+
		move.l	#$00700078,(a0)+
		move.l	#$00780080,(a0)+
		move.l	#$00800088,(a0)+
		move.l	#$00880090,(a0)+
		
		move.l	#$50600090,(a0)+
		move.l	#$607000a0,(a0)+
		move.l	#$708000b0,(a0)+
		move.l	#$809000c0,(a0)+
		move.l	#$90a000d0,(a0)+
		move.l	#$a0b000e0,(a0)+
		move.l	#$b0c000f0,(a0)+

***********************************************************************
***********					Inits Sp‚cifiques							***********
***********************************************************************

		bsr		Make_Precalc					; on precalc les tables consernant la rout de poly

		bsr		Send_Table_1_X					; on envoie la table de 1/x au DSP
		bsr		Send_Table_Cosin				; one nvoie une table de cosinus au DSP plus precise !
		bsr		Send_variables					; Envoie les diverses variables de la 3D

		bsr		Send_All_Objects_Descriptor

	Host_Send_Data		#$1212
	
	Host_Get_Data		d0							; Test de synchro 030/DSP
		cmpi.w	#$2121,d0
		beq.s		.No_PB
		move.l	#$ff000000,$ffff9800.w
		bra.s		DSP_Error
.No_PB
		stop		#$2300
		move.l	#New_VBL,$70.w
		bra.s		Session_3D						; Routine de 3D

; Fin de la session 3D, on restore l'etat du falcon, et on quitte
End_Session
		bsr		Restore_System
		move.w	Cache,d0
		movec		d0,cacr
		
		movea.l	Save_Stack,sp			; Ancienne Pile restaur‚e

DSP_Error	
		clr.w 	-(sp)						; PTerm
		trap 		#1							; Gemdos

***********************************************************************
***********		   		Interruption VBL : compteur			***********
***********************************************************************

New_VBL	
				
		addq.w	#1,VBL_Cmpt
		rte
VBL_Cmpt	ds.w		1

***********************************************************************
***********				Routine tournant … chaque VBL				***********
***********************************************************************

Session_3D

		clr.w		VBL_Cmpt
		cmpi.b	#$66,$fffffc02.w
		beq.s		Session_3D

	SaveColor

		move.l	Adr_Screen1,d0					; Flipping d'ecran
		move.l	Adr_Screen2,Adr_Screen1
		move.l	d0,Adr_Screen2

		move.l	Tab_Eff1,d0						; Flipping de tablo d'effacement
		move.l	Tab_Eff3,d1
		move.l	Tab_Eff2,Tab_Eff3
		move.l	d0,Tab_Eff2
		move.l	d1,Tab_Eff1

		lea		Line_adr_Tab,a0				; Flipping de tablo pour la routine de poly
		move.l	(a0),d0
		move.l	4(a0),d1
		move.l	d1,(a0)+
		move.l	d0,(a0)+
		move.l	d0,Current_Line

		CPU_Time_Color	#$ff000000

* SYNCHRO VBL/030
	Host_Send_Data		#$3210					; POUR LA SYNCHRO VBL/DSP

* RECEPTION DES BLOCKS A EFFACER
	Host_Get_Data		d7
		subq.w	#1,d7
		move.w	d7,Nb_Clear_Block
		move.l	Tab_Eff1,a0						; Reception des bloc a effacer
.Get_Clear_Zone
		moveq		#16,d1
		move.w	#$fff0,d2
	Host_Get_Data		d0
		subq.w	#1,d0
		and.w		d2,d0
		move.w	d0,(a0)+
	Host_Get_Data		d0
		addq.w	#1,d0
		and.w		d2,d0
		add.w		d1,d0
		move.w	d0,(a0)+
	Host_Get_Data		d0
		subq.w	#1,d0
		and.w		d2,d0
		move.w	d0,(a0)+
	Host_Get_Data		d0
		addq.w	#1,d0
		and.w		d2,d0
		add.w		d1,d0
		move.w	d0,(a0)+
		dbf		d7,.Get_Clear_Zone

* RECEPTION DES FACES A AFFICHER
		lea		Big_Tab,a0						; On recoie les faces a afficher
Get_Faces
	Host_Get_Data	d0
		cmpi.w	#$4321,d0
		beq.s		.Fin_Copy
		move.w	d0,(a0)+							; on inscrit le numero de la couleur
		move.w	HRX+2,d7							; nombre de point de la face
		subq.w	#1,d7								; -1
		move.w	d7,(a0)+							; Yop, dans le tablo
.Copy_Pts
		move.w	HRX+2,(a0)+						; coord X
		move.w	HRX+2,(a0)+						; coord Y
		dbf		d7,.Copy_Pts					; On receptionne tout les points de la face
		bra		Get_Faces						; On va recevoir la suivante
.Fin_Copy		
		move.w	d0,(a0)+							; Flag de fin du tablo
		
		CPU_Time_Color	#$00ff0090
		
* CONTROLE DE LA CAMERA
		bsr		Control_World_Evolution		
		
* CONTROLE L'EVOLUTION DES OBJETS DANS LE TEMPS
Control_Objects_Evolution
		lea		Scene_Descriptor,a0			; Etat de la scene
		move.l	(a0)+,d7
		subq.w	#1,d7
		move.l	#360*64,d6						; Valeur Clip Angle
.Control_1_Obj
		addq.l	#4,a0								; On pointe sur l'adr du tablo de l'etat de l'obj
		move.l	(a0)+,a1							; Adresse du tablo
		move.l	24(a1),a2						; Adresse du script
		tst.l		(a2)								; Le mouvement est fini?
		bne.s		.No_Nxt_Mvt						; Ben non...
		add.l		#28,24(a1)						; On passe au mouvement suivant
		move.l	24(a1),a2						; Nouvelle adr du script
.No_Nxt_Mvt		
		subq.l	#1,(a2)+							; Une VBL en moins
		moveq		#3-1,d5							; On clip trois angles
.Clip_Angles
		move.l	(a2)+,d0							; increment de l'angle
		add.l		(a1),d0							; Nouvelle valeur
		cmp.l		d6,d0								; Clip?
		blt.s		.No_Clip
		sub.l		d6,d0
.No_Clip
		move.l	d0,(a1)+
		dbf		d5,.Clip_Angles

		moveq		#3-1,d5							; 3 Translations a reactualiser
.Inc_T
		move.l	(a2)+,d0
		add.l		d0,(a1)+							; Nouvelle translation
		dbf		d5,.Inc_T

		lea		-24(a1),a1

		moveq		#3-1,d5
.Tfr_Rot
		move.l	(a1)+,d0
		lsr.l		#6,d0
	Host_Send_Data		d0
		dbf		d5,.Tfr_Rot

		moveq		#3-1,d5
.Tfr_Trans
	Host_Send_Data		(a1)+
		dbf		d5,.Tfr_Trans

		dbf		d7,.Control_1_Obj		

		CPU_Time_Color	#$00ff0000

Control_Morph_Objects
		lea		Scene_Descriptor,a0			; Description de la scene
		move.l	(a0)+,d7							; Nombre d'objet
		subq.w	#1,d7
.Control_1_Morph
		move.l	(a0)+,a1							; a1 = Adresse du tablo des timing morph
		addq.l	#4,a0								; On pointe sur la desc suivante
		tst.l		(a1)+								; Doit on morpher l'objet ?
		beq.s		.Morph_It						; Ouaip let's go
	Host_Send_Data		#0							; On signale au DSP ke l'on ne morph pas encore
		subq.l	#1,-4(a1)						; On decremente le compteur c fait pour ca
		dbf		d7,.Control_1_Morph
		bra.s		Clear_Zone
.Morph_It
		addq.l	#8,-8(a0)						; On pointe sur la sequence suivante
		move.l	(a1),a2							; Adr de l'objet
		move.w	(a2)+,d6							; Nombre de point
		ext.l		d6
	Host_Send_Data		d6							; On envoie au DSP le nombre de points de l'objet
		move.w	d6,d5
		lsl.w		#1,d5
		add.w		d5,d6								; Fois 3
		subq.w	#1,d6
.Send_Pts
		move.w	(a2)+,d0							; Coordonnee d'un point
		ext.l		d0
	Host_Send_Data		d0							; On l'envoie au DSP
		dbf		d6,.Send_Pts
		dbf		d7,.Control_1_Morph			; On controle tout le objets

		CPU_Time_Color	#$80af0040

* CLEAR TOUT LES BLOCKS RECOUVRANT LES OBJETS
Clear_Zone
		move.l	Tab_Eff3,a0
		move.w	Nb_Clear_Block,d7
.Clear_1_Block		
		move.l	Adr_Screen2,a6
		move.l	d7,-(sp)
		move.w	(a0)+,d0
		bpl.s		.NoNeg
		moveq		#0,d0
.NoNeg		
		move.w	(a0)+,d1
		sub.w		d0,d1							; Nombre de pixL (multiple de 16) a effacer
		cmpi.w	#320,d1
		blt.s		.Clip_Ok
		move.w	#319,d1
.Clip_Ok		
		move.w	#320,d3
		sub.w		d1,d3							; Nombre de pixL pour sauter a la prochaine ligne
		lsr.w		#1,d3							; Offset de saut en octets
		lsr.w		#4,d1							; Nombre de deux longs a effacer
		lsr.w		#1,d0							; Nombre d'octets depuis le depart
		move.w	(a0)+,d2
		move.w	(a0)+,d7
		tst.w		d2
		bpl.s		.No_ClipYmin
		moveq		#0,d2
.No_ClipYmin
		cmpi.w	#199,d7
		blt.s		.No_ClipYmax
		move.w	#199,d7
.No_ClipYmax		
		sub.w		d2,d7							; d7 = nombre de ligne a effacer
		mulu.w	#160,d2
		add.w		d0,d2
		lea		(a6,d2.w),a6				; Adresse de depart
		moveq		#0,d0
		subq.w	#8,d3
.Clear_Zone_Obj
		move		d1,d2
.Clear_Line
		move.l	d0,(a6)+		
		move.l	d0,(a6)+		
		dbf		d2,.Clear_Line
		lea		(a6,d3.w),a6
		dbf		d7,.Clear_Zone_Obj
		move.l	(sp)+,d7
		dbf		d7,.Clear_1_Block

**************************************
******* ROUTINES PRINCIPALES *********
**************************************
yopu

		lea		Big_Tab,a0						; Tablo ou l'on stocke toutes les donnees du DSP
Trace_Faces
		move.w	(a0)+,d0
		cmpi.w	#$4321,d0						; si d0 = $4321, c la fin du tbalo
		beq.s		Fin
		move.w	d0,Num_Coul						; sinon c le numero de la couleur de la face
		move.w	(a0)+,d7							; nombre de point-1 du poly
		move.w	d7,Nb_Point
		lea		Co_Point,a1						; tablo des coords.
.TfrPts
		move.l	(a0)+,(a1)+						; on transfert la coord non clippee du points
		dbf		d7,.TfrPts

		CPU_Time_Color	#$2000008f
		move.l	a0,-(sp)
		bsr		Polygone							; tout les points sont transferes, on trace le poly
		move.l	(sp)+,a0
		CPU_Time_Color	#$ff00000f

		bra.s		Trace_Faces						; on reboucle...
Fin
		RestoreColor

End_of_object
		move.l	Adr_Screen2,d0					; on va enfin Valide l'adresse de l'ecran courant
		lsr.w		#8,d0
  		move.l	d0,$ffff8200.w					; C'est fait

		move.w	VBL_Cmpt,d0						; Numero de VBL actuel


.wait_end_vbl
		cmpi.b	#$39,$fffffc02.w				; On teste l'appuie de la touche espace
		beq		End_Session						; Si la touche est appuier, on quite la session
		cmp.w		VBL_Cmpt,d0						; Sinon on attend la VBL suivante
		beq.s		.wait_end_vbl
		bra		Session_3D						; Nouvelle VBL, on recommence la session 3D


Send_Table_1_x
		lea		$ffffa200.w,a2
		move.w	#350-1,d7
		move.l	#-350,d0
Negatifs
		move.l	#$7fffff,d6
		divs.l	d0,d6
		move.l	d6,4(a2)
		addq.l	#1,d0
		dbf		d7,Negatifs

Zero	move.l	#$7fffff,4(a2)

		move.w	#3000-1,d7
		moveq.l	#1,d0
Positifs
		move.l	#$7fffff,d6
		divs.l	d0,d6
		move.l	d6,4(a2)
		addq.l	#1,d0
		dbf		d7,Positifs
	Rts

Send_Table_Cosin
		lea		Tab_Cosin,a0
		move.w	#720-1,d7
.Send_Tab
	Host_Send_Data	(a0)+
		dbf		d7,.Send_Tab
	Rts

Send_Variables
		Host_Send_Data	#Pt_Fuite
		Host_Send_Data	#C_X
		Host_Send_Data	#C_Y	
		Host_Send_Data	#DX
		Host_Send_Data	#DY
		Host_Send_Data	#Nb_Inter
	Rts

Send_All_Objects_Descriptor
		lea		Start_Objects,a0				; Tableau pointant sur les adresses des objets
		move.l	(a0)+,d7							; Nombre d'objets
	Host_Send_Data		d7							; Zyva je te balance la sauce
		subq.w	#1,d7								; -1 pour le dbf de notre cher 030 (ya pas de Loop)
.Send_1_Obj
		move.l	(a0)+,a1							; Adr de la definition de la structure de l'objet
		move.w	(a1)+,d6							; Nombre de points definis
		ext.l		d6
	Host_Send_Data		d6							; On envoie le nombre de points a receptionner
		subq.w	#1,d6
.Send_Pts				
	Rept			3
		move.w	(a1)+,d0							; corrdonn‚e du points
		ext.l		d0
	Host_Send_Data		d0
	EndR
		dbf		d6,.Send_Pts
		
		move.w	(a1)+,d6							; Nombre de faces definies
		ext.l		d6
	Host_Send_Data		d6
		subq.w	#1,d6								; -1 a cause du dbf
.Send_Face
		move.w	(a1)+,d0
		ext.l		d0
	Host_Send_Data		d0							; Numero de la couleur
		move.w	(a1)+,d5							; Nombre de points
		ext.l		d5
	Host_Send_Data		d5							; On envoie au DSP le nombre de points a receptionner
		subq.w	#1,d5
.Send_Num_Pts
		move.w	(a1)+,d0
		ext.l		d0
	Host_Send_Data		d0
		dbf		d5,.Send_Num_Pts
		dbf		d6,.Send_Face
		dbf		d7,.Send_1_Obj
	Rts

***********************************************************************
*********** ROUTINE DE CONTROLE DE L'EVOLUTION DU MONDE 3D  ***********
***********************************************************************
Control_World_Evolution

		lea		Camera_State,a0				; Evolution courante de la cam‚ra
		move.l	Camera_Current_Mvt,a1		; Point sur la partie actuelle du script	
		tst.w		(a0)								; Doit-on chang‚ de mouvement ?
		bne.s		.Same_Mvt						; Non, on continue sur le Mvt courant
		add.l		#28,Camera_Current_Mvt
		lea		28(a1),a1						; on pointe sur le Mvt suivant
		move.l	a1,d0
		cmpi.l	#End_Script,d0					; On est … la fin ?
		bne.s		.Cmpt_Ok
		lea		Camera_Script,a1				; On repointe sur le debut du script
		move.w	2(a1),(a0)
		move.l	a1,Camera_Current_Mvt		; Pareille
.Cmpt_Ok
		tst.w		(a1)								; Changement de cam‚ra ou suite de l'‚volution
		beq.s		.No_Camera_Change				; on ne change pas de vue de cam‚ra
		movem.l	2(a1),d0-d5
		movem.l	d0-d5,2(a0)						; on installe la nouvelle position de la cam‚ra
		add.l		#28,Camera_Current_Mvt		; ***** LA DES D'UN CHANGEMENT DE CAMERA OQP 26 OCTETS
		lea		28(a1),a1						; on pointe sur le Mvt suivant
		move.l	a1,d0
		cmpi.l	#End_Script,d0					; On est … la fin ?
		bne.s		.Transfert_Inc
		lea		Camera_Script,a1				; On repointe sur le debut du script
		move.l	a1,Camera_Current_Mvt		; Pareille
		move.w	2(a1),(a0)
		bra.s		.Transfert_Inc					; on va directement transferer les valeurs courantes
.No_Camera_Change
		move.w	2(a1),(a0)						; Nombre de VBL du nouveau Mvt
.Same_Mvt
		subq.w	#1,(a0)							; une VBL en moins … faire
		addq.l	#2,a0								; On pointe sur les angles + translations
		addq.l	#4,a1

		move.l	(a1)+,d0
		add.l		d0,(a0)							; On incr‚mente les angles
		cmpi.l	#360*64,(a0)					; Une revolution en trop ?
		blt.s		.OK_X
		sub.l		#360*64,(a0)
.OK_X
		move.l	(a1)+,d0
		add.l		d0,4(a0)
		cmpi.l	#360*64,4(a0)					; Une revolution en trop ?
		blt.s		.OK_Y
		sub.l		#360*64,4(a0)
.OK_Y
		move.l	(a1)+,d0
		add.l		d0,8(a0)
		cmpi.l	#360*64,8(a0)					; Une revolution en trop ?
		blt.s		.OK_Z
		sub.l		#360*64,8(a0)
.OK_Z
		move.l	(a1)+,d0							; On incr‚mente les translations
		add.l		d0,12(a0)
		move.l	(a1)+,d0
		add.l		d0,16(a0)
		move.l	(a1)+,d0
		add.l		d0,20(a0)
.Transfert_Inc		
		move.w	#6-1,d7
.Tfr_Pos		
	Host_Send_Data		(a0)+						; Angles X,Y et Z ; TX,TY,TZ
		dbf		d7,.Tfr_Pos

	Rts

***********************************************************************
***********							Sous-Programmes					***********
***********************************************************************

		Include	POLY15.AST
		Include	'INITSFAL.AST'
		
***********************************************************************
***********						Section DATA							***********
***********************************************************************

		Section	DATA

Tab_Cosin		incbin		'DSP_COSIN.DAT'

DSP_Code	IncBin	'CONCMOR3.P56'
DSP_Size	equ		(*-DSP_Code)/3
		Even

Coef_Dep				dc.l		1

Tab_Eff1		dc.l		Shape1
Tab_Eff2		dc.l		Shape2
Tab_Eff3		dc.l		Shape3

Shape1		dc.w		10,20,10,20					; On prevoit l'effacement de 4 blocs
				dc.w		10,20,10,20
				dc.w		10,20,10,20
				dc.w		10,20,10,20

Shape2		dc.w		10,20,10,20
				dc.w		10,20,10,20
				dc.w		10,20,10,20
				dc.w		10,20,10,20

Shape3		dc.w		10,20,10,20
				dc.w		10,20,10,20
				dc.w		10,20,10,20
				dc.w		10,20,10,20

***********************************************************************
***********              Description des objets             ***********
***********************************************************************

Timing_Objects1
		dc.l		160
		dc.l		Bloc1
		dc.l		160
		dc.l		Square
		dc.l		160
		dc.l		Square1
		dc.l		160
		dc.l		Square2
		dc.l		160
		dc.l		Square
		dc.l		320
		dc.l		CubeB
		dc.l		5000
		dc.l		Bloc1
		
Move_Objects1
		dc.l		0*64,0*64,0						; Rotation State
		dc.l		0*512,0*512,0*512				; Translations State
		dc.l		P_Obj1
P_Obj1		
		dc.l		160*7								; Duree du mouvement en VBL
		dc.l		0*64,0*64,0*64					; Incrementations constantes des rotations
		dc.l		0*512,0,0						; Incrementations constatnes des translations
		dc.l		2									; Duree du mouvement en VBL
		dc.l		1*64,0,0*64					; Incrementations constantes des rotations
		dc.l		-1*512,0,0						; Incrementations constatnes des translations
		dc.l		34									; Duree du mouvement en VBL
		dc.l		0,0,0*64					; Incrementations constantes des rotations
		dc.l		0*512,0,0						; Incrementations constatnes des translations
		dc.l		120+1000							; Duree du mouvement en VBL
		dc.l		0,0,0*64					; Incrementations constantes des rotations
		dc.l		0,0,0								; Incrementations constatnes des translations


Timing_Objects2
		dc.l		160*6
		dc.l		Cube2
		dc.l		160
		dc.l		Cube

Move_Objects2
		dc.l		0,0,0								; Rotation State
		dc.l		0*512,0*512,0*512						; Translations State
		dc.l		P_Obj2
P_Obj2
		dc.l		160*5
		dc.l		72,3*72,2*72
		dc.l		0*512,0*512,0*512
		dc.l		160*2
		dc.l		0,0,0
		dc.l		0*512,0*512,0*512
		dc.l		40
		dc.l		0*64,0*64,0*64
		dc.l		0*512,0*512,0*512
		dc.l		120+20000
		dc.l		0,0,0
		dc.l		0*512,0*512,0*512

Scene_Descriptor
		dc.l		2									; Nombre d'objet a l'ecran

		dc.l		Timing_Objects1				; Tablo de timing de morphing
		dc.l		Move_Objects1					; tablo de position de l'objet

		dc.l		Timing_Objects2
		dc.l		Move_Objects2

Start_Objects
		dc.l		2									; Nombre d'objets a l'ecran
		dc.l		CubeB
		dc.l		Cube								; Objets de depart de l'objet numero 1

***********************************************************************
***********         Script de la cam‚ra de la scŠne         ***********
***********************************************************************

Camera_State
		dc.w		0									; Nbr de VBL restantes pour passer au prochain MVT
		dc.l		0*64,0*64,0*64					; Etat actuel des angles de la cam‚ra
		dc.l		0*512,0*512,-60*512			; Etat actuel des translations de la cam‚ra
Camera_Current_Mvt
		dc.l		Camera_Script-28				; Pointe sur le mouvement courant
Camera_Script
		dc.w		0							
		dc.w		160							
		dc.l		72*3,36*1,72*4			
		dc.l		0*512,0*512,0*512		

		dc.w		0							
		dc.w		160							
		dc.l		360*64-72*3,2*64,360*64-2*72			
		dc.l		0*512,0*512,0*512		

		dc.w		0							
		dc.w		160							
		dc.l		72*0,360*64-72*0,72*0			
		dc.l		0*512,0*512,0*512		

		dc.w		0
		dc.w		160*3
		dc.l		0*64,4*72,72*3			
		dc.l		0*512,0*512,0*512		

		dc.w		0
		dc.w		25
		dc.l		0*64,4*72,72*3			
		dc.l		0*512,0*512,1*512		

		dc.w		0
		dc.w		135
		dc.l		0*64,4*72-36,72*3			
		dc.l		0*512,0*512,0*512		

		dc.w		0
		dc.w		40
		dc.l		0*64,360*64-1*72,72*0			
		dc.l		0*512,0*512,1*512		

		dc.w		0
		dc.w		120
		dc.l		1*72,360*64-2*72,72*0			
		dc.l		0*512,0*512,0*512		

End_Script										; FIN DE LA DESCRIPTION DU SCRIPT

***********************************************************************
***********  Description des objets appartenant … la scŠne  ***********
***********************************************************************
; Les objets qui vont suivre sont fixes, donc ils n'ont aucunes ‚volutions
Square	dc.w		20
			dc.w		+00,-30,15
			dc.w		-30,+00,15
			dc.w		+00,+30,15
			dc.w		+30,+00,15
			dc.w		+00,-30,15
			
			dc.w		+00,-60,15
			dc.w		-60,+00,15
			dc.w		+00,+60,15
			dc.w		+60,+00,15
			dc.w		+00,-60,15

			dc.w		+00,-30,-15
			dc.w		-30,+00,-15
			dc.w		+00,+30,-15
			dc.w		+30,+00,-15
			dc.w		+00,-30,-15
			
			dc.w		+00,-60,-15
			dc.w		-60,+00,-15
			dc.w		+00,+60,-15
			dc.w		+60,+00,-15
			dc.w		+00,-60,-15

Square1	dc.w		20
			dc.w		+00,+00,25
			dc.w		-30,+00,25
			dc.w		+00,+00,25
			dc.w		+30,+00,25
			dc.w		+00,+00,25
			
			dc.w		+00,-30,25
			dc.w		-60,+00,25
			dc.w		+00,+30,25
			dc.w		+60,+00,25
			dc.w		+00,-30,25

			dc.w		+00,+00,-25
			dc.w		-30,+00,-25
			dc.w		+00,+00,-25
			dc.w		+30,+00,-25
			dc.w		+00,+00,-25
			
			dc.w		+00,-30,-25
			dc.w		-60,+00,-25
			dc.w		+00,+30,-25
			dc.w		+60,+00,-25
			dc.w		+00,-30,-25

Square2	dc.w		20
			dc.w		-40,-40,15
			dc.w		-20,+00,15
			dc.w		+00,+20,15
			dc.w		+20,+00,15
			dc.w		+40,-40,15
			
			dc.w		-60,-40,15
			dc.w		-40,+00,15
			dc.w		+00,+40,15
			dc.w		+40,+00,15
			dc.w		+60,-40,15

			dc.w		-40,-40,-15
			dc.w		-20,+00,-15
			dc.w		+00,+20,-15
			dc.w		+20,+00,-15
			dc.w		+40,-40,-15
			
			dc.w		-60,-40,-15
			dc.w		-40,+00,-15
			dc.w		+00,+40,-15
			dc.w		+40,+00,-15
			dc.w		+60,-40,-15


CubeB		dc.w		20
			dc.w		-40,-40,40
			dc.w		-40,-40,40
			dc.w		+40,-40,40
			dc.w		+40,-40,40
			dc.w		+40,-40,40
			
			dc.w		-40,+40,40
			dc.w		-40,+40,40
			dc.w		+40,+40,40
			dc.w		+40,+40,40
			dc.w		+40,+40,40

			dc.w		-40,-40,-40
			dc.w		-40,-40,-40
			dc.w		+40,-40,-40
			dc.w		+40,-40,-40
			dc.w		+40,-40,-40
			
			dc.w		-40,+40,-40
			dc.w		-40,+40,-40
			dc.w		+40,+40,-40
			dc.w		+40,+40,-40
			dc.w		+40,+40,-40

			dc.w		18
			
			dc.w		0
			dc.w		4
			dc.w		1,6,5,0

			dc.w		1
			dc.w		4
			dc.w		15,16,11,10

			dc.w		2
			dc.w		4
			dc.w		1,2,7,6

			dc.w		3
			dc.w		4
			dc.w		16,17,12,11

			dc.w		4
			dc.w		4
			dc.w		3,8,7,2

			dc.w		5
			dc.w		4
			dc.w		17,18,13,12

			dc.w		6
			dc.w		4
			dc.w		3,4,9,8

			dc.w		7
			dc.w		4
			dc.w		18,19,14,13

			dc.w		8
			dc.w		4
			dc.w		0,10,11,1

			dc.w		9
			dc.w		4
			dc.w		1,11,12,2

			dc.w		10
			dc.w		4
			dc.w		2,12,13,3

			dc.w		11
			dc.w		4
			dc.w		3,13,14,4

			dc.w		11
			dc.w		4
			dc.w		6,16,15,5

			dc.w		12
			dc.w		4
			dc.w		7,17,16,6

			dc.w		13
			dc.w		4
			dc.w		8,18,17,7

			dc.w		14
			dc.w		4
			dc.w		9,19,18,8


			dc.w		1
			dc.w		4
			dc.w		4,14,19,9

			dc.w		2
			dc.w		4
			dc.w		0,5,15,10

Bloc1		dc.w		20
			dc.w		-80,-20,20
			dc.w		-40,-20,20
			dc.w		+00,-20,20
			dc.w		+40,-20,20
			dc.w		+80,-20,20
			
			dc.w		-80,+20,20
			dc.w		-40,+20,20
			dc.w		+00,+20,20
			dc.w		+40,+20,20
			dc.w		+80,+20,20

			dc.w		-80,-20,-20
			dc.w		-40,-20,-20
			dc.w		+00,-20,-20
			dc.w		+40,-20,-20
			dc.w		+80,-20,-20
			
			dc.w		-80,+20,-20
			dc.w		-40,+20,-20
			dc.w		+00,+20,-20
			dc.w		+40,+20,-20
			dc.w		+80,+20,-20
			
			
Cube		DC.W		8
			DC.W		-7,-7,7
			DC.W		7,-7,7
			DC.W		7,7,7
			DC.W		-7,7,7
			DC.W		-7,-7,-7
			DC.W		7,-7,-7
			DC.W		7,7,-7
			DC.W		-7,7,-7

			DC.W		6

			DC.W		9
			DC.W		4
			DC.W		0,1,2,3
			DC.W		10
			DC.W		4
			DC.W		7,6,5,4
			DC.W		11
			DC.W		4
			DC.W		1,5,6,2
			DC.W		12
			DC.W		4
			DC.W		0,3,7,4
			DC.W		13
			DC.W		4
			DC.W		0,4,5,1
			DC.W		14
			DC.W		4
			DC.W		3,2,6,7

Cube2		DC.W		8
			DC.W		0,-20,40
			DC.W		20,0,40
			DC.W		0,20,40
			DC.W		-20,0,40

			DC.W		0,-20,-40
			DC.W		20,0,-40
			DC.W		0,20,-40
			DC.W		-20,0,-40

Cube3		DC.W		8
			DC.W		-40,-40,40
			DC.W		40,-40,40
			DC.W		40,40,40
			DC.W		-40,40,40

			DC.W		-40,-40,-40
			DC.W		40,-40,-40
			DC.W		40,40,-40
			DC.W		-40,40,-40


***********************************************************************
***********							Section BSS							***********
***********************************************************************

		Section	BSS

Big_Tab		ds.w		4000

Nb_Clear_Block		ds.w		1
Vide					ds.l		15
Line_Number			ds.w		1
Start_Up_Seq		ds.w		1
; Variables diverses
; Adresses Ecrans

Adr_Screen1			ds.l		1
Adr_Screen2			ds.l		1

Cache					ds.w		1
; Pile
Save_Stack			ds.l		1
End_Stack			ds.l		256
New_Stack
; Palettes en tout genre
Palette_Videl		ds.l		256
; Buffers
; Place pour Ecrans
Screens				ds.b		Nbr_Screen*(Size_Screen+256)
