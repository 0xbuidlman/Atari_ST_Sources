*****************************************************
*** ROUTINE DE POLYGONE 4PLANS CONSECUTIFS AU 030 ***
***                 MASKE                         ***
*****************************************************

*** PAR Skynet from ABSTRACT

***********************************************************************
Polygone
***********************************************************************
* recherche des coord. YMIN et YMAX du polyg.

	lea		CO_POINT+2(pc),a0			; pointe sur Y1
	move.w	(a0),d1						; d1 = YMIN Temps
	move.w	d1,d2							; d2 = YMAX Temps
	addq.w	#4,a0							; on poine sur Y2
	
	move.w	NB_POINT(pc),d3
	move.w	d3,d7
	subq.w	#1,d3							; on auras deja fait 2points avant de reboucler
.YMinMax
	move.w	(a0),d0						; y
	cmp.w		d1,d0							; y<ymin ?
	bgt.s		.max							; y et plus grand ke xmin.dc on le met ds xmax 
	move.w	d0,d1							; y et plus petit ke xmin.dc ...
	addq.w	#4,a0							; on point sur le y suivant et
	dbf		d3,.YMinMax					; on reboucle
	bra.s		.endof
.max
	cmp.w		d2,d0							; y<ymax ?
	blt.s		.again						; oui dc on reboucle
	move.w	d0,d2							; non dc y est le nouvel ymax
.again
	addq.w	#4,a0							; pareille ke 7 lignes en ht...
	dbf		d3,.YMinMax
.endof

	tst.w		d1
	bpl.s		.No_Clip_Min
	moveq		#0,d1
.No_Clip_Min
	cmpi.w	#199,d1
	bgt		Out_Side
	move.w	d1,YMin
	
	tst.w		d2
	bmi		Out_Side
	cmpi.w	#199,d2
	blo.s		.OK_2
	move.w	#199,d2	
.Ok_2
	move.w	d2,YMax

Tri_X
	lea		Co_Point(pc),a0			; pointe sur X1
	move.w	(a0),d1						; d1 = XMIN Temps
	move.w	d1,d2							; d2 = d1 = XMAX Temps
	addq.w	#4,a0							; on poine sur X2
	
	move.w	d7,d3
	subq.w	#1,d3							; on auras deja fait 2points avant de reboucler
.XMinMax
	move.w	(a0),d0						; X
	cmp.w		d1,d0							; X<Xmin ?
	bgt.s		.max							; X et plus grand ke xmin.dc on le met ds xmax 
	move.w	d0,d1							; X et plus petit ke xmin.dc ...
	addq.w	#4,a0							; on pointe sur le X suivant et
	dbf		d3,.XMinMax					; on reboucle
	bra.s		.endof
.max
	cmp.w		d2,d0							; X<Xmax ?
	blt.s		.again						; oui dc on reboucle
	move.w	d0,d2							; non dc y est le nouvel ymax
.again
	addq.w	#4,a0							; pareille ke 7 lignes en ht...
	dbf		d3,.XMinMax
.endof

	cmpi.w	#319,d1
	bge		Out_Side
	tst.w		d2
	bmi		Out_Side

	lea		Co_Point(pc),a0			; adresse des coordonnees des points
	move.w	d7,d6
	addq.w	#1,d6
	move.l	(a0),(a0,d6*4)
	lea		XMin,a1
	lea		XMax,a2
.Mk_All_Lines
	movem.w	(a0),d0-3					; chargees dans les registres
	addq.w	#4,a0
	move.w	d7,-(sp)
	bsr		Line							; Trace la ligne dans les taleaux Xmin ou Xmax
	move.w	(sp)+,d7
	dbf		d7,.Mk_All_Lines

	move.w	YMin,d0
	move.w	YMax,d7
	lea		(a1,d0.w*2),a1				; a1 = tab de xmin positionne
	lea		(a2,d0.w*2),a2				; a2 = tab de xmax
	sub.w		d0,d7							; on obtient le Dy donc le nbr de ligne a faire
	move.l	Current_Line,a3			; adr du tablo pointant sur les lignes
	lea		(a3,d0.w*4),a3				; on pointe a la bonne ligne

	lea		X_Dep,a4						; tablo de mask de dep
	lea		X_Arr,a5						; et d'arrive
	move.w	Num_Coul,d0					; numero de la couleur de 0 a 15
	
	lea		Mask_Coul,a0				; Adr de base du tablo des mask
	move.l	(a0,d0.w*8),d5				; on chope les 2 1er plan de la coul
	move.l	4(a0,d0.w*8),d6
		
	lea		Tab_Blocks,a6				; tablo contenant les blocks en fonc des X
	
**********************************************
**********************************************
.Fill
	move.l	(a3)+,a0				; adr de la ligne de l'ecran
	move.w	(a1)+,d0				; X de dep 
	move.w	(a2)+,d1				; X d'arriver
			
	move.w	(a6,d0.w*4),d4		; nbr de bloc de d‚part
	move.w	2(a6,d1.w*4),d2	; nbr de bloc d'arriv‚

	lea		(a0,d4.w*8),a0		; on pointe sur le 1er bloc a remplir
	sub.w		d4,d2					; nbr de bloc en tout	
	bmi.s		.Aff_Mask			; si neg , ya aps de bloc pleins

	move.l	(a4,d0.w*8),d3
	and.l		d3,(a0)
	move.l	4(a4,d0.w*8),d4
	move.l	d4,d0
	and.l		d5,d4
	or.l		d4,(a0)+
	and.l		d3,(a0)
	and.l		d6,d0
	or.l		d0,(a0)+

.Fill_Line
	move.l	d5,(a0)+				; on affiche les bloques pleins ...
	move.l	d6,(a0)+				; du polygone
	dbf		d2,.Fill_Line		; et on reboucle

.End_Mask
	move.l	(a5,d1.w*8),d3
	and.l		d3,(a0)
	move.l	4(a5,d1.w*8),d4
	move.l	d4,d0
	and.l		d5,d4
	or.l		d4,(a0)+
	and.l		d3,(a0)
	and.l		d6,d0
	or.l		d0,(a0)+

	dbf		d7,.Fill
	Rts
.Aff_Mask
	cmpi.w	#-2,d2
	beq.s		.Melt
	blt.s		.Problem_No_Draw
	move.l	(a4,d0.w*8),d3
	and.l		d3,(a0)
	move.l	4(a4,d0.w*8),d4
	move.l	d4,d0
	and.l		d5,d4
	or.l		d4,(a0)+
	and.l		d3,(a0)
	and.l		d6,d0
	or.l		d0,(a0)+
	bra.s		.End_Mask
.Melt
	move.l	(a4,d0.w*8),d2
	or.l		(a5,d1.w*8),d2		
	and.l		d2,(A0)
	move.l	4(a4,d0.w*8),d3
	move.l	d3,d0
	move.l	4(a5,d1.w*8),d1
	and.l		d1,d3
	and.l		d5,d3
	or.l		d3,(a0)+
	and.l		d1,d0
	and.l		d2,(a0)
	and.l		d6,d0
	or.l		d0,(a0)
.Problem_No_Draw
	dbf		d7,.Fill
Out_Side
	rts
Warning
	move.l	#$ffff0000,$ffff9800.w
	rts

***********************************************************************
Line
***********************************************************************
; d0 = X1, d1 = Y1, d2 = X2, d3 = Y3

	move.l	a2,a3					; pointe sur XMAX
	move.w	d3,d4					; d4=Y2
	sub.w		d1,d4					; d4=DY
	beq.s		.Horiz				; kelle chance c horizontale !!!
	bpl.s		.Tab_max				; si DY>0,on cherche XMAX
	move.l	a1,a3					; pointe sur tableau XMIN
	exg.l		d1,d3					; echange Y1 et Y2
	exg.l		d0,d2					; echange X1 et X2
	neg.w		d4						; DY>0
.Tab_max
	move.w	d2,d5					; d5=X2
	sub.w		d0,d5					; d5=DX
	beq.s		.Verti				; ben dit donc c verticale !!!
	lea		(a3,d1.w*2),a3
	ext.l		d5						; On etend le signe jusqu'au poid fort

	asl.l		#7,d5					; DX multiplie par 128
	divs		d4,d5					; (DX*128)/DY = pente
	swap		d5						;/ ca revient a un asl.l #12,d5
	asr.l		#7,d5					;\ partie ent. ds poid fort
	swap		d5						; et la pente ds le poid faible ossi

	addq.w	#1,d4
	lsr.w		d4
	bcc.s		.Trace_It
	move.w	d0,(a3)+
	addx.l	d5,d0
.Trace_It
	subq.w	#1,d4
.Mk_Line
	move.w	d0,(a3)+				; on mets le XMIN ou XMAX...
	addx.l	d5,d0					; HOP !!! c magique
	move.w	d0,(a3)+				; on mets le XMIN ou XMAX...
	addx.l	d5,d0					; HOP !!! c magique
	dbf		d4,.Mk_Line
	Rts
.verti
	lea		(a3,d1.w*2),a3
	swap		d0
	move.w	d2,d0
	subq.w	#1,d4
	lsr.w		d4
	bcc.s		.Mk_Vert
	move.w	d0,(a3)+

.Mk_vert
	move.l	d0,(a3)+				; nouvel XMIN/XMAX
	dbf		d4,.Mk_Vert
	Rts								; c'est fini !

.horiz
	cmp.w		d0,d2					; le kel est le plus grand d 2 ?
	bge.s		.horiz_no_swap		; si c bon, c bon...
	exg.l		d0,d2					; boum ...
.horiz_no_swap	
	move.w	d0,(a1,d1.w*2)		;  XMIN
	move.w	d2,(a2,d1.w*2)		;  XMAX
	Rts
	
Make_Precalc
; On commnce par precalculer les tableaux contenant les adresse de l'ecran
	
	move.w	#Nbr_Screen-1,d7
	lea		Adr_Screen1,a0
	lea		Line_Adr_Tab,a1
	
.Mk_All_Scr
	move.l	(a0)+,a2
	move.l	(a1)+,a3
	move.w	#199,d6
.Fill_Tabs
	move.l	a2,(a3)+
	lea		Line_Widh(a2),a2
	dbf		d6,.Fill_Tabs
	dbf		d7,.Mk_All_Scr
	
; Now on va creer les tableaux contenant les offsets et mask de chak coordonnees X

	lea		X_Dep,a0						; tableau des x de depart
	lea		X_Arr,a1						; tableau des x d'arrive
		move.w	#20-1,d6						; nombre de bloc dans une ligne
		lea		Tab_Blocks,a4
Nxt_blk
			lea		Mask,a2						; mask des blocs de 16 pixL
			move.w	#16-1,d7
Dec_Blk	
				move.w	(a2)+,d0						; mask de depart
				move.w	d0,d1
				not.w		d0								; on l'inverse pour le and
				move.w	d0,(a0)+
				move.w	d0,(a0)+
				move.w	d1,(a0)+
				move.w	d1,(a0)+

				move.w	(a2)+,d0						; mask d'arrive
				move.w	d0,d3
				not.w		d0								; on l'inverse pour le and
				move.w	d0,(a1)+
				move.w	d0,(a1)+
				move.w	d3,(a1)+
				move.w	d3,(a1)+

				move.w	Inc1,(a4)+					; le nbr de bloc depuis le dep
				move.w	Inc2,(a4)+					; ...

				dbf		d7,Dec_Blk					; on fait les autres mask
			addq.w	#1,Inc1
			addq.w	#1,Inc2
			dbf		d6,Nxt_Blk

		move.w	#19,d0
		move.w	#17,d1
		move.w	#1280-1,d7
.Fill_Clip_Part
		move.w	d0,(a4)+
		move.w	d1,(a4)+
		dbf		d7,.Fill_Clip_Part

		lea		Tab_Blocks-1280*4,a4
		move.w	#1280-1,d7
		moveq		#0,d0
		moveq		#-2,d1
.Fill_Clip
		move.w	d0,(a4)+
		move.w	d1,(a4)+
		dbf		d7,.Fill_Clip

		lea		X_Dep-1280*8,a0
		lea		X_Dep+320*8,a1
		lea		X_Arr+320*8,a2
		moveq		#0,d0
		moveq		#-1,d1
		move		#1280-1,d7
.Mk_Clip
		move.l	d0,(a0)+
		move.l	d1,(a0)+
		move.l	d1,(a1)+		
		move.l	d0,(a1)+		
		move.l	d0,(a2)+
		move.l	d1,(a2)+
		dbf		d7,.Mk_Clip		
	Rts

	Data

Inc1	dc.w		0
Inc2	dc.w		-2

Mask_Coul
	DC.W	-1,00,00,00
	DC.W	00,-1,00,00
	DC.W	-1,-1,00,00
	DC.W	00,00,-1,00
	DC.W	-1,00,-1,00
	DC.W	00,-1,-1,00
	DC.W	-1,-1,-1,00
	DC.W	00,00,00,-1
	DC.W	-1,00,00,-1
	DC.W	00,-1,00,-1
	DC.W	-1,-1,00,-1
	DC.W	00,00,-1,-1
	DC.W	-1,00,-1,-1
	DC.W	00,-1,-1,-1
	DC.W	-1,-1,-1,-1

Ymin			dc.w		0
Ymax			dc.w		0
Nb_Point		dc.w		0
Co_Point		dcb.w		50,0
Num_Coul		dc.w		0

				dcb.w		3000,0
Xmin			dcb.w		3200,0
Xmax			dcb.w		3200,0

Current_Line
				dc.l		0

Dep		set	0
Line_Adr_Tab
			Rept	Nbr_Screen
			dc.l		Adr_Line+Dep
Dep		set	Dep+800
			EndR

; MASK DE DEPART ET D'ARRIVE
MASK	
	DC.W	$FFFF,$0000
	DC.W	$7FFF,$8000
	DC.W	$3FFF,$C000
	DC.W	$1FFF,$E000
	DC.W	$0FFF,$F000
	DC.W	$07FF,$F800
	DC.W	$03FF,$FC00
	DC.W	$01FF,$FE00
	DC.W	$00FF,$FF00
	DC.W	$007F,$FF80
	DC.W	$003F,$FFC0
	DC.W	$001F,$FFE0
	DC.W	$000F,$FFF0
	DC.W	$0007,$FFF8
	DC.W	$0003,$FFFC
	DC.W	$0001,$FFFE
	
	BSS
Adr_Line		ds.l		200*Nbr_Screen

				ds.b		1280*8
X_Dep			ds.b		320*8
				ds.b		1280*8
X_Arr			ds.b		320*8
				ds.b		1280*8
				
				ds.b		1280*4
Tab_Blocks	ds.b		320*4
				ds.b		1280*4

	