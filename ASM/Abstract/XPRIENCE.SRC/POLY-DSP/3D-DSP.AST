***********************************************************************
***********										***********
***********										***********
***********		    3D Faces Pleines au DSP			***********
***********										***********
***********										***********
***********			Par Simplet / ABSTRACT			***********
***********										***********
***********************************************************************

KeyBD	EQU		1			; Si = 0, routine simple
							; Si = 1, routine evolu‚e

		OPT		O+,OW-

		IncDir	'..\INITS\'
		Include	'MACROS.AST'

***********************************************************************
***********				Inits G‚n‚rales			***********
***********************************************************************

		Section	TEXT

		clr.l	-(sp)					; Passage en Mode Supervisor
		move.w	#$20,-(sp)				; SUPER
		trap		#1						; Gemdos
		addq.l 	#6,sp

***********************************************************************
***********				Inits DSP					***********
***********************************************************************

		move.w	#113,-(sp)				; DSP_RequestUniqueAbility
		trap		#14						; XBios
		addq.l	#2,sp					; Correction Pile

		move.w	d0,-(sp)					; No Ability
		move.l	#DSP_Size,-(sp)			; Longueur en Mots DSP
		pea.l	DSP_Code					; Adresse du code binaire
		move.w	#109,-(sp)				; Dsp_ExecProg
		trap		#14						; XBios
		lea.l	12(sp),sp					; Correction Pile

Connect	move.l	#87654321,$ffffa204.w
		moveq.l	#0,d0

Conct_Get	btst.b	#0,$ffffa202.w
		bne.s	DSP_Test
		addq.l	#1,d0
		cmp.l	#100000,d0
		beq		DSP_Error
		bra.s	Conct_Get

DSP_Test	move.l	$ffffa204.w,d0
		cmp.l	#12345678,d0
		bne		DSP_Error

		lea.l	$ffffa204.w,a6
		bsr		Envoie_Table_1_x
		bsr		Envoie_Table_Sinus

		lea.l	Image_1+18(pc),a0
		bsr		Envoie_Image

***********************************************************************
***********				Inits G‚n‚rales			***********
***********************************************************************

		move.w	#$2700,sr

		bsr		Save_System
		bsr		Init_System

		lea.l	Videl_320_200_True,a0
		lea.l	Adr_Screen1,a1
		lea.l	Screens,a2
		moveq.l	#2-1,d0
		bsr		Init_Video
		bsr		Init_Falcon_Palette
		bsr		Init_IT

		move.l	#New_VBL,$70.w

		IfNe	KeyBD
			move.l	#KeyBoard_Mouse_and_JoySticks,$118.w
		Else
			move.l	#KeyBoard,$118.w
		EndC
		or.b		#$40,$fffffa09.w			; Autorise nouvelle
		or.b		#$40,$fffffa15.w			; routine clavier

***********************************************************************
***********			Inits Sp‚cifiques				***********
***********************************************************************

***********************************************************************
***********		Boucle principale d'attente			***********
***********************************************************************

Main_Loop	clr.w	VBL_Cmpt

VBL_Wait	tst.w	VBL_Cmpt					; Attend
		beq.s	VBL_Wait					; prochaine VBL

		bsr.s	VBL_Rout					; ex‚cute routine

		cmp.b	#$39,LastKey				; Touche Espace Press‚e ???
		bne.s	Main_Loop

***********************************************************************
***********	C'est fini, on remet tout en place			***********
***********************************************************************

		bsr		Restore_System

DSP_Error	clr.w 	-(sp)					; PTerm
		trap 	#1						; Gemdos

***********************************************************************
***********		Routine tournant … chaque VBL			***********
***********************************************************************

VBL_Rout	SaveColor

		move.l	Adr_Screen1,d0				; Flipping
		move.l	Adr_Screen2,Adr_Screen1		; Ecrans
		move.l	d0,Adr_Screen2				; Physique
		lsr.w	#8,d0					; /
		move.l	d0,$ffff8200.w				; Logique

		CPUTimeColor		#$dd550088

; Port Host
		lea.l	$ffffa204.w,a6
		lea.l	2(a6),a5

; Envoie Informations globales
		move.l	Adr_Screen1,(a6)			; Adresse de l'‚cran
		move.l	Objet(pc),(a6)				; Num‚ro d'objet

		lea.l	Rot_X(pc),a0
		moveq.l	#6-1,d7
Envoie_Infos
		move.l	(a0)+,(a6)
		dbra		d7,Envoie_Infos

; Attend que le DSP soit prˆt
		WaitDSPToGet
		move.w	(a5),d0

Routs_Choice
		WaitDSPToGet						; Le DSP nous envoie
		moveq.l	#0,d0					; le num‚ro de
		move.w	(a5),d0					; routine solicit‚e
		beq.s	Clear_Borders_Rout

		subq.b	#1,d0
		beq		Polygone_Rout
		subq.b	#1,d0
		beq		Gouraud_Rout
		bra		Mapping_Rout

Clear_Borders_Rout
		CPUTimeColor		#$dd550088

Clear_Borders
		WaitDSPToGet
		move.w	(a5),d6
		beq.s	KeyBoard_Control
		movea.l	(a6),a1

		lsr.w	d6						; Si nombre impair
		bcc.s	Clear_Borders_				; de pixels
		
		move.w	d0,(a1)+					; affiche un premier

Clear_Borders_
		subq.w	#1,d6
		bmi.s	Clear_Borders

Clear_Borders_Loop
		move.l	d0,(a1)+					; Affiche deux Pixels
		dbra		d6,Clear_Borders_Loop
		bra.s	Clear_Borders
		

; Controle Clavier

KeyBoard_Control
		cmp.b	#$63,LastKey
		bne.s	No_Prev
		clr.b	LastKey
		tst.l	Objet(pc)
		beq		Rotate
		subq.l	#1,Objet
No_Prev	cmp.b	#$64,LastKey
		bne.s	No_Next
		clr.b	LastKey
		cmp.l	#3-1,Objet
		beq		Rotate
		addq.l	#1,Objet
No_Next	
		cmp.b	#$4e,LastKey
		bne.s	No_Plus
		add.l	#5*512,Trans_Z
No_Plus	cmp.b	#$4a,LastKey
		bne.s	No_Moins
		sub.l	#5*512,Trans_Z
No_Moins	cmp.b	#$6a,LastKey
		bne.s	No_4
		sub.l	#5*512,Trans_X
No_4		cmp.b	#$6c,LastKey
		bne.s	No_6
		add.l	#5*512,Trans_X
No_6		cmp.b	#$68,LastKey
		bne.s	No_8
		sub.l	#5*512,Trans_Y
No_8		cmp.b	#$6e,LastKey
		bne.s	No_2
		add.l	#5*512,Trans_Y
No_2
		cmp.b	#$52,LastKey
		bne.s	No_Insert
		addq.l	#1,Rot_Z
No_Insert	cmp.b	#$47,LastKey
		bne.s	No_Home
		add.l	#360-1,Rot_Z
No_Home	cmp.b	#$48,LastKey
		bne.s	No_Haut
		add.l	#360-1,Rot_X
No_Haut	cmp.b	#$50,LastKey
		bne.s	No_Bas
		addq.l	#1,Rot_X
No_Bas	cmp.b	#$4b,LastKey
		bne.s	No_Gauche
		add.l	#360-1,Rot_Y
No_Gauche	cmp.b	#$4d,LastKey
		bne.s	No_Droite
		addq.l	#1,Rot_Y
No_Droite	

; Effectue le mouvement de rotation

		cmp.b	#$66,LastKey
		beq		VBL_Ret

Rotate	lea.l	Rot_X(pc),a0
		lea.l	Increments(pc),a1
		moveq.l	#3-1,d7
Incremente_Angles
		move.l	(a0),d0
		add.l	(a1)+,d0
		cmp.l	#360,d0
		blo.s	Angle_Ok
		sub.l	#360,d0
Angle_Ok	move.l	d0,(a0)+
		dbra		d7,Incremente_Angles

VBL_Ret	RestoreColor
		rts

***********************************************************************
***********				Routine de Polygone			***********
***********************************************************************

Polygone_Rout
		CPUTimeColor		#$5f6f00ff

		move.w	(a5),d1					; Couleur
		move.w	d1,d0					; dans word
		swap.w	d0						; faible et
		move.w	d1,d0					; word fort

		WaitDSPToGet
		move.w	(a5),d7					; Nombre de Lignes
		subq.w	#1,d7					; horizontales … tracer

		CPUTimeColor		#$ff8f002f

Polygone_Lines_Loop
		WaitDSPToGet
		move.w	(a5),d6					; Nombre de Pixels
		beq.s	Polygone_Next_Line
		movea.l	(a6),a1					; Adresse de d‚part

		lsr.w	d6						; Si nombre impair
		bcc.s	Polygone_Line				; de pixels
		
		move.w	d0,(a1)+					; affiche un premier

Polygone_Line
		subq.w	#1,d6
		bmi.s	Polygone_Next_Line

Polygone_Line_Loop
		move.l	d0,(a1)+					; Affiche deux Pixels
		dbra		d6,Polygone_Line_Loop

Polygone_Next_Line
		dbra		d7,Polygone_Lines_Loop
		bra		Routs_Choice

***********************************************************************
***********				Routine de Gouraud			***********
***********************************************************************

Gouraud_Rout
		CPUTimeColor		#$5f6f00ff

		WaitDSPToGet
		move.w	(a5),d7					; Nombre de Lignes
		subq.w	#1,d7					; horizontales … tracer

		CPUTimeColor		#$ff8f002f

Gouraud_Lines_Loop
		WaitDSPToGet
		move.w	(a5),d6					; Nombre de Pixels
		beq.s	Gouraud_Next_Line
		WaitDSPToGet
		movea.l	(a6),a1					; Adresse de d‚part

		lsr.w	d6						; Si nombre impair
		bcc.s	Gouraud_Line1				; de pixels
		
		move.w	(a5),(a1)+				; affiche un premier

Gouraud_Line1
		tst.b	d6
		beq.s	Gouraud_Next_Line

		lsr.w	d6
		bcc.s	Gouraud_Line2
		
		move.w	(a5),(a1)+				; Affiche
		move.w	(a5),(a1)+				; deux pixels

Gouraud_Line2
		subq.w	#1,d6
		bmi.s	Gouraud_Next_Line

Gouraud_Line_Loop
		move.w	(a5),(a1)+				; Affiche
		move.w	(a5),(a1)+				; quatre
		move.w	(a5),(a1)+				; pixels
		move.w	(a5),(a1)+
		dbra		d6,Gouraud_Line_Loop

Gouraud_Next_Line
		dbra		d7,Gouraud_Lines_Loop
		bra		Routs_Choice

***********************************************************************
***********			Routine de Mapping				***********
***********************************************************************

Mapping_Rout
		CPUTimeColor		#$5f6f00ff

		WaitDSPToGet
		move.w	(a5),d7					; Nombre de Lignes
		subq.w	#1,d7					; horizontales … tracer

		CPUTimeColor		#$ff8f002f

Mapping_Lines_Loop
		WaitDSPToGet
		move.w	(a5),d6					; Nombre de Pixels
		beq.s	Mapping_Next_Line
		WaitDSPToGet
		movea.l	(a6),a1					; Adresse de d‚part
		WaitDSPToGet

		lsr.w	d6						; Si nombre impair
		bcc.s	Mapping_Line				; de pixels
		
		move.w	(a5),(a1)+				; Affiche un premier

Mapping_Line
		subq.w	#1,d6
		bmi.s	Mapping_Next_Line

Mapping_Line_Loop
		move.w	(a5),(a1)+
		subq.w	#1,d0
		move.w	(a5),(a1)+
		dbra		d6,Mapping_Line_Loop

Mapping_Next_Line
		dbra		d7,Mapping_Lines_Loop
		bra		Routs_Choice

***********************************************************************
***********		   Interruption VBL : compteur		***********
***********************************************************************

New_VBL	addq.w	#1,VBL_Cmpt
		rte

VBL_Cmpt	ds.w		1

***********************************************************************
***********				Sous-Programmes			***********
***********************************************************************

; Envoie une image

Envoie_Image
		moveq.l	#0,d0
		move.w	#80*80-1,d7
Envoie_Image_Loop
		move.w	(a0)+,d0
		move.l	d0,(a6)
		dbra		d7,Envoie_Image_Loop
		rts

; Envoie la table des 1/x

Envoie_Table_1_x
		move.w	#500-1,d7
		move.l	#-500,d0

Negatifs	move.l	#$7fffff,d6
		divs.l	d0,d6
		move.l	d6,(a6)
		addq.l	#1,d0
		dbra		d7,Negatifs

Zero		move.l	#$7fffff,(a6)

		move.w	#1500-1,d7
		moveq.l	#1,d0

Positifs	move.l	#$7fffff,d6
		divs.l	d0,d6
		move.l	d6,(a6)
		addq.l	#1,d0
		dbra		d7,Positifs
		rts

; Envoie la table de sinus/cosinus

Envoie_Table_Sinus
		lea.l	Sinus_Table(pc),a0
		move.w	#360+90-1,d7
Envoie_Sinus
		move.l	(a0)+,d0
		asr.l	#8,d0
		move.l	d0,(a6)
		dbra		d7,Envoie_Sinus
		rts

		Include	'INITSFAL.AST'

***********************************************************************
***********				Section DATA				***********
***********************************************************************

		Section	DATA

Objet		dc.l		1-1
Increments	dc.l		2,360-1,3
Rot_X		dc.l		0
Rot_Y		dc.l		0
Rot_Z		dc.l		0
Trans_X		dc.l		0*512
Trans_Y		dc.l		0*512
Trans_Z		dc.l		0*512

DSP_Code		IncBin	'3D-DSP.P56'
DSP_Size		equ		(*-DSP_Code)/3

Sinus_Table	IncBin	'COSIN32B.TAB'

Image_1		IncBin	'OEIL-01.TG1'

***********************************************************************
***********				Section BSS				***********
***********************************************************************

		Section	BSS

; Adresses Ecrans
Adr_Screen1	ds.l		1
Adr_Screen2	ds.l		1

; Place pour Ecrans
Screens		ds.b		2*((320*200*2)+256)
	