;24 bit motion-rotator-zoomer, 16 bit output  WizTom of AGGRESSION
; pitais skulata.. sourcegraffa alkaa $2000, pituus $2000
; max screensize 160*140(?)
; x stepper deltana edelliseen
; y stepper absolut ram address
; split screen, x:160*100, y:160*ysize

PBC	equ	$ffe0
HSR	equ	$ffe9
HTX	equ	$ffeb

	org	p:$0
	jmp	start

	dc	0,0,0,0,0,0,0,0,0,0
	dc	0,0,0,0,0,0,0,0,0,0
	dc	0,0,0,0,0,0,0,0,0,0
	dc	0,0,0,0,0,0,0,0,0,0
	dc	0,0,0,0,0,0,0,0,0,0
	dc	0,0,0,0,0,0,0,0,0,0
	dc	0,0,0,0

start	
	movep	#0,x:$fffe		;fix read
	move	#>$babe,x0
x_ready	jclr	#1,X:HSR,x_ready
	move	x0,X:HTX		

kasky	movep	#1,X:PBC		
	jclr	#0,x:HSR,kasky
	move	x:HTX,a
	tst	a	#>1,x0
	jeq	key0			;feed 16 bit to cpu
	sub	x0,a
	jeq	key1			;feed x-y stepper to dsp
	sub	x0,a
	jeq	key2			;feed 24 bit gfx 
	sub	x0,a
	jeq	key3			;clear motion buf

	jmp	start
;-------------------------------
; 24bit to 16bit conv. WizTom
; killer FAST!!

;	x - 16k 24 bit screen
;	y - 8k 24 bit sourcegfx, stepperit

key0
	move	#$ffff,m0
	move	#$ffff,m1
	move	#$1fff,m2		;source 8k mask
	move	#$ffff,m3
	move	#$ffff,m7
	move	#screen,r7		;motion buf
	move	#vakiot,r3
	move	#-3,n3
	move	#y_stepper,r0

	move	#>100,x0
	do	x0,y_loop
;-- Y loop
	move	#x_stepper,r1
	move	y:(r0)+,r2		;y stepper		
	move	y:(r1)+,n2		;x stepper (relativ!)

	move	#>$80000,y0
	move	y:x_size,x1
	do	x1,x_loop
;-- X loop
v1	equ	$070707			;motion maski
v1b	equ	0
v2	equ	$f800f8
v2b	equ	$00f800
v3	equ	$8000	;2^15
v3b	equ	$100000	;2^20
v4	equ	$40000	;2^18
v4b	equ	$40000	;2^18		;motion shift
	
	move	x:(r7),y1
	mpy	y0,y1,a	l:(r3)+,x
	and	x1,a	
	neg	a			;sub 1/16 old
	add	y1,a	y:(r2)+n2,y0	;get new gfx  (mask size!)
	add	y0,a
	move	a1,x:(r7)+		;feedback

	tfr	a,b	l:(r3)+,x
	and	x1,a	l:(r3)+,y	;R B	
	and	x0,b	a1,x1		; G
	mpy	y1,x1,a	b1,x0		;r..
	mac	y0,x1,a	l:(r3)+n3,y	;r.b
	mac	y1,x0,a	y:(r1)+,n2	;rgb
	
write	jclr	#1,X:HSR,write
	move	a1,X:HTX		
x_loop
;-------
	nop
	nop
y_loop

; toka partti y:rammin alempaa puoliskoon..
;
;
	move	#screen2,r7		;motion buf
	move	y:y_size,a
	move	#>100,x0
	sub	x0,a
	do	a1,y_loop2
;-- Y2 loop
	move	#x_stepper,r1
	move	y:(r0)+,r2		;y stepper		
	move	y:(r1)+,n2		;x stepper (relativ!)

	move	#>$80000,y0
	move	y:x_size,x1
	do	x1,x_loop2
;-- X loop

	move	y:(r7),y1
	mpy	y0,y1,a	l:(r3)+,x
	and	x1,a	
	neg	a			;sub 1/16 old
	add	y1,a	y:(r2)+n2,y0	;get new gfx  (mask size!)
	add	y0,a
	move	a1,y:(r7)+		;feedback

	tfr	a,b	l:(r3)+,x
	and	x1,a	l:(r3)+,y	;R B	
	and	x0,b	a1,x1		; G
	mpy	y1,x1,a	b1,x0		;r..
	mac	y0,x1,a	l:(r3)+n3,y	;r.b
	mac	y1,x0,a	y:(r1)+,n2	;rgb
	
write2	jclr	#1,X:HSR,write2
	move	a1,X:HTX		
x_loop2
;-------
	nop
	nop
y_loop2

	jmp	start
;------------------------------------
key1
ra	movep	#1,X:PBC
	jclr	#0,x:HSR,ra		
	move	x:HTX,x0
	move	x0,y:x_size

rb	movep	#1,X:PBC
	jclr	#0,x:HSR,rb
	move	x:HTX,x1
	move	x1,y:y_size

	move	#x_stepper,r0
	move	#$ffff,m0
	do	x0,getx
rc	movep	#1,X:PBC
	jclr	#0,x:HSR,rc
	move	x:HTX,y:(r0)+
getx
	move	#y_stepper,r0
	do	x1,getx2
rd	movep	#1,X:PBC
	jclr	#0,x:HSR,rd
	move	x:HTX,y:(r0)+
getx2
	jmp	start
;------------------------------------
key2
	move	#$2000,r0
	move	#$ffff,m0
	move	#>128*64,x0
	do	x0,filler
getpix	movep	#1,X:PBC		
	jclr	#0,x:HSR,getpix		;y ram upper part
	move	x:HTX,y:(r0)+
filler
	jmp	start
;------------------------------------
key3
	move	#screen,r0
	move	#$ffff,m0
	move	#$ffffff,x1
	move	#160*100,x0
	rep	x0
	move	x1,x:(r0)+
	move	#screen2,r0
	move	#160*49,x0
	rep	x0
	move	x1,y:(r0)+

	move	#$ffff,m0
	move	#vakiot,r0			;settaa vakiot
	move	#>v1,x1
	move	#>v1b,x0
	move	x,l:(r0)+
	move	#>v2,x1
	move	#>v2b,x0
	move	x,l:(r0)+
	move	#>v3,x1
	move	#>v3b,x0
	move	x,l:(r0)+
	move	#>v4,x1
	move	#>v4b,x0
	move	x,l:(r0)+

	jmp	start
;------------------------------------
;read_one
;	movep	#1,X:PBC		
;	jclr	#0,x:HSR,read_one
;	move	x:HTX,a1
;
;write_one
;	jclr	#1,X:HSR,write_one
;	move	a1,X:HTX		
;---------------------------------
	org	y:$0
vakiot	
	ds	1	;v1
	ds	1	;v2
	ds	1	;v3
	ds	1	;v4
x_size	ds	1
y_size	ds	1
x_stepper
	ds	162
y_stepper	
	ds	162
screen2

	org	x:$0
vakio2	ds	1	;v1b
	ds	1	;v2b
	ds	1	;v3b
	ds	1	;v4b
screen
	end
