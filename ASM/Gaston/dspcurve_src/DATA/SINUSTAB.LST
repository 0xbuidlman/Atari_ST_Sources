OPEN "o",#1,"sinusta2.dat"
FOR i=0 TO 360 STEP 0.2
  mot%=0
  bug%=0
  y=SIN(RAD(i))*0.99
  reel2dsp(y,mot%,bug%)
  IF bug%=0
    PRINT #1,MKL$(mot%);
  ELSE
    PRINT "Il y a eu une erreur dans la conversion d'un nombre ..."
    PRINT " le nombre fautif est: ";y
    ~INP(2)
    EDIT
  ENDIF
NEXT i
CLOSE
' *************************************************************************
' *=======================================================================*
' *== Transforme un r‚el appartenant … l'intervalle [-1..1[ en mot au   ==*
' *== format DSP (23 bits+ signe)                                       ==*
' *== Renvoie un num‚ro d'erreur: | 0= Ok tout va bien                  ==*
' *==                             | 1= Le r‚el d‚passe les bornes       ==*
' *=======================================================================*
' *************************************************************************
PROCEDURE reel2dsp(reel,VAR mot_dsp%,bug%)
  bug%=0                ! aucune erreur pour l'instant
  '
  IF reel>1 OR reel<-1          ! *== Si le r‚el d‚passe les bornes ==*
    bug%=1
  ELSE IF reel=1                ! *== Si reel=1 on ne calcule pas   ==*
    mot_dsp%=&H7FFFFF
  ELSE IF reel=-1               ! *== Si reel=-1 on ne calcule pas  ==*
    mot_dsp%=&H800000
  ELSE                          ! *== dans les autres cas ...       ==*
    mot_dsp%=0
    IF reel<0
      mot_dsp%=2^23       ! si le r‚el est <0, on met le bit 23 (=signe) … 1
      reel=1+reel         ! et on le transforme en r‚el positif
    ENDIF
    a=0                   ! minorant
    b=1                   ! majorant
    m=0.5                 ! milieu du segment
    '
    ' et maintenant on trouve quels sont le bits … mettre … 1 par dichotomie
    FOR bit%=22 DOWNTO 0
      IF reel<m
        b=m               ! si r‚el<milieu, le milieu devient un majorant
      ELSE
        a=m               ! si r‚el>milieu, le milieu devient un minorant
        mot_dsp%=mot_dsp%+2^bit%  ! et on met … 1 le bit voulu
      ENDIF
      m=(a+b)/2           ! recalcule le nouveau milieu du segment [a;b]
    NEXT bit%
  ENDIF
RETURN
