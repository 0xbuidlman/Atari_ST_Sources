;
; SCROLL RUBICON MAP ON AN STE
;
; BY A.J.BUCHANAN 
;
; STARTED 		15/12/91
; DID BUGGER ALL	16/12/91
; COMPLETED 		17/12/91
;
; SCROLL RUBICON MAP. FAIRLY CONFIGURABLE!
; THIS IS NOT PERFECT CODE UNFORTUNATELY, THERE ARE A COUPLE
; OF DODGEY BITS......SEEM TO HAVE FIXXED EM! I INCREASED THE BUFFER
; WIDTH BY ANOTHER WORD. MAY BE ABLE TO TAKE IT OFF AGAIN IF DOUBLE
; SCREEN BUFFERING USED? ( BUT PROBABLY NOT )
;
; TO USE THIS VERSION USE <ESC> TO SCROLL LEFT, AND USE <SPACE>
; TO EXIT. SCRSPEED DETERMINES THE SPEED OF THE SCROLLING
; WHICH IS IN THE RANGE 0-8
;
; NEXT STAGE IS RIGHT SCROLLING........STAY TUNED!
;
; RIGHT SCROLLING ADDED 29/12/91.
;
; P.S.   ANDREW, **REMEMBER** THAT 'LINEWID' IS NUMBER OF *WORDS*
; NOT!!!!! NUMBER OF *BYTES* !!!!!!!!!!!!!
;
; EACH BUFFER IS..... 25K
; SO 3 BUFFERS WOULD TAKE 75K
; THE STATUS PANEL TAKES 7K, TOTAL IS 82K
;
; RUBICON (ST) USES 4 BUFFERS WITH A TOTAL OF 73K
; PLUS TWO SCREENS . 32K EACH = 64K, TOTAL IS 137K
;
; STE WOULD SAVE 55K AND ACTUALLY USE MORE OF THE SCREEN!
; ( 20 WORDS WIDE RATHER THAN 18!!! )
;
; 

; 2009/01/16	AJB		Fixes to build & run on STeem under devpac
;						Verfied running Steem 3.2
;						Config: 8MHz 1Mb TOS 1.04

DESK	equ	1	; Desktop Version ON-OFF
PDS		equ	0	; PDS ON-OFF

	ifne PDS
	opt	p+
	opt	d+
	org	$1000
	endc
	
		JMP	START

TIMING		EQU	0		; 1 FOR TIMING RASTERS
KEYS		EQU	1		; 1 FOR KYBD CTRL
LEVNUM		EQU	1		; MAP TO DISPLAY

;
; MACROS
;
BAR	MACRO
	IFNE	TIMING
	MOVE.W	#\1,COLOR00
	ENDC
	ENDM
	
VSYNC	MACRO
	MOVE.L	$466.W,D0
VS_\.	CMP.L	$466.W,D0
	BEQ.S	VS_\.	
	ENDM
	
SETSCREEN	MACRO
	MOVE.L	\1,D0
	MOVE.B	D0,VBASEL
	ASR.W	#8,D0
	MOVE.B	D0,VBASEM
	SWAP	D0
	MOVE.B	D0,VBASEH
	ENDM

SETSCREEN2	MACRO
	MOVE.L	\1,D0
	MOVE.B	D0,VADDRL
	ASR.W	#8,D0
	MOVE.B	D0,VADDRM
	SWAP	D0
	MOVE.B	D0,VADDRH
	ENDM

GETSCREEN	MACRO
	MOVEQ	#0,D0
	MOVE.B	VBASEH,D0
	SWAP	D0
	MOVE.B	VBASEM,D0
	LSL.W	#8,D0	
	MOVE.B	VBASEL,D0
	ENDM


;
; SCROLL EQUATES
;

WIDTH		EQU	44			; WIDTH OF SCROLL BUFFER
SCREENWIDTH	EQU	40			; WIDTH OF SCREEN
NUMPLANES	EQU	4			; NUMBER OF PLANES
SCRSPEED	EQU	2			; PIX PER SCROLL
FDEPTH		EQU	8			; HEIGHT OF BUFFER IN BLOCKS
FMAPWIDTH	EQU	340*2		; WIDTH OF MAP IN BYTES
FBUFDEPTH	EQU	FDEPTH*16	; HEIGHT OF BUFFER IN PIX

	;LIST	ON

SCRLBUFSIZE	EQU	(FBUFDEPTH*WIDTH*NUMPLANES)+(FMAPWIDTH*NUMPLANES)

	;LIST 	OFF

FMAP		
	IFNE	LEVNUM=1
	;INCBIN	rubimap.1
	INCBIN	STMAP1.RUB
	ENDC
	IFNE	LEVNUM=2
	INCBIN	F:\RUBICON\GFX\L2\STMAP2.RUB
	ENDC
	IFNE	LEVNUM=3
	INCBIN	F:\RUBICON\GFX\L3\STMAP3.RUB
	ENDC
	IFNE	LEVNUM=4
	INCBIN	F:\RUBICON\GFX\L4\STMAP4.RUB
	ENDC
	IFNE	LEVNUM=5
	INCBIN	F:\RUBICON\GFX\L5\STMAP5.RUB
	ENDC
	IFNE	LEVNUM=6
	INCBIN	F:\RUBICON\GFX\L6\STMAP6.RUB
	ENDC
	IFNE	LEVNUM=7
	INCBIN	F:\RUBICON\GFX\L7\STMAP7.RUB
	ENDC
		
DATA		EQU	FMAP+(FMAPWIDTH*FDEPTH)

;
; MEMORY EQUATES
;

;TOPRAM	EQU	$100000		( 1 MEG MACHINE! )
TOPRAM	EQU	$80000
SCRLBUF	EQU	TOPRAM-SCRLBUFSIZE
SCREEN1	EQU	SCRLBUF
BLANK	EQU	SCRLBUF-32000


;
; STE EQUATES
;

IntEnableA		equ	$fffffa07
IntEnableB		equ	$fffffa09
IntMaskA		equ	$fffffa13
IntMaskB		equ	$fffffa15
TimerAControl	equ	$fffffa19
TimerBControl	equ	$fffffa1b

VADDRH	EQU	$FFFF8205	.B
VADDRM	EQU	$FFFF8207	.B
VADDRL	EQU	$FFFF8209	.B
VBASEH	EQU	$FFFF8201	.B
VBASEM	EQU	$FFFF8203	.B
VBASEL	EQU	$FFFF820D	.B
LINEWID	EQU	$FFFF820E	.W
HSCROLL	EQU	$FFFF8264	.W
SYNCMODE	EQU	$FFFF820A	.B
SHIFTMODE	EQU	$FFFF8260	.B

DMACNTRL	EQU	$FFFF8901
DMAFRMH	EQU	$FFFF8903
DMAFRMM	EQU	$FFFF8905
DMAFRML	EQU	$FFFF8907
DMACNTH	EQU	$FFFF8909
DMACNTM	EQU	$FFFF890B
DMACNTL	EQU	$FFFF890D
DMASTPH	EQU	$FFFF890F
DMASTPM	EQU	$FFFF8911
DMASTPL	EQU	$FFFF8913
DMAMODE	EQU	$FFFF8921

MW_DATA	EQU	$FFFF8922
MW_MASK	EQU	$FFFF8924

COLOR00	EQU	$FFFF8240
COLOR01	EQU	$FFFF8242
COLOR02	EQU	$FFFF8244
COLOR03	EQU	$FFFF8246
COLOR04	EQU	$FFFF8248
COLOR05	EQU	$FFFF824A
COLOR06	EQU	$FFFF824C
COLOR07	EQU	$FFFF824E
COLOR08	EQU	$FFFF8250
COLOR09	EQU	$FFFF8252
COLOR10	EQU	$FFFF8254
COLOR11	EQU	$FFFF8256
COLOR12	EQU	$FFFF8258
COLOR13	EQU	$FFFF825A
COLOR14	EQU	$FFFF825C
COLOR15	EQU	$FFFF825E



;
; VARS
;
	RSRESET
FORMAP:	RS.L	1	; MAP POINTER
MAPXPOS:	RS.W	1	; MAP POINTER ( PIX )
SCRVAL:	RS.W	1	; PIX COUNTER
DISPCOL:	RS.W	1	; DISPLAY BUFFER OFFSET
PRNTCOL:	RS.W	1	; OFFSET FOR LEFT SCROLL PUT
BACKCOL:	RS.W	1	; OFFSET FOR RIGHT SCROLL PUT
RSSIZE	RS.B	1
VARS	DS.B	RSSIZE

MAIN_PAL1:	DC.W 	$000,$555,$221,$110,$210,$431,$332,$000
	DC.W 	$000,$232,$355,$120,$500,$554,$300,$200

MAIN_PAL2:	DC.W 	$000,$665,$221,$110,$210,$431,$332,$000
	DC.W 	$000,$367,$120,$010,$131,$242,$442,$553

MAIN_PAL3:	DC.W 	$000,$556,$233,$122,$210,$430,$344,$000
	DC.W 	$000,$001,$001,$112,$223,$334,$445,$556

MAIN_PAL4:	DC.W 	$000,$554,$330,$120,$210,$431,$320,$000
	DC.W 	$000,$010,$020,$032,$144,$341,$320,$210

MAIN_PAL5:	DC.W 	$000,$555,$221,$110,$210,$430,$320,$000
	DC.W 	$000,$010,$021,$031,$042,$110,$221,$332

MAIN_PAL6:	DC.W	$000,$555,$221,$110,$210,$431,$320,$000
	DC.W	$054,$043,$010,$120,$231,$342,$453,$065

MAIN_PAL7:	DC.W 	$000,$556,$221,$110,$210,$430,$332,$000
	DC.W 	$000,$110,$100,$210,$321,$110,$221,$332

	IFNE	LEVNUM=1
MAIN_PAL	EQU	MAIN_PAL1
	ENDC

	IFNE	LEVNUM=2
MAIN_PAL	EQU	MAIN_PAL2
	ENDC

	IFNE	LEVNUM=3
MAIN_PAL	EQU	MAIN_PAL3
	ENDC

	IFNE	LEVNUM=4
MAIN_PAL	EQU	MAIN_PAL4
	ENDC

	IFNE	LEVNUM=5
MAIN_PAL	EQU	MAIN_PAL5
	ENDC

	IFNE	LEVNUM=6
MAIN_PAL	EQU	MAIN_PAL6
	ENDC
		
	IFNE	LEVNUM=7
MAIN_PAL	EQU	MAIN_PAL7
	ENDC

BLANK_PAL:	DC.W	0,0,0,0,0,0,0,0
	DC.W	0,0,0,0,0,0,0,0

	ifne	DESK
	
	rsreset

old_palette:	rs.w	16
old_res:		rs.w	1
old_screen:		rs.l	1
old_stack:		rs.l	1

desk_vars_size	rs.w	1

desk_vars		ds.b	desk_vars_size

				ds.l	200
desk_stack:		ds.l	1

desk_start	macro	
		clr.l	-(a7)
		move.w	#$20,-(a7)
		trap	#1
		addq.l	#6,a7

		lea		desk_vars,a6

		move.w	#4,-(a7)
		trap	#14
		addq.l	#2,a7
		move.w	d0,old_res(a6)

		move.w	#2,-(a7)
		trap	#14
		addq.l	#2,a7
		move.l	d0,old_screen(a6)

		clr	-(a7)
		pea	-1
		move.l	(a7),-(a7)
		move.w	#5,-(a7)
		trap	#14
		lea	12(a7),a7

		movem.l	COLOR00.w,d0-d7
		movem.l	d0-d7,old_palette(a6)

		move.l	#desk_stack,a7
	endm
	
	
desk_stop	macro	
		lea		desk_vars,a6

		movem.l	old_palette(a6),d0-d7
		movem.l	d0-d7,COLOR00.w

		move.w	old_res(a6),-(a7)
		move.l	old_screen(a6),-(a7)
		move.l	(a7),-(a7)
		move.w	#5,-(a7)
		trap	#14
		lea		12(a7),a7

		move.l	old_stack(a6),-(a7)
		move.w	#$20,-(a7)
		trap	#1
		addq.l	#6,a7

		clr		-(a7)
		trap	#1
	endm
	
	endc

START:	

	ifne	DESK
		desk_start
	endc

	MOVE.W	#$2700,SR
	MOVE.B	IntEnableA.w,-(A7)
	MOVE.B	IntEnableB.w,-(A7)
	MOVE.B	IntMaskA.w,-(A7)
	MOVE.B	IntMaskB.w,-(A7)
	MOVE.L	$70.W,-(A7)
	MOVE.L	$120.W,-(A7)

	MOVEM.L	BLANK_PAL,D0-D7
	MOVEM.L	D0-D7,COLOR00.w

	LEA		VARS,A5
	BSR		INIT_SCROLL
	BSR		FILL_BUFFER

	CLR.B	IntEnableA.w
	CLR.B	IntEnableB.w
	CLR.B	IntMaskA.w
	CLR.B	IntMaskB.w
	MOVE.B	#0,TimerBControl
	BSET	#0,IntEnableA
	BSET	#0,IntMaskA
	MOVE.L	#SCRL_HBL,$120.W
	MOVE.L	#SCRL_VBL,$70.W
	MOVE.W	#$2300,SR
	MOVE.B	#0,SHIFTMODE	

	IFEQ	KEYS
	MOVE.W	#75,D7
XLOOP	
	VSYNC
	DBF	D7,XLOOP
	ENDC

	; Main Loop
	LEA	VARS,A5
	BSR	MAIN_LOOP

	; Exiting...
	MOVE.B	#1,SHIFTMODE	
	
	MOVE.W	#$2700,SR
	MOVE.L	(A7)+,$120.W
	MOVE.L	(A7)+,$70.W
	MOVE.B	(A7)+,IntMaskB.w
	MOVE.B	(A7)+,IntMaskA.w
	MOVE.B	(A7)+,IntEnableB.w
	MOVE.B	(A7)+,IntEnableA.w

	MOVE.B	#0,TimerBControl
	MOVE.W	#0,LINEWID
	MOVE.W	#0,HSCROLL

	MOVE.W	#$2300,SR

	ifne	PDS	
		MOVE.W	#$2700,SR
		JMP	$140
	endc

	ifne	DESK
		desk_stop
	endc

	illegal	

SCRL_VBL:
	MOVEM.L	D0-D7/A0,-(A7)	
	ADDQ.L	#1,$466.W
	MOVE.W	SCRVAL(A5),HSCROLL
	MOVEQ	#((WIDTH-SCREENWIDTH)*2),D0
	TST.W	SCRVAL(A5)
	BEQ	.1
	MOVEQ	#((WIDTH-SCREENWIDTH-2)*2),D0
.1:	MOVE.W	D0,LINEWID
	LEA	SCREEN1,A0
	MOVE.W	DISPCOL(A5),D0	
	ADDA.W	D0,A0	
	SETSCREEN2 A0
	MOVE.B	#128-2,$FFFFFA21.W
	MOVE.B	#8,TimerBControl
	MOVEM.L	MAIN_PAL,D0-D7
	MOVEM.L	D0-D7,COLOR00
	MOVEM.L	(A7)+,D0-D7/A0
	RTE

SCRL_HBL:
	MOVEM.L	D0/A0,-(A7)
	MOVE.B	$FFFFFA21.W,D0
.WAIT	CMP.B	$FFFFFA21.W,D0
	BEQ	.WAIT
	;BAR	$7
	LEA	BLANK,A0
	SETSCREEN2 A0
	MOVE.W	#0,HSCROLL
	MOVE.B	#0,TimerBControl
	BCLR	#0,$FFFFFA0F
	MOVEM.L	(A7)+,D0/A0
	RTE

	IFNE	KEYS
MAIN_LOOP:
	VSYNC
	
	IFNE	TIMING
	MOVE.W	#1000,D7
.LL	NOP
	NOP
	DBF	D7,.LL
	ENDC

	CMP.B	#$4D,$FFFFFC02.W
	BNE.S	.2
	BAR	$FFF
	BSR	DO_SCROLL_LEFT
	BAR	$000
	BRA.S	.3

.2	CMP.B	#$4B,$FFFFFC02.W
	BNE.S	.3	
	BAR	$FFF
	BSR	DO_SCROLL_RIGHT
	BAR	$000

.3	CMP.B	#$39,$FFFFFC02.W
	BNE.S	MAIN_LOOP
	RTS

	ELSE

SCROLLDIR	DS.W	1
MAIN_LOOP:
	CLR.W	SCROLLDIR	
MAIN_LOOP2:
	VSYNC	
	IFNE	TIMING
	MOVE.W	#1000,D7
.LL	NOP
	NOP
	DBF	D7,.LL
	ENDC
	
	TST.B	SCROLLDIR
	BNE.S	.RIGHT
.LEFT
	MOVE.L	FORMAP(A5),D0
	CMP.L	#FMAP+FMAPWIDTH,D0
	BLT.S	.1
	ST	SCROLLDIR	
	BRA.S	.DONE
.1	BSR	DO_SCROLL_LEFT
	BRA.S	.DONE	
.RIGHT
	MOVE.L	FORMAP(A5),D0
	SUB.L	#SCREENWIDTH,D0
	CMP.L	#FMAP,D0
	BHI.S	.2
	SF	SCROLLDIR
	BRA.S	.DONE
.2	BSR	DO_SCROLL_RIGHT

.DONE	CMP.B	#$39,$FFFFFC02.W
	BNE.S	MAIN_LOOP2
	RTS

	VSYNC
	
	IFNE	TIMING
	MOVE.W	#1000,D7
.LL	NOP
	NOP
	DBF	D7,.LL
	ENDC

	CMP.B	#$4D,$FFFFFC02.W
	BNE.S	.2
	BAR	$FFF
	BSR	DO_SCROLL_LEFT
	BAR	$000
	BRA.S	.3

.2	CMP.B	#$4B,$FFFFFC02.W
	BNE.S	.3	
	BAR	$FFF
	BSR	DO_SCROLL_RIGHT
	BAR	$000

.3	CMP.B	#$39,$FFFFFC02.W
	BNE	MAIN_LOOP
	RTS
	
	ENDC

;
; INIT BUFFER!
;
FILL_BUFFER:
	MOVE.W	#(((SCREENWIDTH+2)*NUMPLANES)*2/SCRSPEED)-1,D5
.LOOP	BSR	DO_SCROLL_LEFT
	DBF	D5,.LOOP
	RTS

;
; SET SCROLL VARS
;
INIT_SCROLL:
	MOVE.W	#0,MAPXPOS(A5)
	MOVE.L	#FMAP-2,FORMAP(A5)
	MOVE.W	#0,SCRVAL(A5)
	MOVE.W	#0,DISPCOL(A5)
	MOVE.W	#(WIDTH*NUMPLANES)-8,PRNTCOL(A5)
	MOVE.W	#-8,BACKCOL(A5)
	RTS

;
; LEFT SCROLL
;
DO_SCROLL_LEFT:
	ADDQ.W	#SCRSPEED,MAPXPOS(A5)
	MOVE.W	SCRVAL(A5),D0
	ADDQ.W	#SCRSPEED,D0
	CMP.W	#16,D0
	BLT	NO_NEWSTRIP
	MOVE.W	D0,SCRVAL(A5)
	AND.W	#$F,SCRVAL(A5)
	ADDQ.L	#2,FORMAP(A5)
LOAD_STRIP:
	LEA	SCREEN1,A0
	MOVE.W	PRNTCOL(A5),D0	
	ADDA.W	D0,A0		;a0=draw addr

	MOVE.L	FORMAP(A5),A2
	MOVE.L	#(WIDTH*NUMPLANES)-8,D6
	MOVE.W	#FDEPTH-1,D7
NEXT_BLOCK:
	LEA	DATA,A3
	MOVE.W	(A2),D0
	LEA	FMAPWIDTH(A2),A2
	AND.L	#$3FF,D0
	LSL.L	#7,D0		;*128
	LEA	(A3,D0.L),A3	;a3=block data
	
	rept	16
	MOVE.L	(A3)+,(A0)+
	MOVE.L	(A3)+,(A0)+
	LEA	(A0,D6.W),A0
	endr

	DBF	D7,NEXT_BLOCK			
UPDATE_POINTERS:
	ADD.W	#8,DISPCOL(A5)
	ADD.W	#8,PRNTCOL(A5)
	ADD.W	#8,BACKCOL(A5)
	BRA.S	SCROLL_EXIT
NO_NEWSTRIP:
	MOVE.W	D0,SCRVAL(A5)
SCROLL_EXIT:
	RTS

;
; RIGHT SCROLL
;
DO_SCROLL_RIGHT:
	SUBQ.W	#SCRSPEED,MAPXPOS(A5)
	MOVE.W	SCRVAL(A5),D0
	SUB.W	#SCRSPEED,D0
	BCC	NO_NEWSTRIP2
	AND.W	#$F,D0
	MOVE.W	D0,SCRVAL(A5)
	SUBQ.L	#2,FORMAP(A5)
	MOVE.L	FORMAP(A5),A2
;	SUB.L	#WIDTH-4,A2
	SUB.L	#SCREENWIDTH,A2
LOAD_STRIP2:
	LEA	SCREEN1,A0
	MOVE.W	BACKCOL(A5),D0	
	ADDA.W	D0,A0		;a0=draw addr

	MOVE.L	#(WIDTH*NUMPLANES)-8,D6
	MOVE.W	#FDEPTH-1,D7
NEXT_BLOCK2:
	LEA	DATA,A3
	MOVE.W	(A2),D0
	LEA	FMAPWIDTH(A2),A2
	AND.L	#$3FF,D0
	LSL.L	#7,D0		;*128
	LEA	(A3,D0.L),A3	;a3=block data
	
	rept	16
	MOVE.L	(A3)+,(A0)+
	MOVE.L	(A3)+,(A0)+
	LEA	(A0,D6.W),A0
	endr

	DBF	D7,NEXT_BLOCK2			
UPDATE_POINTERS2:
	SUB.W	#8,DISPCOL(A5)
	SUB.W	#8,PRNTCOL(A5)
	SUB.W	#8,BACKCOL(A5)
	BRA.S	SCROLL_EXIT2
NO_NEWSTRIP2:
	MOVE.W	D0,SCRVAL(A5)
SCROLL_EXIT2:
	RTS

	end	start


;
; END
;

