;
;
;èè		ôðððððððððððððððððððððððððððððððððððððððððððô		 èè
;èè             |   Source DSP de DES LASERS ET DES HOMMES  |		 èè
;èè		õðððððððððððððððððððððððððððððððððððððððððððõ		 èè
;èè									 èè
;èè									 èè
;
;




;constantes
gap		equ	48*2		;a partir de l…, chgt d'algo
bit_solx	equ	80
xmiclip		equ	45
xmaclip		equ	319-45
*xmiclip		equ	1
*xmaclip		equ	319

	org	p:$0000

	
	jmp	<begin
	org	p:$0040

begin
	ori	#3,mr

	movep	#$4,X:<<$ffe8		; Long implicite
	movep	#$0c00,X:<<$ffff
	movep	#$1,X:<<$ffe0
	movep	#$0,X:<<$fffe
	movec	#-1,m0

	andi	#2,mr

	;remplace $ECxxx par $EBxxx en P
	move	#>$40,r0
	move	#$FF000,x0	;pour and
	move	#$00FFF,x1	;pour and
	move	#$EB000,y0
	move	#$EC000,y1
	
	do	#end_prg-begin,correc_devpack
	nop	;pipeline clash
	movem	p:(r0),a
	and	x0,a
	cmp	y1,a
	jne	<continue_loop
	movem	p:(r0),a
	and	x1,a
	or	y0,a
	movem	a1,p:(r0)
continue_loop
	move	(r0)+
correc_devpack

	;lecture de l'indicateur de routine
main_loop		
	jsr	<in_a
	move	#$4d5552,x0		; 'MUR'
	cmp	x0,a
	jeq	<affiche_mur
	;end - rend le DSP disponible
	move	#$454e44,x0			;'END'
	cmp	x0,a
	jeq	<end_dsp
	move	#$534f4c,x0
	cmp	x0,a			; 'SOL'
	jeq	<affiche_sol
	;affiche sol
	;erreur
	jmp	<main_loop
end_dsp
	rti
affiche_sol
	;routine d'affichage du sol (LINE_HORIZ_PERFORM_2)
	; lecture des parametres d'entr‚e
	
	jsr	<in_a
	move	a1,x:xd1
	move	a1,x:xspd1
	jsr	<in_a
	move	a1,x:xa5
	move	a1,x:xspa5
	jsr	<in_a
	move	a1,y:ya6
	move	a1,y:yspa6
	jsr	<in_a
	move	a1,x:xymiclip
	jsr	<in_a
	move	a1,x:xymaclip
	jsr	<in_a
	move	a1,y:yjr4_0
	jsr	<in_a
	move	a1,x:xjr4_2
	jsr	<in_a
	move	a1,y:yjr4_4
	jsr	<in_a
	move	a1,x:xjr4_6
	jsr	<in_a
	move	a1,y:yjr4_8
	jsr	<in_a
	move	a1,x:xjr4_10
	jsr	<in_a
	move	a1,y:yjr4_12
	jsr	<in_a
	move	a1,y:yye
	jsr	<in_a
	move	a1,x:xxu
	jsr	<in_a
	move	a1,y:yyu
	jsr	<in_a
	move	a1,x:xxvv
	jsr	<in_a
	move	a1,y:yyvv
	jsr	<in_a
	move	a1,x:xxpe
	jsr	<in_a
	move	a1,x:xxqe
	jsr	<in_a
	move	a1,x:xa0
	jsr	<in_a
	move	a1,y:ydblvs
	jsr	<in_a
	move	a1,y:ydype
	jsr	<in_a
	move	a1,y:yepe
	jsr	<in_a
	move	a1,y:ys1pe
	jsr	<in_a
	move	a1,y:ys1qe
	jsr	<in_a
	move	a1,x:xdxpe
	jsr	<in_a
	move	a1,x:xdxqe
	jsr	<in_a
	move	a1,y:ydyqe
	jsr	<in_a
	move	a1,y:yeqe
	jsr	<in_a
	move	a1,x:xnu
	jsr	<in_a
	move	a1,x:xs1u
	jsr	<in_a
	move	a1,x:xau
	jsr	<in_a
	move	a1,x:xs2u
	jsr	<in_a
	move	a1,x:xcompu
	jsr	<in_a
	move	a1,y:ynv
	jsr	<in_a
	move	a1,y:ys1v
	jsr	<in_a
	move	a1,y:ycompv
	jsr	<in_a
	move	a1,y:yav
	jsr	<in_a
	move	a1,y:ys2v
	
	;Translation du code
	
		;move 	ye,d0
		;cmp	ymiclip_f,d0
		;blt	clip_1
		;cmp	ymaclipf,d0
		;bgt	clip_total
		;tst.B	dblvs
		;beq	dblvsendc
		;btst #0,d0
		;beq	clip1
		;dblvs:
s_loop_pass1		
	move	y:yye,a
	move	x:xymiclip,x0
	cmp	x0,a	x:xymaclip,x0
	jlt	<s_clip_1
	cmp	x0,a	y:ydblvs,b
	jgt	<s_clip_total
	tst	b
	jeq	<s_dblvs_endc
	btst	#0,a1
	jcc	<s_clip_1
s_dblvs_endc

		;lea (a0),a2
		;add jeureg4+6,a5
		;move xu,d0
		;move yu,d1
		;add d0,a6
		;add d1,a6
		
	move	x:xa0,a
	move	a1,x:xa2
	
	move	x:xa5,a
	move	x:xjr4_6,x0
	add	x0,a	x:xxu,x0		;x0=d0
	move	a1,x:xa5
	move	y:ya6,a
	add	x0,a	y:yyu,y1		;y1=d1
	add	y1,a	x:xxvv,b
	move	a1,y:ya6
	
		;d2=sign(xvv-d0) d3=abs(xvv-d0)
	
	sub	x0,b	#>1,x1			;x1=d2
	jpl	<s_vabsd0			;b=d3
	move	#-1,x1
s_vabsd0
	abs	b	#>bit_solx,y0 		;y0=d5
	jne	<s_kpart0			
	move	#<0,x1
s_kpart0
	move	y:yyvv,a			;a=d4
	
		;moveq	#bit_solx,d5
		;move	yvv,d4
		;sub	d1,d4
		;si<0 d5=-d5 d4=-d4; si d4=0 d5=0
	
	sub	y1,a	x1,y:yd2
	jpl	<s_vabsd1
	neg	a	#>-bit_solx,y0
s_vabsd1
	jne	<s_kpart1
	move	#<0,y0
s_kpart1
	
	move	b1,x:xd3
	clr	b	y0,y:yd5
	move	#>bit_solx,b
	
	; a1 divis‚ par bit_solx
	jsr	<divu
	;divu a1/b	
	;r1=quotient a1=reste
	move	r1,x:xd4
	
	move	x:xxpe,a
	move	x:xxqe,x0
	cmp	x0,a	#>xmaclip*2,x0
	jgt	<s_clip_total
	
		;clipping
	cmp	x0,a	#>xmiclip*2,x0
	jgt	<s_clip_1
	cmp	x0,a	x:xa2,b
	jgt	s_noclipgg
	
	add	a,b	#>xmiclip*2,x0	;b=a2
	move	x:xa0,a
	add	x0,a	b1,x:xa2	;a=a4
	move	a1,y:ya4
	;adresse a atteindre
	
	move	x:xd4,a		;a=d4
	move	x:xd3,b		;b=d3
	cmp	b,a
	jle	<s_interm0gd_sim
	tfr	a,b	b,a
	move	a1,x:xd4
	move	b1,x:xd3
	move	y:yd2,a
	move	y:yd5,b
	tfr	a,b	b,a
	move	a,y:yd2
	move	b,y:yd5

s_interm0gd_sim
	
	;loading registers
	move	x:xd4,a
	lsl	a	x:xd3,x0	;x0=d3
	move	x0,y:yd6	
	tfr	a,b	a1,x:xd4
	sub	x0,b	x:xxqe,a	;a=d7
	move	x:xxpe,y0
	sub	y0,a	b1,y:yd0
	asr	a	x0,b		;b=d3
	asr	a	a1,x:xa3
	move	a1,x:xd1
	jeq	<s_clip_1
	add	x0,b	x:xd4,x1
	move	b1,x:xd3
	move	y:yd0,b
	sub	x1,b	#<0,r0		;sub d4,d0
	
	;choix de la routine
	move	y:ya4,a
	move	x:xa2,x0
	sub	x0,a	#>gap,x0
	cmp	x0,a
	jle	<s_forgd0_sim		;sous le gap
	
	;mettre a jour : 	a6=a6+((a4/2-a2/2)*d3/2/a3)*d2
	;			     +((a4/2-a2/2)*d4/2/a3)*d5
	;			a2=a4

	move	y:ya4,a
	move	x:xa2,x0
	sub	x0,a
	asr	a	x:xd3,x1
	move	a1,x:xjr1_4
	move	a1,x0
	mpy	x0,x1,a
	move	a0,a1
	move	#<0,a0
	asr	a
	asr	a
	move	x:xa3,b
	jsr	<divu
	move	r1,x0
	move	y:yd2,x1
	mpy	x0,x1,a
	;sauvegarde
	move	a0,x:xjr1_0

	move	x:xjr1_4,a
	move	x:xd4,x1
	move	a1,x0
	mpy	x0,x1,a
	move	a0,a1
	move	#<0,a0
	asr	a
	asr	a
	move	x:xa3,b
	jsr	<divu
	move	r1,x0
	move	y:yd5,x1
	mpy	x0,x1,a
	move	a0,a1
	move	#<0,a0
	move	x:xjr1_0,x0
	add	x0,a
	asr	a
	move	y:ya6,b
	add	a,b	y:ya4,x0
	move	b1,y:ya6
	
	move	x0,x:xa2
	jmp	<s_after_sim
		
s_forgd0_sim
	;entr‚e pr‚requise : r0=0 (doit etre ajout‚ … a6)
	move	y:yd0,b
	
	move	#>2,x1	
	move	x:xa2,a
	add	x1,a		y:yd6,x0
	move	a,x:xa2
	move	x:xd3,y1
	move	b1,y0			;y0=d0
	move	x:xd1,b			;b=d1
	sub	x0,b		y:yd5,n0
	jmi	<s_not_endlgd0_sim
	move	b1,x:xd1
	jmp	<s_next_sim
s_not_endlgd0_sim
	tfr	y0,a	x:xd4,y0	;a=d0 y0=d4
s_whigd0_sim
	add	y0,a
	jmi	<s_endifgd0_sim
	sub	y1,a		(r0)+n0  ;add d5,a6
s_endifgd0_sim
	move	y:yd2,n0
	move	x:xa3,x1
	add 	x1,b	(r0)+n0	
	move	y:yd5,n0

	jmi	<s_whigd0_sim

	;sauve en m‚moire
	move	a1,y0		;comptabilit‚ avec saut direct
s_endlgd0_sim
	move	y0,y:yd0
	move	b1,x:xd1
	move	y:ya6,b
	;etend le signe de r0
	move	r0,a1
	btst	#15,a1
	jcc	<s_ext1
	move	#>$ff0000,x0
	or	x0,a
s_ext1	
	move	a1,x0
	add	x0,b	#<0,r0
	move	b1,y:ya6
s_next_sim
		;cmp.l a2,a4
		;bhi forgd0_sim
	tfr	y0,b	y:ya4,a	;compa saut
	move	x:xa2,x0
	cmp	x0,a
	jcc	<s_forgd0_sim
s_after_sim	
	move	x:xxqe,a
	move	#>xmaclip*2,x0
	cmp	x0,a	x:xa0,b
	jlt	<s_noclipdg_sim
	move	x0,a
s_noclipdg_sim
	add	a,b	#<0,r0
	move	b1,y:ya4
	;pr‚requis : b1=d0 r0=0
	move	y:yd0,b
	jmp	<s_forgd0_rout
	
	;©ª©ª©ª©ª©ª©ª©ª©ª©ª©ª©ª©ª©ª©ª©ª©ª©ª©ª©ª©ª©ª©ª©ª©ª©ª©ª©ª©ª©ª©ª©ª
				
s_noclipgg

	move	x:xa2,b
	move	x:xxpe,x0
	add	x0,b	x:xxqe,a
	move	#>xmaclip*2,x0
	move	b1,x:xa2
	cmp	x0,a	x:xa0,b
	jlt	<s_noclipdg
	move	x0,a
s_noclipdg
	add	a,b
	move	b1,y:ya4

	move	x:xd4,a		;a=d4
	move	x:xd3,b		;b=d3
	cmp	b,a
	jle	<s_interm0gd
	tfr	a,b	b,a
	move	a1,x:xd4
	move	b1,x:xd3
	move	y:yd2,a
	move	y:yd5,b
	tfr	a,b	b,a
	move	a,y:yd2
	move	b,y:yd5

s_interm0gd
	
	;loading registers
	move	x:xd4,a
	lsl	a	x:xd3,x0	;x0=d3
	move	x0,y:yd6	
	tfr	a,b	a1,x:xd4
	sub	x0,b	x:xxqe,a	;a=d7
	move	x:xxpe,y0
	sub	y0,a	b1,y:yd0
	lsr	a	x0,b		;b=d3
	lsr	a	a1,x:xa3
	move	a1,x:xd1
	jeq	<s_clip_1
	add	x0,b	x:xd4,x1
	move	b1,x:xd3
	move	y:yd0,b
	sub	x1,b	#<0,r0	;sub d4,d0
	
s_forgd0_rout

	;entr‚e pr‚requise : b1=d0 r0=0
	;regarde si a4<=a2
	move	y:ya4,x0
	move	x:xa2,a
	cmp	x0,a	
	jge	s_clip_1

	;envoi de a2,a4,a5
	jsr	<out_a1
	move	y:ya4,a
	jsr	<out_a1
	move	x:xa5,a
	jsr	<out_a1
	
s_forgd0

	;envoi de a6 
	jclr	#1,x:<<$ffe9,s_forgd0
	move	y:ya6,a
	move	a1,x:$ffeb

	move	#>2,x1	
	move	x:xa2,a
	add	x1,a		y:yd6,x0
	move	a,x:xa2
	move	x:xd3,y1
	move	b1,y0			;y0=d0
	move	x:xd1,b			;b=d1
	sub	x0,b		y:yd5,n0
	jmi	<s_not_endlgd0
	move	b1,x:xd1
	jmp	<s_next
s_not_endlgd0
	tfr	y0,a	x:xd4,y0	;a=d0 y0=d4
s_whigd0
	add	y0,a
	jmi	<s_endifgd0
	sub	y1,a	(r0)+n0  ;add d5,a6
s_endifgd0
	move	y:yd2,n0
	move	x:xa3,x1
	add 	x1,b	(r0)+n0	
	move	y:yd5,n0	
	jmi	<s_whigd0

	;sauve en m‚moire
	move	a1,y0		;comptabilit‚ avec saut direct
s_endlgd0
	move	y0,y:yd0
	move	b1,x:xd1
	move	y:ya6,b
	;etend le signe de r0
	move	r0,a1
	btst	#15,a1
	jcc	<s_ext2
	move	#>$ff0000,x0
	or	x0,a
s_ext2	
	move	a1,x0
	add	x0,b	#<0,r0
	move	b1,y:ya6
s_next	
		;cmp.l a2,a4
		;bhs forgd0
	tfr	y0,b	y:ya4,a	;compa saut
	move	x:xa2,x0
	cmp	x0,a
	jcc	<s_forgd0
	jmp	<s_clip_1_DSP
		
s_clip_1
	;retourne -1
	move	#-1,a1
	jsr	<out_a1
s_clip_1_DSP
	;ge
	
		;movem	jeureg4,d0-d4/d6-d7
		;add	d4,d3
		;tst	d6	
	move	y:yjr4_8,x0 	
	move	x:xjr4_6,b		;x0=d4 b=d3
	add	x0,b	x:xjr4_10,a	;a=d6
		
	tst	a	b1,x:xjr4_6	
		;bpl	aiye
		;cmp	d7,d3
		;bge	aiye
		;move	d7,d3
		;bra	wend21
	jpl	<s_aiye
	move	y:yjr4_12,y0		;update y0=d7
	cmp	y0,b
	jge	<s_aiye
	move	y0,x:xjr4_6		;update final
	jmp	<s_wend21_bis
s_aiye	
		;add	d1,d0	
		;bmi.s	.wend21
	move	y:yjr4_0,a		;a=d0	b=d3
	move	x:xjr4_2,y1		;y1=d1
	add	y1,a	x:xjr4_10,x1	;x1=d6
	jmi	<s_wend21
		;sub	d2,d0
		;add	d6,d3
		;movem	d0-d4/d6-7,jeureg4
	add	x1,b	y:yjr4_4,x0	;x0=d2
	sub	x0,a	
s_wend21
	move	b1,x:xjr4_6	; update
	move	a1,y:yjr4_0	; update
s_wend21_bis		

	;Chemin de PE et QE
	
	move	y:ydype,b
	tst	b	y:yepe,a
	jeq	<s_chemqe			;a=d1
	tst	a	b,x0	y:ys1pe,y0	;y0=d2 x0=d0
	jpl	<s_wend_epe
	move	x:xxpe,b			;b1=d3		
s_while_epe
	add	y0,b
	add	x0,a	b1,x:xxpe
	jmi	<s_while_epe
s_wend_epe
	move	x:xdxpe,x0
	sub	x0,a
	move	a,y:yepe	
s_chemqe

	move	y:ydyqe,b
	tst	b	y:yeqe,a
	jeq	<s_chemu			;a=d1
	tst	a	b,x0	y:ys1qe,y0	;y0=d2 x0=d0
	jpl	<s_wend_eqe
	move	x:xxqe,b			;b1=d3		
s_while_eqe
	add	y0,b
	add	x0,a	b1,x:xxqe
	jmi	<s_while_eqe
s_wend_eqe
	move	x:xdxqe,x0
	sub	x0,a
	move	a,y:yeqe	

s_chemu
	move	x:xnu,b
	tst	b	x:xs1u,a
	jeq	<s_chemv
	tst	a	x:xcompu,b	b,y1	;b=d2 y1=d0
	jeq	<s_v_u
	move	x:xau,x1			;x1=d3
	sub	x1,b	x:xxu,a	a,y0		;a=d4  y0=d1
	jpl	<s_out_u1
s_whilecompu11
	add	y0,a
	add	y1,b	a1,x:xxu
	jmi	<s_whilecompu11
	
s_out_u1
	move	b1,x:xcompu
	jmp	<s_chemv
	
s_v_u
	move	x:xs2u,y0			;b=d2 y1=d0
	move	x:xau,x1			;x1=d3
	sub	x1,b	y:yyu,a			;a=d4  y0=d1
	jpl	<s_out_u2
s_whilecompu22
	add	y0,a
	add	y1,b	a1,y:yyu
	jmi	<s_whilecompu22
s_out_u2
	move	b1,x:xcompu
	
s_chemv
	
	move	y:ynv,b
	tst	b	y:ys1v,a
	jeq	<s_endchem
	tst	a	b,x0	y:ycompv,b	;b=d2 x0=d0
	jeq	<s_v_v
	move	y:yav,x1			;x1=d3
	sub	x1,b	x:xxvv,a	a,y0		;a=d4  y0=d1
	jpl	<s_out_v1
s_whilecompv11
	add	y0,a
	add	x0,b	a1,x:xxvv
	jmi	<s_whilecompv11
	
s_out_v1
	move	b1,y:ycompv
	jmp	<s_endchem
	
s_v_v
	move	y:ys2v,y0			;b=d2 x0=d0
	move	y:yav,x1			;x1=d3
	sub	x1,b	y:yyvv,a			;a=d4  y0=d1
	jpl	<s_out_v2
s_whilecompv22
	add	y0,a
	add	x0,b	a1,y:yyvv
	jmi	<s_whilecompv22
s_out_v2
	move	b1,y:ycompv

s_endchem	;------------------------------------------------
	
	move	y:yspa6,a
	move	a1,y:ya6
	move	x:xspa5,a
	move	a1,x:xa5
	move	#>1,x1
	move	y:yye,a
	add	x1,a	x:xa0,b
	move	a1,y:yye
	move	#>640,x0
	add	x0,b	x:xspd1,y0
	cmp	y0,a	b1,x:xa0
	jle	<s_loop_pass1
	
	sub	x1,a
	sub	x0,b	a1,y:yye
	move	b1,x:xa0
	
	;retourne les paramŠtres modifi‚s au 68030
	jsr	<out_b12
	move	y:yjr4_0,a
	jsr	<out_a1
	move	x:xjr4_6,a
	jsr	<out_a1
	move	x:xxpe,a
	jsr	<out_a1
	move	y:yepe,a
	jsr	<out_a1
	move	x:xxqe,a
	jsr	<out_a1
	move	y:yeqe,a
	jsr	<out_a1
	move	x:xxu,a
	jsr	<out_a1
	move	y:yyu,a
	jsr	<out_a1
	move	x:xcompu,a
	jsr	<out_a1

	move	x:xxvv,a
	jsr	<out_a1
	move	y:yyvv,a
	jsr	<out_a1
	move	y:ycompv,a
	jsr	<out_a1
	
	jmp	<main_loop		


s_clip_total
	;retourne 0
	clr	a
	jsr	<out_a1		
	jmp	<main_loop		
			
	

;~-=-~-=-~-=-~-=-~-=-~-=-~-=-~-=-~-=-~-=-~-=-~-=-~-=-~-=-~-=-~-=-~-=-	
;-=-~-=-~-=-~-=-~-=-~-=-~-=-~-=-~-=-~-=-~-=-~-=-~-=-~-=-~-=-~-=-~-=-~	
;=-~-=-~-=-~-=-~-=-~-=-~-=-~-=-~-=-~-=-~-=-~-=-~-=-~-=-~-=-~-=-~-=-~-	
;-~-=-~-=-~-=-~-=-~-=-~-=-~-=-~-=-~-=-~-=-~-=-~-=-~-=-~-=-~-=-~-=-~-=	

affiche_mur
	;routine d'affichage du mur
	; lecture des parametres d'entree

	jsr	<in_a
	move	a1,x:xymiclip
	jsr	<in_a
	move	a1,x:xymaclip
	jsr	<in_a
	move	a1,x:xbase	
	jsr	<in_a
	move	a1,x:xyimg	
	jsr	<in_a
	move	a1,x:xxlarg	
	jsr	<in_a
	move	a1,y:ypimg36	
	jsr	<in_a
	move	a1,y:ypimg4	

	jsr	<in_a
	move	a1,y:yjr4_0	
	jsr	<in_a
	move	a1,x:xjr4_2	
	jsr	<in_a
	move	a1,y:yjr4_4	
	jsr	<in_a
	move	a1,x:xjr4_6	
	jsr	<in_a
	move	a1,y:yjr4_8	
	jsr	<in_a
	move	a1,x:xjr4_10	
	jsr	<in_a
	move	a1,y:yjr4_12	

	jsr	in_a
	move	a1,y:yxcol	

	jsr	in_a
	;addq #1,d5
	move	#>1,x0
	add	x0,a
	;jmi avant
	jmi	<fin_aff
	jeq	<fin_aff
		
	move	a1,x:xd5

	jsr	<in_a
	move	a1,x:xjr1_0	
	jsr	<in_a
	move	a1,y:yjr1_2	
	jsr	<in_a
	move	a1,x:xjr1_4	
	jsr	<in_a
	move	a1,y:yjr1_6	
	jsr	<in_a
	move	a1,x:xjr1_8	
	jsr	<in_a
	move	a1,y:yjr1_10	
	jsr	<in_a
	move	a1,x:xjr1_12

	jsr	<in_a
	move	a1,x:xjr2_0	
	jsr	<in_a
	move	a1,y:yjr2_2	
	jsr	<in_a
	move	a1,x:xjr2_4	
	jsr	<in_a
	move	a1,y:yjr2_6	
	jsr	<in_a
	move	a1,x:xjr2_8	
	jsr	<in_a
	move	a1,y:yjr2_10	

	jsr	<in_a
	tst	a
	jmi	<fin_aff		;ABORT
	
	move	a1,y:yjr3_0	
	jsr	<in_a
	move	a1,x:xjr3_2	
	jsr	<in_a
	move	a1,y:yjr3_4	
	jsr	<in_a
	move	a1,x:xjr3_6	
	jsr	<in_a
	move	a1,y:yjr3_8	


	;translation de code
;fori
	move	x:xd5,x0
	do	x0,fin_aff
		
		;movem	jeureg1,d0-d4/d6-d7
	
		;add	d7,xcol
		;move	d3,topcol
	
	
	move	x:xjr1_12,x0
	move	y:yxcol,a
	add	x0,a	x:xjr1_8,x0 	
	move	y:yjr1_6,b	;x0=d4 b=d3
	move	a1,y:yxcol
	move	b1,y:ytopcol
		;add	d4,d3
		;add	d1,d0
		;bmi.s	.wend211
	add	x0,b	x:xjr1_0,a 	
	move	y:yjr1_2,y1		;a=d0 y1=d1
	move	y:yjr1_10,x1			;x1=d6
	add	y1,a	 b1,y:yjr1_6		;d‚j… un update (d3)
	jmi	<wend211
	;sub	d2,d0
		;add	d6,d3
		;movem	d0-d4/d6-d7,jeureg1
	add	x1,b	x:xjr1_4,x0	;x0=d2
	sub	x0,a	b1,y:yjr1_6	;update de d3	(valable)
wend211
	move	a1,x:xjr1_0	;dernier update

		;movem	jeureg2,d0-d4/d6
	
		;move	d3,botcol
	
	move	x:xjr2_8,x0 	
	move	y:yjr2_6,b		;x0=d4 b=d3
	move	b1,x:xbotcol
		;add	d4,d3
		;add	d1,d0
		;bmi.s	.wend211
	add	x0,b	x:xjr2_0,a 	
	move	y:yjr2_2,y1		;a=d0 y1=d1
	move	y:yjr2_10,x1			;x1=d6
	add	y1,a	 	b1,y:yjr2_6	;d‚j… un update (d3)
	jmi	<wend211_2
		;sub	d2,d0
		;add	d6,d3
		;movem	d0-d4/d6,jeureg2
	add	x1,b	x:xjr2_4,x0	;x0=d2
	sub	x0,a	b1,y:yjr2_6	;update de d3	(valable)
wend211_2
	move	a1,x:xjr2_0	;dernier update
	
	;Ligne Haut/Bas motif
		;movem jeureg3,d0-d4
		;add d4,d3
		;add d1,d0
		;bmi.s .wend2
		;sub d2,d0
		;addq #1,d3
	
	move	y:yjr3_8,x0 	
	move	x:xjr3_6,b		;x0=d4 b=d3
	add	x0,b	x:xjr3_2,y1	
	move	y:yjr3_0,a 	;a=d0 y1=d1
	add	y1,a	b1,x:xjr3_6	
	move	y:yjr3_4,x0	;x0=d2, d‚j… un update (d3)
	jmi	<wend2
	move	#>1,y0
	add	y0,b
	sub	x0,a	b1,x:xjr3_6	;update de d3	(valable)
wend2
	move	a1,y:yjr3_0	;dernier update
	
	;Eclairage
	
		;movem	jeureg4,d0-d4/d6-d7
		;add	d4,d3
		;tst	d6	
	move	y:yjr4_8,x0 	
	move	x:xjr4_6,b		;x0=d4 b=d3
	add	x0,b	x:xjr4_10,a	;a=d6
	tst	a	b1,x:xjr4_6	
		;bpl	aiye
		;cmp	d7,d3
		;bge	aiye
		;move	d7,d3
		;bra	wend21
	jpl	<aiye
	move	y:yjr4_12,y0		;update y0=d7
	cmp	y0,b
	jge	<aiye
	move	y0,x:xjr4_6		;update final
	jmp	<wend21_bis
aiye	
		;add	d1,d0	
		;bmi.s	.wend21
	move	x:xjr4_6,b
	move	y:yjr4_0,a		;a=d0	b=d3
	move	x:xjr4_2,y1		;y1=d1
	add	y1,a	x:xjr4_10,x1	;x1=d6
	jmi	<wend21
		;sub	d2,d0
		;add	d6,d3
		;movem	d0-d4/d7,jeureg4
	add	x1,b	y:yjr4_4,x0	;x0=d2
	sub	x0,a	
wend21
	move	b1,x:xjr4_6	; update
	move	a1,y:yjr4_0	; update
wend21_bis		
	
	;------------------------------ PLOT XCOL,TOPCOL > BOTCOL
	;Envoi de : 	
	;		BASE+XCOL=adresse ecran
	;		PIMG36+JR3_6=adresse palette
	;		nbre de ligne ou -1 pour skip
	; 			PIMG4+ptr courant (adr motif)
	; 
	move	y:yxcol,a
	move	x:xbase,b
	addl	b,a	y:ytopcol,y0
	move	#>320,y1					
	mpy	y1,y0,b	x:xjr3_6,x1	
	move	y:ytopcol,y0
	move	b0,y1
	add	y1,a	y:ypimg36,b
	add	x1,b	a1,x:xa0
	tfr	b,a
	move	a1,y:ya1
	
	;envoi de la palette
	move	y:ypimg4,a
	move	x:xjr4_6,x0
	add	x0,a
	jsr	<out_a1

	move	x:xbotcol,b
	clr	a
	sub	y0,b	x:xyimg,a	;sub topcol,botcol
	
	move	b1,x:xd4	; sauvegarde d4
	
	jsr	<divu
	;divu a1/b	
	;r1=quotient a1=reste
	move	x:xxlarg,b
	lsr	b	r1,x0
	move	b1,y0
	mpy	x0,y0,b
	move	b0,y:yd6	
	move	#>1,y0	;sauve d6
		;subq	#1,d1
		;move	d4,d2
		;add	d2,d2
		;move	d1,d0
		;add	d1,d1
	sub	y0,a
	move	a1,b
	lsl	b	x:xd4,a		
	move	b1,y:yd0
	move	b1,x:xd1
	lsl	a
	move	a1,y:yd2
		;*****************
		;move	xcol,d3
		;cmp	#xmiclip,d3
		;blt	fin_ligne
		;cmp	#xmaclip,d3
		;bgt	fin_ligne

	move	y:yxcol,a
	move	#>xmiclip,x0
	cmp	x0,a	#>xmaclip,x0
	jlt	<fin_ligne_out
	cmp	x0,a	x:xymaclip,x0
	jgt	<fin_ligne_out

		;cmp	#ymaclip,botcol
		;blt.s	clipok
		;move	#ymaclip,d4
		;sub	topcol,d4
		;cmp	#ymaclip,topcol
		;bgt	fin_ligne
		;clipok

	move	x:xbotcol,a
	cmp	x0,a	x0,b
	jlt	<clipok

	move	y:ytopcol,y0
	sub	y0,b
	move	b1,x:xd4
	
	move	y:ytopcol,b
	cmp	x0,b
	jgt	<fin_ligne_out
	
clipok
		;cmp	#ymiclip,topcol
		;bgt.s	no_clip
		;cmp	#ymiclip,botcol
		;blt	fin_ligne
		;mange en haut		
	
	move	y:ytopcol,a
	move	x:xymiclip,x0
	cmp	x0,a	x:xbotcol,b
	jgt	<no_clip
	cmp	x0,b	
	jlt	<fin_ligne_out
	
		;move	#ymiclip,d3
		;sub	topcol,d3
		;sub 	d3,d4
		;move	d3,d7	*d7 pour un dbf
		;ext.l	d3
		;mulu	#640,d3
		;add.l	d3,a0
	
	move	x:xymiclip,b		;b=d3
	sub	a,b	x:xd4,a
	sub	b,a	b,y0
	move	a1,x:xd4
	clr	a	#>320,x0
	move	x:xa0,a0
	mac	x0,y0,a		#>1,x1	
	add	x1,b		a0,x:xa0
	jeq	<no_clip
	jmi	<no_clip
	do 	b1,no_clip
	
		;mise … jour du pointeur de motif 
		;move.l	xlarg-2,a3
		;perfsim
		;add.l	d6,a1
		;add	d1,d0
		;bmi	wend3sim
		;sub	d2,d0
		;add.l	a3,a1
		;wend3sim
		;dbf	d7,perfsim
	
	move	y:ya1,b
	move	y:yd6,x0			;x0=d6 b=a1
	add	x0,b	x:xd1,x1	
	move	y:yd0,a				;x1=d1 a=d0
	add	x1,a	
	jmi	<wend3sim
	move	y:yd2,y0		;y0=d2
	sub	y0,a	x:xxlarg,y1	;y1=a3
	add	y1,b	
wend3sim
	move	a1,y:yd0
	move	b1,y:ya1
no_clip
	; si d4<=0 pas de transmission
	
	move	x:xd4,a

	;transmet a0
	move	x:xa0,b1
	jsr	<out_b12

	;transmet d4
	jsr	<out_a1
		;lea	640.w,a2				
		;move.l	x_larg-2,a3
		;move.l	p_image,a4
		;move.l	4(a4)a4
		;add	jeureg4+6,a4
		;moveq	#0,d7
		;*pas de deroulement
		;perf
		;"move.b	(a1),d7
		;add.l	d6,a1
		;"move.w/.l (a4,d7*4),(a0)
		;"add.l	a2,a0
		;add	d1,d0
		;bmi	wend3
		;sub	d2,d0
		;add.l 	a3,a1
		;wend3
		;dbf	d4,perf

	move	#>1,x0
	add	x0,a
	jeq	<next_fl	;s‚curit‚
	jmi	<next_fl	
	
	move	a1,r0

	move	y:ya1,b		;b=a1		pas de sauvegarde
	move	y:yd6,x0	;x0=d6
	move	x:xd1,x1
	move	y:yd0,a
	move	y:yd2,y0
	move	x:xxlarg,y1
	
	do	r0,fin_ligne
	
out_b1	jclr	#1,x:<<$ffe9,out_b1
	move	b1,x:$ffeb
	
	add	x0,b	;x1=d1 a=d0
	add	x1,a	;y0=d2
	jmi	<wend3
	sub	y0,a	;y1=xlarg
	add	y1,b
wend3	nop	
fin_ligne
		;dbf	d5,fori

	jmp	<next_fl
fin_ligne_out
	; transmet l'adresse ecran (dummy)
	move	x:xa0,a
	jsr	<out_a1
	;transmet -1
	move	#-1,a
	jsr	<out_a1
next_fl	nop
fin_aff	
	jmp	<main_loop		

in_a
	movep	#1,x:$ffe0
	jclr	#0,x:<<$ffe9,in_a
	move	x:$ffeb,a
	rts

out_a1
	jclr	#1,x:<<$ffe9,out_a1
	move	a1,x:$ffeb
	rts
out_b12
	jclr	#1,x:<<$ffe9,out_b12
	move	b1,x:$ffeb
	rts
divu
	;divu a1/b	
	;r1=quotient a1=reste
	tst	b
	jne	<nodiv0
	move	a1,r1
	clr	a
	rts
nodiv0	
	move	#0,r0
	cmp	a,b	#0,r1
	jgt	<div_endloop
	
div_loop
	lsl	b	(r0)+
	jcs	<div_sort
	cmp	a,b
	jle	<div_loop
div_sort
	do	r0,div_endloop
	lsr	b	a,r2
	cmp	a,b	r1,a
	jle	<div_ma1
	lsl	a
	move	a,r1
	move	r2,a
	jmp	<div_suite
div_ma1	
	lsl	a	#>1,x0
	or	x0,a
	move	a,r1
	move	r2,a
	sub	b,a
div_suite
	nop
div_endloop
	;r1=quotient a1=reste
	rts
end_prg	
	; Variables X
	
	org X:0000


xbase		ds	1
xyimg		ds	1
xxlarg		ds	1
xjr1_0		ds	1
xjr1_4		ds	1
xjr1_8		ds	1
xjr1_12		ds	1
xjr2_0		ds	1
xjr2_4		ds	1
xjr2_8		ds	1
xjr3_2		ds	1
xjr3_6		ds	1
xjr4_2		ds	1
xjr4_6		ds	1
xjr4_10		ds	1
xbotcol		ds	1
xd3		ds	1
xd4		ds	1
xd1		ds	1
xspd1		ds	1
xa0		ds	1
xa2		ds	1
xa3		ds	1
xa5		ds	1
xspa5		ds	1
xd5		ds	1
xymiclip	ds	1
xymaclip	ds	1
xxu		ds	1
xxvv		ds	1
xxpe		ds	1
xxqe		ds	1
xdxpe		ds	1
xdxqe		ds	1
xnu		ds	1
xs1u		ds	1
xau		ds	1
xs2u		ds	1
xcompu		ds	1

	; variables Y
	
	org Y:0000
	

ypimg36		ds	1
ypimg4		ds	1
yxcol		ds	1
yjr1_2		ds	1
yjr1_6		ds	1
yjr1_10		ds	1
yjr2_2		ds	1
yjr2_6		ds	1
yjr2_10		ds	1
yjr3_0		ds	1
yjr3_4		ds	1
yjr3_8		ds	1
yjr4_0		ds	1
yjr4_4		ds	1
yjr4_8		ds	1
yjr4_12		ds	1
ytopcol		ds	1
yd0		ds	1
yd2		ds	1
yd5		ds	1
yd6		ds	1
ya1		ds	1
ya4		ds	1
ya6		ds	1
yspa6		ds	1
yyv		ds	1
yyu		ds	1
yye		ds	1
ydblvs		ds	1
ydype		ds	1
yepe		ds	1
ys1pe		ds	1
ys1qe		ds	1
ydyqe		ds	1
yeqe		ds	1
ynv		ds	1
ys1v		ds	1
ycompv		ds	1
yav		ds	1
ys2v		ds	1
yyvv		ds	1
	end	 