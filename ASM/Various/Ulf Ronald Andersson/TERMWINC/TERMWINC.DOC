; ----------------------------------------------------------------------------
; File name:	TermWinC.Doc		Revision date:	1993.05.09
; Created by:	Ulf Ronald Andersson	Creation date:	1993.04.02
; ----------------------------------------------------------------------------
; Version:	0.3 (Beta)
; ----------------------------------------------------------------------------
; File purpose:	Documentation for the function library "TermWinC",
;		that implements terminal handling for GEM windows.
;
; ----------------------------------------------------------------------------
; Copyright:	(c)1993 by Ulf Ronald Andersson.  All rights reserved.
;
;	Released as SHAREWARE, on the following terms:
;
;	Rights are granted to all for any profitfree distribution (ONLY).
;	This includes uploading to _profit_free_ BBS systems.
;
;	Rights are conditionally granted for PD diskette distribution,
;	provided that total charge per diskette does not exceed the value
;	of three empty diskettes of similar quality.
;	A second condition is that such PD disks be clearly distinguished
;	as SHAREWARE (as opposed to FREEWARE) in all advertisements.
;
;	Any commercial distribution of TermWinC requires my consent.
;
;	Users that register are granted the right to distribute programs
;	that utilize the code of the TermWinc library to their end users.
;
;	Unregistered users are granted the right to create and to use programs
;	that utilize TermWinC similarily, but not to distribute them.
;
; ----------------------------------------------------------------------------
; Registration info:
;
;	Minimum registration consists of sending me either of:
;
;	 5 British Pounds  \ / Since these currencies
;	10 US Dollars	    X  vary in value, you may
;	50 Swedish Crowns  / \ choose the cheapest.
;
;	Any sums exceeding these amounts will be appreciated (and surprising?).
;
;	The minimum registration fee buys you the distribution rights to any
;	programs you write that use the TermWinC library, and NOTHING else.
;
;	I will of course examine and (when needed) correct reported problems,
;	but that is the limit of my obligation to minimum fee users!
;
;	My address, for registration (or other correspondence) is:
;
;		Ulf Ronald Andersson
;		H”ders V„g 7
;		S-145 70 Norsborg
;		Sweden
;
;	If you have problems with the swedish vowels in my street address,
;	you can use either of the spellings shown below:
;
;		Hoders Vag 7		(Closest optically)
;	or
;		Hoeders Vaeg 7		(Closest sound)
;
;	Both variants will be recognized, although they are incorrect.
;
; ----------------------------------------------------------------------------
; Comments:
;
;	This version is intended as a support library for C compilers,
;	but may equally well be used with assembler language (eg: DEVPAC).
;	The only special requirement is a DRI compatible linker.
;
;	I have also, separately, released TermWind, which implements
;	all the features of TermWinC in a GFA_BASIC-compatible form.
;
;	GFA BASIC reverses argument order in stack RAM, unlike normal
;	Atari programming which uses C conventions.
;	GFA BASIC also ignores correcting the stack after functions,
;	although it does correct the stack after procedures.
;	(The latter inconsistency was never documented by GFA !!!)
;
;	TermWinC is adapted to the standard usages of C compilers,
;	and is thus not suitable for linking with GFA_BASIC programs.
;
; ----------------------------------------------------------------------------
; Package Manifest:
;
;		This package consists of 2 files:
;
;	One documentation file:
;
;	TERMWINC.DOC	This documentation file
;
;	One DRI object file:
;
;	TERMWINC.O	Holds all code of this function library
;
; ----------------------------------------------------------------------------
; The library defines the following functions and procedures:
;
; NB: There is a "quick reference list" of these at the end of this file
; NB: The arguments are here shown as used in calls from a PURE_C program.
;
;
; tw_init(tw_lim&,wshandle&,glob_p%)	Func& < 0 if error
;
;	This function must be called before any others of the library !!!
;	It requires some free system RAM, and will otherwise return negative.
;	You must thus always use th option $m with TermWind.
;	Do _not_ use RESERVE, since that is legal only in interpreter.
;
;	"tw_lim&" limits the number of available terminals, and thus the size
;	of the RAM block reserved by "tw_init".
;	Terminal 0, however, is reserved for window 0 (desktop), so use
;	a value one unit greater than you your number of terminal windows.
;
;	"wshandle&" is the workstation handle of the application, as given
;	by its "v_opnvwk" call.  In GFA BASIC, simply use "V~H" .
;
;	"glob_p%" is the address of the programs "global" AES array.
;	In GFA BASIC, simply use "LPEEK(GB+4)"
;
;	Thus for 4 terminal windows in GFA BASIC use:
;		tw_init(5,V~H,LPEEK(GB+4))
;
;
; tw_exit				Proc: terminate all terminals
;
;	This procedure closes all terminals AND the terminal handler itself,
;	so then none of the routines below can be used without new "tw_init"
;
;	It must be called before exiting a program that used "tw_init" .
;
;
; tw_cell(font%,satt&)			Func% = text cell width & height
;
;	This function returns a long integer holding two words, calculated
;	on the basis of the given font number and special attribute flag.
;	The upper word is the resulting pixel width of a text cell, while
;	the lower word is the resulting pixel height of a text cell.
;	If either of "font%" or "satt&" is given as -1, the calculation
;	will be based on the default values (font depends on mono/color).
;	This is useful to precalculate needed screen & terminal sizes.
;
;
; win_create(gad&,tit_p%,inf_p%,x&,y&,w&,h&)	Func& = GEM window handle
;
;	This is used to create, and open, windows using _inner_ coordinates.
;	"gad&" holds all gadget bits for WIND_CREATE, while tit_p% and
;	"inf_p%" are pointers to title and info strings for ~WIND_OPEN.
;	Those strings MUST be in stable memory, not in GFA string area.
;	Any of "win_create's" parameters may be -1 to use default values.
;	Failed attempt returns a negative error code in the range -8..-1 .
;	Code -8 means GEM failed to add a window, so don't retry then.
;
;
; tw_open(windhand&,gad&,cols&,rows&)	Func& = tw_handle, < 0 if error
;
;	This creates a terminal interface for the window "windhand&".
;	"gad&" flags scroll bar usage, normally same as in "win_create".
;	Use zero here, if you wish to manage scroll bars yourself, but
;	never flag bar usage here, if the window does not have any bars.
;	"cols&" is the number of terminal columns. \/ Large values will
;	"rows&" is the number of terminal rows.    /\ need scroll bars.
;
;	_Never_ destroy a terminal window (at program exit etc.),
;	without first closing the terminal ("tw_close" or "tw_exit").
;
;
; tw_update(mesag_p%)			Proc: Handles AES messages
;
;	Use this in your event message handler, to perform all normal tasks
;	for the windows with terminal interfaces. (See example programs)
;
;
; gem2tw_(windhand&)			Func& = tw_handle, < 0 if error
;
;	This translates the handle of any GEM window to the corresponding
;	terminal handle, or to -1 if the window has no terminal interface.
;
;
; NB: The following "tw_" routines all use "tw_" handles in argument
; NB: Legal "tw_" handles (like GEM handles) are all positive 16-bit words
;
;
; tw_2gem(tw_hand&)			Func& = GEM handle, < 0 if error
;
;	This translates the terminal handle of any terminal window to the
;	corresponding GEM window handle, or to -1 if still unassigned.
;
;
; tw_lock(tw_hand&,lock&)		Func& = terminal screen lock mode
;
;	This function will not set any changes given as negative,
;	but will always return the old value valid before the call.
;	This function returns negative, if "tw_hand&" is not valid.
;
;	Thus you can either simply read an old value with eg:
;		old_lock&=tw_lock(thd&,-1)
;	or simultaneously read an old and set a new value with eg:
;		old_lock&=tw_lock(thd&,new_lock&)
;	The latter may cause screen updates, if done in "locked" mode.
;
;	Proper use of "tw_lock" will speed up programs significantly !!!
;
;	"lock&" = 0 is the startup value of each terminal, and means
;	that each text update is sent to VDI as separate characters.
;	This mode is default only because it is the simplest to use,
;	but it wastes time repeating attribute settings etc. that are
;	common to most characters of each line.
;
;	"lock&" = 1 (any non_zero) means that each text update merely
;	updates the buffers of TermWind, with VDI updates deferred.
;	Thus, the screen appears "locked" in this state.
;
;	The needed data is sent to VDI, when either of three things happen:
;
;	1: A new "tw_lock" call is made, with "lock&"=0  (Unlocking)
;	2: A new "tw_lock" call is made, with "lock&">0  (Relocking)
;	3: The rectangle buffer of that terminal becomes full
;
;	Then any non_zero rectangles in the terminals buffer are sent to VDI,
;	after which the buffer is cleared (ready for new data).
;
;	Each terminal's rectangle buffer has room for 32 text rectangles,
;	but each new rectangle is, when possible, merged with any old ones.
;	Thus only 2 rectangles will be used, if data is output to contiguous
;	positions (normal terminal handling), even if entire screen is used.
;
;	In such a case, only 2 separate updates will be made, when the user
;	"unlocks" or "relocks" the terminal, instead of the thousands of
;	updates that would have been required in "unlocked" mode !!!
;	
; NB:	The "tw_lock" system acts on individual terminals, which also means
;	that each terminal interface has a separate rectangle buffer.
;	Thus, "locked" and "unlocked" terminals can be freely mixed.
;
;
; tw_close(tw_hand&)			Func& = GEM handle, < 0 if error
;	This closes a terminal interface, but not the associated window,
;	which will no longer be managed by "tw_update" after this call.
;	The terminal handle becomes invalid until reassigned by "tw_open".
;	The value returned is negative if tw_hand& is not valid terminal,
;	but is otherwise the (unclosed) window handle of the closed terminal.
;
;
; tw_prot(tw_hand&,prot&)		Func: set/get terminal PROTocol type
; tw_font(tw_hand&,font%)		Func: set/get FONT number/pointer
; tw_satt(tw_hand&,satt&)		Func: set/get Special ATTributes
; tw_inv(tw_hand&,inv&)			Func: set/get INVerse mode flag
; tw_colr(tw_hand&,colr&)		Func: set/get terminal COLouRs
; tw_cdif(tw_hand&,cdif&)		Func: set/get forced Colour DIFference
;
;	The 6 functions above will not set any changes given as negative,
;	but will always return the old value valid before the call.
;	These functions return negative, if "tw_hand&" is not valid.
;
;	Thus you can either simply read an old value with eg:
;		old_satt&=tw_satt(thd&,-1)
;	or simultaneously read an old and set a new value with eg:
;		old_satt&=tw_satt(thd&,new_satt&)
;
;	"tw_inv"  will return as 0 or 1, but any number >0 is taken as 1,
;	"colr&" = terminal colours coded as: foreground*16+background.
;	Non-zero "cdif&" guarantees foreground visibility.
;		This is _vital_ when running in mono/medium resolution,
;		with host systems that assume full colour capability.
;	Other values must satisfy the specification of parameters further on.
;
;
; tw_setw(tw_hand&,x&,y&,w&,h&)		Proc: SET Window x,y,w,h
; tw_fixo(tw_hand&,x&,y&,w&,h&)		Proc: reFIX "Origin" x,y,w,h
; tw_seto(tw_hand&)			Proc: SET window to "Origin" x,y,w,h
;
; 	Here "origin" means the original "x,y,w,h" values used in "tw_open",
;	"tw_fixo" alters those values without a new "tw_open".
;	"tw_seto" simply reactivates the "origin" values.
;	"tw_setw" should be used instead of "~WIND_SET" to ensure that TermWind
;		responds correctly to all window changes.
;
;
; tw_cout(tw_hand&,data&)		Proc: Character OUTput
; tw_pout(tw_hand&,V:data$)		Proc: Pointed string OUTput
;
; NB:	data$ above must be terminated with an ascii NUL (code 0)
;
; tw_sout(tw_hand&,data$)		Proc: String OUTput
;
; NB:	simpler to use than "tw_pout", but a wee bit slower
;
;
; tw_del(tw_hand&,cnt&)			Proc: DELete cnt& chars at cursor
; tw_ins(tw_hand&,cnt&)			Proc: INSert cnt& chars at cursor
;
;
; tw_at(tw_hand&,column&,row&)		Proc: set cursor AT column of row
; tw_rowx(tw_hand&)			Func: get cursor ROW indeX
; tw_colx(tw_hand&)			Func: get cursor COLumn indeX
;
;
; ----------------------------------------------------------------------------
; Terminal windows have individually selected terminal protocols.
;
; This version (0.3 BETA), only has 4 terminal protocols available.
;
; 0 = standard ASCII
;	All characters are reduced to 7-bit codes.
;	Control characters BL, BS, HT, LF & CR are valid.
;	All other control characters (incl. ESC) are invisible chars.
;
; 1 = Atari extended ASCII
;	All characters retain their 8-bit codes.
;	Control characters BL, BS, HT, LF & CR are valid.
;	All other control characters (incl. ESC) are invisible chars.
;
; 2 = standard VT_52
;	All characters are reduced to 7-bit codes.
;	Control characters BL, BS, HT, LF, VT, FF & CR are valid.
;	Control characters VT & FF behave like LF.
;	All other control characters (Except ESC) are invisible chars.
;	Escape sequences are valid according to VT_52 standards.
;	Invalid characters after ESC are treated as visible chars.
;
; 3 = Atari extended VT_52		NB: Default mode for terminal windows
;	All characters retain their 8-bit codes.
;	Control characters BL, BS, HT, LF, VT, FF & CR are valid.
;	Control characters VT & FF behave like LF.
;	All other control characters (Except ESC) are invisible chars.
;	Escape sequences are valid according to VT_52 standards.
;	Invalid characters after ESC are treated as visible chars.
;
; NB:	This will be extended in the future, to include several protocols.
;	Programmers should be prepared to use protocols 0..7,
;	although protocols 4..7 presently act like protocol 3.
;
;
; ----------------------------------------------------------------------------
; Terminal windows can use the following font numbers:
;
;	0 = 6*6		system font
;	1 = 8*8		system font (default in color resolutions)
;	2 = 8*16	system font (default in monochrome resolution)
;	3 = 8*32	system font
;
; Text cell sizes are increased when using special attribute "Outlined" .
; Both font selection and text cell size are set locally per window, but are
; also global within that window, which is thus redrawn when either is changed.
;
; This means that different simultaneous fonts are possible,
; but only if used in separate terminal windows.
;
;
; NB:	This will in future be extended to include GDOS fonts.
;	Thus all programming should accept, and preserve 32 bit font numbers.
;	Obviously, there will then be no specific relation between the font's
;	number and its text cell sizes, so use "tw_cell(font%,attr&) for that.
;
;
; ----------------------------------------------------------------------------
; Terminal windows can use the following special attributes:
;
;	 0 = Normal	NB: default
;	 1 = Bold
;	 2 = Ghost
;	 4 = Italic
;	 8 = Underscore
;	16 = Outlined
;	32 = Shadowed
;
; Any of these may be summed for use in the call "tw_satt(tw_hand&,satt&)",
; and will then control how the characters of one terminal will be shown.
; Simultaneous terminals are not dependent on using similar attributes.
;
;
; NB: VT-52 and all similar protocols are defined as having each character
;	displayed in a cursor adressable, fixed size, screen rectangle.
;
;	Thus using "Outlined" text mixed with text lacking that attribute
;	will look very strange on screen, because of size incompatibility.
;	For consistent results "Outline" mode should not be used, unless
;	it is used for _all_ text within a window (including blanks!!!) .
;	The same reasoning applies to "Shadowed" text.
;
;	Also, "Italic" means that each character leans into the text cell of
;	the one following, and may thus be "cut" as that cell is updated.
;	The "cut" portion will be restored when/if the screen is redrawn.
;
;
; ----------------------------------------------------------------------------
; Quick reference list of functions and procedures:
;
; tw_init(tw_lim&,wshandle&,glob_p%)	Func& < 0 if error
; tw_exit				Proc: terminate all terminals
; tw_cell(font%,satt&)			Func% = text cell width & height
; win_create(gad&,tit_p%,inf_p%,x&,y&,w&,h&)	Func& = GEM window handle
; tw_open(windhand&,gad&,cols&,rows&)	Func& = tw_handle, < 0 if error
; tw_update(mesag_p%)			Proc: Handles AES messages
; gem2tw_(windhand&)			Func& = tw_handle, < 0 if error
; tw_2gem(tw_hand&)			Func& = GEM handle, < 0 if error
; tw_lock(tw_hand&,lock&)		Func& = terminal screen lock mode
; tw_close(tw_hand&)			Func& = GEM handle, < 0 if error
; tw_prot(tw_hand&,prot&)		Func: set/get terminal PROTocol type
; tw_font(tw_hand&,font%)		Func: set/get FONT number/pointer
; tw_satt(tw_hand&,satt&)		Func: set/get Special ATTributes
; tw_inv(tw_hand&,inv&)			Func: set/get INVerse mode flag
; tw_colr(tw_hand&,colr&)		Func: set/get terminal COLouRs
; tw_cdif(tw_hand&,cdif&)		Func: set/get forced Colour DIFference
; tw_setw(tw_hand&,x&,y&,w&,h&)		Proc: SET Window x,y,w,h
; tw_fixo(tw_hand&,x&,y&,w&,h&)		Proc: reFIX "Origin" x,y,w,h
; tw_seto(tw_hand&)			Proc: SET window to "Origin" x,y,w,h
; tw_cout(tw_hand&,data&)		Proc: Character OUTput to terminal
; tw_sout(tw_hand&,V:data$)		Proc: String OUTput to terminal
; tw_del(tw_hand&,cnt&)			Proc: DELete cnt& chars at cursor
; tw_ins(tw_hand&,cnt&)			Proc: INSert cnt& chars at cursor
; tw_at(tw_hand&,column&,row&)		Proc: set cursor AT column of row
; tw_rowx(tw_hand&)			Func: get cursor ROW indeX
; tw_colx(tw_hand&)			Func: get cursor COLumn indeX
;
;
; ----------------------------------------------------------------------------
; End of file:  TermWinC.Doc
; ----------------------------------------------------------------------------
