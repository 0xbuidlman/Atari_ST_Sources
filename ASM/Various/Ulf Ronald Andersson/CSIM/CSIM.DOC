-----------------------------------------------------------------------------
 File name:	CSim.DOC		Revision date:	1992.11.16
 Creator:	Ulf Ronald Andersson	Creation date:	1992.11.16
 (c)1992 by:	Ulf Ronald Andersson	All rights reserved
 Released as:	FREEWARE
 File purpose:	Short document describing CSim.PRG
-----------------------------------------------------------------------------
Introduction:

  CSim is a very small program that tricks the TOS into believing that the
  latest boot was made on drive C:, even if no such physical drive exists.
  The reason for doing this is of course that some programs intended for
  owners of hard disks will not work properly when the boot disk was A:.

  I will give you the example that motivated me into writing CSim:

  MultiGEM 2 demands that MultiCon.Prg and Gorbi.Prg reside on the boot drive
  and may crash if 'option' or 'status' is selected with that disk removed.
  Attempts to reinstall MultiGEM on ramdisk C: (to simulate hard disk), did
  not work because MultiGEM still knew that the boot was made on A:.
  It would then decide to lock up the system rather than attempt running :-(

  With CSim the solution is very simple:

  First (like I did in the example) install the application as if for disk,
  but actually in a ramdisk, and then copy those files to diskette.
  This still would not work of course unless you include CSim in the auto-
  folder so it boots before the sensitive program (eg: MultiGEM).
  And of course you must (as always) have a boot program that fills the
  ramdisk with all the application needs (eg: MultiGEM folder + MultiGEM.Inf)

  With this setup MultiGEM works perfectly with my ramdisk, which gives use
  of it a completely different feeling, since ramdisk is so much faster.

  I am now going to try CSim on all programs that refuse to cooperate
  with systems lacking hard disks, and I think that most will then work.

-----------------------------------------------------------------------------
Installation:

  As usual the tricky bit lies in correctly ordering the auto-folder.
  Since we all use different programs, no absolute solutions exist,
  but I can tell you the aspects of importance from CSim's point of view.

  1: Your ramdisk must boot before CSim does, since it requires that the
     logical device C: exists, as shown by system variable '_drvbits'.

  2: CSim must boot before the sensitive application (eg: MultiGEM), to be
     able to really convince it that C: has booted properly. (It hasn't !!!)

  3: The files needed by the application must be copied to ramdisk before
     the application boots.  CSim doesn't care about this, but MultiGEM does.
     (MultiGEM needs the MultiGEM folder (5 files) and MultiGEM.Inf on C:)

  If you do get odd problems, try booting with a minimum of files in the
  auto-folder so that you have a chance to isolate the cause.

-----------------------------------------------------------------------------
Technical details:

  CSim is a very small TSR-program which, once installed, takes up less than
  500 bytes (including the basepage).

  At installation it makes various tests to ensure that it doesn't interfere
  with anything else in the system, and only then installs itself.

  Things tested or performed include:

  1: There must exist a logical drive C: if that is to be simulated boot
     drive, since otherwise TOS would be out of touch with reality.

  2: Also if somehow a logical drive C: is already the active boot drive, it
     would be insane for CSim to interfere with it.

  3: CSim uses a cookie 'CSim' and if that is already in the system it means
     either that some other program has such a cookie or that another copy
     of CSim is running. CSim then reports whichever, but does not install.

  4: CSim checks for existence of a cookie jar and creates/enlarges it if
     that is necessary to install its cookie 'CSim' (value = 'URAn').
     If the jar was created or enlarged an extra reset routine is installed
     (with XBRA 'ck01') to restore original jar (or absence) on RESETs.

  5: If any of the above tests fail, a message is given on screen stating
     the circumstances, whereafter CSim aborts itself (but not the boot).
     The boot should then proceed as if CSim never had tried installing,
     since it has not altered anything in the system.

  6: Successful installation means that the original boot drive code is
     saved for future reset, and until then replaced with C:.  Another
     extra reset routine is also installed (with XBRA CSim), whereafter
     CSim returns all ram not needed by its reset routines to the system,
     as it goes dormant by terminating as TSR.
     
  7: From that point on, CSim itself does nothing until the next reset.
     At that time it will restore the original boot drive code, so that
     the system can boot from diskette.  The other reset routine will
     (if needed) restore the original cookie jar, or remove it if there
     was none before booting CSim.

-----------------------------------------------------------------------------
Closing words:

  As you can see in the head of this file, this is FREEWARE, so obviously
  I will not promise any special support for what I am giving away.
  This doesn't mean I would not like reports on progress or problems,
  nor that I would not help out in case of problems.  
  In most cases I would, IF I have time, but I have to make a living too.
  In case of difficulties, you can reach me at my home address:

	Ronald Andersson
	H”ders V„g 7
	S-14570 Norsborg
	Sweden

-----------------------------------------------------------------------------
End of file:	CSim.DOC
