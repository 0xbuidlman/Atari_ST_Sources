; ----------------------------------------------------------------------------
; File name:	TermWin.Doc		Revision date:	1994.08.19
; Created by:	Ulf Ronald Andersson	Creation date:	1993.04.02
; ----------------------------------------------------------------------------
; Version:	1.02
; NB: 		This subrelease contains only files for use with GFA BASIC.
; ----------------------------------------------------------------------------
; File purpose:	Documentation for the function library "TermWin",
;		that implements terminal handling for GEM windows.
;
; ----------------------------------------------------------------------------
; Copyright:	(c)1993 by Ulf Ronald Andersson.  All rights reserved.
;
;	Released as SHAREWARE, on the following terms:
;
;	Distribution of altered TermWin files is strictly forbidden, since
;	any changes in this package should be made (and debugged) by me.
;	You should thus contact me about any needed changes.
;
;	Rights are granted to all for any  _profit__free_  distribution
;	of the original release package as created by me without alterations.
;	This includes uploading to  _profit__free_  BBS systems.
;
;	Rights are conditionally granted for PD diskette distribution,
;	provided that the total charge per diskette does not exceed the value
;	of three empty diskettes as purchased by that PD diskette vendor.
;
;	A second condition is that such PD diskettes be clearly distinguished
;	as  SHAREWARE  (as opposed to  FREEWARE ) in all advertisements.
;
;	Any commercial distribution of TermWin files requires my consent.
;
;	Unregistered users are granted the right to create programs that use
;	the TermWin code library, for their own use only.
;	They are not allowed to distribute programs so created in any way.
;
;	Users that register are granted the right to distribute programs
;	that utilize the code of the TermWin library to their end users.
;	
;
; ----------------------------------------------------------------------------
; Registration info:
;
;	Minimum registration consists of sending me either of:
;
;	 5 British Pounds  \ / Since these currencies
;	10 US Dollars	    X  vary in value, you may
;	50 Swedish Crowns  / \ choose the cheapest :-)
;
;	Any sums exceeding these amounts will be appreciated (and surprising?).
;
;	The minimum registration fee buys you the distribution rights to any
;	programs you create that use the TermWin library, and  NOTHING  else.
;
;	I will of course examine and (when needed) correct reported problems,
;	but that is the limit of my obligation to minimum fee users!
;
;	My address, for registration (or other correspondence) is:
;
;		Ulf Ronald Andersson
;		H”ders V„g 7
;		S-145 70 Norsborg
;		Sweden
;
;	If you have problems with the swedish vowels in my street address,
;	you can use either of the spellings shown below:
;
;		Hoders Vag 7		(Closest optically)
;	or
;		Hoeders Vaeg 7		(Closest sound)
;
;	Both variants will be recognized, although they are incorrect.
;
;
; NB:	Registration is individual and non_transferable, so you can not buy
;	the registered rights of a previous user, but must instead register
;	directly with me as described above.
;
;
;+NB:	Michael Lundgren (author of NeoCom) gets a free registration
;	for his participation as the first beta-tester of TermWin.
;
;
; ----------------------------------------------------------------------------
; Comments:
;
;	TermWin is intended as a support library for high level languages,
;	although it may of course also be used with assembly language.
;
;	Since different languages use different linking procedures, and also
;	have different ways of calling external routines, there are separate
;	subfolders in the package holding the files specific for a language.
;
;	TW_C\		= Files specific to Pure/Turbo C
;	TW_GFA\		= Files specific to GFA BASIC
;	TW_GST\		= Files specific to GST linkers (eg: DevPac)
;	TW_LATTC\	= Files specific to Lattice C
;
;	GFA BASIC reverses argument order in stack RAM, unlike normal
;	Atari programming which uses C conventions.
;	GFA BASIC also ignores correcting the stack after functions,
;	although it does correct the stack after procedures.
;	(The latter inconsistency was never documented by GFA !!!)
;
;	Files in TW_GFA\ are fully adapted to the above usages of GFA BASIC,
;	and are thus not suitable for linking with C programs.
;
; ----------------------------------------------------------------------------
; Package Manifest:
;
;	The TermWin package consists of 14 files:
;
; One documentation file:
;
;	TERMWIN.DOC	This documentation file
;
; Four object module files:
;
;	TW_C\TERMWINC.O		TermWin library for Pure/Turbo C
;	TW_GFA\TERMWIND.O	TermWin library for GFA BASIC
;	TW_GST\TERMWING.BIN	TermWin library for GST linking (Devpac)
;	TW_LATTC\TERMWINL.O	TermWin library for Lattice C
;
; Four library function prototype files:
;
;	TW_C\TERMWINC.H		Pure/Turbo C header file
;	TW_GFA\TERMWIND.LST	GFA BASIC prototypes and link directives
;	TW_GST\TERMWING.I	Devpac XREF inclusion file
;	TW_LATTC\TERMWINL.H	Lattice C header file
;
; Two GFA BASIC application listings:
;
;	TW_GFA\TST_WIND.LST	A GFA BASIC test application for TermWin
;	TW_GFA\MENU_WIN.LST	A GFA BASIC compiler shell, using TermWin
;
;	To recompile any of the GFA BASIC programs, you must select TERMWIND
;	as C-OBJECT from MENU_WIN.PRG, before starting the GFA BASIC linker.
;	(Use the "C" command and choose TERMWIND.O with file selector.)
;
; One GFA BASIC INLINE file (used by MENU_WIN.PRG):
;
;	TW_GFA\MENU.INL	An interrupt routine for GFA compiler line display.
;
; Two compiled PRG files:
;
;	TST_WIND.PRG	Compiled from TST_WIND.LST + TERMWIND.LST
;	MENU_WIN.PRG	Compiled from MENU_WIN.LST + MENU.INL + TERMWIND.LST
;
; ----------------------------------------------------------------------------
; The library defines the following functions and procedures:
;
; NB: There is a "quick reference list" of these at the end of this file
;
; All arguments are here shown as used in calls from a GFA BASIC program.
; Thus, suffixes are used to indicate the data type of each parameter.
;
; These suffixes are:
;	& = 16_bit integer	% = 32_bit integer	$ = ascii string
; 
;
;
; tw_init(tw_lim&,wshandle&,glob_p%)	Func: < 0 if error
;
;	This function must be called before any others of the library !!!
;	It requires some free system RAM, and will otherwise return negative.
;
;	In GFA BASIC you must thus always use the option $m... with TermWin,
;	so that your program only takes what memory it needs from the system.
;	Do _not_ use RESERVE, since that is legal only in the interpreter,
;	which can not be used with TermWind.  (It can't use object modules!)
;
; NB:	Programs that take all system memory are no longer allowed,
;	according to Atari developement recommendations.
;
;	"tw_lim&" limits the number of available terminals, and thus the size
;	of the RAM block reserved by "tw_init".
;	Terminal 0, however, is reserved for window 0 (desktop), so use
;	a value one unit greater than the number of terminal windows you want.
;
;	"wshandle&" is the workstation handle of the application, as given
;	by its "v_opnvwk" call.  In GFA BASIC, simply use "V~H" .
;
;	"glob_p%" is the address of the programs "global" AES array.
;	In GFA BASIC, simply use "LPEEK(GB+4)"
;
;	Thus for 4 terminal windows in GFA BASIC use:
;		err% = @tw_init(5,V~H,LPEEK(GB+4))
;
;
; tw_exit				Proc: terminate all terminals
;
;	This procedure closes all terminals AND the terminal handler itself,
;	so then none of the routines below can be used without new "tw_init"
;
;	It must be called before exiting a program that used "tw_init" .
;
;
; tw_cell(font%,satt&)			Func: = text cell width & height
;
;	This function returns a long integer holding two words, calculated
;	on the basis of the given font number and special attribute flag.
;	The upper word is the resulting pixel width of a text cell, while
;	the lower word is the resulting pixel height of a text cell.
;	If either of "font%" or "satt&" is given as -1, the calculation
;	will be based on the default values (font depends on resolution).
;	This is useful to precalculate needed screen & terminal sizes.
;
;
; tw_menkey(code&)			Func: = international scancode(aes)
; tw_genkey(code%)			Func: = international scancode(bios)
;
;	These 2 functions modify a standard keyboard scancode to one with more
;	information needed to make key checks independent of nationality.
;
;	"tw_menkey" is used to convert AES shortword scancodes.
;	"tw_genkey" is used to convert bios/gemdos longword scancodes.
;
;	If either is called with zero argument an attempt is made to read
;	a key with GEMDOS Crawio, and this is then converted if available.
;	If no key is available the functions return a zero result.
;
;	The converted scan codes are longwords defined as follows:
;
;	Byte 0:	Bit 0 (LSB):	left  [Shift] key pressed
;       (High)	Bit 1:		right [Shift] key pressed
;		Bit 2:		[Control] key pressed
;		Bit 3:		[Alternate] key pressed
;		Bit 4:		[CapsLock] mode active
;		Bit 5:		\
;		Bit 6:		 X Unused (zero)
;		Bit 7 (MSB):	/
;
;       	These Kbshift bits will only be relevant if you call these
;		functions shortly after reading the original keypress.
;
;
;	Byte 1:	This is the key number (as usual), but normalized
;		so [Alternate] does not distort the digit key numbers.
;		Likewise is [Control] prevented from changing the key
;		numbers of the cursor keypad.
;		Those changes should be tested in byte 0 instead.
;
;	Those two bytes (high word) always have the same definition, but the
;	remaining two bytes (low word) vary with the type of keys pressed.
;
;	The three types are:
;
;	Ascii	The position of these keys varies with nationality, so the
;		key number is not a legal test value. Test Ascii code only.
;		Some exceptions are, the numeric keyboard, Return, Escape,
;		Tab, Backspace, Delete and spacebar.  These are stationary
;		and may be identified through their key number as well.
;
;	Coerced These keys give no ascii in current Kbshift state, even though
;		they do have an ascii value in unshifted mode.
;		Their position also depends on nationality, so correct test is
;		to combine Kbshifts with the basal ascii code.
;
;	Extras	These keys have no ascii code, and are nationality independent.
;               They include the function keys and the cursor keypad.
;		The correct test is always to combine Kbshifts with key number.
;		Note that the function keys are theoretically two rows of ten,
;		so they have different key numbers with [Shift].
;
;	Byte 2:	Bits 7..4 are used to flag the type of the current scancode.
;
;	     $A flags 'ascii' type and always forces bits 3..0 to zero.
;	     $C flags 'coerced' type and bits 3..0 are the same as in byte 0.
;	     $E flags 'extras' type and bits 3..0 are the same as in byte 0.
;
;	     Note that the latter two have all Kbshifts except capslock, and
;	     that was excluded on purpose here (it is available in byte 0).
;
;	Byte 3:	This (low) byte also varies, as follows
;
;	'ascii' type obviously stores the valid ascii code here.
;	'coerced' type stores the basal (not curently valid) ascii code here.
;	'extras' type stores a copy of byte 1, the key number here.
;
; 	This means that the low 16 bit word contains most that is normally
;	needed for nation independent keyboard handling.
;	See the example programs, MENU_WIN.LST and TST_WIND.LST for examples
;	of how to use the functions in nation independent menus.
;
;
; win_create(gad&,tit_p%,inf_p%,x&,y&,w&,h&)	Func: = GEM window handle
;
;	This is used to create, and open, windows using _inner_ coordinates.
;
;	"gad&" holds all gadget bits for WIND_CREATE, while tit_p% and
;	"inf_p%" are pointers to title and info strings for ~WIND_OPEN.
;
;	Those strings MUST be in stable memory, not in GFA string area.
;	(GFA strings move without user control during "garbage collect".)
;	(GFA arrays only move when an older array is "erased".)
;
;	Any of "win_create's" parameters may be -1 to use default values.
;	This will cause the following defaults to be used:
;
;		gad&	4095 = all gadgets present
;		tit_p%	internally stored empty string
;		inf_p%	internally stored empty string
;		x&	leftmost possible if w& also default,
;			otherwise adjusted to centre window.
;		y&	topmost possible if h& also default,
;			otherwise adjusted to centre window.
;		w&	maximum width from x&
;		h&	maximum height from y&
;
;	Failed attempt returns a negative error code in the range -8..-1.
;	but code -8 means GEM failed to add a window, so don't retry then.
;	These error codes have the following meanings:
;
;		-1	x& illegal	\
;		-2	y& illegal	 \  / REMEMBER !,
;		-3	w& illegal	  \/  inner coordinates
;		-4	h& illegal	  /\  must never use
;		-5	x&+w& illegal	 /  \ the entire screen
;		-6	x&+h& illegal	/
;		-7	user generated error (future implementation)
;		-8	GEM failed to open window, so do not retry.
;
;	After errors 1..7 it is possible to adjust the illegal values,
;	and call "win_create" again.  The error detection follows the same
;	order as the list above, so illegal x& will "hide" illegal y&.
;
;
; tw_open(windhand&,gad&,cols&,rows&)	Func& = tw_handle, < 0 if error
;
;	This creates a terminal interface for the window "windhand&".
;
;	"gad&" flags scroll bar usage, normally same as in "win_create".
;	Use zero here, if you wish to manage scroll bars yourself, but
;	never flag bar usage here, if the window does not have any bars.
;
;	"cols&" is the number of terminal columns. \/ Large values will
;	"rows&" is the number of terminal rows.    /\ need scroll bars.
;
;	_Never_ destroy a terminal window (at program exit etc.),
;	without first closing the terminal ("tw_close" or "tw_exit").
;
;
; tw_close(tw_hand&)			Func: = GEM window handle, <0 if error
;
;	This closes a terminal interface, but not the associated window,
;	which will no longer be managed by "tw_update" after this call.
;	The terminal handle becomes invalid until reassigned by "tw_open".
;	The value returned is negative if tw_hand& is not a valid terminal,
;	but is otherwise the (unclosed) window handle of the closed terminal.
;
;
; tw_update(mesag_p%)			Proc: Handles AES messages
;
;	Use this in your event message handler, to perform all normal tasks
;	for the windows with terminal interfaces. (See example programs)
;
;
; gem2tw_(windhand&)			Func: = tw_handle, < 0 if error
;
;	This translates the handle of any GEM window to the corresponding
;	terminal handle, or to -1 if the window has no terminal interface.
;
;
; NB: Most of the following "tw_" routines use "tw_" handles in argument
; NB: Legal "tw_" handles (like GEM handles) are all positive 16-bit words
;
;
; tw_2gem(tw_hand&)			Func: = GEM window handle, <0 if error
;
;	This translates the terminal handle of any terminal window to the
;	corresponding GEM window handle, or to -1 if still unassigned.
;
;
; tw_voff(flag&)			Func: = Video optimization flags
;
;	This function will not set any changes given as negative,
;	but will always return the old value valid before the call.
;
;	Thus you can either simply read an old value with eg:
;		old_voff&=tw_lock(-1)
;	or simultaneously read an old and set a new value with eg:
;		old_voff&=tw_lock(new_voff&)
;
;	The current interpretation of voff is:
;
;		bit 0	turns off internal optimization routines.
;
;	This may change in the future, but value 0 will always be default,
;	and will always mean that internal optimization is active.
;	Also any bits set will deactivate some (currently all) optimizations,
;	and 32767 will deactivate all of them (as it will do already).
;
;	These settings are global for all terminals of an application.
;
;	Current existing optimization routines are used for:
;
;		scrolling:	pure scroll, line insert, line delete
;		blanking:	text background, all screen clearing
;
;	These optimization routines are compatible with any resolution that
;	uses 1, 2, 4, or 8 bitplanes with word interlace in normal RAM.
;	They will not be used (automagic) with other bitplane formats, but
;	will need to be turned off for some exotic video boards, and also
;	for the truecolour mode of Falcon (which shouldn't need them!).
;
;
; tw_lock(tw_hand&,lock&)		Func: = terminal screen lock mode
;
;	This function will not set any changes given as negative,
;	but will always return the old value valid before the call.
;	This function returns negative, if "tw_hand&" is not valid.
;
;	Thus you can either simply read an old value with eg:
;		old_lock&=tw_lock(thd&,-1)
;	or simultaneously read an old and set a new value with eg:
;		old_lock&=tw_lock(thd&,new_lock&)
;	The latter may cause screen updates, if done in "locked" mode.
;
;	Proper use of "tw_lock" will speed up programs significantly !!!
;
;	"lock&" = 0 is the startup value of each terminal, and means
;	that each text update is sent to VDI as separate characters.
;	This mode is default only because it is the simplest to use,
;	but it wastes time repeating attribute settings etc. that are
;	common to most characters of each line.
;
;	"lock&" = 1 (any non_zero) means that each text update merely
;	updates the buffers of TermWind, with VDI updates deferred.
;	Thus, the screen appears "locked" in this state.
;
;	A value > 1 is returned when the function is called at a time when the
;	rectangle buffer contains data, which is then automatically displayed
;	unless the "lock&" parameter was negative.
;
;	The needed data is sent to VDI, when either of five things happen:
;
;	1: A new "tw_lock" call is made, with "lock&"=0  (Unlocking)
;	2: A new "tw_lock" call is made, with "lock&">0  (Relocking)
;	3: The rectangle buffer of that terminal becomes full
;	4: A scroll operation is made
;	5: The entire terminal screen is cleared
;
;	In the fifth case the buffer is simply cleared, since the entire screen
;	is cleared, thus making old buffer contents meaningless.
;	Otherwise, non_zero rectangles in the rectangle buffer are sent to VDI,
;	after which the buffer is cleared (ready for new data).
;
;	Each terminal's rectangle buffer has room for 32 text rectangles,
;	but each new rectangle is, when possible, merged with any old ones.
;	Thus only 2 rectangles will be used, if data is output to contiguous
;	positions (normal terminal handling), even if entire screen is used.
;
;	In such a case, only 2 separate updates will be made, when the user
;	"unlocks" or "relocks" the terminal, instead of the thousands of
;	updates that would have been required in "unlocked" mode !!!
;
; NB:	The "lock" system acts on individual terminals, which also means
;	that each terminal interface has a separate rectangle buffer.
;	Thus, "locked" and "unlocked" terminals can be freely mixed.
;
;
; tw_escf(tw_hand&)			Func: get ESCape sequence Flag
;
;	This function returns 0 if no escape sequence is being processed by
;	the "tw_hand&" terminal, but otherwise returns 1.
;	If tw_hand& is not a valid terminal handle return value is negative.
;
; NB:	This is intended to allow character translation, without affecting
;	any escape code arguments in any protocol.
;	Thus no translation is legal if "tw_escf" returns non_zero.
;
;
; tw_showc(tw_hand&)			Func: SHOW terminal Cursor
; tw_hidec(tw_hand&)			Func: HIDE terminal Cursor
;
;	These 2 functions return the old cursor "hiding depth", which is zero
;	if the call was made with a visible cursor.
;	If tw_hand& is not a valid terminal handle return value is negative.
;
;
; tw_prot(tw_hand&,prot&)		Func: set/get terminal PROTocol type
; tw_font(tw_hand&,font%)		Func: set/get FONT number/pointer
; tw_satt(tw_hand&,satt&)		Func: set/get Special ATTributes
; tw_inv(tw_hand&,inv&)			Func: set/get INVerse mode flag
; tw_wrap(tw_hand&,wrap&)		Func: set/get line WRAP mode flag
; tw_colr(tw_hand&,colr&)		Func: set/get terminal COLouRs
; tw_cdif(tw_hand&,cdif&)		Func: set/get forced Colour DIFference
; tw_ibm_c(tw_hand&,ibmc&)		Func: set/get IBM colouring mode flag
;
;	The 8 functions above will not set any changes given as negative,
;	but will always return the old value valid before the call.
;	These functions return negative, if "tw_hand&" is not valid.
;
;	Thus you can either simply read an old value with eg:
;		old_satt&=tw_satt(thd&,-1)
;	or simultaneously read an old and set a new value with eg:
;		old_satt&=tw_satt(thd&,new_satt&)
;
;	"tw_inv"  will return as 0 or 1, but any number >0 is taken as 1.
;	"tw_wrap"  will return as 0 or 1, but any number >0 is taken as 1.
;	"colr&" = terminal colours coded as: foreground*16+background.
;
;	Non-zero "cdif&" guarantees foreground visibility, by testing if the
;	foreground colour is the same as background and, if so, changing it.
;	This is _vital_ when running in mono/medium resolution,
;	with host systems that assume full colour capability.
;	Therefore this feature is by default active (non_zero).
;
;	Non-zero "ibmc&" reverses the terminal's use of black and white only,
;	to achieve a look similar to that of a "PC-clone".
;	Note that this only affects the area inside the terminal's window.
;
;	Other values must satisfy the specification of parameters further on.
;
;
; tw_setw(tw_hand&,x&,y&,w&,h&)		Proc: SET Window x,y,w,h
; tw_fixo(tw_hand&,x&,y&,w&,h&)		Proc: reFIX "Origin" x,y,w,h
; tw_seto(tw_hand&)			Proc: SET window to "Origin" x,y,w,h
;
; 	Here "origin" means the original "x,y,w,h" values used in "tw_open",
;	"tw_fixo" alters those values without a new "tw_open".
;	"tw_seto" simply reactivates the "origin" values.
;	"tw_setw" should be used instead of "~WIND_SET" to ensure that TermWind
;		responds correctly to all window changes.
;
;
; tw_find(x&,y&)			Func: FIND terminal at pixel point
;
;	This function is similar to gem's "wind_find", but returns the "tw_"
;	terminal handle (if any) of the top window at the given coordinate.
;	If there is no terminal at that point the function returns negative.
;
;
; tw_pich(tw_hand&,x&,y&)		Func: get Pixel Indexed CHaracter
; tw_cich(tw_hand&,col&,row&)		Func: get Cell Indexed CHaracter
;
;	These 2 functions make it possible to read the text already displayed
;	in a terminal, on a character by character basis.
;
;	"x&,y&" are absolute full screen coordinates. (eg: mouse position)
;
;	"col&,row&" are relative terminal coordinates, which allow access
;	even to terminal areas not currently visible.
;
;
; tw_cout(tw_hand&,data&)		Proc: Character OUTput
; tw_pout(tw_hand&,V:data$)		Proc: Pointed string OUTput
;
; NB:	data$ above must be terminated with an ascii NUL (code 0)
;
; tw_sout(tw_hand&,data$)		Proc: String OUTput
;
; NB:	This routine is provided for GFA BASIC only (not needed by C).
;	Simpler to use than "tw_pout", but a wee bit slower, since it
;	does some extra work in GFA_compiled routines.
;
;
; tw_del(tw_hand&,cnt&)			Proc: DELete cnt& chars at cursor
; tw_ins(tw_hand&,cnt&)			Proc: INSert cnt& chars at cursor
; tw_ldel(tw_hand&,cnt&)		Proc: DELete cnt& Lines at cursor
; tw_lins(tw_hand&,cnt&)		Proc: INSert cnt& Lines at cursor
;
;
; tw_clrs(tw_hand&,code&)		Proc: CLeaR part of Screen
; tw_clrl(tw_hand&,code&)		Proc: CLeaR part of Line
;
;	These two procedures interpret "code&" similarily as below:
;
;	0  =  Clear from cursor to end   \ / of screen for "tw_clrs"
;	1  =  Clear from start to cursor  X  but
;       2  =  Clear all			 / \ of cursor line for "tw_clrl"
;
;
; tw_at(tw_hand&,column&,row&)		Proc: set cursor AT column of row
; tw_rowx(tw_hand&)			Func: get cursor ROW indeX
; tw_colx(tw_hand&)			Func: get cursor COLumn indeX
;
;
; tw_resp(tw_hand&)			Func: get terminal RESponse Pointer
;
; The function above will return zero except after such escape sequences
; that request an answer back from the terminal.  In this case the value of
; the function is the address of a C-style NUL-terminated string, which
; is to be sent to whoever made the request.
; The address is only returned once, whereafter the value reverts to zero.
; It is the responsibility of caller to transmit/ignore this string.
;
;
; tw_caplk(tw_hand&,filehand&)		Func: get/set CAPture LinKed file
; tw_capmd(tw_hand&,mode&)		Func: get/set CAPture MoDe
; tw_capsz(tw_hand&,size%)		Func: get/set CAPture buffer SiZe
;
;	These three functions are used to control file capture of terminal data.
;
;	"filehand&" is a standard gemdos file handle for capture file
;	or zero to disable capture, which also flushes capture buffer.
;
;	"mode&" is a flag with 3 legal values:
;
;		256 to capture everything (including escapes etc.).
;		1 to capture ASCII with CRLF's.
;		0 to disable capture (and flush capture buffer)
;
;	"size%" is the wanted size of the capture buffer, and is optional.
;	Each window has a 4K internal buffer, which will be used unless the
;	new size exceeds that limit, in which case a new buffer is allocated.
;	Such buffers are released automatically when terminal is closed, or a
;	new capture buffer size is requested (even if identical), which also
;	flushes any active capture data to the output file.
;
;	As usual the old values are returned and if a new value is given
;	as negative it causes no change.
;
;	The functions return error -1 if illegal terminal handle is used.
;
;	Capture handling is of course individual per terminal.
;
; NB:	It is the responsibility of the calling program to open capture file
;	before linking a file handle (obviously!).
;	It must also turn off the capture, either by unlinking or by clearing
;	the capture mode, before closing a capture file.
;
;
; ----------------------------------------------------------------------------
; Terminal windows have individually selected terminal protocols:
;
; Currently 6 terminal protocols are available:
;
; 0 = standard ASCII
;	All characters are reduced to 7-bit codes.
;	Control characters BL, BS, HT, LF & CR are valid.
;	All other control characters (incl. ESC) are invisible chars.
;
; 1 = Atari extended ASCII
;	All characters retain their 8-bit codes.
;	Control characters BL, BS, HT, LF & CR are valid.
;	All other control characters (incl. ESC) are invisible chars.
;
; 2 = standard VT_52
;	All characters are reduced to 7-bit codes.
;	Control characters BL, BS, HT, LF, VT, FF & CR are valid.
;	Control characters VT & FF behave like LF.
;	All other control characters (Except ESC) are invisible chars.
;	Escape sequences are valid according to VT_52 standards.
;	Invalid characters after ESC are treated as visible chars.
;
; 3 = Atari extended VT_52		NB: Default mode for terminal windows
;	All characters retain their 8-bit codes.
;	Control characters BL, BS, HT, LF, VT, FF & CR are valid.
;	Control characters VT & FF behave like LF.
;	All other control characters (Except ESC) are invisible chars.
;	Escape sequences are valid according to VT_52 standards.
;	Invalid characters after ESC are treated as visible chars.
;
; 4 = 7 bit ANSI
;	All characters are reduced to 7-bit codes.
;	Standard ANSI protocol with CSI$ = CHR$(&H1B)+CHR$(&H5B) .
;
; 5 = Atari 8 bit ANSI
;	All characters retain their 8-bit codes.
;	Standard ANSI protocol with Atari extended character set.
;	CSI$ is accepted as either of CHR$(&H9B) or CHR$(&H1B)+CHR$(&H5B) .
;
; NB:	This will be extended in the future, to include several protocols.
;	Programmers should be prepared to use protocols 0..7,
;	although protocols 6..7 currently act like protocol 5.
;
;+NB:	PC_compatible ANSI graphics may be dependent on the graphic character
;	set in the screen fonts of those machines.
;	TermWin does not add or alter any fonts, but you may use some other
;	program (eg: NVDI et.al) to install a PC_compatible system font.
;	I have distributed a (FREEWARE) archive named STANSI_F.LZH, which
;	contains 3 such fonts that can replace all of the ST's system fonts.
;
;
; ----------------------------------------------------------------------------
; Terminal windows can use the following font numbers:
;
;	0 = 4*6		system font
;	1 = 6*6		system font (default in color resolutions)
;	2 = 8*8		system font (default in monochrome resolution)
;	3 = 8*16	system font
;
; Both font selection and text cell size are set locally per window, but are
; also global within that window, which is thus redrawn when either is changed.
;
; This means that different simultaneous fonts are possible,
; but only if used in separate terminal windows.
;
;
; NB:	This will in future be extended to include GDOS fonts, accessible
;	either via font id_codes or via pointers to fonts in RAM.
;	Thus all programming must accept, and preserve, 32 bit font numbers.
;	Obviously, there will then be no specific relation between the font's
;	number and its text cell sizes, so use "tw_cell(font%,attr&) for that.
;
;
; ----------------------------------------------------------------------------
; Terminal windows can use the following special attributes:
;
;	 0 = Normal	NB: default
;	 1 = Bold
;	 2 = Ghost
;	 4 = Italic
;	 8 = Underscore
;
; These correspond to the low 4 bits of "vst_effects" of GEM VDI.
;
; Any of these may be summed for use in the call "tw_satt(tw_hand&,satt&)",
; and will then control how the characters of one terminal will be shown.
; Simultaneous terminals are not dependent on using similar attributes.
;
; ANSI "Highlight" text will be displayed as "Bold" text, but will not
; affect the normal use of the "Bold" mode itself.
;
; ANSI "Blink" text will display as "Ghost" text, using that attribute bit.
;
; ANSI "Bold", "Italic" and "Underscore" are implemented directly,
; using the corresponding attribute bits shown above.
;
;
; NB: VT-52 and all similar protocols are defined as having each character
;	displayed in a cursor adressable, fixed size, screen rectangle.
;
;	Also, "Italic" means that each character leans into the text cell of
;	the one following, and may thus be "cut" as that cell is updated.
;	The "cut" portion will be restored when/if the screen is redrawn.
;
;
; ----------------------------------------------------------------------------
; Quick reference list of functions and procedures:
;
; tw_init(tw_lim&,wshandle&,glob_p%)	Func: < 0 if error
; tw_exit				Proc: terminate all terminals
; tw_cell(font%,satt&)			Func: = text cell width & height
; tw_menkey(code&)			Func: = international scancode(aes)
; tw_genkey(code%)			Func: = international scancode(bios)
; win_create(gad&,tit_p%,inf_p%,x&,y&,w&,h&)	Func: = GEM window handle
; tw_open(windhand&,gad&,cols&,rows&)	Func: = tw_handle, <0 if error
; tw_close(tw_hand&)			Func: = GEM window handle, <0 if error
; tw_update(mesag_p%)			Proc: Handles AES messages
; gem2tw_(windhand&)			Func: = tw_handle, < 0 if error
; tw_2gem(tw_hand&)			Func: = GEM window handle, <0 if error
; tw_voff(flag&)			Func: set/get Video optimization flags
; tw_lock(tw_hand&,lock&)		Func: set/get screen lock mode
; tw_escf(tw_hand&)			Func: get ESCape sequence Flag
; tw_showc(tw_hand&)			Func: SHOW terminal Cursor
; tw_hidec(tw_hand&)			Func: HIDE terminal Cursor
; tw_prot(tw_hand&,prot&)		Func: set/get terminal PROTocol type
; tw_font(tw_hand&,font%)		Func: set/get FONT number/pointer
; tw_satt(tw_hand&,satt&)		Func: set/get Special ATTributes
; tw_inv(tw_hand&,inv&)			Func: set/get INVerse mode flag
; tw_wrap(tw_hand&,wrap&)		Func: set/get line WRAP mode flag
; tw_colr(tw_hand&,colr&)		Func: set/get terminal COLouRs
; tw_cdif(tw_hand&,cdif&)		Func: set/get forced Colour DIFference
; tw_ibm_c(tw_hand&,flag&)		Func: set/get IBM colouring mode flag
; tw_setw(tw_hand&,x&,y&,w&,h&)		Proc: SET Window x,y,w,h
; tw_fixo(tw_hand&,x&,y&,w&,h&)		Proc: reFIX "Origin" x,y,w,h
; tw_find(x&,y&)			Func: FIND terminal at pixel point
; tw_pich(tw_hand&,x&,y&)		Func: get Pixel Indexed CHaracter
; tw_cich(tw_hand&,col&,row&)		Func: get Cursor Indexed CHaracter
; tw_seto(tw_hand&)			Proc: SET window to "Origin" x,y,w,h
; tw_cout(tw_hand&,data&)		Proc: Character OUTput to terminal
; tw_pout(tw_hand&,V:data$)		Proc: Pointed string OUTput
; tw_sout(tw_hand&,data$)		Proc: String OUTput (GFA BASIC only)
; tw_del(tw_hand&,cnt&)			Proc: DELete cnt& chars at cursor
; tw_ins(tw_hand&,cnt&)			Proc: INSert cnt& chars at cursor
; tw_ldel(tw_hand&,cnt&)		Proc: DELete cnt& Lines at cursor
; tw_lins(tw_hand&,cnt&)		Proc: INSert cnt& Lines at cursor
; tw_clrs(tw_hand&,code&)		Proc: CLeaR part of Screen
; tw_clrl(tw_hand&,code&)		Proc: CLeaR part of Line
; tw_at(tw_hand&,column&,row&)		Proc: set cursor AT column of row
; tw_rowx(tw_hand&)			Func: get cursor ROW indeX
; tw_colx(tw_hand&)			Func: get cursor COLumn indeX
; tw_resp(tw_hand&)			Func: get terminal RESponse Pointer
; tw_caplk(tw_hand&,filehand&)		Func: get/set CAPture LinKed file
; tw_capmd(tw_hand&,mode&)		Func: get/set CAPture MoDe
; tw_capsz(tw_hand&,size%)		Func: get/set CAPture buffer SiZe
;
;
; ----------------------------------------------------------------------------
; End of file:  TermWin.Doc
; ----------------------------------------------------------------------------
