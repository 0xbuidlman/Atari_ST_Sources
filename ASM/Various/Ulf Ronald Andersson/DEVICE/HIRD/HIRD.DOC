; File name:	HiRD.DOC			Revision date:	1992.02.29
; File author:	Ulf Ronald Andersson		Creation date:	1992.02.29
; File purpose:	To document release of HiRD.prg version 1.1
;   - " -	that is: 'Hidden Ram Disk  Version 1.1'
;
; Copyright:	(C)1992 by Ulf Ronald Andersson
; Release:	Version 1.1 released as non-commercial (only) PD FREEWARE
; Requirement:	This 'HiRD.doc' file must accompany distributed 'HiRD.prg'.
; Comment:	I also recommend inclusion of the file 'COPY.TTP'.
;
; Warning:	Anyone wishing to include HiRD in a commercial package MUST
;   - " -	first contact me since such use is not released to PD.
'   - " -	I can be reached at the following address:
;   - " -		Ronald Andersson
;   - " -		H”ders V„g 7
;   - " -		S-145 70 Norsborg
;   - " -		Sweden
;   - " -	If you are unsure of the swedish characters used above, then
;   - " -	use 'Hoders Vag 7' for the street address.  This will be
;   - " -	understood at post office, even though it is incorrect.
;
; Disclaimer:	This is FREEWARE, so any support or advice by me depends on
;   - " -	whether I have more imprtant things to do or not.  I do not
;   - " -	make any money on FREEWARE,  so I must do other things too.
;   - " -	I can of course make this a SHAREWARE program, if many feel
;   - " -	the need for the service this enables.  If so, write me !!!
;
;
; NB:   This version is only for ST systems with 2.5 MBytes of RAM,
; NB:   with 0.5 MBytes in bank 0,  and 2 MBytes in bank 1.
; NB:   This is due to hardware limits of the MMU.
;
;
;	Brief Presentation:
;
; HiRD was created to enable programs, that require 1 MByte mode, to function
; on 2.5 MByte systems without losing the use of the extra 1.5 MByte RAM.
;
; HiRD hides a 1.5 MByte reset-proof ramdisk in protected RAM, inaccessible to
; any other program since it remaps the MMU to 1 MByte mode.
;
; HiRD uses XBRA-protocol for all its system vectors.
;
; HiRD can use 'MAXIDISK.INF' files, just as MaxiDisk would, but these must be
; renamed to 'HIRD.INF'. The first number (ramdisk size) is read, but ignored.
; The file format is:  (Don't you know ?, then get 'Revised MaxiDisk 2.x' !)
;   First line should hold a 1 to 4 digit number which will be ignored by HiRD,
;   then a separating space (or more) followed by the drive letter for Hird.
;   Further lines should hold the path of each program to be called, with any
;   commandline arguments space-separated from the program name.
;   I often use a 2-line file, for both HiRD and MaxiDisk, consisting of:
;   line 1:	1200 C
;   line 2:	SYSAID\COPY.TTP A:\TRANSFER C:
;   This sets up HiRD (or MaxiDisk) as drive C, and then copies everything in
;   folder A:\TRANSFER to C:.  Hard disk users will need to alter this.
; Note that, like MaxiDisk, HiRD will ignore the INF file when 'warm'-booted,
; so this is a good way to initialize stuff on 'cold' boots only.
;
; HiRD will remap the MMU for all ramdisk sector accesses, which will cause
; the screen RAM to be invisible for a (very) brief period each time.
; Thus some flickering lines on the screen will tell you whenever any program
; accesses HiRD.  If this happens unexpectedly, I recommend a virus hunt.
; Thus HiRD can be a help to catch viruses, although this is a side effect.
;
;	End of Brief Presentation
;
;
;	Version 1.1 update
;
; The routine that searches for the MPB's of GEM independent of TOS version
; has been significantly improved. It should now be compatible with any TOS.
;
; The sector data moves have been speeded up considerably, by using 'longs'.
; This does not affect safety, since any erroneous odd addresses, such as
; are used by some notable packers, will cause HiRD to revert to the older
; byte-oriented routines.
;
;
;	General observations and comments:
;
;   Originally, before I expanded my system's RAM, I often had to forego some
; excellent software which demanded more than  512 KBytes.  Then, when I did
; expand  to  1 MByte,  I found that even this was often insufficient,  since
; I also needed other software tools resident  apart  from the applications.
; So,  only expansion to  2.5 MBytes  or more would solve ALL problems.
;
; Right...?                 NO !!!    WRONG !!!
;
;   ALL problems can not be solved by any fixed RAM configuration, since some
; programs, written to use less  RAM, seem unable to cope with large systems.
;
;
;   I have reason to believe that some compilers create code which depends
; on a specific system RAM size for correct operation.
;
;   One program  (AutoTerm: a VERY good OverScan-compatible terminal program)
; not only did  not  work properly  with  2.5 MBytes,  but in failing it also
; completely  destroyed  important data in  RAM  reserved by my other RamDisk
; (my 'Revised MaxiDisk  2.0').  The program was written in GFA-Basic, and my
; testing of it leads to the conclusion that this compiler  (and some others)
; does  not  follow system specifications entirely regarding RAM reservation.
;
;   This problem is probably caused by the  need  for a compiler to work also
; with the old TOS 1.0, and its fatal  'Malloc'-bug.  Unfortunately their way
; of circumventing this bug is  not perfectly compatible with all the ways in
; which RAM can be reserved,  especially not with reset-proof ways.
;
;   The only way to use such programs on an expanded system,  is of course to
; boot some program that  resets  the  system  RAM size.  Note that it is not
; enough to adjust the software pointers and other system variables, but that
; it is also necessary to adjust the mapping code in the MMU-chip.
;
;   Then, and only then, will any program be unable to behave differently than
; it would on an unexpanded '1040 ST'.  But this means letting 1.5 MBytes lie
; idle and unused.  Unusable even,  since there is no way to access this  RAM
; once the MMU is set to ignore it !
;
; WORSE..., since you are now limited  to  1 Mbyte there will probably not be
; room for any extra software tools,  and especially not for any ramdisk.
;
;   The obvious solution then is to create a ramdisk, which in booting sets up
; all system variables for 1 MByte mode, does the same with the MMU,  and yet
; remembers the  original  configuration.  This ramdisk can then temporarily
; revive that configuration to access ramdisk sectors in protected RAM.
;
;   But in doing so,  part of the memory bank  remapped is also  "scrambled",
; since the map in  1 MByte  mode has a  non-linear relationship with the map
; in 2.5 MByte mode.
; This has several consequences, as follows:
;
; 1: The bank where the ramdisk program resides (bank_0) can not be remapped.
;    Which is why this program is unlikely to work on 4-MByte systems.
;
; 2: All interrupts  must  be disabled while accessing a ramdisk sector.
;    This may be a problem when using  high-speed  serial  interfaces.
;    Normal downloads at  2400 bps  have been tested without problems,
;    but problems may occur for users of  MIDI  and  high-speed  modems.
;    The solution then is simple: dont access HiRD during communication.
;
; 3: Do not attempt to remap on your own to access protected RAM,
;    unless you are quite certain of how the MMU "scrambling" works.
;
;   The text above explains all about my reasons for, and hints at some of the
; problems with, developing HiRD.  I hope you will enjoy it as much as I have.
; (Yes, I finally got to use AutoTerm 1.2 without problems. Great program!)
;
; If you have any problems with, or comments on, HiRD you can reach me at the
; address given in the header of this file.
;
; Yours Truly: Ronald Andersson
;
; ------------------------ end of file:  HiRD.doc ------------------------
