
How the program works.
ÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿ

I am putting this file on the disk 'cos
I know that I for one am always curious
as to how various effects are achieved.
When I see a program, I like to try and
figure out how it was done. 

Here then is how the fwibble program is
done.

---------------------------------------

First of all,  the image is loaded from
disk and the palette is set. 

Then 16 buffers are set up, each buffer
being the size of the image (about 8000
bytes which is a quarter of the screen)

The image is copied to the first buffer
which leaves us with 15 more buffers.
At this point we have:

1 area of memory which holds the DEGAS
screen in its entirety.

1 buffer with just a copy of the image
from that DEGAS screen.

15 empty buffers, each the size of the
image.

--

Now, the image on the DEGAS workscreen
is moved 1 pixel to the right. This is
then copied to buffer number 2. Again,
the image is moved one pixel right.The
image is then copied to buffer number
3. This is repeated until all buffers
hold a copy of the image, and the copy
of the image that each buffer holds is
exactly the same as the buffer before,
except one pixel further to the right.

Now the original DEGAS screen is freed
as it is no longer needed, for we have
made 16 copies of the logo, each copy
shifted one pixel to the right further
than the copy before.

Imagine we now display all the copies,
in order, by displaying the first one,
then replacing it with the second, and
so on for all 15 copies. The resulting
effect would be that the image on the
screen would appear to move 16 pixels
to the right.

This concept is called 'pre-shifting',
the idea being that if you do all your
scrolling beforehand and store all the
results, you wont have to do it again,
thus saving a lot of processor time in
the main part of the program.

OK. Now we have 16 pre-shifted images
we can play with them.

-------------------------------------

All the above is performed within half
a second or so of loading the program.

Now lets talk about how to distort an
image.

The image is made up of 'scanlines'. A
scanline is a row of pixels. The image
in FWIBBLE is 96 scanlines deep,  each
scanline being 120 pixels wide. 

Note:
Because we needed to preshift the image
16 times, there is a blank area of 16
pixels on the right hand edge of it in
the DEGAS picture. If there wasnt, then
as we shifted it to the right each time
we would have lost the rightmost pixel.
[End of note]

---------------------------------------

OK. To actually distort our image, we
need to move the bottom line, and store
its new position. Then we move the next
line up, to the position the bottom line
was at before we moved it.

We move the bottom line again. We store
its new position. Then we move the next
line to the position that the bottom 
line was last at, and the 3rd line from
the bottom to the position that the 2nd
line was last at.
 
If you re-read the above couple of para
graphs a couple of times you should get
the idea. The concept is quite simple,
its just hard to describe.

Because there are 96 lines in the image
we need to be able to store the last 96
positions of the bottom line. It is the
bottom line that is the key to all this

How do we store its position?

We use 2 lists of numbers. Each list is
comprised of 96 numbers, one for each
line.

The position of any line can be stored
as follows.

Divide the x coordinate of the line by
16. This gives us two numbers. They are
the number of 16's that go into the X
coordinate, and the remainder. ie if
the X coordinate of the bottom line is
37 then the 2 numbers will be '2' and
'5'. ( 2 * 16 + 5)

We store the first number in one list,
and the second number in the other one.

-------

[ At this point I have a 5 minute break
  and chomp merrily on a sweet 'n sour
  pot noodle listening to the radio ! 

  And swigging lots of Coke!!!! ]

-------

OK. Now when we create the lists, we 
insert 96 default positions. These
determine where the initial image will
appear upon loading.

The way the screen is set up on the ST
means that if we have an address which
is the left hand edge of the screen, to
point to the pixel 16 pixels right from
that point, we need to add 8 to that
address.

Now, remember we pre-shifted the images
before we started. So to display a line
at, say, x coordinate 45 then we divide
45 by 16 ( = 2 remainder 13). OK. Now 
the 2 represents the number of 16 pixel
blocks from the left edge of the screen
and the 13 is the buffer number to take
that line from, because the 13th buffer
has an image that is shifted 13 pixels
to the right.

The lo-res screen is set up in such a
way that 1 line is 160 bytes across.
To display a line at coordinates 
95 down, 45 across for example, we
would first point to the screen. We
then point to the left hand enge of
the 95th line by adding (95*160) to
the screen address. Then we would
divide 45 by 16 to get 2 remainder 13.
2 is the number of 16 pixel blocks to
add to the line address we just got.
As 16 pixels = 8 bytes, we add 16 to
the previously calculated address - 
one '8' for each of the 16 pixel blocks.
Now lets call our current address 'A'.

As previously described, we now want to
use the 13th buffer, to get the extra
13 pixels from this address. So we
get the line from the 13th buffer, and
place it at address 'A'. This is how
the bottom line is moved to the current
mouse X coordinate.

Note: 
If we had not pre-shifted the images in
the buffers, we would have had to have
done some time-consuming shifting at 
this point. This is why pre-shifting is
so valuable.
[End of note]

Because we store the two numbers used
to define where the line is to be put,
the calculations to obtain those two
numbers only need to be done once
every time we draw the image. This is
because the bottom line has to have its
X coordinate converted to those 2 
numbers every time its drawn. The rest
of the lines are drawn using the 'old'
bottom line numbers placed in the lists
thus saving the time needed to re-
calculate them.

All the movement is done using two
screens. They are the LOGICAL screen 
and the PHYSICAL screen. What you are
seeing at any time on the monitor is
the PHYSICAL screen. The LOGICAL screen
is used to do all the drawing on, and
then it is swapped with the physical
screen, so that only the result of
all that drawing is seen. The old
PHYSICAL screen becomes the new logical
screen and vice versa. This is
repeated 50 times a second for nice
smooth graphics.

NOW we have all the tools we need to 
wibble freely. The following steps are
performed forever.

ON THE LOGICAL SCREEN:

1) Move the bottom line to the current
   X coordinate of the mouse

2) Move the two lists of 96 numbers
   along one place, so that the last
   number is lost.

3) From the current position of the 
   bottom line, obtain our two numbers
   as described above.

4) Place these numbers at the front 
   of the lists. 

5) Using the lists, place the other
   95 lines.

SWAP THE LOGICAL SCREEN AND THE 
PHYSICAL SCREEN.

6) Goto 1

Summary:
As this sequence is performed, a 
position of the bottom line is placed
at the front of the lists, and each
loop, it is moved down the lists until
it is finally lost off the end.
While it is moving along the lists, 
more positions are placed at the front
of the lists, and in turn are moved 
along the lists.

Because each line on the screen is
updated at every loop, according to
the lists (the 15th line from the
bottom for example is displayed at the
position defined by the 15th entries of
the two lists), as one position of the
bottom line is passed along the lists,
the lines above it will all in turn 
be placed at that position, thus 
creating a distorting image.

Coming up with the theory was the
hardest part of the whole thing. The
actual implementation was not too bad.
Of course it had to be written in
assembler - STOS or C wouldnt come
close.

-phew-

Disclaimer:
The above was all my own theory, but I
would think that most demos and other
programs which wibble use a similar
idea.

I do not claim that my method is 
perfect, but I deem it to be PDG. 
(Pretty Damn Good). If you could do
better, then do so. 

------

Possible improvement.

One idea I had was to make the centre
line the key line, as opposed to the 
bottom. This isnt really an improvement
but more of an alternative strategy.

ULTIMATE:
To make the Y movement of the mouse
define which line to be the leader.
I dont think I will get round to doing
it though. It involves throwing the
lists around as well as the image, as
well as changing the order of the
line updates.

Edd Deegan 11/12/91, when he should 
have been doing coursework.
:-)

PS: In about 2 months I will have the
most awesome MIDI peripheral EVER.
And to my knowledge NOONE else in the
whole world except Jean Michel Jarre
will have anything like it.

If it works, I might send it in as a
DIY guide to awesomeness for an ST
FORMAT hardware project. (Like their
sampler, 'cept I already had one!)

:-?


