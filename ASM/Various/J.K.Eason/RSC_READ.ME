Readme file for RSCTOASM.PRG 14/1/90
Bug fixes 15/7/90 - see later.

HISTORY.
========

  Being basically an assembler programmer, and not being keen on having
separate .RSC files cluttering up my disc space, I got very fed up with
hand coding resource data into the data area of my programs.
 I therefore decided to write a convertor which would take a resource
file, produced by a resource editor, and produce from it a text data
file which could be directly included in my program's source files.
 The result is RSCTOASM.PRG which I hereby release to the Public
Domain.

OPERATION.
==========

  Run RSCTOASM from the Desktop. The initial screen has a default button
'LOAD RSC FILE'. This will bring up your file selector and prompts for
you to chose a RSC file. The file is then loaded and takes you back to
the main screen where the filename, file length, and other information is
displayed.
  The selector buttons now read: 'CONVERT FILE', 'OPTION' and 'EXIT'
 
OPTION
------
  The convertor will produce icon and image data either in binary form:
  
	DC.W	%0001110001110001,%0000011111000001

or in hex:

	DC.W	$E39,$7C1

 This can be changed from the OPTIONS dialog. Default is Binary.
Binary form gives a very good idea of what the image or icon looks like,
but can produce MUCH larger files (and long lines of code).
 For example, if the NEODESK mono RSC file is converted, (a large RSC with
lots of icons and images) binary mode produces a file of about 170K while
hex mode uses under 90K.
 In both cases conversion takes about 2 seconds on this file.

CONVERT FILE
------------
  This selection produces the text file in a memory buffer and the selectors
then change to : 'SAVE DATA FILE', 'NEW FILE', and 'EXIT'
  The data file is always saved as '<original_name>.DTA' and this name is
now shown with the output file length.

SAVE FILE   will save the data file under the above name.
---------  
NEW FILE    will reset the program and go back to the original screen.
--------
  Selecting EXIT at any time from the main screen will exit to the desktop
(or calling program).

OUTPUT FILE FORMAT.
===================

  The first line in the output file starts with a label 'rsc_obs' defined
as a word containing one less than the number of objects in the resource.
  I have done this as I use the following code in all my programs to do
the rsrc_obfix() calls on each object, which are necessary to change the
object location and size fields (normally done by rsrc_load()):

rsc_fix	lea	aes_pblock,a0
	move.w	#$72,(a0)+
	move.w	#1,(a0)+
	move.w	#1,(a0)+
	move.w	#1,(a0)+
	clr.w	(a0)
	lea	form1,addrina
	move.w	rsc_obs,d5
fix_lp	move.w	d5,intina
	bsr	aes
	dbra	d5,fix_lp
	rts
	
  The rest of the file is laid out as follows:
  
  	trees
  	tedinfo_blocks
  	bit image_blocks	\
  	icon_blocks		|
  	image data		|
  	free image bit_blocks	|  (if any)
  	free image data		|
  	icon data		|
  	free strings/alerts	/
  	strings
  	
  Each tree start has a label either 'form1',2,3 etc. or 'menu1',2,3
depending on its type, and each object in the tree is numbered as an
offset from the start of that tree (*0*, *1*, etc.).
  Any objects which have the selectable bit of the ob_flags field set have
a 'flag1',2,3 etc. label pointing to the low byte of the ob_state field
unless the tree is a menu tree.
  I have not supported the indirect flag bit as I have never seen it used
and can find little information on how it works anyhow!
  Also, although a 'code1',2,3 label is produced, I have not supported
the g_progdef object type. If you want to use it it can be hand coded
easily.

  Free strings are either labelled 'f_str1',2,3 or 'alert1',2,3 depending
on whether the first character of the string is a '[' or not.
  
ALERTS and ERRORS.
==================

  On startup the program malloc's 250K workspace and shows an alert box if
this is not available. This is for the original RSC file, various pointer
tables and the final text file.
  When the file is loaded two checks are made to see if it is a standard
Resource file. If not you can either try again or exit the program.

  The program was written using Devpac from Hisoft and the Dialogs were
produced with a Resource editor and then converted to data using an early
version of the program itself.

  If this program turns your hard drive into a single sided floppy, I 
take no responsibility. I have tested it on as many RSRC files as I could
find and the only one which does not work (reported as not a RSRC File)
will also not load into my Resource editor.

Whoops! - Bug fixes.
====================
 The first version of the program dated January 1990 had two small bugs.

1:  Due to a cockup :^( the file selector bombs with TOS 1.4.
   I inadvertantly put the wrong value into the AES parameter block
   for the addrin array. TOS 1.4 doesn't like this!
    I have taken the opportunity of adding the extended fsel_ex_input
   to the July version, and all now works correctly.
2: When saving a .DTA file, the program checked whether the .RSC file
   already existed, not the .DTA file. The 'overwrite' alert was always
   shown - even if the .DTA file didn't already exist - now fixed.

  If anyone finds any _more_ bugs, or has any suggestions for improvements
I can be reached on :
  
	      Village BBS   01/464/2516  (UK)
	      CIX	    01/399/5252  (mail to jeason@compulink.co.uk)
	      Micro_Mola    01/316/7402  (UK)
	      
	      J.K.Eason
	       Flat 4,119,Brighton Road,
	        Sutton,
	         Surrey
	          SM2 5SN
	           U.K
	           Tel:(voice) 01/661/1946
	           
Source code is available if anyone really wants it! Mail me on the above
numbers.
