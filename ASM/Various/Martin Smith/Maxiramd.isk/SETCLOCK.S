* At last, a sensible clock setting program. By Martin Smith 1988
*
* Modified 03/05/88 to shut Tim up by providing an ESC abort without
* setting the time or writing the file.
*
* Program now tries to read\write LASTUSE.DAT in AUTO. If no AUTO
* folder it reads\writes at top level
*
* Modified 26/07/88 to display the time the clock is set to so the
* user can see if a quick abort will do. Shock horror, it will be more
* than 1K long!!
*
* Altered 29/07/88 to display the KBD clock and allow this to be copied
* to BDOS clock when TAB pressed. This is a good idea
*
* Bug removed writing KBD clock in reverse order - Sorry Andy !!!
*
SETTIME		EQU $16
GETTIME		EQU $17
SUPERX		EQU $26		TO SHUT UP THE KEYCLICK
SETPRT		EQU $21
GETREZ		EQU $04
SETCOLOUR	EQU $07

CONTERM		EQU $484	NEED TO TWIDDLE THIS BYTE

* SETS PRINTER TYPE. ADD TOGETHER 1 IF DAISY, 2 IF COLOUR, 4 IF 960 DOTS
* PER LINE (OTHERWISE 1280 DPL), 8 IF FINAL QUALITY, 16 IF RS232
* 32 IF SINGLE SHEET

PRWORD		EQU 0
*
C_CONOUT	EQU $2
C_RAWCIN	EQU $7
C_CONWS		EQU $9
T_GETDATE	EQU $2A
T_SETDATE	EQU $2B
T_GETTIME	EQU $2C
T_SETTIME	EQU $2D
F_CREATE	EQU $3C
F_OPEN		EQU $3D
F_CLOSE		EQU $3E
F_READ		EQU $3F
F_WRITE		EQU $40
P_TERM		EQU $4C
*
* MACRO DEFINITIONS TO ACCESS THE SO CALLED OPERATING SYSTEM
*
XBIOS 	MACRO
  	MOVE.W #\1,-(SP)
  	TRAP #14
  	IFLT \2-8
    	  ADDQ.W #\2,SP
  	ENDC
	IFGE \2-8
    	  ADDA.W #\2,SP
  	ENDC
	ENDM  
 
BDOS 	MACRO
  	MOVE.W #\1,-(SP)
  	TRAP #1
  	IFLT \2-8
    	  ADDQ.W #\2,SP
        ENDC
  	IFGE \2-8
    	  ADDA.W #\2,SP
  	ENDC
	ENDM  

ESC	EQU 27
TAB	EQU 9
BACKSP	EQU 8

TIND	EQU 17
TDL	EQU 38					LINE AND COLS FOR INPUT
TDC	EQU 40+16
TDOFF	EQU 30					OFFSET TO NEXT FIELD

START
	MOVE.W	#4,-(A7)
	TRAP	#14
	ADDQ.L	#2,A7
	CMP.W	#2,D0
	BEQ	SKIP
	MOVE.W	#1,-(A7)
	PEA	-1
	PEA	-1
	MOVE.W	#5,-(A7)
	TRAP	#14
	LEA	$C(A7),A7	
SKIP	
	MOVEQ #'E',D0
	BSR PUTESC				CLEAR SCREEN
	MOVEQ #0,D7
	BSR SETINV
	MOVEQ #'e',D0
	BSR PUTESC				SHOW CURSOR
	BSR SHUTUP				NO KEYCLICK
	BSR SETCTIM				DISPLAY CURRENT CLOCK SETTING
	BSR SETPRIN				SET PRINTER TYPE
	BSR READT				READ TIME FILE
	LEA SIGNON,A0
	BSR PUTSTR				PRINT MESSAGE
	CLR.L D7

TYPEIN	
	MOVE.L D7,D4
	MOVEQ #TDL,D6
	MOVEQ #TDC,D7				POSITION ON SCREEN
	LEA TIMEBUF,A5
	BSR GET6DIG
	CMPI.L #-2,D0				TAKE BIOS TIME ?
	BNE.S TESTQUI

	XBIOS GETTIME,6				GET BIOS TIME
	MOVE.W D0,D5				BREAK IT UP
	SWAP D0
	MOVE.W D0,D6				INTO DATE AND TIME
	MOVEQ #-1,D0				SUPPRESS WRITING OF FILE
	BRA SETD56

TESTQUI	TST.L D0				SETTING ABANDONED
	BMI PACKIN
	
	MOVE.L D4,D7
	CLR.L D5
	CLR.L D6

	MOVEQ #0,D4				START AT BUFFER BASE
	MOVEQ #23,D3				HOURS RANGE
	BSR DTOBIN
	BMI.S TYPEIN
	MOVE.W D0,D5
	MOVEQ #59,D3				MINUTES RANGE
	BSR DTOBIN
	BMI.S TYPEIN
	LSL.W #6,D5
	OR.W D0,D5
	BSR DTOBIN
	BMI.S TYPEIN
	LSL.W #5,D5
	LSR.W #1,D0
	OR.W D0,D5				NOW HAVE TIME WORD

	ADDQ.W #2,D4				WANT MONTH FIRST
	MOVEQ #12,D3
	BSR DTOBIN
	BMI.S TYPEIN
	BEQ.S TYPEIN
	MOVE.W D0,D6
	LEA MONTHS,A1
	MOVE.B -1(A1,D0.W),D3
	SUBQ.W #4,D4				BACK FOR DAY
	BSR DTOBIN
	BEQ.S TYPEIN
	BMI.S TYPEIN
	ADDQ.W #2,D4				DONE MONTH
	LSL.W #5,D6
	OR.W D0,D6
	MOVEQ #100,D3
	BSR DTOBIN
	BMI TYPEIN
	SUBI.W #80,D0			
	BMI TYPEIN				MUST BE > 1980
	LSL.W #8,D0
	LSL.W #1,D0
	OR.W D0,D6

* NOW SET THE DATE AND TIME

	MOVE.W D6,D1
	SWAP D1
	MOVE.W D5,D1
	MOVE.L D1,-(SP)
	XBIOS SETTIME,6
	MOVEQ #0,D0

SETD56	MOVE.L D0,-(SP)
	MOVE.W D6,-(SP)
	BDOS T_SETDATE,4
	MOVE.W D5,-(SP)
	BDOS T_SETTIME,4
	MOVE.L (SP)+,D0
	BMI.S PACKIN			NO WRITE IF TAB PRESSED

	MOVEQ #'f',D0
	BSR PUTESC				HIDE CURSOR

	BSR WRITET

PACKIN	MOVEQ #'f',D0
	BSR PUTESC

	MOVEQ #1,D7
	BSR SETINV

	CLR.W -(SP)				NO ERROR
        BDOS P_TERM,4				TERMINATE 


PUTESC	MOVE.W D0,-(SP) 			SEND AN ESCAPE CODE
	MOVE.W #ESC,-(SP)
	BDOS C_CONOUT,4
	BDOS C_CONOUT,4
	RTS

PUTSTR	MOVE.L A0,-(SP)				PRINT A STRING
	BDOS C_CONWS,6
	RTS

* WAIT FOR A KEY. D0 = RETURN. EITHER A DIGIT, BACKSPACE OR RETURN

GETKEY	BDOS C_RAWCIN,2				GET A KEY, NO ECHO
	ANDI.B #$FF,D0				MASK 8 BITS
	CMPI.B #$D,D0				RETURN
  	BEQ.S GOTKEY
	CMPI.B #TAB,D0
	BEQ.S GOTKEY
	CMPI.B #BACKSP,D0			BACKSPACE
	BEQ.S GOTKEY
	CMPI.B #ESC,D0
	BEQ.S GOTKEY
	CMPI.B #'0',D0				DIGIT ?
	BCS.S GETKEY
	CMPI.B #'9'+1,D0
	BCC.S GETKEY
GOTKEY	RTS

* PUT THE CURSOR AT ONE OF THE EDITABLE POSITIONS IN THE FIELD (D4.W)

SETCURS	MOVEQ #'Y',D0
	BSR PUTESC				MOVE CURSOR
	MOVE.W D6,-(SP)
	BDOS C_CONOUT,4				ROW ADDRESS
	LEA OFFSETS,A1
	MOVE.L D4,D3
	ADD.W D3,D3				TO GET A WORD
	MOVE.W 0(A1,D3),-(SP)			OFFSET
	ADD.W D7,(SP)				PLUS START COLUMN
	BDOS C_CONOUT,4				SENT OUT
	RTS

* GET UP TO 12 CHARACTERS INTO A BUFFER, OVERTYPING WHAT WAS THERE.
* RETURN ACCEPTS WHAT WAS IN THE BUFFER.
* D6 = ROW ADDRESS OF FIRST CHAR, D7 = COLUMN ADDRESS OF FIRST CHAR
* D4 = EDIT POSITION. A5=BASE OF BUFFER

GET6DIG	
EDITLP	BSR.S SETCURS				SET UP CURSOR
	BSR GETKEY				GET A KEYPRESS
	CMPI.B #$D,D0				RETURN PRESSED ?
	BEQ.S ENDEDIT
	CMPI.B #TAB,D0				ACCEPT BIOS TIME ?
	BNE.S NOTBIOS
	MOVEQ #-2,D0
	RTS

NOTBIOS	CMPI.B #ESC,D0				GIVE UP?
	BNE.S NOQUIT
	MOVEQ #-1,D0
	RTS

NOQUIT	CMPI.B #BACKSP,D0			DELETE LAST CHAR?
	BNE.S ADIGIT				OTHERWISE A DIGIT

	TST.W D4				AT FIRST POSITION?
	BEQ.S EDITLP				REJECT IF SO
	SUBQ.W #1,D4	
	BRA.S EDITLP

ADIGIT	CMPI.W #12,D4				TOO MANY CHARS ?
	BEQ.S EDITLP
	MOVE.W D0,-(SP)
	BDOS C_CONOUT,2				N.B. NOT ADJUSTED BY 4!
	MOVE.W (SP)+,D0
	MOVE.B D0,0(A5,D4.W)			STORE BYTE
	ADDQ.W #1,D4				MOVE CURSOR RIGHT
	BRA.S EDITLP
ENDEDIT	RTS

* GET THE 2 DIGITS AT EFFECTIVELY (A5,D4.W)+.W AND CONVERT THEM TO A
* WORD IN D0. RETURN -1 IF THIS NUMBER IS > D3.W

DTOBIN	CLR.L D0
	MOVE.B 0(A5,D4.W),D0			FIRST DIGIT
	SUBI.W #'0',D0				TO BINARY
	MULU #10,D0				X 10
	ADD.B  1(A5,D4.W),D0			PLUS SECOND DIGIT
	SUBI.W #'0',D0
	CMP.W D3,D0
	BLE.S INRANGE				ALLOWABLE
	MOVE.W #7,-(SP)
	BDOS C_CONOUT,4				FOUL NOISE
 	MOVEQ #-1,D0
INRANGE	ADDQ.W #2,D4
	TST.W D0
	RTS


BDOSD7 	CLR.W -(SP)
	MOVE.L A5,-(SP)
	MOVE.W D7,-(SP)
  	TRAP #1
    	ADDQ.W #8,SP
  	TST.W D0
	RTS  

* OPEN A FILE. D7 = CODE FOR F_OPEN OR F_CREATE
* D0.L = HANDLE OR -VE FOR ERROR. FIRST TRIES AUTO FOLDER, THEN TOP
* LEVEL DIRECTORY

OPENUP	LEA THEFILE,A5				ADDRESS OF NAME
	BSR.S BDOSD7 
	BPL.S OPENED
	LEA NODIR,A5
	BSR.S BDOSD7
OPENED	MOVE.L D0,D7
	RTS

* WRITE OUT THE ENTERED TIME TO A FILE

WRITET	MOVEQ #F_CREATE,D7			WRITING
	BSR.S OPENUP				CREATE FILE
	BMI.S CANTW
	PEA TIMEBUF				ADDR OF BUFFER
	MOVE.L #14,-(SP)			14 BYTES
	MOVE.W D7,-(SP)				HANDLE
	BDOS F_WRITE,12
CLOSEIT	MOVE.W D7,-(SP)
	BDOS F_CLOSE,4
CANTW	RTS

* READ IN THE TIME FROM THE FILE, IF THERE IS ONE

READT	MOVEQ #F_OPEN,D7			READING
	BSR.S OPENUP				OPEN FILE
	BMI.S CANTW
	PEA TIMEBUF
	MOVE.L #12,-(SP)			12 BYTES
	MOVE.W D7,-(SP)
	BDOS F_READ,12				READ THEM IN
	BSR.S CLOSEIT
	LEA TMTX,A1
	LEA TIMEBUF,A0
	BSR.S COPYT
	LEA DATX,A1

COPYT	MOVEQ #2,D7				THREE 2 DIGIT NUMBERS
COPY2	MOVE.B (A0)+,(A1)+			MAY NOT BE WORD
	MOVE.B (A0)+,(A1)+			ALIGNED
	ADDQ.L #1,A1				SKIP SEPARATOR
	DBRA D7,COPY2
	RTS

SHUTUP	PEA TURNOFF
	XBIOS SUPERX,6
	RTS
*
TURNOFF LEA CONTERM,A0
	BCLR #0,(A0)				TURN OFF KEYCLICK
	RTS	

SETPRIN	MOVE.W #PRWORD,-(SP)
	XBIOS SETPRT,4
	RTS

* IF IN MONO, SET THE SCREEN INVERSION BIT AS INDICATED

SETINV	XBIOS GETREZ,2				RUNNING MONO ?
	SUBQ.W #2,D0
	BNE.S NOTMONO

	MOVE.W D7,-(SP)				NEW COLOUR
	CLR.W -(SP)
	XBIOS SETCOLOUR,6			SET IT
NOTMONO	RTS

* SET UP THE STRINGS GIVING CURRENT DATE AND TIME

SETCTIM	XBIOS GETTIME,2
	LEA CURTIM,A1
	SWAP D0
	CLR.W D0
	SWAP D0
	MOVE.W D0,D1
	ROL.W #5,D0
	ANDI.W #31,D0
	BSR.S STUFDEC
	MOVE.W D1,D0
	ROR.W #5,D0
	ANDI.W #63,D0 
	BSR.S STUFDEC
	MOVE.W D1,D0
	ANDI.W #31,D0
	ADD.W D0,D0
	BSR.S STUFDEC

	XBIOS GETTIME,2
	CLR.W D0
	SWAP D0
	LEA CURDAT,A1
	MOVE.L D0,D1
	ANDI.W #31,D0
	BSR.S STUFDEC
	MOVE.L D1,D0
	ROR.W #5,D0
	ANDI.W #15,D0
	BSR.S STUFDEC
	MOVE.L D1,D0
	ROL.W #7,D0
DOYEAR	ANDI.W #127,D0
	ADDI.W #80,D0


* PRINT D0 AS 2 DECIMAL DIGITS AT (A1) AND THEN SKIP OVER A SEPARATOR

STUFDEC	MOVE.L D0,-(SP)
	ANDI.L #$FFFF,D0
	DIVU #10,D0
	BSR.S DECDIG
	MOVE.L (SP),D0
	BSR.S DECDIG
	ADDQ.L #1,A1
	MOVE.L (SP)+,D0
	RTS

DECDIG	MOVE.L D0,-(SP)
	ANDI.L #$FFFF,D0
	DIVU #10,D0
	SWAP D0
	ADDI.B #'0',D0
	MOVE.B D0,(A1)+
	MOVE.L (SP)+,D0
	RTS

	SECTION DATA

OFFSETS DC.W 0,1,3,4,6,7			A HACK
	DC.W TDOFF,TDOFF+1,TDOFF+3,TDOFF+4,TDOFF+6,TDOFF+7,TDOFF+8

MONTHS	DC.B 31,29,31,30,31,30
	DC.B 31,31,30,31,30,31

SIGNON	DC.B ESC,'Y',34,17+32
	DC.B 'Please set the system time and date by typing'

	DC.B ESC,'Y',35,18+32
	DC.B 'HH MM SS and DD MM YY. RETURN to set clock.'

	DC.B ESC,'Y',36,23+32
	DC.B 'ESC to abandon. (V1.23 MHS 1988)'

	DC.B ESC,'Y',38,TIND+32
	DC.B 'Time : '
TMTX	DC.B '__:__:__',32,32,32,32,32,32,32,32,32,32,32,32,32
	DC.B 32,32,'Date : ' 
DATX	DC.B '__/__/__',$d,$a

	DC.B ESC,'Y',42,18+32
	DC.B '(Current KBD clock is '
CURTIM	DC.B '__:__:__ on '
CURDAT	DC.B '__/__/__)'

	DC.B ESC,'Y',44,19+32
	DC.B 'Pressing TAB sets the time from KBD clock'
	DC.B 0

THEFILE DC.B '\AUTO'
NODIR	DC.B '\LASTUSE.DAT',0

	EVEN

TIMEBUF	DS.B 6
DATEBUF DS.B 6
	DC.B $D,$A

	EVEN