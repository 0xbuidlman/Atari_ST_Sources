SCC.PRG, ESCC.PRG, ST_ESCC.PRG
******************************

(The most important parts translated from German to English on 1994-01-09 
by Harun Scheutzow. I have no time for translating all. If anybody 
translates the remaining parts, I'm very interested in getting the result 
for including it in the next version of this package. My native language 
is German, I think a person whos native language is English would do a 
much better translation. Thanks! (Send only mails smaller than 16kbyte to 
my email address.))

These are drivers for the serial interfaces realized by a SCC or ESCC (eg 
IC Z8530, Am85C30, Z85230). They work together with DRVIN.PRG or an 
equivalent replacement. 1_README.TXT contains an introduction.


The general
-----------
I call only the Z85230 and the Am85C230A an "ESCC". These ICs have an 8 
byte receiver FIFO and a transmitter FIFO not smaller than 4 byte. An ESCC 
contains all functions of the SCC.

The configuration possibilities of the *SCC*.PRG differ a little bit.


Clock rate and baud rate
------------------------
A SCC can use different clock sources for the generation of baud rates. 
The mostly used clock source is its system clock PCLK. This PCLK is 8MHz 
(8000000Hz) in a normal (as delivered by Atari) MegaSTE, TT and Falcon. 
That is a nice number, but unsiutable for generation of the high standard 
baud rates. The high baud rates in MegaSTE/TT/Falcon are generated from 
other sources. My hardware ST_ESCC is clocked by 14745600Hz.

It is possible to modify the MegaSTE/TT/Falcon with a quarz oscillator and 
a bit wire to PCLK=14745600Hz (proposal of Franz Sirl). If only 115200Bd 
and 57600Bd on MODEM2 is needed, a more simple modification with one wire 
is possible. (## No time for description. If there is much interest, in a 
next version. ##)

The drivers detect automatically whether there is a PCLK clock frequency 
of 8MHz or 14745600Hz and display it rate in their installation message.

With a PCLK of 8Mhz are the following Rsconf-baud rates possible:
(old - new)
SERIAL2:
115200 - 150
 57600 - 134
 38400 - 110
MODEM2:
 38400 - 110
153600 -  75
 76800 -  50
On MegaSTE and Falcon (not on TT) additionally on MODEM2:
115200 - 150
 57600 - 134

With PCLK = 14745600Hz are possible on MODEM2 and SERIAL2:
old rate   new rate
 115200      150
  57600      134
  38400      110
 153600       75
  76800       50

If the GEMDOS-Fcntl TIOC?BAUD is used there is no problem at all because 
it provides the possible baud rates as "bit per second".

ST_ESCC contains ever an ESCC. MegaSTE/TT/Falcon contain only an ESCC if 
somebody changed this IC. The driver for SCC runs on the ESCC too, but the 
ESCC driver will not correctly run on a SCC.


SCC and ESCC
------------
Remember: I call only the Z85230 and the Am85C230A an "ESCC". ST_ESCC 
contains ever an ESCC. In the MegaSTE/TT/Falcon there is a SCC in the 
original state. To decrease the CPU load and to improve the data safety it 
is possible to insert an ESCC with PLCC-package. SCC and ESCC are 
pin-compatible enough.


SCC.PRG
-------
This is the driver for MODEM2 and SERIAL2 of MegaSTE and TT and for the 
only RS232 interface of the Falcon (signed with MODEM) drawn out by Atari. 
This "MODEM" of the Falcon is called MODEM2 in this text because of its 
similarity.

On the TT (and Falcon, if equipped with a speeder with FastRAM) *SCC*.PRG 
must not be loaded in the FastRAM. Otherwise problems (bombs, lost of 
characters, spurios behavior) could occur caused by a too fast access to 
the SCC. The drivers must be loaded into physical RAM, they must _not_ be 
loaded into virtual RAM.


ESCC.PRG
--------
See SCC.PRG. This driver is only for computers with a Z85230 or Am85C230. 
The SCC-drivers works with an ESCC too, but don't use the advantages of 
the ESCC. The ESCC-driver is very unsuitable for a SCC!


ST_ESCC.PRG
-----------
This driver is dedicated to my self developed hardware ST_ESCC which 
provides two additional fast serial interfaces on ST/STE/MegaST. 115200Bd 
run without problems on an 8MHz/68000 machine under TOS.


LAN-Support
-----------
(-- something untranslated --) (... manything)


Configuration
-------------
The configuration is done by using SETTER.TTP.

Because the explainations in the drivers are German I added an 
abbreviation to each point.

USE4C
This question appears only in the ESCC.PRG and ST_ESCC.PRG. Shall the 
receiver interrupt take place after four received characters? I call this 
mode which signals an interrupt after 4 characters 4ZI. 4ZI decreases the 
CPU load in the "RTS/CTS"- and "without"- handshake modes radically. 
"XON/XOFF"-handshake switches 4ZI automatically off because the number of 
necessary special actions would be greater than the use.
(-- something untranslated --)
Normally you should switch 4ZI on, answer with "Yes", because 4 free 
characters are sufficient and the profit by the reduced CPU load (the 
number of receiver interrupts is reduced to 1/4) is important. If you use 
unclean programs you should switch off 4ZI by answering "No". The programs 
show their uncleannes by delays: if you type in the terminal mode an the 
characters appear only if you typed 4 characters or more, unclean transfer 
protocols will hang some time (or for ever) mostly at the beginning or the 
end of transfer.

M2TT
The standard setting "u" should cause no problems because the TT is 
detected by the _MCH-cookie and then are on MODEM2 57600Bd and 115200Bd 
unavailable. "0" forces 57600/115200 to be provided. This is on TTs only 
senceful if you did the wire-modification. "1" forces 57600/115200 not to 
be provided. If your SCC is clocked by a PLCK of 14745600Hz this answer 
has no effect.

M1EMU:
The normal setting is "u". This should not cause any problems because of 
the automatic computer type detection using the _MCH-cookie. This function 
was added for the Falcon owners and users of old programms. The normal 
user can jump over the remaining text of this configuration point.

If M1EMU is switched on, no MFP*.PRG for MODEM1 shall be loaded because of 
collisions! The MODEM1-connector of the computer becomes unusable if M1EMU 
is active.

"u" activates M1EMU only on Falcons. "0" disables M1EMU on all computers. 
"1" activates M1EMU on all computers.

M1EMU, the MODEM1-emulator, replaces the BIOS-routines of channel 6 
(MODEM1) by the BIOS-routines of channel 7 (MODEM2). Additionally the 
actual BIOS-device (AUX) is set to 7 (for a bit more clean software).

On the Falcon
... programs become usable, which like to work only on AUX (channel0) or 
channel6. Because the RING-signal (of MODEM2) is attached there, were the 
RING of MODEM1 is on STs, such programs may detect RING direct in the 
hardware (MFP, Bit6). Instead of the DCD-signal (carrier detect) of MODEM1 
(as on ST) on Bit1 of the MFP lays the /ACK-input from the printer port 
(pin10), without any resistor, so that this signal may swing if there is 
no printer connected or the printer is off. If the printer is on, /ACK 
should be H most of the time, and these old programs interpret this as 
"NO CARRIER". Patch: Cut of the connection (wire from pin10) to the 
printer and connect pin10 with pin25 on the printer port. This signals 
these old programs always "CARRIER".

On MegaSTE/TT and ST_ESCC
... it becomes possible to run old programs, which access the signals RING 
and DCD direct and go over the BIOS for the other functions, on MODEM2 
too. These programs must not access the receiver/transmitter register 
directly. You have to connect the RING line and DCD line of MODEM1 
with the same of MODEM2. A full plugable solution may consist of 3 
SUB-D-connectors. RING is pin9 on a 9pin-SUB-D and pin22 on a 25pin-SUB-D. 
CDC is pin1 on a 9pin-SUB-D and pin8 on a 25pin-SUB-D.

LANBIT
(-- something untranslated --)
Use other values than No only on MegaSTE and TT!

LANEXT
(-- something untranslated --)

LAN_S2
(-- something untranslated --)

DTRM2
The DTR(data terminal ready)-signal of the MODEM2 interface is set at the 
start of this driver on time to the value given here. Yes corresponds to 
on and is equivalent to the behavior of TOS, No corresponds to off and 
prevents most modems from going off hook before a communication program 
has been started. Some programms which know nothing about these drivers 
and are made according to ataris developer documentation (which is 
catastrophic false), don't work with "No" (hang up during data 
transmission).

DTRS2:
The same as DTRM2 but for interface SERIAL2.

RBLM2:
Use 256 as a default. Here the receiver buffer length in byte of the 
MODEM2 interface can be set. It may be in the range of 65534 (maximum) to 
16 (minimum). Values out of this range are set to the default of 256. The 
water marks are set to 1/4 (low water mark) and 3/4 (high water mark).

TBLM2:
As RBLM2, but for the transmitter buffer length.

RBLS2:
As RBLM2, but for the interface SERIAL2.

TBLS2:
As RBLM2, but for the transmitter buffer length of interface SERIAL2.


For programmers: The IOREC
--------------------------
Hands off from computing the readable number of bytes by the IOREC! This 
method will fail if 4ZI is switched on in ESCC and ST_ESCC. Use the 
function Fcntl FIONREAD or Fread, both work correctly in these drivers. 
Bconstat works correctly too.

If the cookie RSVF exist and the RSVF-list contains the interface you can 
rely on the correctness of FIONREAD. The MiNT-user may destroy this, but 
he is responsible for that.

If the functions for modification of buffer length are not implemented, it 
is legal to change the buffer address, largeness and water marks in the 
IOREC. In this case, and only in this case, I see it as legal and 
necessary to reset the read and write pointer in the IOREC to zero.

It is possible, that in the future the IOREC is no longer used. Because of 
compatibility reasons a dead IOREC may remain. Who wants to program really 
clean should examine the return value of the XBIOS-function IOREC (or the 
pointer in the MAPTAB if you grab so direct in the memory). Is this value 
zero or odd there is no IOREC.


For programmers: Supported functions
------------------------------------
All drivers support the TIOCCTL(MAP/GET/SET)-functions as described in 
SERSOFST.TXT. May bee they don't support all signals and lines but that 
can be requested by TIOCCTLMAP. Which Fcntls are supported a program 
should determine by calling this functions.


Versions
--------
See German part.
1994-06-17  ATTENTION! Installation block adapted to MagiC3. Use together 
only drivers and DRVIN from 1994-06-17 or younger. Older versions will not 
run together with newer ones.
1994-07-11  added configuration facility LANBIT
1994-08-20  M2TT provides machine autodetect, LANBIT, LANEXT, LAN_S2 
new/changed, Byte4.Bit0 in RSVF
1994-08-27  configuration point PCLK replaced by automatic detection
1995-01-04  fast Bconmap parameter passing changed, ...
1995-01-15  XON/XOFF-receive error if rec.buffer length != tra.b.l removed
