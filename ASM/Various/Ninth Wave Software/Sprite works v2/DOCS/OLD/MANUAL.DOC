

                      Extension Kit Commands
                      ----------------------


The following is a detailed breakdown of all the new commands available. 
Each command is in a file with the extension .INL. These are intended to 
be  loaded  into  INLINE statements within GFA  basic.  To  include  the 
command  in  your program you simply type the line shown  in  the  SETUP 
field then position the cursor on the INLINE statement and press HELP. A 
menu  will be displayed from which you can load the .INL file  which  is 
stated in the FILE field. INLINEs are used because they form part of the 
program and so do not need to be loaded in,  if however you want to load 
them  in separate then you will need to reserve some memory to load  the 
command into to, eg

        INLINE text,200
        INLINE font%,760, will become ...

        DIM text|(200),font|(760)       ! Reserve memory
        text%=V:text|(0)                ! Define pointers
        font%=V:font|(0)
        BLOAD "TEXT.INL",text%          ! Load command
        BLOAD "FONT.DAT",font%          ! Load font

Note : You may have to use BLOAD as INLINE statements are limited to
       32000 bytes.

You  can of course rename the commands to whichever you want,  but  make 
sure that you remember that you've changed the name of the command. Some 
commands require a LONG word passed to them which is signified by a  L:. 
Make sure that you remember to include the L:  otherwise it is likely to 
cause the command to crash.

All  of  the  commands  come with an  example  file,  so  if  you  don't 
understand a command then learn by example !

Extension kit overview
----------------------

        Command                 Use

        change_map              Changes map location sprite
	chip_fx			Plays one of 75 sound chip effects
        clip_sprites            Set up clipping window for sprites
        cls                     Fast clear screen
        compress                Degas Elite screen compressor
        copy_line               Copies screen lines
        copy_screen             Fast screen copy
        counter_on              Installs frame counter
        counter_off             Removes frame counter
        decompress              Degas Elite decompressor
        depack                  Depacks ICE & AUTOMATION packers
        erase_sprites           Erase all sprites printed with print_sprites
	kopy			General purpose copy, usually for fonts
        locate                  Locates map address, use with print_map
        locate_flag             Locates map flag address
        mapper                  Print multi-directional scrolling maps
        mem_fill                Fills memory will bytes
        mouse_on                Installs new mouse controller
        mouse_off               Removes new mouse controller
        print_map               Print a map screen
        print_sprite            Print single 16x or 32x sprite
        print_sprites           Sprite handler, prints sprites in one go
        reset_palettes          Removes palette switching
        reverse_lines           Copies screen lines in reverse
        scroll_banner           Updates the banner scroll
        set_banner              Sets up banner scroll
        set_mouse               Sets new mouse x,y and max x,y
        set_palettes            Installs palette switching
        sam_convert             Converts between signed/unsigned samples
        sam_play                Play sample
        sam_stop                Stops sample player
        sam_wait                Waits for sample to end
        swap_sync               Waits a number of frames and swap screens
        text                    Print 40 column font
        text_64                 Print 64 columb font
        view_512                Displays spectrum 512 pictures
        v_mapper                Prints vertical scrolling maps
        wait                    Waits a number of frames

------------------------------------------------------------------------

FILE:   BANNER.INL
SETUP:  INLINE banner%,616
        set_banner%=banner%
        scroll_banner%=banner%+4
SYNTAX: ~C:set_banner%(width,height,L:text,L:font,L:screen)
        ~C:scroll_banner%()
ARGUMENTS:
width   (WORD) width of font, nearly always 16
height  (WORD) height of height, nearly always 16
text    (LONG) address of text to scroll
font    (LONG) address of font
screen  (LONG) screen address at which to print banner

Banner is used to create scroll texts, just like the ones you see in
demos. You can design a 16x16 font in the art package and then save it
using savefont.gfa. The speed of the scrolling is specified within
the scroll text, valid speed are 1,2,4 and 8 pixels. The width of the
font may be changed, but if the width is not divisable by the speed then
the scroll will be messed up.

Once the banner has been set each successive call to scroll_banner will
move the banner to the left. The scroll text will restart when it reaches
a zero byte. The command can be automatically called by placing it in
the STs VBL list (see example file). This will update the banner under
interrupt so it will even work as you load a file, great for games which
take a while to load.

------------------------------------------------------------------------

FILE:   CHIP_FX.INL
SETUP:  INLINE chip_fx%,2376
SYNTAX: ~C:chip_fx%(sound)
ARGUMENTS:
sound	(WORD) sound effect to play

Plays a sound chip effect, from 1 to 75. Playing sound 0 will turn off
the sound chip.

------------------------------------------------------------------------

FILE:   CLS.INL
SETUP:  INLINE cls%,102
SYNTAX: ~C:cls%(L:screen)
ARGUMENTS:
screen  (LONG) screen address

A fast clear screen command, clears 32000 bytes.

------------------------------------------------------------------------

FILE:   COMPRESS.INL
SETUP:  INLINE compress%,238
SYNTAX: ~C:compress%(L:screen,L:buffer)
ARGUMENTS:
screen  (LONG) pointer to screen address
buffer  (LONG) image compress to this address

This command is used to compress Degas Elite and IFF images which are 
32000 bytes long. The command returns the length of the compressed image 
by assigning a variable to the command, eg
        
        length%=C:compress%(L:XBIOS(2),L:buffer%)

See the PICS.GFA program for examples.

------------------------------------------------------------------------

FILE:   COPYLINE.INL
SETUP:  INLINE copy_line%,70
SYNTAX: ~C:copy_line%(L:source,L:destination,lines)
ARGUMENTS:
source      (LONG) address to copy from
destination (LONG) address to copy to
lines       (WORD) number of lines to copy

Allows you to copy a number of lines from one screen to another.

------------------------------------------------------------------------

FILE:   COPYSCRN.INL
SETUP:  INLINE copy_screen%,68
SYNTAX: ~C:copy_screen%(L:source,L:destination)
ARGUMENTS:
source      (LONG) address to copy from
destination (LONG) address to copy to

Fast copy of 32000 bytes from one screen to another.

------------------------------------------------------------------------

FILE:   DECOMP.INL
SETUP:  INLINE decompress%,114
SYNTAX: ~C:decompress%(L:buffer,L:screen)
ARGUMENTS:
buffer  (LONG) pointer to compress image
screen  (LONG) image decompressed to this address

This command is used to decompress Degas Elite and IFF images. It uses 
run length encoding and only works for images which are 32000 bytes 
long. See the PICS.GFA program for examples.

------------------------------------------------------------------------

FILE:   DEPACK.INL
SETUP:  INLINE depack%,394
SYNTAX: ~C:depack%(L:address)
ARGUMENTS:
address (LONG) pointer to packed code

Depacks code packed by ICE 2.4 or AUTOMATION 5.0.1 packers. The code
is depacked on the spot, and so a destination address is not needed.
Remember to allocate enough space for the depacked code !

------------------------------------------------------------------------

FILE:   KOPY.INL
SETUP:  INLINE kopy%,176
SYNTAX: ~C:kopy%(number,x,y,width,height,planes,mode,L:data,L:screen)
ARGUMENTS:
number	(WORD) block number to copy
x	(WORD) x pixel position
y	(WORD) y pixel position
width	(WORD) width of block in pixels
height	(WORD) height of block in pixels
planes	(WORD) number of bitplanes
mode	(WORD) 0=solid mode, 1=x-ray mode
data	(LONG) address of kopy data
screen	(LONG) screen address to print block

A general purpose copy routine that was specifically written to print
large fonts, 16x16 upwards. The block to copy can be made from 1 to 4
bitplanes and can print the blocks as solid or x-ray which makes
the background parts of the block transparent.

The x pixel position and the width must be word aligned (divisable by 16).

To save data in the kopy format use the basic program KOPYSAVE.GFA.
 
------------------------------------------------------------------------

FILE:   LOCATE.INL
SETUP:  INLINE locate_flag%,104
        change_map%=locate_flag%+4
SYNTAX: var%=C:locate_flag%(x,y,L:map,L:flags)
        ~C:change_map%(x,y,sprite,L:map)
ARGUMENTS:
x       (WORD) x coordinate
y       (WORD) y coordinate
sprite  (WORD) sprite block number
map     (LONG) address of map data
flags   (LONG) address of flag data
OUTPUTS:
var     (LONG) address of flag

These two commands are used in conjunction with the MAPPER and V_MAPPER
commands. 

Locate_flag is used to find the flag that relates to a 16x16 pixel map
block. It returns the address of the flag which can then be read with
PEEK or changed with POKE.

Change_map is used to change a graphic block within the map. Supply
the x and y coordinates, the new block number (between 0-number of
sprites as saved in DESIGN2.PRG) and the map data address.

See the TECHNO.DOC for more details.

------------------------------------------------------------------------

FILE:   MAPPER.INL
SETUP:  INLINE mapper%,738
SYNTAX: ~C:mapper%(x,y,width,height,L:map,L:gfx,L:screen)
ARGUMENTS:
x       (WORD) x position of map
y       (WORD) y position of map
width   (WORD) number of horizontal 16x16 blocks to print
height  (WORD) number of vertical 16x16 blocks to print
map     (LONG) pointer to map data
gfx     (LONG) pointer to map graphics
screen  (LONG) screen address to print map

This is a powerful command to print multi-directional scrolling maps.
Design your maps with DESIGN2.PRG and save the graphics with the
type set to 8-way. This uses huge amounts of memory so take note of
the total size in the map designer.

Only 4 pixel horizontal scrolling is possible, but with single pixel
vertical scrolling. 4 pixel scrolling does give fairly smooth results
if the frame rate keeps above 13 frames per second. (Magic Pockets uses
a similar map printer, and that's smooth enough !)

------------------------------------------------------------------------

FILE:   MEM_FILL.INL
SETUP:  INLINE mem_fill%,30
SYNTAX: ~C:mem_fill%(L:start,L:length,number)
ARGUMENTS:
start   (LONG) pointer to the address to start filling from
length  (LONG) number of bytes to fill
number  (BYTE) the memory area is filled with this value

Normally used to initialise areas of memory to zeros,
eg,
        ~C:mem_fill%(L:(V:tmp$),L:1024,0), will fill tmp$ with 1024
        zero bytes.

------------------------------------------------------------------------

FILE:   NEWMOUSE.INL
SETUP:  INLINE new_mouse%,426
        mouse_on%=new_mouse%
        mouse_off%=new_mouse%+4
        set_mouse%=new_mouse%+8
        mb%=new_mouse%+12
        mx%=new_mouse%+14
        my%=new_mouse%+16
SYNTAX: ~C:mouse_on%()
        ~C:mouse_off%()
        ~C:set_mouse%(x,y,xmax,ymax)
ARGUMENTS:
x       (WORD) start x position
y       (WORD) start y position
xmax    (WORD) maximum x position
ymax    (WORD) maximum y position

These commands are used to switch to a different mouse controller. 
Normally GFA uses relative position mode which causes programs to slow 
down when the mouse is moved. The new commands use absolute position 
mode and do not slow the program down. To use the commands simply use 
set_mouse and then mouse_on. The mouse x,y position and buttons can be 
read by DPEEK(mx%), DPEEK(my%) and DPEEK(mb%). Remember to use mouse_off 
before the program finishes to return to normal mouse control.

------------------------------------------------------------------------

FILE:   PALSWTCH.INL
SETUP:  INLINE set_palettes%,406
        reset_palettes%=set_palettesh%+4
SYNTAX: ~C:set_palettes%(line,L:palette1,L:palette2)
        ~C:reset_palettes%()
ARGUMENTS:
line     (WORD) line number to switch palettes
palette1 (LONG) address of first palette
palette2 (LONG) address of second palette

Allows 32 colours on screen at once by switching palettes on the
specified line. The first palette will be set from above the line and
the second palette will be set from and below the line.

It takes a line to actually change the palette so you will get flicker.
To avoid this you change the palette on a blank line, such as a gap
between the playing area and the scoring bar.

When the command has been used you must use reset_palettes to remove
the interrupt routine.

------------------------------------------------------------------------

FILE:   PRINTMAP.INL
SETUP:  INLINE print_map%,280
        locate%=print_map%+4
SYNTAX: ~C:print_map%(number,L:map,L:graphics,L:screen)
        var%=C:locate%(x,y,number,L:map)
ARGUMENTS:
number  (WORD) screen number
map     (LONG) pointer to map data
graphics(LONG) pointer to map graphics (16x16 sprites, no mask)
screen  (LONG) pointer to destination screen
OUTPUTS:
var     (LONG) returns an address of a map block

This command is for printing non-scrolling maps designed with the DESIGN1
program, from which the graphics and map data are saved. Unlike the
other two map printing commands this one can print any one of a number
of maps. Each map block contains its own flags from bit 10 to 15. See
TECHNO.DOC for more details.

Locate is used to find the address of a block so that its flags may be
obtained or the block graphic may be changed. As an address is returned
a variable must be assigned to it, ie var%=

-----------------------------------------------------------------------

FILE:   REVELINE.INL
SETUP:  INLINE reverse_lines%,82
SYNTAX: ~C:reverse_lines(L:source,L:destination,lines)
ARGUMENTS:
source      (LONG) address to copy from
destination (LONG) address to copy to
lines       (WORD) number of lines to copy

The command is the same as copy line except that the block will be
mirrored vertically.

-----------------------------------------------------------------------

FILE:   SAM_PLAY.INL
SETUP:  INLINE sam_play%,2744
        sam_stop%=sam_play%+4
        sam_wait%=sam_play%+8
        sam_convert%=sam_play%+12
SYNTAX: ~C:sam_play%(L:sample,L:length,speed,loop)
        ~C:sam_stop%()
        ~C:sam_wait%()
        ~C:sam_convert%(L:sample,L:length)
ARGUMENTS:
sample  (LONG) start address of sample
length  (LONG) length of sample
speed   (WORD) value of 0-5
loop    (WORD) 0=play once, 1=repeat sample

Sam_play is used to play samples. The first time the command is called 
the interrupt Timer A is set up, each successive call will only change 
the sample pointers without having to reinitialise Timer A. While a 
sample is playing the rest of the program will continue to run, but if 
you wish to halt the program until the sample has finished then use 
sam_wait. The speed value corresponds to the following sample speeds :

        0 - 2.46 kHz
        1 - 4.92 KHz
        2 - 7.68 KHz
        3 - 10.07 KHz
        4 - 12.01 KHz
        5 - 14.99 Khz

When the samples have been finished with or the program has finished 
then you must use sam_stop to stop the interrupt otherwise the program 
will be likely to crash on exit.

This sample player plays signed samples, if a sample sounds terrible on
playback it is probably an unsigned sample. Use sam_convert to convert 
from one format to the other.

This is the second version of this sample player, it uses less processor
time than the original and so gives more time for the processor to execute
your own code. It does have one disadvantage though, the routine will 
overshoot the end of the sample, from between 50 to 300 bytes. This may
result in the sample 'clicking' when it has finished. To solve the problem
you can either make sure that zeroes follow the sample, or tell the sample
player that the sample is a 100 bytes or so shorter in length.

-----------------------------------------------------------------------

FILE:   SPRITES.INL
SETUP:  INLINE sprites%,2490
        print_sprite%=sprites%
        print_sprites%=sprites%+4
        erase_sprites%=sprites%+8
        clip_sprites%=sprites%+12
SYNTAX: ~C:print_sprite%(frame,x,y,width,height,L:graphics,L:screen)
        ~C:print_sprites%(L:records,number,L:screen)
        ~C:erase_sprites%(L:records,number)
        ~C:clip_sprites%(xmin,ymin,xmax,ymax)
ARGUMENTS:
sprite  (WORD) sprite frame to print
x       (WORD) x coord to print sprite
y       (WORD) y coord to print sprite
width   (WORD) width of sprite, either 16 or 32
height  (WORD) height of sprite, between 1-48
graphics(LONG) address of sprite graphics
records (LONG) address of the sprite records, each are 26 bytes long
number  (WORD) number of sprites to print
screen  (LONG) the screen address at which the sprites are to be printed

The first command, print_sprite is for printing one sprite at a time. It
is print only and cannot be erased. It is used in particular when the
background screen is constantly redrawn, thus erasing the sprites. The
mapper command is a good example of this. As the area behind the sprite
is not saved it is slightly faster than the print_sprites command.

The second command, print_sprites is a complex sprite handler. It can
print all of the sprites in one go and handles the erasing of the sprites.
To use the command you must create a sprite record for each sprite which
is laid out as follows : 

Offset  Length  Name            Function
  0       W     Mode            0=no print, >0=print
  2       L     Graphics        Pointer to sprite graphics location
  6       W     Frame           Sprite frame number
  8       W     X               X coordinate of sprite
  10      W     Y               Y coordinate of sprite
  12      W     Width           0=16 pixels, 1=32 pixels
  14      W     Height          Height of sprite in pixels
  16      W     Size            Number of bytes for sprite graphics
  18      L     Buffer_1        Buffer area for sprite deletion
  22      L     Buffer_2        Buffer area for sprite deletion
Total 26 bytes

The command will print all sprites with a mode value other than zero. 
The size of a 16 width sprite is calculated from size=10*height and a 32 
width sprite is size=20*height. The buffer areas are very important and 
must be understood. When a sprite is printed the area behind the sprite 
is saved so that when the sprite is moved the area can be replaced. 
Sprites are printed on two workscreens using screen flipping to avoid 
any flicker, therefore each sprite needs a buffer for each screen. You 
must set up an area of memory that the sprite can use as a buffer and 
place the addresses in the Buffer_1 and Buffer_2 locations. The number 
of bytes required for a 16 width sprite are (16*height)+8 and for a 32 
width sprite (24*height)+8 per buffer.

Example: You are using three sprites, two 16x16 and one 32x48.

     A 16x16 sprite needs 2*((16*16)+8)=528 bytes.
     A 32x32 sprite needs 2*((24*32)+8)=1552 bytes

     Buffer area = (2*528)+1552
                 = 2608 bytes
     Using the procedures defined in SETUP.GFA, the setup 
     routine would be:

     ns|=3                         ! Number of sprites
     DIM records|(26*ns|)          ! Space for 3 sprite records
     records%=V:records|(0)        ! records%, pointer to records
     DIM buffer|(2608)             ! Area for sprite buffers
     buffer%=V:buffer|(0)          ! buffer%, pointer to buffer area
     setup(0,1,graphics16%,16,16)  ! Set sprite record  
     setup(1,1,graphics16%,16,16)
     setup(2,1,graphics32%,32,32)    

     (See TECHNO.DOC for more details)

NOTE:  It is not wise to alter the size of a sprite while it is being 
printed as the buffers will also change in size. You may only change the 
size if it is becoming smaller (this means that some buffer space is 
being wasted).

You can clip the sprites with the clip_sprites command. Supply the x and
y minimum and then the x and y maximum. The x minimum must be divisable
by 16 and x maximum must be divisable by 16 minus 1.

        ie, For full screen clipping

                ~C:clip_sprites%(0,0,319,199)

ADDITIONAL NOTE: The X coordinate of the sprite is the centre of the
sprite, therefore printing a 16x or a 32x sprite at x location 160 will
print them both centred on the screen. The Y coordinate in both cases is
the top of the sprite.

------------------------------------------------------------------------

FILE:   TEXT.INL
SETUP:  INLINE text%,200
SYNTAX: ~C:text%(x,y,length,colour,L:text,L:font,L:screen)
ARGUMENTS:
x       (WORD) x position 0-39
y       (WORD) y position 0-24
length  (WORD) length of text string
colour  (WORD) colour of font 0-15
text    (LONG) pointer to text string
font    (LONG) pointer to font data
screen  (LONG) pointer to font destination screen

This is a substitute for the PRINT command which is very very slow. This 
command is much faster and also allows you to have as many fonts as you 
like. If you want to design a new font you must design it on the 
FONTS_8.PC1 file. Draw it in the last colour (15) and then run the program 
SAVEFONT.GFA. You must design the characters from 32 to 126 which will
take up 760 bytes.

Example:
     
     INLINE text,200               ! Font command
     INLINE font%,760              ! Font graphics
     text$="Wow, wot'a sexy font"
     ~C:text%(10,10,LEN(text$),15,L:(V:text$),L:font%,L:XBIOS(2))

------------------------------------------------------------------------

FILE:   TEXT_64.INL
SETUP:  INLINE text_64%,258
SYNTAX: ~C:text_64%(x,y,length,L:text,L:font,L:screen)
ARGUMENTS:
x       (WORD) x position of text 0-319
y       (WORD) y position of text 0-199
length  (WORD) length of string
text    (LONG) pointer to text string
font    (LONG) pointer to font graphics
screen  (LONG) pointer to font destination screen

Aren't low res fonts disgusting ! This allows you to print 64 column 
text in low res. The font cannot be changed in colour, to do this you 
must redefine your own font on FONTS_8.PC1 (see TEXT.INL above). Save the
FONTS_8.PC1 palette and include this in your own program to make sure the
font is printed correctly.

Example:
     
     INLINE text_64%,258           ! 64 column font command
     INLINE font%,3040             ! Font graphics
     text$="Wow, wot'a sexy font"
     ~C:text_64%(10,10,LEN(text$),L:(V:text$),L:font%,L:XBIOS(2))

------------------------------------------------------------------------

FILE:   VIEW_512.INL
SETUP:  INLINE view_512%,606
SYNTAX: ~C:view_512%(L:picture,L:screen)
ARGUMENTS:
picture (LONG) pointer to the spectrum 512 screen
screen  (LONG) pointer to the screen address

This command is used to display uncompressed spectrum 512 (SPU) files. 
Simply give the address of the picture and the screen then press a key 
to exit.

Example:

     DIM picture|(51104)                  ! Buffer for picture
     picture%=V:picture|(0)               ! Address of buffer
     BLOAD "filename.SPU",picture%        ! Load picture into memory
     ~C:view_512%(L:picture%,L:XBIOS(2))  ! Display on current screen

------------------------------------------------------------------------

FILE:   V_MAPPER.INL
SETUP:  INLINE v_mapper%,338
SYNTAX: ~C:v_mapper%(x,y,width,height,L:map,L:gfx,L:screen)
ARGUMENTS:
x       (WORD) x position of map
y       (WORD) y position of map
width   (WORD) number of horizontal 16x16 blocks to print
height  (WORD) number of vertical 16x16 blocks to print
map     (LONG) pointer to map data
gfx     (LONG) pointer to map graphics
screen  (LONG) screen address to print map

To complement the multi-directional scroller, this command is for vertical
scrolling maps. It is ideal for vertical scrolling shoot-em ups. This
command can replace the older print_map command, although is does not
have the flags included within the map but must be created separately.

An x coordinate parameter has been included to give 16 pixel scrolling.
This can be used to give burst scrolling for a platform game as this
command is much faster than the mapper command and also uses a 1/7th
less graphic data ! (How about writing a Rick Dangerous style game !)

------------------------------------------------------------------------

FILE:   WAIT_VBI.INL
SETUP:  INLINE wvbi%,232
        counter_on%=wvbi%
        counter_off%=wvbi%+4
        wait%=wvbi%+8
        swap_sync%=wvbi%+12
SYNTAX: ~C:counter_on%()
        ~C:counter_off%()
        ~C:wait%(frames)
        ~C:swap_sync%(frames,L:logical,L:physical)
ARGUMENTS:
frames  (WORD) number of frames to wait for
logical (LONG) address of logical screen
physical(LONG) address of physical screen

Don't you just hate games that suddenly speed up when there's less 
action on the screen ? Well these commands are used to regulate the 
speed by waiting on the vertical blank interrupt until a counter reaches 
the required frame rate. Use counter_on at the start of the program to
set up a 50Hz counter. If you want a program to run at 50 fps then use
~C:wait%(0) which will wait for one VSYNC. If the program occasionally
runs over into 25 fps then you will notice the speed will jerk, so you
can then use ~C:wait%(1) to make the program always run at 25 fps. Most
games run at 25 or 17 frames per second so use values of 1 or 2 in
~C:wait%. Always use counter_off% at the end of your program to remove
the interrupt patch, otherwise the program could crash on exit.

If your program uses screen switching then use swap_sync to flip the
screens. The usual method of screen switching is to use the XBIOS
command : ~XBIOS(5,l:logical%,l:physical%,0), replace this line of your
program with the swap_sync command and it will time your programs
beautifully. The first parameter is used the same as the wait command,
0 for 50 fps, 1 for 25 fps, 2 for 17 fps, etc.

------------------------------------------------------------------------ 

Terry King (Copyright 1993) Ninth Wave Software
