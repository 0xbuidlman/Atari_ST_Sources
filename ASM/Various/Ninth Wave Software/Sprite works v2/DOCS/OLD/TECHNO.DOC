


                         Technical Manual
                         ----------------

          By T.A.King Copyright 1993 Ninth Wave Software
          ----------------------------------------------


This  document is intended to teach you how to get the  best  from 
GFA BASIC,  from using the extension kit to using GEMDOS and  your 
own INLINE commands.


     Contents                   Chapter

     The Basics                    1
     Getting Started               2
     Using Sprites                 3
     Using Maps                    4
     Using Samples                 5
     Using GEMDOS, And BIOS        6
     Writing Your Own Commands     7
     Using Commands In 68000       8

-------------------------------------------------------------------

THE BASICS                                                        1

Up until now I have taken it that you have understood most of  the 
commands  and example files,  but maybe I have taken too much  for 
granted.  Described here will be some of the essential things that 
you should know.

1.   There  are  four types of numerical variable in GFA  Basic  : 
     byte,  word,  long and real, each of which are signified by a 
     symbol which follows the variable.  NEVER use real numbers if 
     at  all possible as they are very slow.  Always stick to  the 
     other three types, a long variable (short for long word) is a 
     four byte integer and a word is a two byte integer.  A little 
     quirk  that you need to remember is that GFA always needs  to 
     handle minus numbers which limits the range of these numbers. 
     The  following shows the ranges and the symbols  that  should 
     follow the variable to signify what type they are.

     var       real number, no range
     var|      byte value, 0 to 255
     var&      word value, -32768 to +32767
     var%      long value, -2147483648 to +2147483647

     NOTE:  Although you would think that a variable assigned to a 
     DPEEK  would need a word (&),  if the value is  greater  then 
     +32767 it will not be treated as a minus number and so a long 
     (%) variable must be used.

2.   Reserving  memory can be achieved in three different  ways  : 
     malloc, strings and arrays. Malloc can be a pain to use as it 
     needs you to reserve memory at the start of the program  with 
     the  RESERVE command and to free the memory when the  program 
     is  finished.  My  favourite method  is define  an  array  of 
     bytes,  which  does  not need you to RESERVE  any  memory.

     NOTE:  Stay  clear  of  strings as I  have  experienced  many 
     compiling errors with using strings for reserving memory. The 
     problem  seems to occur when the program shifts  its  strings 
     around as part of memory management and so you will be  using 
     an area of memory which is not in the correct place.
     
     By array ...
     DIM buffer|(40000)       Reserve a 40000 BYTE (|) array

     Then  you must assign a pointer to the buffer which  will  of 
     course be a ???? variable. Yes, a long (%) variable. 

     To make the actual assignment you must use the VARPTR command 
     which  is  used  to find the address  that  the  buffer  area 
     starts.  The shorthand for the VARPTR command is always  used 
     which is written V:.

     For array ...
     buffer%=V:buffer|(0)     Assign to FIRST ELEMENT of array

3.   INLINE statements are commonly used to store the data  within 
     the program.  The advantage is that once compiled it provides 
     a  single program without the need to load any  extra  files. 
     The disadvantage is that the basic programs can become  quite 
     large.  NOTE: If saving the program as a list the INLINE data 
     WILL NOT BE SAVED,  and so must be reloaded once a program is 
     merged.

     If you do not want to use the INLINE, then define a space for 
     the  data  as described in (2) and BLOAD the  data  into  the 
     program.

     NOTE:  You  can load ANYTHING into an  INLINE  statement,  it 
     does'nt  have to be a .INL file.  In a number of the  example 
     files palette data is loaded into them.

4.   Remember that speed is very important,  so always use the MUL 
     ,  DIV, INC, DEC, ADD and SUB commands wherever you are using 
     integers.           

------------------------------------------------------------------

GETTING STARTED                                                  2

1) Setting up the screens

Most  of the time,  especially if you are writing a game you  will 
want  two workscreens.  These are printed on  alternativately  and 
switched  on  the VBL to avoid any flicker.  There  is  a  program 
called  SETUP.GFA  in the example folder which  sets  the  screens 
ready for use. The program is as follows :

     store_palette
     set_screens
     ON ERROR GOSUB reset
     ON BREAK GOSUB reset
     '
     ' Put your program here
     '
     reset
     '
     > PROCEDURE store_palette
     > PROCEDURE restore_palette
     > PROCEDURE set_screens
     > PROCEDURE swap_screens
     > PROCEDURE reset

This is the basis of any program that you write.  It first  stores 
the current palette and then sets up the two workscreens.  At  the 
end of the program you will need to reset the workscreens and  the 
palette  otherwise it may crash.  For this reason the program  may 
also crash when an error occurs or the program is broken into,  so 
ON ERROR and ON BREAK must be installed.  The crash occurs only if 
you  exit  your  program  when  the  current  physical  screen  is 
different from the one that started the program.

There  is also a program called INSTALL.GFA which has most of  the 
INLINE commands loaded ready to use.

To  regulate the speed of your program you must change  the  first 
parameter  of the two swap_sync commands within  the  swap_screens 
procedure.  The default is to simply switch the screen on the next 
VBL  but  it will often be necessary to use a value of 1 or  2  to 
make your program run at 25 or 17 fps.
 
NOTE:  When using swap_screens, the variables fore% and back% hold 
the addresses of the current foreground screen (physical) and  the 
background screen (logical).

2) Using the commands

GFA Basic does allow you to make new commands which do not need to 
be told whether parameters are words or long words.  Unfortunately 
these have to be linked at compile time, therefore you can not run 
the  commands  from the basic interpreter.  This  means  that  the 
commands  have  to  be loaded into  INLINE  statements.  The  dis-
advantage of this is that commands become 'messy' to use.

Take for example the mapper command, if this were a linked command 
it would be of the form :

     mapper(x&,y&,width&,height&,map%,gfx%,screen%)

But this command would only work once compiled,  however it  would 
not need the machine code routine loaded into an INLINE statement.

By  using  the INLINE statement the above command  is  transformed 
into the following:

     INLINE mapper%,738
     ~C:mapper%(x&,y&,width&,height&,L:map%,L:gfx%,L:screen%)

But there is a way to transform the commands into an easier  form. 
This is by defining a procedure which takes care of the long  word 
(L:)  definitions.  This also has the advantage of taking care  of 
the  parameters which do not change.  For the mapper  command  the 
only  parameters  which  change are the x,y  coordinates  and  the 
screen  address  (if  screen switching  is  used).  Therefore  the 
following procedure can be written :

     PROCEDURE mapper(VAR x&,y&,screen%)
       INLINE mapper%,738
       ~C:mapper%(x&,y&,20,12,L:map%,L:gfx%,L:screen%)
     RETURN

Now all you do when you want to print the map is to say,
mapper(x&,y&,screen%)  which is alot easier to remember  and  more 
tidy to write.  The VAR in the parameter line is used to tell  the 
procedure to use the variables passed to it and not to create  new 
ones.

For  more examples of this simplification check out  the  programs 
TEXT, TEXT_64 and KOPY in the examples folder.

3) Using interrupts

There  are  four commands which when executed  set  up  interrupts 
which allow the commands to be automatically called, these must be 
switched  off before the program exits.  These are the  new  mouse 
controller,  the sample player, the palette switcher and the frame 
counter.

Originally if the interrupt was switched off without being set  up 
the program would crash,  this has now been improved so that  they 
check  to see whether they have already been set  up.  This  means 
that  you  can  include all the interrupt removers  and  only  the 
interrupts which are running will be turned off.

This  allows  you to include the following lines  into  the  reset 
procedure (if the corresponding INLINEs have been loaded !) :

     PROCEDURE reset
        ~C:mouse_off%()             ! Switch off new mouse
        ~C:sam_stop%()              ! Stop sample player
        ~C:reset_palettes%()        ! Remove palette switching
        ~C:counter_off%()           ! Stop frame counter
        ' Rest of reset procedure
     RETURN

4) Printing with screen switching

One problem that you will notice with screen switching is that the 
computer  will  often  print/draw on the  wrong  screen.  Any  GEM 
command  such  as PRINT,  LINE,  DRAW,  GET or PUT will  take  the 
current  screen  from the location $44E which is part of  the  STs 
system variables.  Before you use any of these commands you should 
put  the  screen address into location $44E by using a  long  poke 
which must be in supervisor mode as it is in a restricted area  of 
memory.

Therefore  to print a box on the background screen you  would  use 
the following:

     SLPOKE $44e,back%
     BOX .......

In  the example RACER game the PBOX command is used to  print  the 
fuel  gauge  on  the  right hand side.  When  the  fuel  has  been 
replenished  the  fuel  gauge must be  redrawn  on  BOTH  screens, 
otherwise it will flicker between the old and new fuel levels each 
time the screen is switched.

In this case you should use the following :

     SLPOKE $44e,back%
     PBOX  .....              ! Draw on back screen
     SLPOKE $44e,fore%
     PBOX ......              ! And on current screen

-------------------------------------------------------------------

USING SPRITES                                                     3

There  are  two forms of printing sprites,  one is to  print  each 
sprite  in turn without saving the background and the other is  to 
print all the sprites in one go while handling the erasing of  the 
last printed sprites.

If  your game continually updates the background such as with  the 
mapper  commands  then  the  sprites will be  erased  by  the  map 
printing commands. This means that the sprites do not need to have 
the background saved and so each sprite can be printed  separately 
and do not need a sprite handler. If however the background is not 
continually updated then a sprite handler must be used.

1) Using the sprite handler

The sprite handler commands are the hardest to understand,  mainly 
because  there are so many parameters to the sprite  records.  The 
records  (one per sprite) are 26 bytes long and contain the  mode, 
graphics pointer,  frame,  x, y, width, height, size and two erase 
buffer pointers.  In the SPRITES.GFA example there are a number of 
procedures  to help with maintaining sprites (the same  procedures 
are also in SPRITES.LST).  These do not have to be used,  but  are 
provided to make your life alot easier when first using sprites.
  
setup_sprites

Call  this  at  the beginning of your program  to  initialise  the 
sprite records. You must define which sprites you are using inside 
this  procedure and also set the size of the erase buffer so  that 
all of the sprites can store they're erase buffers within it.

setup(number,mode,graphics,width,height)

This  is  the  routine which is called  within  the  setup_sprites 
procedure.  You supply the sprite number,  the mode,  which is the 
default  to  whether  the sprite is switched on  or  off  and  the 
address  of the sprite graphics.  This address will either be  the 
16x sprite bank or the 32x sprite bank.  The final two parameters, 
width   and  height  in  pixels  are  used  by  this  routine   to 
calculate how much of the erase buffer to use.

sprite_on(number)

Switches the sprite specified on.

sprite_off(number)

Switches the sprite specified off.

sprite(number,frame,x,y)

Sets the specified sprites frame and x/y coordinates.

get_xy(number)

Get  the sprites x and y coordinates.  The values are returned  in 
the variables xg% and yg%.

get_frame(number)

Returns the sprites frame number in the variable frame%.

clear_sprite(number)

If you change the background while printing then you must use this 
command  to  clear  the erase buffers otherwise  the  sprite  will 
replace the wrong graphics when erased.

When  you come to using the sprite handler commands you will  need 
to lay your program out in the following manner :

     REPEAT
        swap_screens
        '
        ' program control
        '
        ~C:erase_sprites(L:records%,number%)
        ~C:print_sprites(L:records%,number%,L:back%)
     UNTIL finished

This shows the main game loop,  the screen must be swapped  before 
the sprites are erased and printed otherwise the sprites will  not 
be correctly erased (try it and see !).

Note  :  You  must  have only ONE erase_sprites  command  and  ONE 
print_sprites command.

2) Non-erasable sprites

The  easiest sprites to use as they require no setting up at  all. 
Simple call the print_sprite command with the frame,  x, y, width, 
height, graphics address and screen address. These are used in the 
example games PLATFORM and RACER as the background is  continually 
redrawn, thus erasing the old sprites.

The print_sprite command is also faster than the sprite handler as 
the  handler  wastes  time  in saving  the  background  ready  for 
erasing.

You can set a clipping window for these sprites and for the sprite 
handler with the clip_sprites command.  Simply supply the  minimum 
x, y and the maximum x, y pixel coordinates. The minimum x must be 
divisable by 16 and the maximum x divisable by 16 minus 1.

     ie, For full screen clipping

     ~C:clip_sprites%(0,0,319,199)

------------------------------------------------------------------

USING MAPS                                                       4

1) NON-SCROLLING MAPS

The first map  designer allows  you to design  screens up to 20x12
made up of 16x16 sprites.  Each location of the screen is a 16 bit
word value, the top 6 bits are the flag bits and the lower 10 bits
are the sprite number. This theoretically allows you  up  to  4096 
sprites although the map designer will only take up to 720.

Non-scrolling  maps have the advantage of using relatively  little 
memory  and  are ideal when a large number of screens  are  needed 
within  a  map,  such as a puzzle game with each  screen  being  a 
level.

The  flag bits are used to give attributes to a map  location,  in 
the example game SLUG BLAST,  two bits are used to make a location 
solid  or semi-solid.  A solid location can be  walked  upon,  and 
cannot be walked into or fired through.  A semi-solid location can 
be walked upon and can also be walked and fired through.  How  you 
use the flag bits is completely up to you and you may want to  add 
attributes such as locations which are climbable, icy or killer.

Given an x and y pixel coordinate you will want to find out  which 
flags the corresponding map location has. To find the map location 
you can use the locate command,  when you supply the  x,y,  screen 
number and map data address it will return the address of the  map 
location that the x/y pixel lies on.

     Eg. var%=C:locate%(x,y,screen number,L:map)

The variable var% will now point to the location, this can then be 
read to find the sprite number and flags.

     Eg. bits%=DPEEK(var%)          ! Read map location
         sprite%=bits% AND $3FF     ! Leave bits 0-9, sprite
         flags%=bits% AND $FC00     ! Leave bits 10-15, flags

By  writing  back to this location with DPOKE you can  change  the 
sprite or the flags.

The  flag bits can be tested by using AND or BTST,  the  following 
example shows how these are used in the SLUG BLAST game.

     A solid location has bit 10 set ($400 hex). By suppling
     the x/y coords from below the players feet we can call
     locate to get the address of the map location then test
     bit 10 to see if the block is solid.

     var%=C:locate%(px&,py&+32,screen&,L:map%)
     flags%=DPEEK(var%) AND $FC00

     IF BTST(flags%,10)=-1
          STANDING ON SOLID
     ELSE
          NOT STANDING ON SOLID, ACTIVATE FALLING
     ENDIF

     alternatively,

     IF (flags% AND $400)>0
          STANDING ON SOLID
     ELSE
          NOT STANDING ON SOLID, ACTIVATE FALLING
     ENDIF
        
In  the game SLUG BLAST,  six map locations are calculated  around 
the  player  at the head,  middle and feet on the left  and  right 
sides.  Should  the player move slightly off the screen  then  the 
corresponding  values  are  set  to  zero  which  avoids   reading 
incorrect values.

The  example  game only calls the print_map command  whenever  the 
players enters a new screen,  for this reason the sprites must  be 
erased  by the sprite handler before they are  reprinted.  If  you 
wanted  background  animation,  say flickering  lights  or  moving 
platforms,  then you would change the corresponding sprite numbers 
of  the map locations you wish to animate and call  the  print_map 
command  each time around the game loop.  This will mean that  the 
whole  screen  will  be  reprinted,   thus  erasing  the  sprites, 
therefore the sprite handler is not needed.  As the sprite handler 
needs alot of setting up and memory reserved for the erase buffers 
it will be more advantageous to print each sprite separately using 
print_sprite which is faster than the print_sprites routine.

2) SCROLLING MAPS

Scrolling maps take up over twice the memory of non-scrolling maps 
but  have the advantage of being faster,  ideal for action  games. 
Unlike  the non-scrolling map,  only one map can be handled  at  a 
time  but  can be as large as memory may  permit.  Flags  are  not 
contained within the map data as all 16 bits are needed, therefore 
flags are given a separate file with each byte relating to a  four 
byte map location.  This allows 8 flag bits which can allow you to 
give attributes to each map location. In the racing game there are 
6 flag bits used :  Mud,  Flag, Gas, Finish, Killer and Marker and 
in the platform game only two flags are used : Solid and Token.

Maps  designed  with the second map designer can be  printed  with 
either  mapper or v_mapper commands.  The only difference is  that 
the mapper command needs a different set of pre-shifted  graphics. 
The  vertical map printer can actually give horizontal  scrolling, 
although it will be 16 pixel scrolling !  Far to jerky for scroll-
as-you-move  type  maps,  but ideal for burst scrolling  when  you 
reach the edge of the screen.

Both  commands will normally be called each time around  the  game 
loop  which  means that any sprites will continually  get  erased, 
therefore  no sprite handler is needed.  This also allows  you  to 
create background animation by changing the map location sprites.

You  can change the map location by using the  command  change_map 
which takes the x,y coordinate in pixels,  the new sprite and  the 
address of the map data.

  Example. At location 160,80 of a map is a graphic of a torch,
           sprite number 14. You want to make the torch flicker
           by changing the sprite number to 15.
 
           ~C:change_map%(160,80,15,L:map%)

In  the  example  game PLATFORM this command is  used  to  replace 
collectable  tokens with a piece of wall and in the game RACER  it 
is used to replace flags and gas by a piece of track.

To  find  the  flags for a given x and y  coordinate  the  command 
locate_flag  is  used.  Similar  to the locate  command  for  non-
scrolling maps,  it takes the x,y pixel coordinate, the address of 
the  map  data and the address of the flag data.  It  returns  the 
address of the map location flags which can be read or written too 
with PEEK or POKE.

  Example. The platform game checks the flag for a collectable
           token and if found resets the flag and changes the
           map location sprite to a wall. The TOKEN bit is the
           2nd flag bit.

     ' First get flag address of location near players waist   
     flag_location%=C:locate_flag%(px&,py&+24,L:map%,L:flags%)
     flags&=PEEK(flag_location%)              ! Read flags
     IF (flags& AND 2)>0                      ! Test TOKEN bit
         POKE flag_location%,0                ! Reset TOKEN bit
         ~C:change_map%(px&,py&+24,11,L:map%) ! Change into wall
     ENDIF

------------------------------------------------------------------

USING SAMPLES                                                    5

The sample playing command has the big advantage of using far less 
processor   time  than  most  other  sample   players,   but   the 
disadvantage of overshooting the end of the sample. The reason for 
this  is  that  the sample player only checks to  see  if  it  has 
finished the sample every 1/50th of a second. If you are playing a 
sample  at  7.5  KHz then the sample will have  played  150  bytes 
during  1/50th of a second.  If the sample does overshoot then  it 
will  probably 'click',  to avoid this you can pad out the end  of 
the  sample  with a number of zeroes (150 in  this  case).  For  a 
sample  being played at just 2.5 KHz then you should only need  an 
extra  50  bytes,  but  a sample at 15 KHz will  need  300  bytes. 
Alternatively  you can pass the sample length with the  number  of 
bytes already subtracted from it.

The  sample  player is for playing signed  samples,  if  a  sample 
sounds distorted it is probably an unsigned sample. If this is the 
case use the sam_convert command to change the sample,  this is  a 
non-destructive  convertion  and if called twice will  return  the 
sample to its original condition.

------------------------------------------------------------------

USING GEMDOS, AND BIOS                                           6

There  are many shortcuts and useful commands that are already  in 
the ST ROM.  These come in the form of the GEMDOS,  BIOS and XBIOS 
commands. Here is a list of some of the best commands :

status%=GEMDOS(11)

Returns  0  if  there is no character in  the  keyboard  processor 
buffer or -1 if a character is waiting. 
If  you are in a loop which reads the mouse and keyboard then  the 
mouse  will  flicker.  By using this command you  don't  read  the 
keyboard  until  the  command returns -1,  that  way  you  get  no 
flicker.
 
drive%=GEMDOS(25)

Returns the default drive, A=0, B=1 etc.

status%=BIOS(9,drive&)

Supply the drive number A=0,  B=1 and so on.  Retuns whether  disk 
has been changed. Status%=0 definitely change, 1=may have changed, 
2=definitely not changed.

drives%=BIOS(10)

Returns which drives are currently attached.  Bit 0 for drive A, 1 
for B, and so on. The bit is set if the drive is present.

mode%=BIOS(11,-1)

Reads the shift keys.
Bit  Value     Key
 0     1       Right shift key
 1     2       Left shift key
 2     4       Control key
 3     8       Alternate key
 4     16      Caps lock on
 5     32      Alt/Clr ~ right mouse button
 6     64      Alt/Ins ~ left mouse button
 7     128     Not used
By supplying a positive value when can set keys instead of reading 
them. Eg, to turn on caps lock use ~BIOS(11,16).

screen%=XBIOS(2)

Returns the current screen address.

res%=XBIOS(4)

Retuns screen resolution. 0=low res, 1=med res and 2=high res.

~XBIOS(5,L:logical%,L:physical%,res%)

Allows  you  to set the logical and physical screen  pointers  and 
also the resolution.

~XBIOS(6,L:palette%)

Sets the entire palette to that which is pointed to.

-------------------------------------------------------------------

WRITING YOUR OWN COMMANDS                                         7

There  are a number of ways in which GFA can call a  machine  code 
routine,  but  the  one that all my routines work with is  the  C: 
command.  You supply the routine address and a list of parameters, 
ie
     ~C:address%(x,y,z,L:x,L:y,L:z)

The parameters are words unless they are preceded by a L: in which 
case  they are a long word.  In the above example the stack  would 
look like this to the routine.

     (SP)      Return address (LONG)
     4(SP)     x (WORD)
     6(SP)     y (WORD)
     8(SP)     z (WORD)
     10(SP)    x (LONG)
     14(SP)    y (LONG)
     18(SP)    z (LONG)
 
It  is  always  best to save the registers  when  the  routine  is 
called,  only D0 does not need to be saved as it is used to return 
values  back  to GFA.  Therefore the start of your code  may  look 
like:

     MOVEM.L   D1-D7/A0-A6,-(SP)   Push 56 bytes on stack
     MOVE.W    60(SP),D0           Get first parameter
     MOVE.W    etc ....
     .
     .
     MOVE.L    (SP)+,D1-D7/A0-A6   Restore register
     RTS                           Return to GFA

When you have written the routine you must save it in binary,  NOT 
executable.  If you are using DEVPAC then enter the debugger after 
compiling and press 's' for save binary,  then enter the  filename 
and  then  enter 'text,data-1' for the save addresses  which  will 
automatically save the whole routine.     

------------------------------------------------------------------

USING COMMANDS WITH 68000                                        8

If  you are an assembler writer then you will want to know how  to 
use the routines in 68000. All of the routines can be found in the 
68000  directory and most are aptly commented.  The  routines  are 
used  exactly  as they are in GFA except that you  must  push  the 
arguments  onto the stack in reverse and correct the  stack  after 
calling the routine.  As an example,  take the text routine  which 
takes the arguments x,y,length,colour,L:text,L:font and  L:screen. 
This becomes :

     MOVE.L    #screen,-(SP)      pushed 4 bytes
     MOVE.L    #font,-(SP)               8 bytes
     MOVE.L    #text,-(SP)               12 bytes
     MOVE.W    #colour,-(SP)             14 bytes
     MOVE.W    #length,-(SP)             16 bytes
     MOVE.W    #y,-(SP)                  18 bytes
     MOVE.W    #x,-(SP)                  20 bytes
     BSR       text
     ADD.L     #20,SP             correct stack by adding 20 bytes

After  calling the routine only the register D0 may be  corrupted, 
all other registers will be unaltered.

