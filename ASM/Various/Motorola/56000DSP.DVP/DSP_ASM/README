
The following DSP tools should be found on this disk:

asm56000.ttp    assembler
        usage:  asm56000 -b ssilpbk.asm
           (Use asm56000 -b ssilpbk.asm > foo) to redirect output
            since scrolling text takes most of the assembly
            time.  Check foo for errors reported at end of file)
dsplnk.ttp  linker
        usage:  dsplnk -b ssilpbk.cln
cldlod.ttp  converts .cld files to .lod files
        usage:  cldlod ssilpbk.cld > ssilpbk.lod



Include in your 'C' files "dspbind.h" which is the DSP extension of
"osbind.h".




This is the new release disk for the DSP bios calls.


dsprev24.prg is the dspexec for rev 2 boards.

There are some trivial sample programs in the Sample directory.

Note that memdump.c uses a DSP subroutine that exists in SUBROUTINE
BSS only and is loaded up at boot time.  It was only used as a debugging
tool and is not guaranteed to be in memory when your process is running.
Memdump also uses one of the host vectors which is allocated for 
subroutines.  The first time that subroutine slot is used by someone,
the debug vector will vanish.
 
---------------------------------------------------------------------
Important notes on new DSP XBIOS functions:

The following important changes have been made to the DSP XBIOS 
functions.  These changes take effect with the revisions on or after 
rev 2.2 of the dspexec (dated 7/17/92).  You must now pass a buffer 
into the loadProg routine.  This buffer needs to be big enough to 
hold the DSP program which is generated by the routine.  The binary 
load format has been changed so that blocks of DSP code/data can be 
loaded more efficiently.  The new binary file contains a header of 3 
DSP words for every block of code/data that exists in your program.  
The header signifies the memory type, memory location and the size of 
the block to load.  For those who care, the memory type is encoded as 
follows:  0 = program memory; 1 = x memory; 2 = y memory; 3 = end of 
load.  The end of the load marker is never included as part of the 
binary file.  It is sent by the XBIOS along with the XBIOS and 
subroutine vector tables which are always transmitted to the DSP 
after the actual program has been downloaded.  From this information, 
one can compute the size of buffer needed to store the binary program 
using the following: 3 * (number of DSP words of code/data in your 
.lod file + (3 * number of blocks in your .lod file)).  Unlike 
before, DSP programs can now contain both internal and external 
initialized X and Y memory.  It is important to note that binary code 
produced by the LodtoBinary call cannot be immediately transferred 
into the ExecBoot routine since the ExecBoot call invokes the DSP's 
bootstrap loader and expects 512 words of unaltered program data.  
This is also true of the LoadSubroutine call.

Two new transfer routines have been added to send blocks of 16 bit 
signed words and 8 bit unsigned chars.

A routine has been added to check the status of the host port via the 
ISR register (see DSPNEW.TXT).

A routine has been added to allow the host to install its own vector 
to handle DSP interrupts (see DSPNEW1.TXT).
