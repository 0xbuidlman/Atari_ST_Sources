This file describe some changes and add on regarding DSP TOS routines
and calls.



status = Dsp_HStat()

char status;

Dsp_Hstat returns the value of the DSP's ISR port. This call enables
the calling process to know whether or not the host port is ready to
transmit or receive data. Please refer to the DSP56000 Users
manual for a complete description of the ISR register.




Dsp_BlkWords(data_in, size_in, data_out, size_out)
long *data_in;
long size_in;
long *data_out;
long size_out;

Dsp_BlkWords takes blocks of signed 16 bit words and sends them to the DSP.
Words are sign extended before they are transferred. In a similar
manner, Dsp_BlkWords takes the middle and low byte sent from the DSP
and places them into the 16 bits of the output array. Data_in and
Data_out are 16 bit integer arrays. Size_in and Size_out are long
values indicating the size of the arrays.





Dsp_BlkBytes(data_in, size_in, data_out, size_out)
long *data_in;
long size_in;
long *data_out;
long size_out;

Dsp_BlkBytes takes blocks of unsigned chars and sends them to the
DSP. These character values are not sign extended before being
transferred to the dsp. The low byte of the transfer register is plac
ed into the character array during output to the host. Data_in and
Data_out are 8 bit character  arrays. Size_in and Size_out are long
values indicating the size of the arrays.





Dsp_SetVectors(receiver, transmitter)
void (*receiver)();
long (*transmitter)();

Dsp_SetVectors allows the host process to install a function which is
called when an interrupt is received from the DSP. Receiver should
point to a function that the user wants called when the DSP ha s sent
data to the host process. Transmitter should point to the routine to
be called when the DSP interrupts requesting data. If transmitter
returns a non-zero long value, the XBIOS portion of the interrupt
handler will send the low three bytes of the longword to the DSP. No
data will be sent if the 32 bit long word which is returned is a 0.
(To send back a 0 DSP word, OR in a value into the high byte of the
returned value)  If either receiver or transmitter are 0L, the
corresponding interrupt will not be enabled. The host must remove
its interrupts by using the Dsp_RemoveInterrupts call



