	Atari Falconin konekieliohjelmointi 2 v1.27
        -------------------------------------------
             	   ½ Tero Yli-Koski

Prosessori ja sen k„skyt.

Perus asioita:

680x0-sarjan prosessorin sis„iset muuttujat, eli rekisterit ovat:
- 32-bittiset data-rekisterit d0,d1,d2,d3,d4,d5,d6,d7
- 32-bittiset osoite-rekisterit a0,a1,a2,a3,a4,a5,a6
- 32-bittiset pinorekisterit normaali a7 eli sp ja
	      supervisor pinorekisteri a7'
- 32-bittinen Ohjelma laskuri (program counter).
	      ( T„st„ n„kee miss„ kohti muistia ohjelma on menossa )
- 16-bittinen statusrekisteri, joka on jaettu 8-bittiseen k„ytt„j„n
	      tavuun ja 8 bittiseen systeemi tavuun.
	      
68030 sis„lt„„ viel„ monta 16-64 bittist„ rekisteri„, mutta niille
jokaiselle on annettu jo teht„v„ ja joita harva ohjelmoija voi
k„ytt„„ hyv„kseen.

Jotta ymm„rt„isimme prosessorin sis„ist„ toimintaa tutustumme
Statusrekisteriin. K„ytt„j„n tavu sislt„„ liput, joiden mukaan
ehdolliset hypyt tehd„„n. Liput p„ivitet„„n, joka k„skyn j„lkeen.

K„ytt„j„n tavu sis„lt„„: 
Bitti 0: Muistinumero lippu ( Carry flag ). T„m„ asettuu ykk”seksi,
	 kun yhteenlaskussa j„„ bittej„ yli tai v„hennyslaskussa
	 joudutaan lainaamaan.
Bitti 1: Ylivuoto lippu ( oVerflow flag ). T„m„ on sama, kuin C-lippu
	 paitsi V-lippu tuntee negatiiviset luvut.
Bitti 2: Nolla lippu ( Zero flag ). T„m„ asettuu ykk”seksi, kun
	 lasku toimituksen tulos on nolla. Z-lippu nousee my”s
	 kun vertailun tulos on my”nteinen.
Bitti 3: Miinusmerkki lippu ( Negative flag ). T„m„ asettuu, kun
	 on k„sitelty negatiivista lukua.
Bitti 4: Laajennus lippu ( eXtenssion flag ). T„m„ lippu on vain
	 Motorolan prosessoreissa. T„m„ k„ytt„ytyy suurimmaksi osaksi,
	 kuin C-lippu, mutta bittien kiertok„skyiss„ t„m„ tallentaa
	 muistibitin. T„m„n avulla voi tehd„, my”s 64-bittisi„
	 numeroita k„sittelevi„ ohjelmia helposti. Tosin 68030:st„
	 l”ytyy omiakin k„skyj„ 64-bittisten lukujen k„sittelyyn.
Bitit 5-7 ovat k„ytt„m„tt”mi„.
	  
Systeemi tavu sis„lt„„:
Bitit  8-10: Keskeytys taso. Keskeytys on sallittu, kun keskeytys taso
	     on pienempi, kuin keskeytt„j„n taso.
Bitti	 11: K„ytt„m„t”n.
Bitti	 12: Master/interrupt state. Vain MC68030. ???
Bitti	 13: Supervisor status. T„m„ m„„r„„ onko kone suojatussa-
	     tilassa vai ei. 0 on suojattu tila. 1 on supervisor tila.
Bitti    14: T0 bitti. K„ytet„„n harvoin. Yleens„ seuranta moodi
	     laitetaan seuraavalla bitill„.
Bitit	 15: Seuranta moodi ( Trace mode ). Jos bitti on 1, niin
	     joka k„skyn j„lkeen tulee keskeytys. T„t„ k„ytet„„n
	     esim. Devpacin mukana tulleessa debugissa.
	      	            
Supervisor tilassa on my”s 14 kontrolli rekisteri„, mutta tavallinen
ohjelmoija ei tarvitse niit„. 

K„skyt ja niiden k„ytt”:

Merkkien selityksi„:

BCD	: Bin„„ri koodattu desimaaliluku
PC	: Ohjelma laskuri ( Program Counter ).
SR	: Status rekisteri
CCR	: K„ytt„j„n tavu ( Condition Code Register ).
SP	: Pino osoitin ( Stack Pointer )  
cp	: co-prosessor
<ea>	: Vaikuttava osoite ( effective address )
<->	: Arvot vaihtavat paikkaa.
d	: Suunta ( direction ). L = vasempaan, R = oikeaan.
s	: Laskuk„skyiss„. S=etumerkillinen, U=etumerkit”n 
r	: Bittien siirron m„„r„,
cc	: Ehtokoodi ( condition code ). cc-kohtaan laitetaan
	joku seuraavista:
	Mnemonic|Ehto englanti/suomi/merkit	| Mit„ lippuja testaa
	---------------------------------------------------------------
	HI	| HIgher/suurempi/ > or <0 	| -C AND -Z ( - on NOT )
	LS	| Lower or Same/pienempi tai    | C OR Z
		| sama/ <= or <0		| 
	NE	| Not Equal/ei yht„suuri/ /=	| -Z
	EQ	| Equal/yht„suuri/ =		| Z
	GE	| Greater or Equal/suurempi tai | N AND V OR -N AND -V
		| yht„suuri/ => 		|
	GT	| Greater than/suurempi/ >	| N&V&-Z OR -N&-V&-Z
	LE	| Less or Equal/pienempi tai	| Z OR N&-V OR -N&V
		| uht„suuri/ <=			|
	LT	| Less Than/pienempi		| N AND -V OR -N AND V
	Seuraavat eiv„t anna oikeita vastauksia neg. luvuilla:
	VC	| oVerflow Clear/ei ylivuotoa/	| -V
		| V=0				|  
	VS	| oVerflow Set/ylivuoto/V=1	| V
	PL	| PLus/positiivinen/ +		| -N
	MI	| MInus/negatiivinen/ -		| N 		
	CC	| Carry Clear/muistibitti=0/C=0 | -C
	CS	| Carry Set/muistibitti=1/C=1	| C
	Seuraavat eiv„t toimi hyppy k„skyjen kanssa:
	T	| True/tosi			| 
	F	| False/ep„tosi			|
	
	esim. Basic:	IF D0<0 OR D0>7 THEN Label
	      Asm  :	CMP #7,D0
	      	   	BHI Label     				

Viel„ muutama ohje taulukon k„yt”st„:
- K„skyiss„ esim. ADD, ADDA, ADDI ovat asm. koodissa ADD, koska
  k„„nt„j„ osaa itse katsoa mik„ edell„ mainituista on oikea,
  jote ei tarvitse tressata turhaan. Q-p„„tteiset k„skyt ovat
  nopeampia ja pienempi„, kuin tavalliset, tosin huomaa n„iden
  k„skyjen rajoittuneisuus.
- Syntaksissa k„skyn j„lkeinen .X tarkoittaa, ett„
  siin„ kohti voi olla .B, .W tai .L. 
  Žl„ sekoita matikkaprosessorin .X:„„n !!!
- XNZVC-kohdassa on miten liput k„ytt„ytyv„t.
	-: Ei vaikutusta
	U: M„„rittelem„t”n (Undefinet), arvolla ei ole v„li„.
	>: Katso erikoism„„rittelyt.
		Erikoism„„rittelyss„: !  = NOT
				      Rm = Result operand
				      &  = AND
				      Sm = Source operand
				      Dm = Destination operand	 
	*: Normaali tilanne eli X=C, N=Rm, Z=!Rm&...&!R0
		
K„sky	| Operaatio			| Syntaksi		|XNZVC| Erikois m„„rittelyt
-----------------------------------------------------------------------------------------------------
ABCD	| l„hdeBCD+kohdeBCD+X=kohdeBCD	| ABCD.B Dy,Dx		|*U>U>| C=Desimal Carry
	| (Add Binary-Coded Desimal)	| ABCD.B -(Ay),-(Ax)	|     | Z=Z&!Rm&...&!R0
ADD	| l„hde+kohde=kohde		| ADD.X <ea>,Dn		|***>>| V=Sm&Dm&!Rm OR !Sm&!Dm&Rm
	| ( ADD binary )		| ADD.X Dn,<ea>		|     | C=Sm&Dm OR !Rm&Dm&Sm&!Rm
ADDA	| l„hde+kohde=kohde		| ADDA.X <ea>,An	|katso ADD
ADDI	| luku+kohde=kohde		| ADDI.X #<data>,<ea>   |katso ADD
ADDQ	| luku+kohde=kohde. Nopea.	| ADDQ.X #<1-8>,<ea>	|katso ADD 		 	 		 	 
ADDX	| l„hde+kohde+X=kohde		| ADDX.X Dy,DX		|**>>>| V ja C katso ADD
	| ( ADD binary with eXtended )	| ADDX.X -(Ay),-(Ay)	|     | Z katso ABCD
AND	| l„hde AND kohde=kohde		| AND.X <ea>,Dn		|-**00| 
	| ( logical AND )		| AND.X Dn,<ea>		|     |
ANDI	| luku AND kohde=kohde		| ANDI.X #<data>,<ea>	|-**00|
ANDI CCR| luku AND CCR=CCR		| ANDI.B #<data>,CCR	|>>>>>| CCR=<data> AND vanhaCCR 
ANDI SR	| if supervisor then		| ANDI.W #<data>,SR	|katso ANDI CCR
	|  luku AND SR=SR else TRAP	| esim. ANDI.W #$FF0F,SR|     |	
ASd	| Matemaattinen bittien siirto. | ASd.X Dx,Dy		|>**>>| -**00, kun py”ritys arvo on 0.
	| Nopea 2:n potensseilla jakami-| ASd.X #<1-8>,Dy	|     | ***>>, kun ASL. C=Dm-r+1 
	| seen ja kertomiseen.		| ASd.X <ea>		|     |   V=Dm&(!(Dm-1)OR...OR!(Dm-r))OR!Dm&(Dm-1or...+Dm-r)
	| ( Arithmetic Shift)		| esim. ASR.B,D0	|     | ***0>, kun ASR. C=Dr-1
Bcc	| Ehdollinen hyppy. ( Branch )	| Bcc.X <label> 	|-----|
	| if cc then goto <Label>	| esim. BEQ.L Alku	|     |
BCHG	| Testaa bitti ja muuta.	| BCHG.X Dn,<ea>	|-->--| Z=!Dm
	| ( Bit test and CHanGe)	| BCHG.X #<data>,<ea>	|     |
BCLR	| Testaa bitti ja nollaa.	| BCLR.X Dn,<ea>	|-->--| Z=!Dm
	| ( Bit test and CLeaR )	| BCLR.X #<data>,<ea>	|     |
BFCHG	| Testaa bitti jono ja muuta.	| BFCHG.X <ea>{offset:w}|->>00| N=Dm
	| ( Bit Field test and CHanGe )	| ei toimi 68000:ssa	|     | Z=!Dm&!(Dm-1)&...&!D0
BFCLR	| Testaa bitti jono ja nollaa.	| BFCLR.X <ea>{of:width}|katso BFCHG
	| ( Bit Field test and CLeaR )	| ei toimi 68000:ssa	|     |
BFEXTS	| Bittijono=etumerkillinen Dn.	| BFEXTS.X <ea>{o:wi},Dn|->>00| N=Sm
	| ( Bit Field EXTract Signed )	| ei toimi 68000:ssa	|     | Z=!Sm&!(Sm-1)&...&!S0
BFEXTU	| Bittijono=Dn			| BFEXTS.X <ea>{of:w},Dn|katso BFEXTS
	| ( Bit Field EXTract Unsigned) | ei toimi 68000:ssa	|     |
BFFFO	| Ensimm„isen 1-bitin paikka=Dn	| BFFFO.X <ea>{of:wi},Dn|katso BFEXTS
	| ( Bit Field Find First One)	| ei toimi 68000:ssa	|     |
BFINS	| Insertoi bitti jonoon.	| BFINS.X Dn,<ea>{of:wi}|katso BFCHG
	| ( Bit Field INSert )		| ei toimi 68000:ssa	|     |
BFSET	| Testaa bitti jono ja ykk”st„. | BFSET.X <ea>{offset:w}|katso BFCHG
	| ( Bit Field test and SET )	| ei toimi 68000:ssa	|     |
BFTST	| Testaa bitti jono.		| BFTST.X <ea>{of:width}|katso BFCHG
	| ( Bit Field TeST )		| ei toimi 68000:ssa	|     |
BKPT	| run BreaKPoint cycle, then	| BKPT #<data>		|-----|
	| Trap as illegal instruction.	| ei toimi 68000:ssa	|     |
BRA	| Sama kuin basicin goto.	| BRA.X	<label>		|-----|
	| ( BRanch Always )		| esim. BRA.S alku	|     |
BSET	| Testaa bitti ja muuta ykk”sex.| BSET.X Dn,<ea>	|-->--| Z=!Dn
	| ( Bit test and SET )		| BSET.X #<data>,<ea>	|     |
BSR	| Sama kuin basicin gosub.	| BSR.X <label>		|-----|
	| ( Branch to SubRoutine )	| esim BSR.S sprite	|     |
BTST	| Testaa bitti. ( Bit TeST )	| BTST.X Dn,<ea>	|-->--| Z=!Dn
	| If bit=0 then Z=1		| BTST.X #<data>,<ea>	|     |
CAS	| If Dc=<ea> then <ea>=Du	| CAS.X Dc,Du,<ea>	|-**>>| V=!Sm&Dm&!Rm OR Sm&!DM&Rm
	| ( Compare And copy Second )   | ei toimi 68000:ssa	|     | C=Sm&!Dm OR Rm&!Dm& OR Sm&Rm
CAS2	| Tupla CAS. ( kas, Tupla :-) )	| CAS2.X Dc1:Dc2,Du1:Du2|katso CAS			 					 		  
	| Ei toimi 68000:ssa. Huom! ->	| ,(Rn1):(Rn2)		|     |
CHK	| If Dn<0 or Dn> then TRAP	| CHK.W <ea>,Dn		|-*UUU|
	|(CHecK register against bounds)| CHK.L <ea>,Dn<-ei68000|     |
CHK2	| If Rn < lower bound or 	| CHK2.X <ea>,Rn	|-U>U>| Z=(R=LB) or (R=UB)
	| Rn > upper bound then TRAP 	| ei toimi 68000:ssa	|     | C=(LB<=UB)&((R<LB)or(R>UB))or(UB<LB)&(R>UB)&(R<LB)
CLR	| Nollaa. (CLeaR) MOVEQ.L #0,Dn	| CLR.X <ea>		|-**00|
	| on nopeampi, kuin CLR.L Dn	| esim. CLR.B A2	|     |
CMP	| Vertaa. ( CoMPare )		| CMP.X <ea>,Dn		|-**>>| V=!Sm&Dm&!Rm or Sm&!Dm&Rm
	| l„hde-kohde ->CCR		| esim. CMP.L A3,D3	|     | C=Sm&!Dm or Rm&!Dm or Sm&Rm
CMPA	| Vertaa. 			| CMPA.X <ea>,An	|katso CMP
CMPI	| CMP.L #"Pois",D3 on hyv„ idea.| CMPI.X #<data>,<ea>	|katso CMP
CMPM	| Vertaa muistin kanssa.	| CMPM.X (Ay)+,(Ax)+	|katso CMP
	| ( CoMPare with Memory )	| esim. CMPM.B (A0),(A1)|     |
CMP2	| Vertaa Rn<pienempi OR Rn>suu-	| CMP2.X <ea>,Rn	|katso CHK2
	| rempi ja aseta CCR		| esim CMP2.L A0,D3	|     |
cpBcc	| If cpcc then goto <Label>	| cpBcc.X <label>	|-----|
	|Hy”dyllinen matikkaprossun kans| esim. FBEQ.L alku	|     |
cpDBcc	| IF cpcc=ep„tosi then Dn=Dn-1: | cpDBcc.X Dn,<label>	|-----|
	|   If Dn ei ole -1 then <label>| esim. FDBEQ.L alku	|     |
cp???	| Laittaa k„skyn lis„prosesso-  | cp<k„skyst„ riippuva> |>>>>>| K„skyst„ riippuvainen
	\ rille.			| esim. FLOG10.W FP1	|     |
cpRESTORE| Palauttaa lis„prosessorin    | cpRESTORE <ea>	|>>>>>| Nollaa jos tila on nolla
	/  tilan. Supervisor k„sky.	| esim. FRESTORE A3	|     |
cpSAVE  | Tallentaa lis„prosessorin 	| cpSAVE <ea>		|-----|
	| tilan. Supervisor k„sky.	| esim. FSAVE A2	|     |
cpScc	| If cocc=tosi then ykk”six <ea>| cpScc.B <ea>		|-----|
	|  else kohde nollaksi.		| esim. FSEQ.B (A2)+	|     |
cpTRAPcc| If cpcc=tosi then TRAP.	| cpTRAPcc		|-----|
	| Osoituskoko on vain W ja L. 	| cpTRAPcc.X #<data>	|     |
DBcc	| V„henn„ jos ep„tosi ja hypp„„.| DBcc.W Dn,<label>	|-----|
	| (Decrement and Branch condit.)| DBHI.W D4,Alku	|     |
DIVs	| L„hde / kohde = kohde. Bittien| DIVs.W <ea>,Dn	|-**>0| V=Jakamis ylivuoto
	| m„„r„t: .W 32/16->jj16,tulos16| DIVs.L <ea>,Dn    <-|	|     |
	|.L 32/32->jj32. .L 64/32->32,32| DIVs.L <ea>,Dx:Dy <-|	|     |
DIVsL	| L„hde / kohde = kohde. Bittien| DIVsL.L <ea>,Dx:Dy<-| |katso DIVs
	| m„„r„: 32/32->jj„„nn32,tulos32| ei toimi 68000:ssa-/	|     |
EOR	| Looginen pois sulkeva tai.	| EOR.X Dn,<ea>		|-**00|
	| ( logical Exclusive OR )	| esim. EOR.L D7,-(A3)  |     |
EORI	| V„litt„m„n luvun EOR.		| EORI.X #<data>,<ea>	|-**00|
EORI CCR| L„hde EOR CCR->CCR		| EORI.B #<data>,CCR	|>>>>>| CCR=EOR vanhaCCR
EORI SR | L„hde EOR SR->SR.		| EORI.W #<data>,SR	|katso EORI CCR
	| Supervisor k„sky		| esim.EORI.W #$FF,SR	|     |
EXG	| Vaihtaa kahden rekisterin	| EXG.L Dx,Dy		|-----|
	| arvot kesken„„n. EXG.L D3,A3:n| EXG.L Ax,Ay		|     |
	| basic vastine on SWAP D3,A3.	| EXG.L Dx,Ay		|     |
	| Žl„ sekoita assyn SWAP k„skyyn| EXG.L Ay,Dx		|     |
EXT	| Laajentaa etumerkillisen luvun| EXT.W Dn		|-**00|
	| ( sign EXTended )		| EXT.L Dn		|     |
EXTB	| Laajentaa 8-bittisen -> 32-bit| EXTB.L Dn		|-**00|
	| ottaa huomioon neg. luvut.	| ei toimi 68000:ssa	|     |
ILLEGAL | Kone k„ytt„ytyy, kuin olisi	| ILLEGAL		|-----|
	| saanut laittoman k„skyn.	| esim. ILLEGAL     :-)	|     |
JMP	| Vastaa basicin goto-k„sky„.	| JMP <ea>		|-----|
	| Huomaa ero BRA-k„skyyn.	| esim. JMP (A2)	|     |
JSR	| Vastaa basicin gosub-k„sky„.	| JSR <ea>		|-----|
	| huomaa ero BSR-k„skyyn.	| esim. JSR (A0)	|     |
LEA	| <ea> -> An			| LEA.L <ea>,An		|-----|
	| ( Load Effective Address )	| esim. LEA.L #12,A7	|     |
LINK	| SP-4 -> SP : An -> (SP)	| LINK An,#<displacemen>|-----|
	| SP -> An, SP+displacemen -> SP| esin. LINK A5,#4	|     |
LSd	| Vieritt„„ bittej„. Ja lis„„	| LSd.X Dx,Dy		|>**0>| -**00, kun py”ritys arvo on 0
	| nollan tyhj„„n p„„h„n.	| LSd.X #<1-8>,Dy	|     | ***0>, kun LSR. C=Dr-1
	| ( Logical Shift )		| LSd.X <ea>		|     | -**0>, kun LSl. C=Dm-r+1
MOVE	| l„hde -> kohde. 		| MOVE.X <ea>,<ea>	|-**00|
	| ( MOVE ) :-)			| esim. MOVE.W #"T„",D2 |     |
MOVEA	| L„hde -> osoite rekisteriin.	| MOVEA.X <ea>,An	|-**00|
MOVEfCCR| CCR -> Kohde. Ei 68000.	| MOVE.B CCR,<ea>	|-----|
MOVEtCCR| L„hde -> CCR.	Ei 68000.	| MOVE.B <ea>,CCR	|L„hde|
MOVE fSR| SR -> Kohde.			| MOVE.W SR,<ea>	|-----|
        | Supervisor k„sky jos => 68010.| esim. MOVE.W SR,D0	|     |	
MOVE tSR| L„hde -> SR. Supervisor k„sky.| MOVE.W <ea>,SR	|-**00|
MOVE USP| USP->An tai An->USP. Supervis.| MOVE.L USP,An         |-----|
MOVEC	| Siirr„ Kontrolli rekisteri.Sv.| MOVEC.L Rx,Ry		|-----|
MOVEM	| Siirr„ monta rekisteri„ kerral|MOVEM.X rekisterit,<ea>|-----| 
MOVEP	| Siirt„ess„, muuttaa bittilukua| MOVEP.X Dx,(d.,Ay)	|-----|
MOVEQ	| Nopea siirt„j„. 		|MOVEQ.L #<-127-+127>,Dn|-**00|
MOVES	| ( MOVE address Space )	| MOVES.X Rn,<ea>	|-----|
	| Ei toimi 68000:ssa.		| MOVES.X <ea>,Rn	|     |
MULs	| L„hde x kohde = kohde. Bittien| MULs.W <ea>,Dn	|-**>0| V=Kertolasku ylivuoto
	| m„„r„t: .W 16x16->32, 	| MULs.L <ea>,Dn	|     |
	| .L 32x32->32  2..L 32x32->64	| MULs.L <ea>,Dx:Dy	|     |
NBCD	| BCD -> -BCD ( Negate Binary	| NBCD.B <ea>		|*U>U>| C=Decimaali lainaus
	| Coded Desimal with extend )	| esim. NBCD.B D1	|     | Z=Z&!Rm&...&!R0
NEG	| Vaihtaa luvun etumerkin.	| NEG.X <ea>		|***>>| V=Dm&Rm
	| ( NEGate )			| esim. NEG.L D6	|     |
NEGX	| 0 - kohde - x -> kohde.	| NEGX.X <ea>		|**>>>| C ja V, kuten NEG
	| ( NEGate with eXtend )	| esim. NEGX.W (A5)	|     | Z=Z&!Rm&...&!R0
NOP	| Tyhj„ k„sky.			| NOP			|-----|
	| ( No OPeration )		| esim. NOP        :-)	|     |
NOT	| NOT kohde = kohde.		| NOT.X <ea>		|-**00|
	| ( logical NOT )		| NOT.L (A3)+		|     |
OR	| L„hde OR kohde = kohde.	| OR.X <ea>,Dn		|-**00|
	| ( logical inclusive OR )	| OR.X Dn,<ea>		|     |
ORI	| V„litt„m„n luvun OR. 		| ORI.X #<data>,<ea>	|-**00|
ORI CCR | <data> OR CCR -> CCR.		| ORI.B #<data>,CCR	|>>>>>| CCR=OR vanhaCCR
ORI SR  | <data> OR SR -> SR. Supervisor| ORI.W #<data>,SR	|katso ORI CCR  
PACK	| PakkaamatonBCD+ad=paketoituBCD| PACK -(Ax),-(Ay),#<ad>|-----|
	| Ei toimi 68000:ssa.		| PACK Dx,Dy,#<ad>	|     |
PEA	| SP - 4 -> SP : <ea> -> (SP)	| PEA.L <ea>		|-----|
	| ( Push Effective Address )    | esim. PEA startadd	|     |	
PFLUSH	| Poistaa MMU:n osoitek„„nt„j„n	| PFLUSH (An)		|-----|
	| v„limuistin sis„ll”n. Supervi-| PFLUSHN (An)		|     |
	| sor-k„sky. T„m„ ja kolme seu-	| PFLUSHA		|     |
	| raavaa k„sky„ ei toimi 68000. | PFLUSHAN		|     |
PLOAD	| Sy”tt„„ tavaraa MMU:n osoite-	| PLOADR <funccode>,<ea>|-----|
	| k„„nt„j„n v„limuisiin. SuperV.| PLOADW <funccode>,<ea>|     |
PMOVE	| Siirt„„ tavaraa MMU:n rekiste-| PMOVE MRn,<ea>	|-----|
	| rien ja muun koneen v„lill„.  | PMOVE <ea>,MRn	|     |
	| Supervisor-k„sky. 		| PMOVEFD <ea>,MRn	|     |
PTEST	| Testaa osoitteen ja laittaa   | PTESTR (An)		|-----|
	| tuloksen MMU:n SRekisteriin.SV| PTESTW (An) 		|     |
RESET	| L„hett„„ reset-signaalin.	| RESET			|-----|
	| ( RESET external devices )	| esim. DC.W $4E70  :-) |     |
ROd	| Vieritt„„ bittej„. Tyhj„lle   | ROd.X Rx,Dn		|-**0>| C=0, kun py”ritys arvo on 0
	| paikalle tulee bitti toisesta	| ROd.X #<data>,Dy	|     | C=Dm-r+1, kun ROL
	| p„„st„. ( ROtate )		| ROd.X <ea> 		|     | C=Dr-1, kun ROR
ROXd	| Kuten ROd, mutta k„ytt„en 	| ROXd.X Dx,Dy		|>**0>| -**0>, kun py”ritys arvo on 0. C=X
	| X-lippua v„lipuskurina.	| ROXd.X #<data>,<ea>	|     | ***0>, kun ROXL. C=dm-r+1 
	| ( ROtate with eXtended )	| ROXd.X <ea>		|     | ***0>, kun ROXR. C=Dr-1
RTD	| (SP) -> PC : SP + 4 + dis ->SP| RTD #<dis>		|-----|
	| (ReTurn and Deallocate param.)| esim. RTD #4		|     |
RTE	| Return TRAPist„ tai vastaavas-| RTE			|>>>>>| Liput muuttuvat sen mukaan, mit„ pinosta l”ytyy
	| ta.SuV.(ReTurn from Exception)| esim. RTE         :-) |     |
RTR	| Return + CCR palautus pinosta.| RTR			|Katso RTE
	| ( ReTurn and Restore ccr )	| esim. RTR         B-) |     |
RTS	| Vastaa basicin returnia.      | RTS			|-----|
	| ( ReTurn from Subroutine )	| esim. RTS	    D-) |     |
SBCD	| L„hdeBCD-kohdeBCD-X=kohdeBCD  | SBCD.B Dx,DY		|*U>U>| C=Desimaali lainaus
	| ( Substract BCD with extend ) | SBCD.B -(Ax),-(Ay)	|     | Z=Z&!Rm&...&!R0
Scc	|if cc then kaikki 1 else kaik.0| Scc.B <ea>		|-----|
	| ( Set according to condition )| esim. SHI.B (A6)	|     |
STOP	| <data> -> SR : STOP PC:lis„ys | STOP #<data>		|>>>>>| Riippuu seuraavasta k„skyst„.
	| Jatkaa keskeytyksen j„lkeen.SV| esim. STOP #$3100	|     |
SUB	| L„hde-kohde=kohde		| SUB.X <ea>,Dn		|***>>| V=!Sm&Dm&!Rm OR Sm&!Dm&Rm
	| (SUBtract binary )		| SUB.X Dn,<ea>		|     | C=Sm&!Dm OR Rm&!Dm OR Sm&Rm
SUBA	| V„henn„ osoiterekisterista.	| SUBA.X <ea>,An	|katso SUB
SUBI	| V„lit”n v„hennys.		| SUBI.X #<data>,<ea>	|katso SUB
SUBQ	| Nopea v„hennys.		| SUBQ.X #<1-8>,<ea>	|katso SUB
SUBX	| V„henn„ X-lipun kanssa.	| SUBX.X Dx,Dy		|**>>>| V ja C kuten SUB
	| ( SUBtract with eXtend )	| SUBX.X -(Ax),-(Ay)	|     | Z=Z&!Rm&...&!R0
SWAP	| Vaihda rekisterin ala- ja yl„-| SWAP.W Dn		|-**00|
	| osa kesken„„n.		| esim SWAP.W D0	|     |
TAS	| Testaa tavun ja kohteen 7bit=1| TAS.B <ea>		|-**00|
	| ( Test And Set always bit 7 )	| esim. TAS.B D7	|     |
TRAP	| T„t„ kautta Atarissa tehd„„n  | TRAP #<vector>	|-----|
	| k„ytt”j„rjestelm„ kutsut.	|			|     |
TRAPcc	| If cc then TRAP. TRAP	k„skyis-| TRAPcc		|-----|
	| t„ lis„„ tarvittaessa. Huoli- | TRAPcc.W #<data>	|     |
	| matonk„ytt” -> buginen koodi. | TRAPcc.L #<data>      |     |
TRAPV	| If V-lippu=1 then TRAP	| TRAPV			|-----|
	| ( TRAP on oVerflow )		| esim. TRAPV	    *-) |     |
TST	|S„„t„„ CCR:n testattavan mukaan| TST.X <ea>		|-**00|
	| ( TeST a data )		| esim. TST.L D0	|     |
UNLK	| An ->SP: (SP) -> An: SP+4->SP | UNLK An		|-----|
	| ( UNLinK )			| esim. UNLK A7		|     |
UNPK	| PakattuBCD+a ->PakkaamatonBCD |UNPACK -(Ax),-(Ay),#<a>|-----|
	| Ei toimi 68000:ssa		| UNPACK Dx,Dy,#<a>	|     |
------------------------------------------------------------------------------	

Osoitusmuodot:

Motorolan prosessorissa on monipuoliset osoitustavat, se miss„
muissa prosessoreissa joutuu tekem„„n monta k„sky„, niin 680x0:ssa
p„rj„„ yhdell„. Tosin kaikki osoitustavat eiv„t onnista kaikissa
k„skyiss„. JA MUISTA #-MERKKI, kun tarkoitat lukua etk„ osoitetta.

Lista osoitusmuodoista:
	Merkkien selityksi„:
	Rn  	- Data tai osoiterekisteri.
	PC  	- Ohjelmalaskuri ( Program Counter )
	d8  	- 8 bittinen luku
	d16 	- 16 bittinen luku	
	bd	- Base displacement: etumerkillinen 32bit-luku
	od	- Outer displacement: etumerkillinen 32bit-luku
	scale 	- 2,4 tai 8	
Osoitustapa		|Syntaksi	| Esimerkki		|Basic vastine	
------------------------------------------------------------------------------
Suora			| Dn		| MOVE.L A2,D0		| D0=A2
			| An		|			|			
V„lit”n			| #<data>	| MOVE.L #6,D5		| D5=6
			|		|			|
Absoluuttinen		| <osoite>	| MOVE.L 12,D3		| D3=PEEK(12)
			|		|			|
Ep„suora		| (An)		| MOVE.L (A2),-(sp)	| sp=sp-4:
			| (An)+		|			| POKE(sp),PEEK(A2)
			| -(An)		| MOVE.L (760,A4),(sp)+	| POKE(sp),PEEK(A4+760):
			| (d16,An)	|			| sp=sp+4
Ep„suora indexill„	| (d8,An,Rn)	| MOVE.L (12,A2,D2.W),A5| A5=PEEK(12+A7+D2)  
			| (bd,An,Rn)	|			 \
Ep„suora muistiin	|([bd,An],Rn,od)|MOVE.L([4,A2],D2.B,10),A3| A3=PEEK(PEEK(4+A2)+D2+10) 
			|		|			  |
			|([bd,An,Rn],od)|MOVE.L([8,A4,A3.L],98),A6| A4=PEEK(PEEK(8+A4+A3)+98)
			|		|			 / 
Suhteellinen siirrolla	| (d16,PC)	| MOVE.L ($1000,PC),(A7)| POKE(A7),PEEK($1000+PC)
			|		|			|			
Suhteellinen indeksill„ | (d8,PC,Rn)	| MOVE.L (12,PC,D2.W),A5| A5=PEEK(12+PC+D2)
			| (bd,PC,Rn)	|			|
Suhteellinen muistiin	|([bd,PC],Rn,od)|Katso Ep„suora muistiin|
			|([bd,PC,Rn],od)|			|
Skaalaus		|(An,Rn*scale)	| MOVE.W (A5,A6.l*2),A4 | A4=PEEK(A5+(A6*2))			
			|(d8,An,Rn*scal)|			|

Skaalaus toimii oikeastaan l„hes jokaisen osoitusmuodon kanssa;
skaalaja tulee aina viimmeisen rekisterin per„„n.
Skaalaus on k„tev„ taulukoiden k„sittelyss„:

Taulukon lukujen koko| Skaalaus
---------------------+---------
8-bit 		     | ei
16-bit		     | 2
32-bit		     | 4	
64-bit		     | 8  

Eli skaalaus numeron saa suoraan taulukon luvun viemien tavujen m„„r„st„.

Kaikkia osoitus muotoja kannattaa tarpeen mukaan kokeilla, sill„
kyll„ se assembler k„„nt„j„ kertoo, jos kyseist„ osoitusmuotoa ei ole.

Pino:
----

Koska rekistereit„ ei ole koskaan tarpeeksi ja suoraan muistiin kirjoit-
taminen on liian hidasta, niin on keksitty pino. Pinossa on p„„llekk„in
lukuja. Viimmeiseksi laitettu luku menee alimmaiseksi ja alimmainen
otetaan ensiksi pinosta. Siis pino kasvaa alasp„in muistissa.
Pinoa k„ytet„„n yleens„ k„ytt”j„rjestelm„n kutsujen k„yt”ss„ ja
paluuosoitteiden tallennukseen. 

Pinoon laitto ( Push ): MOVE.X	l„hde,-(sp)
Pinosta otto ( Pop )  : MOVE.X	(sp)+,kohde
X on joko w tai l.

Joku Z80:ll„ tai 80x86:lla ohjelmoinut voi manata, ett„ ompas monimutkaista.
Mutta n„ill„ prosessoreilla ei pystykk„„n monipuoliseen pinon-
k„sittelyyn. Motorolan prosessorissa pino-osoittimelle voi tehd„
kaiken saman, kuin muillekkin osoiterekistereille ( Ja jos tarkkoja
ollaan, niin pino-osoitin on osoiterekisteri a7 ).

K„tevi„ pinon k„sittely tapoja:

add.l	#x,sp	 : Poistaa pinosta tarpeettomia tavuja. x on tavujen m„„r„.
addq.l	#x,sp	 : Poistaa pinosta tarpeettomia tavuja. x on tavujen m„„r„.
		   Nopein tapa kun tavuja ei ole 8 enemp„„. (x = 2-8)
lea	x(sp),sp : Poistaa pinosta tarpeettomia tavuja. x on tavujen m„„r„.
		   Yll„tt„en nopein tapa, kun tavuja on enempi kuin 8:n.
pea	label	 : Nopein tapa laittaa osoitteen pinoon. label on osoite.
movem.l d0-d7/a0-a6,-(sp) : Laittaa kaikki rekisterit pinoon.  

Kuinka lasken oikean pinosta pois oton:
.w on 2 tavua
.l on 4 tavua
sitten vain lasketaan yhteen laitettujen tavujen m„„r„.

MUISTA OTTAA PINOSTA KAIKEN LAITTAMASI JA ŽLŽ IKINŽ OTA LIIKAA,
sill„ koneen saa hyvin „kki„ sekaisin ilman huolellista pinon k„sittely„.
Ja muista, ett„ parittomiin muistiosoitteisiin ei voi osoittaa.
Eli k„yt„nn”ss„ yhden tavun laittaminen suoraan pinoon vie kaksi tavua
tilaa.

Pinon teht„v„ aliohjelma kutsuissa:

Hyp„tess„ aliohjelmaan kone tallentaa osoitteen, josta pit„„ jatkaa
aliohjelmasta palattua, pinoon. Eli rts-k„sky (vastaa basicin returnia)
ottaa pinosta osoitteen minne palataan. Eli jos haluaa aliohjelmasta
palata muualle, kuin takaisin kutsumis paikkaan:
	addq.l	#4,sp			Unohdetaan olevan aliohjelmassa
	bra	<label>			goto <label>
Kaikkia muitakin mielenkiintoisia ohjelmarakenteita voi tehd„ n„in.

Ohjelman nopeutus vinkit
------------------------

1. K„skyjen v„hent„minen.

esim.
	add.l	#230,a0
	move.l	a0,a1
kannattaa korvata seuraavalla k„skyll„:	
	lea	230(a0),a1
	
2. Quick k„skyt.

huomaa kuitenkin, ett„ quick-k„skyill„ on rajoitteita.

3. Tee silmukat DBcc-k„skyill„.

68000 ja muut
-------------

Koska 68000 ja uudempien 680x0 prosessorien v„lill„ on ero
Statusrekisterin k„sittelyn kanssa, suosittelen k„ytett„v„ksi
aina k„ytt”j„rjestelm„n kutsua Supervisoriin siirtyess„.

