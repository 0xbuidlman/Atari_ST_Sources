	Atari Falconin konekieliohjelmointi 1 v0.65ž
        --------------------------------------------
             	   ½ Tero Yli-Koski

Konekieleen tutustuminen:
-------------------------

Esim 1.
	move.l	#string,-(sp)		PRINT string
	move.w	#9,-(sp)
	trap	#1
	addq.l	#6,a7		
	move.w	#1,-(sp)		WAIT KEY
	trap	#1
	addq.l	#2,a7
	move.w  #$00,-(sp)		END
	move.w	#$4C,-(sp)	
	trap	#1			
								
string	dc.b	"Konekieli harjoitus 1",13,10
	dc.b	"Paina jotain.",0

N„yttik” monimutkaiselta ? Ei h„t„„. K„yd„„n asia perusteellisesti l„pi.

Ensimm„iseen tabulaattori sarakkeeseen laitetaan nimi„ osoitteille
miss„ tietty k„sky on. T„ss„ listauksessa oli vain string. Ja
hassua, mutta totta tuo dc ei ole prosessori k„sky, vaan sill„
laitetaan muistiin vain tavuja asmissa. .b tarkoittaa laitettavat
jutut on byten eli tavun kokoisia. 13 on rivin vaihto 10 on rivin
alkuun siirto. 0 on merkki k„yttikselle, ett„ merkkijono loppuu.
 Toiseen tabulaattori sarakkeeseen laitetaan k„sky. 3.- 5. tabulaat-
tori sarakkeet on varattu mit„ k„skyll„ tehd„„n. Sitten lopputila
on varatttu kommenteille.
 Perus asiat opittuamme, voimme menn„ listausta k„sky k„skylt„.
Teksti filest„ 680x0.TXT l”ytyy k„skyt, mutta n„m„ k„skyt
tutkimme tarkasti, mit„ ne tekee k„yt„nn”ss„.
move.l	#string,-(sp): move tarkoittaa siirtoa. .l, ett„ kyseess„
on 32 bittinen k„sky. # tarkoittaa, ett„ seuraavaksi on v„lit”n
luku. string kohtaan asm-k„„nt„j„ laittaa sen osoitteen numeron
joka tulee listauksen kohtaan string. -(sp) tarkoittaa, ett„
v„hennet„„n ensin sp:t„ nelj„ll„ (32-bit on nelj„ 8-bit) ja
sitten laitetaan sp:n osoittamaan osoitteeseen luku. sp on pino
osoitin. Eli lyhyesti sanottuna laitettiin merkkijonon alkuosoite
pinoon. 
move.w	#9,-(sp): .w tarkoittaa, ett„ siirret„„n 16-bittinen luku.
Ja koska on 16 bittinen luku (16-bit on kaksi 8-bit) v„hennet„„n
ensin sp:t„ kahdella. Miten ymm„rr„mme laittaa numeron 9:n. Katsotaan
filest„ GEMDOS.TXT, ett„ keskeytyksell„ 9 saa tulostettua merkkijonon.
trap	#1: Toteutetaan GEMDOS keskeytys. Eli kone lukee pinosta,
mit„ tarvis tehd„. Ja palaa sitten jatkamaan ohjelmaa.
addq.l	#6,a7: add tarkoittaa lis„„mist„. q, ett„ k„sky on nopea k„sky.
6 siksi, ett„ pinoonhan laitettiin yhteens„ 6 tavun verran tavaraa.
a7 tarkoittaa samaa, kuin sp. Eli t„h„n olisi voinut laittaa sp:hekin.
Eli lyhyesti sanottu laitettiin pino entiselleen.
move.w	#1,-(sp): Taas katsottiin, ett„ GEMDOS keskeytys ykk”nen
odottaa n„pp„imen painallusta.
trap	#1: Tehd„„n GEMDOS keskeytys. 
addq.l	#2,a7: pinon palautus.
move.w  #27,-(sp): Taas on katsottu GEMDOS keskeytys, joka lopettaisi
ohjelman, mutta huomattiin, ett„ ensin on laitettava jokin luku, joka
palautuu ohjelmalle, joka on p„„ll„ olevaa ohjelmaa kutsunut. 
move.w	#$4C,-(sp): $ tarkoittaa, ett„ per„ss„ tulee heksadesimaali
luku. 4C on GEMDOS-keskeytyksen numero, joka terminoi ohjelman.
trap	#1: Toteutetaan keskeytys. Eli ohjelma loppuu.			
 T„m„n ohjelman olisi kirjoittanut lyhyemmin kielell„, kuin kielell„,
mutta t„m„ olikin esimerkki. Tosin muilla kielill„ olisi tullut
ohjelmasta k„„nnettyn„ suurempi. Huomaa, ett„ Devpacill„ tehty
ohjelma pienenee, kun k„yt„t Toolseissa oleva strip symbolsia.

Pari k„yt„nn”n vinkki„:
-----------------------

Etenkin konekieli ohjelmoinnissa on t„rke„„, ett„ ohjelma suun-
nitellaan ensin paperille hyvin. Lyhyet ohjelmat ja jotkin monimutkaiset
aliohjelmat kannattaa kirjoittaa k„skyinens„kkin paperille, sill„
ihmisell„ pysyy paremmin ajatukset kasassa paperin „„ress„, kuin
n„yt”n „„ress„, oli sitten kuinka hyv„ monitori tahansa.
 Listaukseen kommentejen tekeminen on my”s t„rke„„, mutta ei
tietenk„„n joka riville niit„ kannata tehd„. Selke„ tapa on laittaa
vaikkapa basic vastinetta, mit„ seuraavilla riveill„ tapahtuu.
 K„tevi„ rutiineja, kannatta ker„t„ johonkin fileeseen, ett„
sielt„ niit„ saa sitten nopeasti, sill„ eih„n usein k„ytettyj„
kannata moneen kertaan kirjoittaa.

Muistin vapauttaminen ja varaaminen:
------------------------------------

Kun ohjelma k„ynnistyy, se varaa l„hes kaiken muistin k„ytt””ns„.
Syntyy ongelmia:
- Ohjelman lis„ksi oleva muisti on vaikeasti osoitettavissa.
- Moniajossa toinen ohjelma voi alkaa tarvita lis„„ muistia.
- Halutaan k„ynnist„„ ohjelmasta toinen ohjelma ja sillekkin
  pit„isi saada tilaa
Ratkaisuksi GEMDOSissa on kutsuja t„t„ varten, mutta n„iden
k„ytt” ei olekaan yksinkertaista. 

Seuraavaksi esimerkki muun paitsi itse ohjelman viem„n muistin 
vapauttamisesta sek„ tallettaa basepagen alkuosoitteen.  
T„m„ kannattaisi laittaa jokaisen ohjelman alkuun.
Esim. 2 
	move.l	sp,a0		Ohjelma tietojen paikka=(sp + 4)
	move.l	4(a0),a0
	move.l	a0,basepag		
	move.l	$c(a0),d4	Lasketaan ohjelman viem„ tila.
	add.l	$14(a0),d4
	add.l	$1c(a0),d4
	add.l	#$100,d4
	move.l	#pino,sp	Siirret„„n pinon paikkaa v„liaikaisesti. 
	move.l	d4,-(sp)	Tehd„n GEMDOS kutsu $4a,
	move.l	a0,-(sp)	joka vapauttaa muistin lukuun-
	move.w	#0,-(sp)	\ ottamatta d4:n pituista p„tk„„
	move.w	#$4a,-(sp)	 \ alkaen osoitteesta a0.
	trap	#1
	lea.l	12(sp),sp
	...
	Ohjelmasi
	...
basepag	ds.l	1		T„nne tallentuu basepagen alkuosoite.
	ds.l	16		Varataan v„liaikaiselle pinolle tilaa
pino	ds.l	1		koska pino kasvaa alasp„in laitetaan
				pinon lopun kohdalle label.

Seuraavaksi esimerkki, jossa varataan tilaa ohjelman omalle
grafiikkatilalle ja pinolle. Sek„ siirryt„„n k„yt„m„„n varattuja
alueita. Jos halutaan toimimaan aivan vanhimmissakin ST:ss„,
niin pit„„ k„ytt„„ kutsua $48. Pino on grafiikka tilan j„lkeen
siksi, ett„ jos pinossa tapahtuu ylivuoto, niin kone ei j„„
jumiin, vaan se k„ytt„„ grafiikka muistia pinona, ja ohjelmoija
huomaa, ett„ pino on liian pieni.
Esim. 3	
	move.w	#0,-(sp)	katsotaan vain ST-RAMista aluetta
	move.l	#369664,-(sp)	graffu 768x240x2 tavua+pino 1 kb
	move.w	#$44,-(sp)
	trap	#1
	addq.l	#8,sp
	tst	d0		if d0=0 then out of memory error
	beq	error		
	move.l	d0,a6		a6=varatun tilan alkuosoite
	
	add.l	#369660,d0	Siirret„„n pino varatun tilan	
	move.l	d0,sp		loppuun. Huomaa, ett„ lis„t„„n pituus-4.
	
	move.l	#%1101100,-(sp)	RGB grafiikka tila 768x240 65535 v„rill„
	move.w	#3,-(sp)	3=Lue modecode
	move.l	a6,-(sp)	Kuvan alkuosoite=varatun tilan alkuosoite	
	move.l	a6,-(sp)	logical screen  = -,,-
	move.w	#$05,-(sp)	XBIOS kutsu Setscreen
	trap 	#14
	lea.l	16(sp),sp
	
Seuraavaksi esimerkki, jossa vapautetaan muistia, jota on varattu
GEMDOSin kutsuilla $44 tai $48. N„in voi my”s vapauttaa muistialueen,
joka on pienennetty kutsulla $4a ( Esim.2 ). Muista my”s, ett„ kutsulla
$4c tehty ohjelman lopetus vapauttaa kaiken ohjelman varaaman muistin.
Esim. 4
	pea	alkuos		alkuos=muistialueen alkuosoite
	move.w	#$49,-(sp)	$49=Mfree kutsun numero
	trap	#1
	addq.l	#6,sp
	
Basepage
--------

K„ynniss„ olevasta ohjelmasta l”ytyy tietoa basepagest„, kuten
esimerkiksi ohjelmalle suunnattu command line.
Alla olevasta taulukossa on selitetty mit„ se sis„lt„„.
Basepagen rakenne:
lis„ys  |	|
alkuos. | nimi	| Selitys	
---------------------------------------------------------------------------
$00	| lowtpa| Sis„lt„„ basepagen alkuosoitteen. 
$04	| hitpa | pointteri Transeint program arean loppuun+1.
$08	| tbase	| Ohjelman alkuosoite.
$0c	| tlen	| Ohjelma-alueen pituus.
$10	| dbase | M„„ritellyn data-alueen alkuosoite.
$14	| dlen	| M„„ritellyn data-alueen pituus.
$18	| bbase | M„„rittelem„tt”m„n data-alueen alkuosoite.
$1c	| blen	| M„„rittelem„tt”m„n data-alueen pituus.
$20	| dta	| alkuosoite DTA:lle, DTA:sta lis„„ seuraavassa taulukossa.
$24	| parent| Ohjelmaa kutsuneen ohjelman basepagen alkuosoite.
$28	|reserv.| 4 k„ytt„m„t”nt„ tavua.
$2c	| env	| Enviroment stringin alkuosoite.
$30	| undef	| 80 m„„rittelem„t”nt„ tavua.
$80	| cmdlin| Seuraavat 128 byte„ on commandline„.
--------------------------------------------------------------------------

DTA
---

Kun halutaan tietoa esimerkiksi fileen koosta attribuuteista tai muusta
vastaavasta, niin tiedot luetaan GEMDOS kutsuilla $4e ja $4f (fsfirst ja
fsnext) DTA:han. Ohjelman k„ynnist„ess„ DTA:n alkuosoite on oletuksena
cmdliniin, joten dta:ta pit„„ muuttaa, ettei se tuhoaisi commandline„.
DTA:n alkuosoitteen voi muuttaa GEMDOS kutsulla $1a.
DTA:n rakenne:
tavu	| Selitys
--------------------------------------------------------------------------
0-20	| Varattu GEMDOSille.
21	| File attribuutti, bittien selitykset: 0 - kirjoitus suojattu 
	| 				   	1 - piilo tiedosto
	|					2 - systeemi tiedosto
	|					3 - levyn nimi tiedosto
	|					4 - alihakemisto
	|					5 - k„yt”ss„ oleva tiedosto
	|			kun kaikki bitit nollia, niin normaali file.	
22-23	| Luomis aika, bittien selitykset: 0- 4 - sekunnit / 2
	|				   5-10 - minuutit
	|				  11-15 - tunnit 
24-25	| Luomis p„iv„, bittien selitykset: 0- 4 - p„iv„
	|				    5- 8 - kuukausi
	|				    9-15 - vuosi - 1980
26-29	| Fileen koko.
30-43	| Nimi ja p„„te. Tavuja voi olla enemm„nkin MiNTin alla.
--------------------------------------------------------------------------


		   		 