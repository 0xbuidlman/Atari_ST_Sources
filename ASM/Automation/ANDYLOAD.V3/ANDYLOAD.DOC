            +-------------------------------+
            | AndyLoad I, II, III and stuff |
            +-------------------------------+
                                  By Andy The Arfling.


Spreading
---------

On this disk is Andyload I & II, Round the Bend, and this doc.
It can be spread to anyone as long as it is complete, Andyload
III (which shits on anything else) will be released soon providing
nobody splits up this disk back. (Oh, and vector soccer!)


Introduction
------------

Well I'll be honest, I think this doc is going to be a pain in
the arse to write, cos anyone who needs it probably won't understand
it and anyone who does understand it wouldn't have needed it in the
first place!  In the beginning packing games was done by only those
who knew exactly what they were doing, then came along traprun.s
and soon almost anyone could do the odd game or two. Next really
was UltraLoad, this came along just after I left Automation and really
worked, not to be outdone, AndyLoad I was born.


AndyLoad I
----------

This was meant to do exactly what Ultraload 3 does i.e. take a game
in files and pack it into one, and to that extent, it works!
How?  Well for those interested ultraload 3 gets every file on the
disk and lumps it into one file which is chunky packed, then whenever
the game ask to open/read/close/seek a file, ultraload 3 basically
replaces all the system code and looks in this one big file. This
is heavy!  There's no way I was going to rewrite all the system file
loading code just for this packer, so I took the other approach.  Ram
disks don't do it like that, they have a complete disk in memory the patch
into the system at a much lower level, the sector reading/writing routines.
So the system handles the complicated file bit of things, then the ram
disk handles the easy sector loading bit, in this case copying to or
from memory instead of disk, now that's more like it!
Andyload does exactly the same thing, it works like a ram disk, but it's
stored on disk instead of ram (and it's packed), get the idea?
So how do you use it?

  1) Find out how big the game is then install a ram disk big enough
       to hold it (with the RDISK program supplied).
  2) Copy the entire game to the ram disk.
  3) Now we're there, except it's stored in memory instead of disk so
       click on RAMDUMP.TOS which dumps the entire ram disk to one file.
  4) Next pack it with Automation Packer V3 on chunk pack (any size chunk
       works but use either 4K or 8K chunks, otherwise too much memory is
       wasted and this is normally the reason why a game won't run).
  5) Now click on ADD_PROG.TOS and follow the prompts.  It'll ask you who
       you are, what the packed data file is called, and what program to
       run, this is the program that was inside the ram disk that started
       the game, and also what name for this loader program.

Hey presto, you may or may not have a working two filed game (loader and
data).


Raw Data Games
--------------

Before I go on with the rest of what AL I does, a brief word about filing
games. How is it done?  Well basically there is some point in a game (yes
every game) where it says "Load a piece of data to such and such an
address", the calls some subroutine to do this in whatever way it can.
Some games use files for this, some games don't, but each has the end
result that a certain piece of data gets loaded into memory. When
you file a game all you do is get all the pieces of data it loads, save
them out into a files and then change the loading code so when it says
"load piece of data number 10 to address whatever" your code knows
it means file DATA_10.BBC or whatever and loads it. Sometimes you
seem filenames like 01350072.RAW or something similar, this is just
an easy way of naming the files, chances are the original load routines
loaded $72 sectors starting at sector $135, put these together and you
have a unique filename for each raw data file, simple huh? Yes. Tacky?
Yes!  (Eh Lawrence????)


AndyLoad I (more)
-----------------

One filing file games was what I had originally planned, but since the
system was handling loading a file for the game, when I called it to load
a section out of my chunky packed file it kind of got confused where the
other bit of file had gone and crashed (fair enough I suppose), which meant
I had to rewrite my code not to call the system (as in file loaders).
This had the unforeseen advantage that it didn't actually need the system
running to load sectors out of the packed file so the idea sprung to mind
that I could use it on raw data games (which normally run too low in memory
to have the system code available for file loading, which is why custom
file loaders are around). To use it for this you have to dump the entire
disk to a file, pack it as before and then comes the difficult bit!
You have to look at the loading code the game a work out where it calls
its loading routines and what sectors they load, then redirect it to call
AndyLoad to load them, that isn't too bad, the problem is that AndyLoad
needs about 4K to run plus the size of the chunk itself which is a minimum
of 8K memory needed, this can (does) prove hard to find, which means more
often than not it's easier to file games directly (file loaders (well mine
anyway) need no memory buffer at all and are under 1K long) than to find
8K work space. Anyway if you're still interested, look at T_LOAD.S which
is the source code for the loader I used in T-Bird (also Murder, The Deep,
The Running Man and some others).


AndyLoad II
-----------

After AL I worked, Zippy must have thought "That's a good idea", because
a few weeks later I got a couple of disks with some raw data games packed
with "Zipload". So anyway, I thought perhaps I should rewrite AndyLoad
with raw data games in mind, try and keep the buffer as small as
possible to makes things really easy for myself. After much thought I
came up with a way of having absolutely no buffer space needed at all!
Of course this is a bit of a con, what it actually does is use the space
where it's about to load, so if you watch it load first you see the boot
sector appear, then the directory sectors, then the index part of the
chunky file, then the packed data, then the unpacked data and finally
the bit you want is copied to the address. I also rewrote it so it loads
first then depacks second which speeds things up dramatically (unlike
AndyLoad I and Ultraload which load the depack each chunk individually).
However, the thing is each chunk is 4K unpacked, so when the game
asks to load one sector (512 bytes) what happens is 4K of memory is
use to load in the chunk which corrupt the memory after the 512 byte
buffer. The only game I ever tried packing with this was Speedball 2,
unfortunately as well as having very small files, it also has a 512 byte
buffer in the middle of the program where it loads a sector, this of
course got smashed with a 4K chunk and some code got splattered, too bad,
bombs all over the place!  Pete had a good idea though, he used it on
Moonwalker (in fact he used Andyload I quite a lot, but never really
released anything with it), the game itself had a 5K buffer for each
track, so he packed the game in 5K chunks then each one fitted quite
nicely into the buffer and didn't corrupt a thing, so it's not all bad!

Anyway if you're still undaunted, to use it dump the whole disk into a
file a before with raw data games, now I had the bright idea of using
Ice packer, so what you have to do is run CHUNKIFY.TOS which loads in
the big disk dump file (800K for a double sided 10 sector disk) and
splits it into chunks of whatever size you like (200 files of 4K!!!!).
Then you pack all these files individually and run LUMPER.TOS which
then reads in all these little files and joins them together again,
brilliant huh?  No not really, a complete pain in the arse actually!
Next comes the hacking bit again, as before you have to work out how
the game's sector routine work and redirect the sector loading calls
to AndyLoad II and hope it works!


AndyLoad III
------------

So is that it all?  Doom, gloom and severe hacking to pack a game?
Well until recently, yes!
AndyLoad III improves on II dramatically. The major problem was that
a whole chunk had to be depacked to get one sector, that's the one
I solved (plus all the major hassle factors), AndyLoad III comes
with its own packer, now I'm not going to boast about how small it
gets things because Ice will beat it hands down but the big thing
about it is that it can depack and single byte, sector or track out
of a disk dump that has been packed as one file, I'm not splitting
it up and packing it as sectors (if you did that with Ice it'd
probably by worse than my packer, but I haven't tried!), it
gets packed as one file and depacked at 1600 sectors!
It also packs at the rate of about 20K-30K a second (so an 800K
disk gets packed in about a minute) and depacks at about half that!
(Well actually I could depack a lot faster but at the expense of memory
and after last time I don't think that's a good idea!).  The other
major thing is the code size is under 1K, which means it's smaller
than a Rob Northen loader (to be fair, his does do writing and
formatting as well), which means it's pretty easy to install, in fact,
Round The Bend (which *should* be ont this disk, see above note!) was
done without me even looking at the code, the packer itself loads in
raw data, searches for Rob Northen loaders and replaces them with
the code for AndyLoad III, all you have to do is figure out what
the boot sector loads which is (normally) pretty simple!  I the
specific case of Rob Northen again, all his boot sectors are the same
except for two numbers, the sector it starts loading from, and the
length so the whole process of filing and packing RTB could have been
totally automatic (as well a cracking it, see autohack etc.).
The loader does need a $200 byte buffer for depacking, but this is
normally pretty easy to find, it's normally put at $140 - $340
where even most raw data games fear to tread, but some have to be
moved. Other examples of this are the aforementioned Speedball 2,
the packer found two Rob N. loaders, replaced them both, I hack the
boot sector and whooppeeeee, a totally filed Speedball 2 in about 10
minutes, can't be bad eh?  Also tried it on Vector Soccer, which should
also be on this disk, so far 3 out of 3!  I'm happy :-)
Oh, Andyload III was also written with ram disks in mind, all the code
to load out of memory is in there, if it finds the data file at $80000
then it'll work, though Christ knows how it'll get there!

	Andy.   [22/2/92]
