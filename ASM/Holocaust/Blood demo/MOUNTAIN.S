;Montagnes fractales V3.0
;(V1.0 dans Rising Force, V2.0 dans la Japtro.)
;Meme technique que pour les 5992 dots. Le terrain a ‚t‚ g‚n‚r‚ par le
;logiciel Fractint sur PC. Il y a 5184 points dans cette version, il reste
;pas mal de temps machine. (TAB)
;
;Code by Zappy/Holocaust.

LARGEUR	=	6*12
INTERLEAVE	=	8
NB_PTS	=	LARGEUR*LARGEUR

Y_DEP	=	160*2

MAIN	CLR.L	-(SP)
	MOVE.W	#$20,-(SP)
	TRAP	#1
	ADDQ.W	#6,SP

	CLR	-(SP)
	PEA	-1.W
	PEA	-1.W
	MOVE	#5,-(SP)
	TRAP	#14
	LEA	12(SP),SP

*************************************************************************

	MOVE.L	#FIN,$008.W
	MOVE.L	#FIN,$00C.W
	MOVE.L	#FIN,$010.W
	MOVE.L	#FIN,$014.W
	MOVE.L	#FIN,$018.W
	MOVE.L	#FIN,$01C.W
	MOVE.L	#FIN,$020.W

	MOVEQ	#0,D0
	MOVEQ	#0,D1
	MOVEQ	#0,D2
	MOVEQ	#0,D3
	MOVEQ	#0,D4
	MOVEQ	#0,D5
	MOVEQ	#0,D6
	MOVEQ	#0,D7
	MOVEM.L	D0-D7,$FFFF8240.W

	LEA	DEB_BSS,A0
	LEA	END_BSS,A1
.KILL_BSS	CLR.L	(A0)+
	CMP.L	A1,A0
	BLE.S	.KILL_BSS

	MOVE.W	#$2700,SR
	CLR.B	$FFFFFA07.W
	CLR.B	$FFFFFA09.W
	MOVE.L	#INTER_RTE,$70.W
	MOVE.L	#INTER_RTE,$120.W
	MOVE.L	#INTER_RTE,$134.W
	MOVE.W	#$2300,SR

	LEA	SAVE_RAM,A0
	LEA	$600.W,A1
	MOVE	#15999,D7
.SAVE_IT	MOVE.L	(A1)+,(A0)+
	DBF	D7,.SAVE_IT

	LEA	$600.W,A0
	MOVE	#15999,D7
	MOVEQ	#0,D0
.KILL_IT	MOVE.L	D0,(A0)+
	DBF	D7,.KILL_IT

	MOVE.L	#VBL_DEB,$70.W

	LEA	$600.W,A0
	MOVE	A0,SCREEN1
	LEA	(200-8)*160(A0),A0
	MOVE	A0,SCREEN2

	MOVE.L	#BIG_BUF1,ADR1
	MOVE.L	#BIG_BUF2,ADR2

	CLR.B	$FFFF8201.W
	MOVE.B	SCREEN1,$FFFF8203.W

	JSR	PREP_MOUNT
	BSR	AFFICH

	MOVE	SCREEN1,D0
	JSR	AFF_CADRE
	MOVE	SCREEN2,D0
	JSR	AFF_CADRE

	MOVE.L	#VBL,$70.W

MAIN_LOOP	JSR	VSYNC
	MOVE	#$001,$FFFF8240.W

	MOVE	#$210,$FFFF8242.W
	MOVE	#$321,$FFFF8244.W
	MOVE	#$321,$FFFF8246.W
	MOVE	#$432,$FFFF8248.W
	MOVE	#$432,$FFFF824A.W
	MOVE	#$432,$FFFF824C.W
	MOVE	#$432,$FFFF824E.W
	MOVE.L	#$07770777,D7
	MOVE.L	D7,$FFFF8250.W
	MOVE.L	D7,$FFFF8254.W
	MOVE.L	D7,$FFFF8258.W
	MOVE.L	D7,$FFFF825C.W

	JSR	EFFAC2

;	JMP	SAUT
	
	LEA	XDAT,A0
MODXD	EQU	*+2
	LEA	0(A0),A0
	CMPI	#$1234,(A0)
	BNE.S	.OOK1
	CLR	MODXD
	LEA	XDAT,A0
.OOK1	
	MOVE	(A0),D0
	EXT.L	D0
	MOVE.L	D0,ADR_DEP_X
	ADDQ	#2,MODXD

	LEA	YDAT,A0
MODYD	EQU	*+2
	LEA	0(A0),A0
	CMPI	#$1234,(A0)
	BNE.S	.OOK2
	CLR	MODYD
	LEA	YDAT,A0
.OOK2	
	MOVE.L	(A0),ADR_DEP_Y
	ADDQ	#4,MODYD
	
SAUT
	MOVE.L	ADR1,A0
ADR_DEP_X	EQU	*+2
	ADDA.L	#0,A0
ADR_DEP_Y	EQU	*+2
	ADDA.L	#0,A0

	LEA	POPO,A1
	MOVEM	(A1),D0-D7
	JSR	BUF_COD
	JSR	SWAPEC

	CMPI.B	#$50,$FFFFFC02.W
	BNE.S	PAS_HAUTA
	CMPI.L	#(200-LARGEUR)*320*2,ADR_DEP_Y
	BEQ.S	PAS_HAUTA
	ADD.L	#320*2,ADR_DEP_Y
PAS_HAUTA	
	CMPI.B	#$48,$FFFFFC02.W
	BNE.S	PAS_BASA
	TST.L	ADR_DEP_Y
	BEQ.S	PAS_BASA
	SUB.L	#320*2,ADR_DEP_Y
PAS_BASA
	CMPI.B	#$4B,$FFFFFC02.W
	BNE.S	PAS_GAA
	CMPI.L	#(320-LARGEUR)*2,ADR_DEP_X
	BEQ.S	PAS_GAA
	ADDQ.L	#2,ADR_DEP_X
PAS_GAA	
	CMPI.B	#$4D,$FFFFFC02.W
	BNE.S	PAS_DRA
	TST.L	ADR_DEP_X
	BEQ.S	PAS_DRA
	SUBQ.L	#2,ADR_DEP_X
PAS_DRA

	CMPI.B	#$39,$FFFFFC02.W
	BEQ	FIN
	ADDQ	#1,TIME
	CMPI	#20*50,TIME
	BEQ	FIN
	CMPI.B	#$F,$FFFFFC02.W
	BNE.S	ZOU
	ST	$FFFF8240.W
ZOU	JMP	MAIN_LOOP
TIME	DC	0
INTER_RTE	RTE
VBL	ADDQ	#1,NB_VBL
	RTE
NB_VBL	DC	0
VSYNC	CMPI	#1,NB_VBL
	BNE.S	VSYNC
	CLR	NB_VBL
	RTS
POPO
	DC	%10000000
	DC	%1000000
	DC	%100000
	DC	%10000
	DC	%1000
	DC	%100
	DC	%10
	DC	%1

SWAPEC	MOVE	SCREEN1,D0
	MOVE	SCREEN2,SCREEN1
	MOVE	D0,SCREEN2

	MOVE.L	ADR1,D0
	MOVE.L	ADR2,ADR1
	MOVE.L	D0,ADR2

	;MOVE.B	SCREEN1+1,$FFFF8201.W
	;MOVE.B	SCREEN1+2,$FFFF8203.W

	CLR.B	$FFFF8201.W
	MOVE.B	SCREEN2,$FFFF8203.W
	RTS

FIN	MOVE	#$2700,SR
	LEA	$600.W,A0
	LEA	192*160(A0),A2
	LEA	$1F05FC,A1
	MOVE	#15999,D7
.Z	MOVE	(A0)+,D0
	OR	(A2)+,D0
	MOVE	D0,(A1)+
	DBF	D7,.Z

	LEA	SAVE_RAM,A1
	LEA	$600.W,A0
	MOVE	#15999,D7
.SAVE_IT	MOVE.L	(A1)+,(A0)+
	DBF	D7,.SAVE_IT

	MOVE.L	4.W,A0
	JMP	(A0)

VBL_DEB	MOVE.L	A0,-(SP)
	LEA	FAD_INIT,A0
MOD_FAD_INIT	EQU	*+2
	LEA	0(A0),A0
	CMPI	#$1234,(A0)
	BEQ.S	.SOR
	MOVE	(A0),$FFFF8240.W
	ADDQ	#2,MOD_FAD_INIT
.SOR	MOVE.L	(SP)+,A0
	RTE
FAD_INIT	
	DC	$777
	DC	$777+$777
	DC	$667
	DC	$667+$777
	DC	$556
	DC	$556+$777
	DC	$445
	DC	$445+$777
	DC	$334
	DC	$334+$777
	DC	$223
	DC	$223+$777
	DC	$112
	DC	$112+$777
	DC	$001
	DC	$001+$007
	DC	$1234
EFFAC2
	MOVE	SCREEN1,D0
	SWAP	D0
	CLR	D0
	SWAP	D0
	MOVE.L	D0,A0

	MOVEQ	#0,D0
	MOVEQ	#0,D1
	MOVEQ	#0,D2
	MOVEQ	#0,D3
	MOVEQ	#0,D4
	MOVEQ	#0,D5
	MOVEQ	#0,D6
	MOVEQ	#0,D7
	MOVE.L	D0,A1
	MOVE.L	D0,A2
	MOVE.L	D0,A3
	MOVE.L	D0,A4
	MOVE.L	D0,A5
	MOVE.L	D0,A6

	INCBIN	EFF.COD
AFF_CADRE
	SWAP	D0
	CLR	D0
	SWAP	D0
	MOVE.L	D0,A0
	LEA	160*7+32(A0),A0
	ADDA	#Y_DEP,A0

	MOVEQ	#-1,D0

N	SET	0
	REPT	13
	MOVE	D0,N+6(A0)
	MOVE	D0,N+6+160*175(A0)
N	SET	N+8
	ENDR

	MOVEQ	#1,D0
	MOVE	#$8000,D1
	MOVE	#175-1,D7
.C	MOVE	D0,-8+6(A0)
	MOVE	D1,13*8+6(A0)
	LEA	160(A0),A0
	DBF	D7,.C

	RTS

AFFICH	LEA	BUF_PTS,A0

COD_GEN	LEA	CORES_X2,A2
	LEA	BUF_COD,A3

	LEA	COEFF+400*2,A1

	MOVE.W	#(NB_PTS/6)-1,D7
.AFF_SIX
	MOVE.L	#$4C987E00,(A3)+
	MOVE	#$29,D5
	MOVEQ	#6-1,D6
.LP
	MOVE.W	(A0)+,D0
	ADDI.W	#19,D0
	MOVE.W	(A0)+,D1
	ADDI.W	#45,D1

	TST	D1
	BLT.S	.NO
	CMPI	#200,D1
	BGE.S	.NO

	MULS.W	#160,D1
	ADD.W	D0,D0
	ADD.W	D0,D0
	ADD.W	2(A2,D0.W),D1
	MOVE.W	(A2,D0.W),D0
	;OR.W	D0,(A3,D1.W)
	MOVE	D5,(A3)
	MOVE.B	D0,(A3)
	MOVE	D1,2(A3)
	ADDQ	#4,A3
.NO
	ADDQ	#1,D5
	DBF	D6,.LP
	ADDQ	#6,CNT
	CMPI	#LARGEUR,CNT
	BNE.S	.NON
	CLR	CNT
	MOVE	#$41E8,(A3)+
	MOVE	#320,D5
	SUB	#LARGEUR,D5
	ADD	D5,D5
	MOVE	D5,(A3)+
.NON	
	DBRA	D7,.AFF_SIX
	MOVE	#$4E75,(A3)
	RTS
CNT	DC	0

PREP_MOUNT	LEA	DATAS_MOUNT+1078,A0
	LEA	BIG_BUF1,A1
	LEA	BIG_BUF2,A2
	LEA	TABLE_ALT,A3
	MOVE	SCREEN1,D0
	MOVE	SCREEN2,D1
	ADD	#Y_DEP,D0
	ADD	#Y_DEP,D1
	MOVE	#63999,D7
.DO_TRANSFO	MOVEQ	#0,D6
	MOVE.B	(A0)+,D6
	ADD	D6,D6
	ADD	D6,D6
	MOVE	(A3,D6.W),D5
	MOVE	2(A3,D6.W),D4

	MOVE	D0,(A1)
	SUB	D5,(A1)
	ADD	D4,(A1)+
	MOVE	D1,(A2)
	SUB	D5,(A2)
	ADD	D4,(A2)+
	
	DBF	D7,.DO_TRANSFO
	RTS
TABLE_ALT
N	SET	0

	DC	N,0
	DC	N+160*60,6
	DC	N,0
	DC	N,0
N	SET	N+160
	
	REPT	(64/4)-1
	DC	N,0
	DC	N,0
	DC	N,0
	DC	N,0
N	SET	N+160
	ENDR

	REPT	64/4
	DC	N,2
	DC	N,2
	DC	N,2
	DC	N,2
N	SET	N+160
	ENDR

	REPT	64/4/2
	DC	N,2
	DC	N,2
	DC	N,2
	DC	N,2
N	SET	N+160
	ENDR

	REPT	64/4/2
	DC	N,4
	DC	N,4
	DC	N,4
	DC	N,4
N	SET	N+160
	ENDR

	REPT	64/4
	DC	N,4
	DC	N,4
	DC	N,4
	DC	N,4
N	SET	N+160
	ENDR

COEFF	INCBIN	COEFF2.3D

	DCB.W	500,0
N	SET	0
CORES_X2	REPT	20
	DC	$81,N
	DC	$83,N
	DC	$85,N
	DC	$87,N
	DC	$89,N
	DC	$8B,N
	DC	$8D,N
	DC	$8F,N
	DC	$81,N+1
	DC	$83,N+1
	DC	$85,N+1
	DC	$87,N+1
	DC	$89,N+1
	DC	$8B,N+1
	DC	$8D,N+1
	DC	$8F,N+1
N	SET	N+8
	ENDR
	DCB.W	500,0

BUF_PTS	INCBIN	CACAPABO.ZOB

DATAS_MOUNT	INCBIN	TEST.BMP

XDAT	INCLUDE	X.DAT
	DC	$1234
YDAT	INCLUDE	Y.DAT
	DC	$1234

	BSS
;BSS g‚n‚rale
DEB_BSS
SAVE_RAM	DS.B	64000
SCREEN1	DS.W	1
SCREEN2	DS.W	1
ADR1	DS.L	1
ADR2	DS.L	1
;Calcul des points
BUF_COD	DS.B	24482
BIG_BUF1	DS.B	128000
BIG_BUF2	DS.B	128000
END_BSS