Sequens modules

To load a module you uses the following command.

MODL "drive:\path\name.ext".... ;

Trap #8 contains most of the routines you may need to initlize your
routine. 

    Long - Size in bytes
    Word - 0
    Reserve a specific amount of memory (alwasy at even address).
    Out: A0=Address to memory
    
    Long - Size in bytes
    Long - Memory address
    Word - 1
    Fill a memory area with nulls.

    Long - Size in bytes
    Long - Memory address
    Word - 2
    Release a memory area.

    Word - 3
    Force a free-memory-buffert cleanup.

    ----------------

    Long - Search for string start address
    Long - Address to save string, ending with null
    Out: A0 pointing to the byte after the string
    Word - 16
    Get a string from the sequenser.
    
    Long - Search for hex number start address
    Word - Number of digits (1-8)
    Word - 17
    Out: D0 number found
         A0 pointing at byte after the number.
    Get a hexadecimal number out of the sequenser

*   Long - Search start address
    Word - Number of digits (1->)
    Word - 18
    Out: D0 number found in hexadecimal
         A0 pointing at byte afyer the number
    Get a decimal number out of the sequenser, get it in HEX!

*   Long - Hexadecimal number
    Word - 19
    Out D0 number in decimal (BCD)
    Convert Hex to DEC (BCD)

*   Long - Decimal number (BCD)
    Word - 20
    Out: D0 hexadecimal number
    Convert DEC(BCD) to HEX

    Word - Char
    Word - 21
    Out: D0=true / false
    Is character a "dummy char"?

    Long - Address (string pointer)
    Word - 22
    Out: D0=Next valid char
         A0=new string pointer
    Get a new character, skipping alla space, tabs, CR ect.
    Use this to get fisrt character in a field
         
    Long - Address (string pointer)
    Word - 23
    Out: D0=Next valid char
         A0=new string pointer
    Get next character in a field, if space ect is found, a error will
    be executed.

    Long - Address (string pointer)
    Word - 24
    Out: A0=New String pointer
    Find end of command character (;), if no dummychar is found a error
    will occure.

    ----------------

    Long - Address to command, ending with null. CASE SENSITIVE!
    Long - Address to translating routine.
    Word - 32
    Place a command in the command buffert

    Word - 33
    Out: A0=Pointer to next byte to be proccessed during "compilation"
    
    Long - Address
    Word - 34
    Set "next byte to be proccessed during "compilation"" pointer.

    Word - 35
    Out: A0=Pointer to next byte where compiled data will be placed
    
    Long - Address
    Word - 36
    Set "where next compiled data will be saved" pointer



Think about:
  Piping: (sinus tabels ect) sending messages.
  Use of general routines, likes polygones, lines ect.
