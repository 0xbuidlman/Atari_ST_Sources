;24 bit motion-rotator-zoomer, 16 bit output  WizTom of AGGRESSION
; pitais skulata.. sourcegraffa alkaa $2000, pituus $2000
; max screensize 128*128
; x stepper deltana edelliseen
; y stepper absolut ram address

PBC	equ	$ffe0
HSR	equ	$ffe9
HTX	equ	$ffeb

	org	p:$0
	jmp	start

	dc	0,0,0,0,0,0,0,0,0,0
	dc	0,0,0,0,0,0,0,0,0,0
	dc	0,0,0,0,0,0,0,0,0,0
	dc	0,0,0,0,0,0,0,0,0,0
	dc	0,0,0,0,0,0,0,0,0,0
	dc	0,0,0,0,0,0,0,0,0,0
	dc	0,0,0,0

start	
	movep	#0,x:$fffe		;fix read
	move	#>$babe,x0
x_ready	jclr	#1,X:HSR,x_ready
	move	x0,X:HTX		

kasky	movep	#1,X:PBC		
	jclr	#0,x:HSR,kasky
	move	x:HTX,a
	tst	a	#>1,x0
	jeq	key0			;feed 16 bit to cpu
	sub	x0,a
	jeq	key1			;feed x-y stepper to dsp
	sub	x0,a
	jeq	key2			;feed 24 bit gfx

	jmp	start
;-------------------------------
; 24bit to 16bit conv. WizTom
; killer FAST!!

;	x - 16k 24 bit screen
;	y - 8k 24 bit sourcegfx, stepperit

key0
	move	#$ffff,m0
	move	#$ffff,m1
	move	#$1fff,m2		;source 8k mask
	move	#$ffff,m3
	move	#$ffff,r7
	move	#>$00f800,y1
	move	#screen,r7		;motion buf
	move	#0,n7
	move	#vakiot,r3
	move	#-4,n3
	move	#y_stepper,r0

	move	y:y_size,x0
	do	x0,y_loop
;-- Y loop
	move	#x_stepper,r1
	move	y:(r0)+,r2		;y stepper		
	move	x:(r7),x0		;old gfx
	move	y:x_size,x1
	do	x1,x_loop
;-- X loop
	move	y:(r3)+,x1			;-2^19
	move	y:(r1)+,n2	;x stepper (relativ!)
	move	y:(r3)+,x0	;$ff0f0f
	move	y:(r2)+n2,a	;get new, mask size!
	move	y:(r3)+,y0
	move	y:(r3)+,x1	;add old (sub), add new

	move	a1,x:(r7)+			;feedback
;	and	y0,a		a1,b		;leave G (24 bit BRG)
	and	y1,b		b1,x0		;leave R
	mpy	x0,x1,b		b1,y0		;get B
	move	l:(r3)+n3,x			;x1:x0 longina
	mac	y0,x1,b		a1,y0		;get R
	mac	y0,x0,b 	x:(r7),x0	;get G, get next old gfx

write	jclr	#1,X:HSR,write
	move	a1,X:HTX		
x_loop
;-------
	nop
	nop
y_loop

	jmp	start
;------------------------------------
key1
ra	movep	#1,X:PBC
	jclr	#0,x:HSR,ra		
	move	x:HTX,x0
	move	x0,y:x_size

rb	movep	#1,X:PBC
	jclr	#0,x:HSR,rb
	move	x:HTX,x1
	move	x1,y:y_size

	move	#x_stepper,r0
	move	#$ffff,m0
	do	x0,getx
rc	movep	#1,X:PBC
	jclr	#0,x:HSR,rc
	move	x:HTX,y:(r0)+
getx
	move	#y_stepper,r0
	do	x1,getx2
rd	movep	#1,X:PBC
	jclr	#0,x:HSR,rd
	move	x:HTX,y:(r0)+
getx2
	jmp	start
;------------------------------------
key2
	move	#$2000,r0
	move	#$1fff,m0
	move	#>128*64,x0
	do	x0,filler
getpix	movep	#1,X:PBC		
	jclr	#0,x:HSR,getpix		;y ram upper part
	move	x:HTX,y:(r0)+
filler
	move	#screen,r0
	move	#$ffff,m0
	move	#0,a
	move	#128*128,x0
	rep	x0
	move	a1,x:(r0)+

	move	#0,r0			;settaa vakiot
	move	#>$ff0f0f,x0
	move	x0,y:(r0)+
	move	#>$f80000,x0
	move	x0,y:(r0)+
	move	#>$0000f8,x0
	move	x0,y:(r0)+
	move	#>$000010,x0
	move	x0,y:(r0)+
	move	#>$040000,x0
	move	x0,y:(r0)+
	move	#>$008000,x0
	move	x0,x:$4
	jmp	start
;------------------------------------
;read_one
;	movep	#1,X:PBC		
;	jclr	#0,x:HSR,read_one
;	move	x:HTX,a1
;
;write_one
;	jclr	#1,X:HSR,write_one
;	move	a1,X:HTX		
;---------------------------------
	org	y:$0
vakiot	
	dc	$ff0f0f			;motion maski negiivisena
	dc	-2^19
	dc	$0000f8
	dc	2^4
	dc	2^18
x_size	ds	1
y_size	ds	1
x_stepper
	ds	200
y_stepper	
	ds	200

	org	x:$4
vakio2	dc	2^15
screen
	end
