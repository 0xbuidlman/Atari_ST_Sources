!node Structures
  !subnode Objet
!stg @keywords type spec prec suivant fils pere C_OBJ commentaire L_C_OBJ
    !begin_verbatim
typedef struct
    {
      char  *commentaire;
      C_OBJ_TYPE  type;        /* type de l'objet              */
      void      *prec;      /* grosse liste chain‚            */
      void      *suivant;    /*  normalement tout les void* sont    */
      void      *fils;      /*  en fait de C_OBJ * mais le        */
      void      *pere;      /*  compilateur n'aime pas          */
      SPEC      spec;        /* pointe sur une structure sp‚ciale  */
    }C_OBJ;
    !end_verbatim

!stg @keywords C_OBJ_TYPE t_donnee t_t_type t_appel_proc t_procedure 
!stg @keywords t_constante t_expression t_commentaire t_vide t_bloc
!stg @keywords t_d_procedure
    !begin_verbatim
    typedef  enum
    {
      t_donnee,      /*  donn‚e  */
      t_t_type,      /*  Type    */
      t_appel_proc,
      t_d_procedure,    /*  D‚claration prototype  /*
      t_procedure,    /*  D‚claration procedure  /*
      t_constante,    
      t_expression,    /*   une op‚ration math‚matique ou autre chose  */
      t_commentaire,
      t_bloc,				/*	Un bloc qui contient ce qu'il veut	*/
      t_vide				/*	vide,dernier objet	*/
    }C_OBJ_TYPE;
    !end_verbatim
    
    spec est une union de type (voir xgemfast.h struct OBJECT)
    \gnu\include\xgemfast.h:688:
!stg @keywords SPEC donnee ap_proc proc cts expr vide bloc
    !begin_verbatim
    typedef union
    {
      DONNEE  donnee;
      TYPE    type;
      AP_PROC  ap_proc;
      PROC    proc;
      CTS    cts;
      EXPR    expr;
      char*		bloc;
      int    vide;
    }SPEC;
    !end_verbatim

    Suivant le type, spec pointe sur les structures:
    !begin_description
!stg @keywords d_type d_nom d_vi d_flag DONNEE L_DONNEE d_autre
      !item [type==t_donnee]
        D‚claration de donn‚e
        !begin_verbatim
        typedef  struct
        {
          TYPE_D  d_type;    /* d_type=char,int,...    */
          char    *d_nom;    /* Nom de la donn‚e      */
          char    *d_vi;    /* Valeur initiale (texte) */
          long    d_tab;    /* Nbre d'‚l‚ment du tableau  si
                          ==0 -> pas un tableau  */
          int    d_flag;  /* Bit 0: Pointeur
                           1: Extern
                           2: Long
                           3: unsigned        */
          C_OBJ * d_autre;    /* Autre type   */
        }DONNEE;
        !end_verbatim
      
!stg @keywords tt_type tt_nom tt_flag TYPE L_TYPE
      !item [type==t_t_type]
        D‚claration d'un type
        !begin_verbatim
        typedef struct
        {
          TYPE_D  tt_type;    /* enum,struct...   */
          char    *tt_nom;   /* Nom du type     */
			 int		tt_flag;   /* Bit 2: Long
	  			                       3: unsigned           */
		    void		*tt_autre;	/* autre type C_OBJ	*/
        }TYPE;
        !end_verbatim
        fils pointe sur un blocs qui d‚crit la structure

!stg @keywords ap_nom AP_PROC L_AP_PROC
      !item [type==t_appel_proc]
        Appel d'une proc‚dure
        !begin_verbatim
        typedef struct
        {
          char  *ap_nom; /* nom de la proc‚dure … appeler */
        }AP_PROC;
        !end_verbatim
        fils pointe sur la liste de paramŠtre
        
!stg @keywords pr_nom pr_donnee pr_type pr_flag pr_autre PROC L_PROC
      !item [type==t_d_procedure || type==t_procedure]
        D‚claration d'une procedure
        !begin_verbatim
        typedef struct
        {
            char    *pr_nom;     /* nom de la proc‚dure  */
				TYPE_D pr_type;
				int	  pr_flag;   /* Bit 0: Pointeur
				                         1: Extern
				                         2: Long
				                         3: unsigned           */
				void		*pr_autre;	/* autre type C_OBJ *		*/
        }PROC;
        !end_verbatim
        fils pointe sur le bloc d'instruction (voir programme)

!stg @keywords cts_nom cts_constante CTS L_CTS
      !item [type==t_constante]
        !begin_verbatim
        typedef struct
        {
          char  *cts_nom;
          char  *cts_constante;  /* texte de la constante  */
        }CTS;
        !end_verbatim

!stg @keywords epr_expression EXPR L_EXPR
      !item [type==t_expr‚ssion]
        !begin_verbatim
        typedef struct
        {
          char  *epr_expression;  /* texte de l'expr‚ssion  */
        }EXPR;
        !end_verbatim

        On pourra v‚rifi‚ l'expr‚ssion en fonction des variables 
        d‚clar‚ ou non, la compatibilit‚ des types, etc...

      !item [type==t_commentaire]
        rien d'autre
    !end_description

!stg @keywords t_int t_char t_reel t_enum t_union t_autre t_struct TYPE_D t_nul
      !begin_verbatim
      typedef enum
      {
        t_int,
        t_char,
        t_reel,
        t_struct,
		  t_enum,
        t_union,
        t_nul,
        t_autre
      }TYPE_D;
      !end_verbatim

!stg @keywords OPERATOR op_plus op_moins op_mult op_div op_affect op_et op_ou 
!stg @keywords op_xou op_not op_ov_parent op_fr_parent
!stg @keywords op_legal op_lnegal op_inf op_sup op_infe op_supe op_let op_lou
!stg @keywords op_lxou op_lnot op_var op_varp op_cts op_fin_exp N_OPERATOR
!begin_verbatim
typedef enum
{
	op_ov_parent,		/*	parenthŠse	*/
	op_fr_parent,
   op_affect,
   op_plus,
   op_moins,
   op_mult,
   op_div,
   op_et,
   op_ou,
   op_xou,
   op_not,
   op_legal,        /*     operateur logique	*/
   op_lnegal,
   op_inf,
   op_sup,
   op_infe,				/* inf ou egal	*/
   op_supe,
   op_let,
   op_lou,
   op_lxou,
   op_lnot,
   op_var,      /*    Variable */
   op_varp,     /*    Variable pointeur */
   op_cts,      /*    constante			*/
   op_fin_exp   /*    Fin de l'xpr‚ssion  */
}OPERATOR;
!end_verbatim