@subject "Programation"
@tabsize 3
@author "VALVASSORI Mo‹se"
@database "C Gen - D‚velopement"

@node Main "Table des matiŠres"
@symbol "Table des matiŠres"
@{U}Table des matiŠres                                                    @{u}


 1  Quoi???
 2  Calendrier
 3  Object
 4  Modules
 5  windform.o
 6  Interface
 7  Structures
 8  Variables
 9  BUGS
@endnode


@node "Quoi???"
@toc "Main"
@{U}1  Quoi???                                                            @{u}

C Gen est un logiciel qui permetra de `d‚ssiner' un programme …
l'‚cran et de le convertir dans un langage de programmation `‚voluer'
(C,pascal,Basic,asm :-)), Il sera modulaire chaque langage aura son
propre module, on pourra faire aussi des modules pour diff‚rent type
de dessin, pour diff‚rent type de programmation (classique, GEM,
GEM+)

 1.1  Structure d'un programme
 1.2  Option

@endnode


@node "Structure d'un programme"
@toc "Quoi???"
@{U}1.1  Structure d'un programme                                         @{u}

  1. D‚claration de l'environement (DE)
     Contient la liste des variables et les prototypes
     on pourra trier la fenˆtre suivant:

        ù l'ordre alphab‚tique

        ù les types

     on pourra mettre la DE dans une fenˆtre s‚par‚

  2. Procedure principale (Main)

        ù Option de `blocs' d‚pliant.

@endnode


@node "Option"
@toc "Quoi???"
@{U}1.2  Option                                                           @{u}

   ù Option de lecture des prototypes et des fct contenu dans les
     libs

   ù Mettre les fonctions standard commune … chaque langage (ex
     strcpy...)

   ù dans le modules propre aux langages de sortie, mettre une fct
     qui lise les includes

   ù dans les modules, mettre un flag pour dire s'il affiche,
     g‚nŠrent ...

   ù gerer les different modules (*.o) et les makefiles

   ù faire un shell pour lancer la compilation

   ù Pour les options charger et sauver, regarder dans STMAG
     l'article `comment int‚grer les RSc au corps du programme

@endnode


@node "Calendrier"
@toc "Main"
@{U}2  Calendrier                                                         @{u}

 @{B}16.08.96@{b} D‚but du codage, installation des routines GEM.

 @{B}01.09.96@{b} Windform gŠre WF_BOTOM de Winx

 @{B}26.09.96@{b} On gŠre parfaitement (normalement :-) ) les fenˆtres texte.

 @{B}27.09.96@{b} On peut s‚lectionner une ligne
     on peut modifi‚ une donn‚e

 @{B}28.09.96@{b} iconification des fenˆtres

 @{B}04.10.96@{b} Nouveau filtre pour champ ‚ditable (ED_VAR)

 @{B}08.10.96@{b} Commence … g‚rer les Nouveaux Type

 @{B}09.10.96@{b} D‚but de v‚ritable structuration du programme

 @{B}11.10.96@{b} Nouveau type: les structures

 @{B}17.10.96@{b} nouveau type: les unions

 @{B}22.10.96@{b} Commence … gerer les autre type pour les donn‚es

 @{B}25.10.96@{b} GŠrent autre type de donn‚e

 @{B}05.12.96@{b} reprise du boulot: type d'un autre type!
     D‚but des d‚claration des fonctions

 @{B}15.12.96@{b} Cr‚ation de la proc‚dure principale

 @{B}17.12.96@{b} D‚but cr‚ation des expr‚ssions

 @{B}23.01.97@{b} Undo ferme la fenˆtre courante

@endnode


@node "Object"
@toc "Main"
@{U}3  Object                                                             @{u}

 3.1  main.o
 3.2  rsc.o
 3.3  rsc_bis.o
 3.4  code.o
 3.5  s_malloc.o
 3.6  affichage.o
 3.7  fenetre.o
 3.8  f_expr.o

@endnode


@node "main.o"
@toc "Object"
@{U}3.1  main.o                                                           @{u}

@keywords open_work
 @{B}void open_work(void)@{b} Init la vdi l'aes...

@endnode


@node "rsc.o"
@toc "Object"
@{U}3.2  rsc.o                                                            @{u}

@keywords gaddr_rsrc
@keywords select_menu
 @{B}void gaddr_rsrc(void)@{b} Initialise la ressource,place le bureau

@keywords Teste_config
 @{B}int select_menu(void);@{b} Etoile qui rayonne sur les fnct suivant le
     menu choisi

@keywords alerte
 @{B}void Teste_config(void);@{b} Teste la configuration

 @{B}int alerte(int mes);@{b} affiche une boite d'alerte
     en retour le nø du bouton cliqu‚

        ù 0 Quitter?

        ù default ...

@keywords messag
 @{B}char * messag(int mes);@{b} renvoi un pointeur sur le message choisi

        ù 0 nom de la fenetre programme

@keywords form
@keywords f_informe
 @{B}void form(int evnt);@{b} gŠrent patiellement le formulaire en fenˆtre

@keywords f_tool_box
 @{B}void f_informe(int event);@{b} gerent le formulaire f'information

@keywords f_systeme
 @{B}void f_tool_box(int event)@{b} Tool box

@keywords f_donnee_state
 @{B}void f_systeme(int event);@{b} info sur la m‚moire

@keywords f_donnee
 @{B}void f_donnee_state(int state)@{b} disable ou enable les ob_state de
     f_donnee en effete une donn‚e dans une strucutre ne peut pas
     avoir de valeur initiale

@keywords f_type
 @{B}void f_donnee(int event)@{b} request de donn‚e

@keywords f_fct
 @{B}void f_type(int event)@{b} request de type

@keywords type_popup_check
 @{B}void f_fct(int event)@{b} request de fonction

 @{B}void type_popup_check(int state);@{b} able ou disable les struct ou les
     union pour le pop up type. 0 normal, 1 pas de struct ou d'union

@endnode


@node "rsc_bis.o"
@toc "Object"
@{U}3.3  rsc_bis.o                                                        @{u}

@keywords init_f_donnee
@keywords return_f_donnee

      @{B}void init_f_donnee(char *nom,char *commen,char *vi,TYPE_D type,long tab,int flag,C_OBJ *autre)@{b}
      Remplit les jolies cases du formulaire de donn‚es. Si on passe
     NULL ou 0 comme paramŠtre alors tout est vierge

@keywords init_f_type

      @{B}void return_f_donnee(char **nom,char **commen,char **vi,TYPE_D *type,long *tab,int *flag,C_OBJ **autre)@{b}
      Renvoi les valeurs du formulaires donnee

@keywords init_f_fct

      @{B}void init_f_type(char *nom, char *commen, int type, int flag, C_OBJ *autre);@{b}
      Renvoi les valeurs du formulaires type

@keywords return_f_fct

      @{B}void init_f_fct(char *nom,char *commen,TYPE_D type,int flag,C_OBJ *autre)@{b}
      Remplit les jolies cases du formulaire de donn‚es. Si on passe
     NULL ou 0 comme paramŠtre alors tout est vierge


      @{B}void return_f_fct(char **nom, char **commen, TYPE_D *type, int *flag, C_OBJ **autre)@{b}
      Renvoi les valeurs du formulaire fonction

@keywords return_f_type

      @{B}void return_f_type(char **nom,char **commen,TYPE_D *type,int *flag, C_OBJ **autre)@{b}
      Renvoi les valeurs du formulaires type

@keywords autre_type autre_type_affiche
 @{B}void autre_type(WINDFORM_VAR wind, int pop)@{b} Affiche un boite
     d'alerte pr‚emtive pour choisir le type de l'objet. @{I} L'objet
     selectionn‚ est retourn‚ dans le masque du pop_up de obj @{i}

@endnode


@node "code.o"
@toc "Object"
@{U}3.4  code.o                                                           @{u}

@keywords nouveau
 @{B}void nouveau(void)@{b} Cr‚e un nouveau 'programme`

@keywords nouvelle_donnee where
 @{B}void nouvelle_donnee(int where)@{b} Cr‚e une nouvelle donn‚e
     si @{I}where@{i}==0 creer l'objet … la suite des autres objet
     ==1 creer l'objet apres l'objet courant.

@keywords nouveau_prototype
 @{B}void nouveau_prototype(int where)@{b} Cr‚e une nouvelle fonction

@keywords nouvelle_fonction
 @{B}void nouvelle_fonction(int where)@{b} Cr‚e une nouvelle fonction
     "proc‚dure principale"

@keywords nouveau_type
 @{B}void nouveau_type(int)@{b} cr‚e un nouveau type

@keywords efface efface_objet
 @{B}void efface(C_OBJ *obj,C_OBJ *obj_fin)@{b} Efface r‚cursivement tout un
     programme. @{B} obj@{b} le premier objet … effacer. @{B}obj_fin@{b}le dernier
     objet … effacer si NULL efface jusque … la fin

@keywords modif_objet modif_objet_2
 @{B}void modif_objet(C_OBJ *obj)@{b} Modifie un object

 @{B}void modif_objet_2(void)@{b}

@keywords generation
 @{B}int generation(C_OBJ *obj);@{b} retourne le nombre de g‚neration (pere-
     fils) de l'objet.

@keywords cree_fils_vide
 @{B}void cree_fils_vide(C_OBJ *obj)@{b} cree un objet vide qui est le fils
     de obj, et le met … la fin de la liste.

@keywords liste_type liste_type1 liste_type2 trier_liste_type
 @{B}int liste_type(C_OBJ ***liste)@{b} Fabrique une liste des type class‚e
     par ordre alphab‚tique

@keywords liste_var trier_liste_var
 @{B}int liste_var(C_OBJ ***liste);@{b} Fabrique une liste des variables
     class‚e

@endnode


@node "s_malloc.o"
@toc "Object"
@{U}3.5  s_malloc.o                                                       @{u}

debugge les MALLOCs

@endnode


@node "affichage.o"
@toc "Object"
@{U}3.6  affichage.o                                                      @{u}

GŠre les affichages

@keywords affiche
 @{B}void affiche(void);@{b} Affiche le programme

@keywords ecrit
 @{B}C_OBJ *ecrit(C_OBJ *obj,int x,int y,int wc,int hc,int ystop)@{b}

@keywords cherche_objet
 @{B}C_OBJ *cherche_objet(C_OBJ *obj,int ligne,int *compte);@{b} retourne
     l'adresse de l'objet souhaite. Ca marche en montant ou en
     descendant.

      @{B}obj@{b} objet d'ou commence la recherche

      @{B}ligne@{b} nø de l'objet cherch‚

      @{B}compte@{b} nø de l'objet de d‚part @{U}ATTENTION@{u} compte est un pointeur
          donc on ne pas passer le paramŠtre en "imm‚diat"

@keywords selectionne_item
 @{B}void selectionne_item(WINDFORM_VAR *nw);@{b} Selectionne un objet dans
     la fenˆtre et le met en inverse vid‚o

@keywords ecrit_donnee
 @{B}static void ecrit_donnee(C_OBJ *obj,char *ligne,int x,int y,int
     wc,int hc,int *x1)] partie qui affiche une donn‚e

@keywords ecrit_type
@keywords ecrit_procedure

      @{B}static void ecrit_type(C_OBJ *obj, char *ligne, int x, int y, int wc, int hc, int *x1);@{b}


@keywords ecrit_bloc

      @{B}static void ecrit_procedure(C_OBJ *obj, char *ligne, int x, int y, int wc, int hc, int *x1);@{b}



      @{B}static void ecrit_bloc(C_OBJ *obj, char *ligne, int x, int y, int wc, int hc, int *x1);@{b}


@endnode


@node "fenetre.o"
@toc "Object"
@{U}3.7  fenetre.o                                                        @{u}

@keywords open_wind
@keywords redraw
 @{B}void open_wind(WINDFORM_VAR *nw);@{b}

@keywords sized
 @{B}void redraw (int x, int y, int w, int h);@{b}

@keywords fulled
 @{B}void sized (WINDFORM_VAR *nw);@{b}

@keywords arrow
 @{B}void fulled (WINDFORM_VAR *nw);@{b}

@keywords hslider
 @{B}void arrow (WINDFORM_VAR *nw);@{b}

@keywords vslider
 @{B}void hslider (WINDFORM_VAR *nw);@{b}

@keywords sliders
 @{B}void vslider (WINDFORM_VAR *nw);@{b}

@keywords set_clip
 @{B}void sliders (WINDFORM_VAR *nw);@{b}

@keywords wind
 @{B}void set_clip (int clip_flag, GRECT *area);@{b}

@keywords w_redraw
 @{B}void wind(int evnt,WINDFORM_VAR *nw);@{b} Centralise le choix des
     fenetre

 @{B}void w_redraw(WINDFORM_VAR w)@{b} envoi un message de redraw pour la
     fenetre w

@endnode


@node "f_expr.o"
@toc "Object"
@{U}3.8  f_expr.o                                                         @{u}

@keywords f_expr
 @{B}void f_expr(int event)@{b} GŠre la fenˆtre "expr‚ssion"

@keywords affiche_droite

      @{B}static void affiche_droite(int *pos,void (*aff)(int,int),int nl,int select)@{b}
      affiche les donn‚es de la fenˆtre de droite

@keywords affiche_liste
 @{B}static void (*affiche_liste)(int pos,int nl ,int flag);@{b} pointeur qui
     affiche la liste de droite

@keywords select_item
 @{B}static select_item(int pos,int select)@{b} selectionne l'item lorsqu'on
     d‚place l'ascenseur

@keywords affiche_operateur
 @{B}static void affiche_operateur(int pos,int nl,int flag);@{b} affiche les
     operateurs dans la fenˆtre de droite

@keywords affiche_variable
 @{B}static void affiche_variable(int pos,int nl,int flag);@{b} affiche les
     variables dans la fenˆtre de droite

@endnode


@node "Modules"
@toc "Main"
@{U}4  Modules                                                            @{u}

#$&%]*! ??
\image\gemview\moduls.src\strcture\moduls.h:1:
\image\gemview\moduls.src\LOADmodl\imagelab.c:20:

@endnode


@node "windform.o"
@toc "Main"
@{U}5  windform.o                                                         @{u}

GŠrent les formulaires en fenˆtre, les pop_up,les raccourcis clavier,
les STs...

 @{WindGem link WindGem.hyp}
@keywords PP_ATTR
@{B}PP_ATTR@{b} est une constante qui d‚finie l' ob_state d'un pop_up: Shadow
et outlined ou Shadow tout court

 5.1  Nouveau Type
 5.2  Nouveau formulaire
 5.3  Structure
 5.4  Fonctions

@endnode


@node "Nouveau Type"
@toc "windform.o"
@{U}5.1  Nouveau Type                                                     @{u}

Pour ce faire, il vous faudra un ‚diteur de ressources capable de
modifier le paramŠtre @{B} Type ‚tendu @{b} comme Orcs ou Interface.

Les valeurs … employer sont les suivantes :

@keywords UNDER_B
@keywords SMALL_B
 @{B}Pour raccourcis clavier :@{b} UNDER_B 18 + [ devant la lettre concern‚e

 @{B}Petite ‚criture :@{b} SMALL_B 22

@keywords ED_VAR
Un nouveau filtre pour les ‚ditables:
Il ne laisse passer que les caractŠres non accentu‚s, les chiffres et
les soulign‚ '_'.
IL faut que l'objet soit ‚ditable, que son masque soit 'x' et que bit
11 de l'ob_flags (ED_VAR) soit mis.

@endnode


@node "Nouveau formulaire"
@toc "windform.o"
@{U}5.2  Nouveau formulaire                                               @{u}

Si on a un nouveau formulaire:

on cr‚e la variable globale extern WINDFORM_VAR @{I}info_var@{i};

on initialise en: init_var(&@{I}info_var@{i},@{I}FORM@{i},x,y);

On cr‚e la proc‚dure @{I}f_form@{i} dans (RSC.C) On ouvre en apelant
@{I}f_form@{i}(OPEN_DIAL);

On gŠre en rajoutant dans form (RSC.C)
case @{I}info_var@{i}.w_handle:
@{I}f_form@{i}(evnt);
break;

 5.2.1  f_form

@endnode


@node "f_form"
@toc "Nouveau formulaire"
@{U}5.2.1  f_form                                                         @{u}

Tout ce qui en italique soit ˆtre modifie

void f_@{I}form@{i}(int event)
{
WINDFORM_VAR *ptr_var = &@{I}info_var@{i};
int choix;

if (event == OPEN_DIAL)

open_dialog(ptr_var, "@{I}Informations@{i}", 0);
else {
choix = windform_do(ptr_var, event);
if (choix != 0) {
if (choix > 0)
if (choix==@{I}OPTION@{i}) /* Si on confirme */
{
@{I}blabla
.
.
.@{i}
}
objc_change(ptr_var->adr_form, choix, 0, ptr_var->w_x,
ptr_var->w_y, ptr_var->w_w, ptr_var->w_h, 0, FALSE);
close_dialog(ptr_var);
}
}
}

@endnode


@node "Structure"
@toc "windform.o"
@{U}5.3  Structure                                                        @{u}

@keywords WINDFORM_VAR w_attr w_col w_lin
@keywords adr_form w_handle w_x w_y w_w w_h w_ful offset edit_objc edit_pos
	typedef struct
	{
		OBJECT	*adr_form;			/* adresse du formulaire	*/
		int		w_handle;			/* handle de fenˆtre, sert aussi de t‚moin d'ouverture. */
		int		w_x;					/* Coordonn‚es et dimensions de la fenˆtre. */
		int		w_y;
		int		w_w;
		int		w_h;
		int		w_lin,w_col;
		int		w_attr;
		int		w_ful;				/*	Flags pour Fuller									*/
		int		offset;				/* D‚calage x et y pour boite "OUTLINED".		*/
		int		edit_objc;			/* Objet ‚ditable courant. 						*/
		int		edit_pos;			/* Position courante du curseur d'‚dition.	*/
	} WINDFORM_VAR;

@endnode


@node "Fonctions"
@toc "windform.o"
@{U}5.4  Fonctions                                                        @{u}

 5.4.1  Formulaire
 5.4.2  NOT_FALCON

@endnode


@node "Formulaire"
@toc "Fonctions"
@{U}5.4.1  Formulaire                                                     @{u}

@keywords init_var
   ù  void init_var(WINDFORM_VAR *ptr_var, int form_index, int inf_x,
     int inf_y);
     Initialise le formulaire en fenˆtre

      @{B}ptr_var@{b} la variable … initialiser

      @{B}form_index@{b} L'index du formulaire

      @{B}x,y@{b} L'es coordonn‚e de d‚part de la fenˆtre 0=centrer

@keywords open_dialog
   ù  void open_dialog(WINDFORM_VAR *ptr, char *w_title, int
     edit_index);
     Ouvre la fenˆtre de dialogue

      @{B}ptr@{b} La fenˆtre … ouvrir

      @{B}w_title@{b} Le titre de la fenˆtre

      @{B}edit_index@{b} L'index de l'‚ditable par d‚faut

@keywords windform_do
   ù  int windform_do(WINDFORM_VAR *ptr, int evnt);
     GŠre le formulaire en fenˆtre

      @{B}ptr@{b} La fenˆtre … gerer

      @{B}evnt@{b} Evenement … g‚r‚r

@keywords close_dialog
   ù  void close_dialog(WINDFORM_VAR *ptr);
     ferme une fenˆtre

      @{B}ptr@{b} fenˆtre … ferner

@keywords short_cut
   ù  int short_cut(int kbd,int key,OBJECT *adr_menu);
     gere le raccourci clavier du menu

      @{B}kdb, key@{b} Valeur retourner par evnt_multi

      @{B}adr_menu@{b} Adresse du menu … controler

     revoi le nouvel evnt

@keywords check_popup
   ù  void check_popup(MENU_T pu,OBJECT *adr,int o);
     Checke et d‚hecke un pop up

      @{B}pu@{b} le pop_up

      @{B}adr@{b} adresse du formulaire

      @{B}o@{b} Option corespondante (attention: ce doit ˆtre un TEXT et non
          un STRING)

     renvoi l'index de l'option checker

@endnode


@node "NOT_FALCON"
@toc "Fonctions"
@{U}5.4.2  NOT_FALCON                                                     @{u}

@{B}NOT_FALCON@{b} est une constante. Si elle est definie alors les pop up et
les menu hierarchique sont ger‚s par des routines maison.

@keywords Menu_popup MENU_POPUP
   ù int MENU_POPUP( MENU_T *me_menu, int me_xpos, int me_ypos,
     MENU_T *me_mdata);
     Les paramŠtres sont exactement les mˆmes que @{U}menu_popup@{u}

@keywords Menu_attach 	MENU_ATTACH
   ù extern int MENU_ATTACH( int mode, OBJECT *tree, int item, MENU_T
     *mdata );
     Se contentent de rajouter la petite flŠche [] Les paramŠtres
     sont exactement les mˆmes que @{U}menu_attach@{u}

@keywords Menu_istart(a,b,c,d)
@keywords Menu_settings(a,b)
   ù  Menu_istart(a,b,c,d)
     Menu_settings(a,b)

@keywords Menu_hierarchique
   ù  extern void Menu_hierarchique(OBJECT *menu,int item,OBJECT
     *pp);
     Appele un menu hierarchique, il doit ˆtre placer dans
     switch(buf[4])

      @{B}menu:@{b} adresse de menu

      @{B}item:@{b} L'entr‚e du menu hierarchique

      @{B}pp:@{b} adresse de pop_up

     En retour on recoit, un message identique … celui envoye par le
     GEM

@endnode


@node "Interface"
@toc "Main"
@{U}6  Interface                                                          @{u}

 5.0  @{WindGem link WindGem.hyp}
 6.1  Couleur des formulaires

@endnode


@pnode "Couleur des formulaires"
   ù Bleu: G‚n‚ral, config, info

   ù Rouge: Outil

   ù Vert: Request relatif au travail

@endnode


@node "Structures"
@toc "Main"
@{U}7  Structures                                                         @{u}

 7.1  Objet
 7.2  programme

@endnode


@node "Objet"
@toc "Structures"
@{U}7.1  Objet                                                            @{u}

@keywords type spec prec suivant fils pere C_OBJ commentaire L_C_OBJ
typedef struct
    {
      char  *commentaire;
      C_OBJ_TYPE  type;        /* type de l'objet              */
      void      *prec;      /* grosse liste chain‚            */
      void      *suivant;    /*  normalement tout les void* sont    */
      void      *fils;      /*  en fait de C_OBJ * mais le        */
      void      *pere;      /*  compilateur n'aime pas          */
      SPEC      spec;        /* pointe sur une structure sp‚ciale  */
    }C_OBJ;

@keywords C_OBJ_TYPE t_donnee t_t_type t_appel_proc t_procedure
@keywords t_constante t_expression t_commentaire t_vide t_bloc
@keywords t_d_procedure
    typedef  enum
    {
      t_donnee,      /*  donn‚e  */
      t_t_type,      /*  Type    */
      t_appel_proc,
      t_d_procedure,    /*  D‚claration prototype  /*
      t_procedure,    /*  D‚claration procedure  /*
      t_constante,
      t_expression,    /*   une op‚ration math‚matique ou autre chose  */
      t_commentaire,
      t_bloc,				/*	Un bloc qui contient ce qu'il veut	*/
      t_vide				/*	vide,dernier objet	*/
    }C_OBJ_TYPE;

@keywords SPEC donnee ap_proc proc cts expr vide bloc
spec est une union de type (voir xgemfast.h struct OBJECT)
\gnu\include\xgemfast.h:688:

    typedef union
    {
      DONNEE  donnee;
      TYPE    type;
      AP_PROC  ap_proc;
      PROC    proc;
      CTS    cts;
      EXPR    expr;
      char*		bloc;
      int    vide;
    }SPEC;

Suivant le type, spec pointe sur les structures:

@keywords d_type d_nom d_vi d_flag DONNEE L_DONNEE d_autre
 @{B}type==t_donnee@{b} D‚claration de donn‚e

             typedef  struct
             {
               TYPE_D  d_type;    /* d_type=char,int,...    */
               char    *d_nom;    /* Nom de la donn‚e      */
               char    *d_vi;    /* Valeur initiale (texte) */
               long    d_tab;    /* Nbre d'‚l‚ment du tableau  si
                               ==0 -> pas un tableau  */
               int    d_flag;  /* Bit 0: Pointeur
                                1: Extern
                                2: Long
                                3: unsigned        */
               C_OBJ * d_autre;    /* Autre type   */
             }DONNEE;

@keywords tt_type tt_nom tt_flag TYPE L_TYPE
 @{B}type==t_t_type@{b} D‚claration d'un type

             typedef struct
             {
               TYPE_D  tt_type;    /* enum,struct...   */
               char    *tt_nom;   /* Nom du type     */
     			 int		tt_flag;   /* Bit 2: Long
     	  			                       3: unsigned           */
     		    void		*tt_autre;	/* autre type C_OBJ	*/
             }TYPE;

     fils pointe sur un blocs qui d‚crit la structure

@keywords ap_nom AP_PROC L_AP_PROC
 @{B}type==t_appel_proc@{b} Appel d'une proc‚dure

             typedef struct
             {
               char  *ap_nom; /* nom de la proc‚dure … appeler */
             }AP_PROC;

     fils pointe sur la liste de paramŠtre

@keywords pr_nom pr_donnee pr_type pr_flag pr_autre PROC L_PROC
 @{B}type==t_d_procedure || type==t_procedure@{b} D‚claration d'une procedure

             typedef struct
             {
                 char    *pr_nom;     /* nom de la proc‚dure  */
     				TYPE_D pr_type;
     				int	  pr_flag;   /* Bit 0: Pointeur
     				                         1: Extern
     				                         2: Long
     				                         3: unsigned           */
     				void		*pr_autre;	/* autre type C_OBJ *		*/
             }PROC;

     fils pointe sur le bloc d'instruction (voir programme)

@keywords cts_nom cts_constante CTS L_CTS
 @{B}type==t_constante@{b}

             typedef struct
             {
               char  *cts_nom;
               char  *cts_constante;  /* texte de la constante  */
             }CTS;

@keywords epr_expression EXPR L_EXPR
 @{B}type==t_expr‚ssion@{b}

             typedef struct
             {
               char  *epr_expression;  /* texte de l'expr‚ssion  */
             }EXPR;

     On pourra v‚rifi‚ l'expr‚ssion en fonction des variables d‚clar‚
     ou non, la compatibilit‚ des types, etc...

 @{B}type==t_commentaire@{b} rien d'autre

@keywords t_int t_char t_reel t_enum t_union t_autre t_struct TYPE_D t_nul
      typedef enum
      {
        t_int,
        t_char,
        t_reel,
        t_struct,
		  t_enum,
        t_union,
        t_nul,
        t_autre
      }TYPE_D;

@keywords OPERATOR op_plus op_moins op_mult op_div op_affect op_et op_ou
@keywords op_xou op_not op_ov_parent op_fr_parent
@keywords op_legal op_lnegal op_inf op_sup op_infe op_supe op_let op_lou
@keywords op_lxou op_lnot op_var op_varp op_cts op_fin_exp N_OPERATOR
typedef enum
{
	op_ov_parent,		/*	parenthŠse	*/
	op_fr_parent,
   op_affect,
   op_plus,
   op_moins,
   op_mult,
   op_div,
   op_et,
   op_ou,
   op_xou,
   op_not,
   op_legal,        /*     operateur logique	*/
   op_lnegal,
   op_inf,
   op_sup,
   op_infe,				/* inf ou egal	*/
   op_supe,
   op_let,
   op_lou,
   op_lxou,
   op_lnot,
   op_var,      /*    Variable */
   op_varp,     /*    Variable pointeur */
   op_cts,      /*    constante			*/
   op_fin_exp   /*    Fin de l'xpr‚ssion  */
}OPERATOR;

@endnode


@node "programme"
@toc "Structures"
@{U}7.2  programme                                                        @{u}

 7.2.1  corps du programme
 7.2.2  Type
 7.2.3  Expr‚ssion

@endnode


@node "corps du programme"
@toc "programme"
@{U}7.2.1  corps du programme                                             @{u}

  1. DE d‚claration de l'environement g‚n‚rale

      (a) TYPE d‚claration des types

      (b) DONNEE d‚claration des variables

      (c) PROC d‚claration des proc‚dures

  2. MAIN proc‚dure principale

      (a) liste des paramŠtres

                i. DONNEE param1

               ii. DONNEE param2

              iii. DONNEE ...

      (b) DE d‚claration de l'environement locale

                i. TYPE d‚claration des types

               ii. DONNEE d‚claration des variables

              iii. PROC d‚claration des proc‚dures

                     A. proc1 Une proc‚dure

                           ù TYPE type de retour

                           ù DONNEE liste des paramŠtres

                     B. proc2 ...

      (c) Corps de la proc‚dure

  3. proc‚dure proc‚dure quelconque

      (a) liste des paramŠtres

                i. DONNEE param1

               ii. DONNEE param2

              iii. DONNEE ...

      (b) DE d‚claration de l'environement locale

                i. TYPE d‚claration des types

               ii. VAR d‚claration des variables

              iii. PROC d‚claration des proc‚dures

                     A. ...

                     B. ...

      (c) Corps de la proc‚dure

@endnode


@node "Type"
@toc "programme"
@{U}7.2.2  Type                                                           @{u}

  1. struct = nom de la structure

      (a) DONNEE 1ø donn‚e de la structure

      (b) DONNEE 2ø donn‚e de la structure

      (c) .....

  2. enum = nom de l'‚num‚ration

      (a) NOM 1ø nom de l'‚num‚ration

      (b) NOM 2ø nom de l'‚num‚ration

      (c) ....

  3. union = nom de l'union

      (a) TYPE 1ø type de l'union

      (b) TYPE 2ø type de l'union

      (c) .....

  4. proc1 Une proc‚dure

      (a) DONNEE liste des paramŠtres

  5. proc2 ...

@endnode


@node "Expr‚ssion"
@toc "programme"
@{U}7.2.3  Expr‚ssion                                                     @{u}

Expr‚ssion

  1. Opcode==op‚rateur

  2. Opcode==variable

      (a) Variable

  3. Opcode==op‚rateur

  4. Opcode==Constante

      (a) Constante

  5. ...

  6. Opcode==Fin_expr‚ssion

@endnode


@node "Variables"
@toc "Main"
@{U}8  Variables                                                          @{u}

@keywords xb yb wb hb
   ù int xb,yb,wb,hb;
     coordonn‚e du bureau

@keywords n_obj
   ù long n_obj
     Nombre d'objet cr‚er

@keywords start obj curr_aff sel_obj
   ù C_OBJ *start
     D‚part du programme

   ù C_OBJ *curr
     object courant

   ù C_OBJ *curr_aff
     pointe sur le premier objet afficher

   ù C_OBJ *sel_obj
     L'objet selectionn‚

@keywords info_var tbx_var sys_var prog donnee_var type_var fct_var
@keywords expr_var
   ù WINDFORM_VAR

      @{B}info_var@{b} Formulaire d'information

      @{B}tbx_var@{b} Tool Box

      @{B}sys_var@{b} M‚moire et companie

      @{B}prog@{b} fenˆtre de travail

      @{B}donnee_var@{b} Formulaire request donn‚e
          si w_lin ==

             - 1: nouvelle donn‚e

             - 2: modifie donn‚e

      @{B}type_var@{b} Formulaire request type
          w_lin a la mˆme fonction que donnee_var

      @{B}fct_var@{b} Formulaire request fonction
          w_lin a la mˆme fonction que donnee_var

      @{B}expr_var@{b} formulaire de cr‚ation des expr‚ssions

@keywords adr_mes adr_desk adr_menu adr_autre_type
@keywords adr_typ_pp adr_icon adr_operator
   ù OBJECT

      @{B}adr_mes@{b} formulaire des message pour les fenˆtre

      @{B}adr_desk@{b} fond du bureau

      @{B}adr_menu@{b} adresse du menu

      @{B}adr_autre_type@{b} formulaire autre type gerer en mode premtif

      @{B}adr_typ_pp@{b} popup des type de donn‚e

      @{B}adr_icon@{b} icone pour l'iconification

      @{B}adr_operator@{b} liste des op‚rateurs

@endnode


@node "BUGS"
@toc "Main"
@{U}9  BUGS                                                               @{u}

 9.1  corrig‚
 9.2  non corrig‚

@endnode


@node "corrig‚"
@toc "BUGS"
@{U}9.1  corrig‚                                                          @{u}

 @{B}17.08.96@{b} Si la rsc n'est pas charger ???
     main.c:36:

 @{B}01.09.96 01.09.96@{b} Lorsque on rentre la premiere donn‚e la zone est
     corompu.
     Car les FREE de return_f_donnee ne sont initialise. On peut
     resoudre le pb en effa‡ant la donn‚e avant de lire ce qu'il y a
     dedans.

 @{B}01.09.96@{b} On est dans le formulaire Nouvelle Donn‚e
     On tape le nom et tout et tout
     On clique sur LONG puis on change de type
     et l… au lieu d'afficher Long on a Non sign‚
     Trop simple, lors de la premiŠre affectation, il faut mettre =
     et non += comme ca tout les bits qui n'ont rien … voir sont … 0.

 @{B}23.09.96 - 24.09.96@{b} quand un tableau fait plus de 16 bits de long ‡…
     plante code.c:62: affichag.c:66: rsc.c:336:
     Dans affichag.c @{I}Dummy[] @{i} etait trop petit pour recevoir un
     nombre de 32bits.

 @{B}17.08.96 - 27.09.96@{b} Redessiner le fenˆtre systŠme en envoyant un
     message de REDRAW, car si une autre fenˆtre la chevauche ‡…
     `bave'

 @{B}27.09.96 - 29.09.96@{b} Penser … mettre des FREEs dans return_f_donnee.
     Au passage j'initialise nom commm et vi, comme ‡…, il plante pas
     au premier FREE.

 @{B}18.08.96 - 29.09.96@{b} D‚tail amusant, si on appuis sur Return alors
     que la Tool box en en premier plan, Il y a 2 bombes qui arrivent
     sans que je demande rien, magique non?
     @{B}@{I} encore plus magique@{b}@{i}, je reteste, et voil… que ‡… marche au
     poil!!!

 @{B}28.09.96 - 29.09.96@{b} l'affichage commence toujours coll‚ au bord
     gauche de la fenˆtre mˆme si c'est un fils. mettre un variable
     de 'g‚n‚ration' ou faire un fonction qui remonte juste … start.
     J'ai opter pour la fonction @{S}generation@{s}

 @{B}30.09.96 - 30.09.96@{b} Faire un fonction w_redraw qui g‚nŠre un redraw

 @{B}30.09.96 - 04.10.96@{b}

        ù [x] quand on efface, penser … re-affecter start et
          curr_aff...

        ù [] reconstruire la chaine (prec-suivant)

 @{B}08.10.96 - 09.10.96@{b} Quand on modifie un type: 2 bombes.

 @{B}10.10.96 - 11.10.96@{b} Procedure DE, Procedure TYPE etc sont ... des
     proc‚dures et il faut que ce soit des blocs donc:

        ù Rajouter dans l'union SPEC, char *bloc ,

        ù modifier code.c:nouveau et affichage.c:ecrit

 @{B}11.10.96 - 11.10.96@{b} selectionne_item ou cherche_objet d‚conne.
     En fait, c'‚tait compte qui ‚tait "trop local", et en remontant
     on ne transmetait pas obj.

 @{B}14.10.96 - 14.10.96@{b} Si on selectionner une structure la donn‚e qui
     ce cr‚e ‚tait au mˆme niveau que la structure

 @{B}17.10.96 - 17.10.96@{b} Quand on rejoute un nouveau type dans les unions
     ca plante. De plus, les types se cr‚ent dans les variables
     globale (voir les 3 premiere ligne de nouveau_type).

 @{B}18.10.96 - 20.10.96@{b} (x) G‚nial on peut plus se servir des sliders et
     autre gadget. Ca plante que quand on bouge les gadgets
     verticaux. OK
     (x) les object de g‚n‚ration sup‚rieure … curr_aff ne sont pas
     afich‚s

        ù on repŠte le type sup‚rieur

        ù l'alignement et toujours le mˆme que curr_aff

 @{B}20.10.96 - 22.10.96@{b} dans liste type, ne pas liste les type de
     l'union (pas les fils de la liste). Donc ne pas commencer par
     start.

 @{B}22.10.96 - 23.10.96@{b} Gerer les ascenseurs de autre type de donn‚e

 @{B}25.10.96 - 26.10.96@{b} 2 bombes: On cr‚‚e une donn‚e d'un type qui
     existe pas et boom. En effet dans ce cas d_autre pointer sur
     NULL. Et d‚s que l'on y acc‚der: Bababoum.

 @{B}15.01.97 - 15.01.97@{b} Un clic sur le bureau et boum

 @{B}18.01.97 - 18.01.97@{b} Il n'y a plus de prototype de fonction quand on
     confirme les fonctions

 @{B}23.01.97 - 25.01.97@{b} Dans @{I}Expr‚ssion@{i}, quand on selectionne un item et
     que l'on bouge l'ascenseur l'item selectionn‚ ne suit pas. Mˆme
     problŠme dans @{I}autre type@{i}

 @{B}25.01.97 - 27.01.97@{b} Quand le curseur texte est sur un ED_VAR, le
     UNDO ne marche plus, idem pour les raccourcis claviers. Le
     filtre pour ED_VAR filtrer aussi les alts donc plus de
     raccourcis.

@endnode


@node "non corrig‚"
@toc "BUGS"
@{U}9.2  non corrig‚                                                      @{u}

@alias bug
 @{B}11.12.96 - @{b} Quand on cr‚e une union struct ou proc‚dure, le premier
     paramŠtre est correct (pas de valeur intiale), mais les autres
     ne le sont pas.

 @{B} - @{b} .

@endnode



