!tex %format latex
!tex \input german.tex
!tex \documentstyle[din_a4,twoside,8pt]{article}
!tex \selectlanguage{\french}
!tex \frenchspacing
!tex \pagestyle{headings}
!stg @subject "Programation"
!stg @tabsize 3
!use_short_toc 		[stg,html]
!use_auto_subtocs		[stg,html]
!use_auto_subsubtocs	[stg,html]
!french
!author VALVASSORI Mo‹se
!title  C Gen - D‚velopement
!tex \author{VALVASSORI Mo‹se}
!tex \title{C Gen \\ D‚velopement}

# 1  Quoi???
# 2  Calendrier
# 3  Object
#	 3.1  main.o
#	 3.2  rsc.o
#	 3.3  rsc_bis.o
#	 3.4  code.o
#	 3.5  s_malloc.o
#	 3.6  affichage.o
#	 3.7  fenetre.o
# 4  Modules
# 5  windform.o
# 6  Interface
# 7  Structures
# 8  Variables
# 9  BUGS


!begin_document
!tex \maketitle
!ifdest [stg,html]
	!maketitle
	!tableofcontents
!endif

!include intro.u
#########################################
!node Calendrier
!begin_description
	!item [16.08.96]	D‚but du codage, installation des routines GEM.
	!item [01.09.96]	Windform gŠre WF_BOTOM de Winx
	!item [26.09.96]	On gŠre parfaitement (normalement (!laugh) ) les fenˆtres 
		texte.
	!item [27.09.96]	On peut s‚lectionner une ligne (!nl)
		on peut modifi‚ une donn‚e
	!item [28.09.96]	iconification des fenˆtres
	!item [04.10.96]	Nouveau filtre pour champ ‚ditable (ED_VAR)
	!item [08.10.96]	Commence … g‚rer les Nouveaux Type
	!item [09.10.96]	D‚but de v‚ritable structuration du programme
	!item [11.10.96]	Nouveau type: les structures
	!item [17.10.96]	nouveau type: les unions
	!item [22.10.96]	Commence … gerer les autre type pour les donn‚es
	!item [25.10.96]	GŠrent autre type de donn‚e
	!item [05.12.96]	reprise du boulot: type d'un autre type! (!nl)
					D‚but des d‚claration des fonctions
	!item [15.12.96]	Cr‚ation de la proc‚dure principale
	!item [17.12.96]	D‚but cr‚ation des expr‚ssions
	!item [23.01.97]	Undo ferme la fenˆtre courante
!end_description
###########################################
!node Object
	!subnode main.o
		!begin_description
!stg @keywords open_work
			!item [void open_work(void)] Init la vdi l'aes...
		!end_description
###########################################
	!subnode rsc.o
		!begin_description
!stg @keywords gaddr_rsrc
			!item [void		gaddr_rsrc(void)]
				Initialise la ressource,place le bureau
!stg @keywords select_menu
			!item [int		select_menu(void);]
				Etoile qui rayonne sur les fnct suivant le menu choisi
!stg @keywords Teste_config
			!item [void		Teste_config(void);]
				Teste la configuration
!stg @keywords alerte
			!item [int		alerte(int mes);]
				affiche une boite d'alerte (!nl)
				en retour le nø du bouton cliqu‚
				!begin_itemize
					!item 0	Quitter?
					!item default	...
				!end_itemize
!stg @keywords messag
			!item [char *	messag(int mes);]
				renvoi un pointeur sur le message choisi
				!begin_itemize
					!item 0	nom de la fenetre programme
				!end_itemize
!stg @keywords form				
			!item [void		form(int evnt);]
				gŠrent patiellement le formulaire en fenˆtre
!stg @keywords f_informe
			!item [void		f_informe(int event);]
				gerent le formulaire f'information
!stg @keywords f_tool_box
			!item [void f_tool_box(int event)]
				Tool box
!stg @keywords f_systeme
			!item [void		f_systeme(int event);] info sur la m‚moire
!stg @keywords f_donnee_state
			!item [void f_donnee_state(int state)] disable ou enable les ob_state 
				de f_donnee en effete une donn‚e dans une strucutre ne peut pas 
				avoir de valeur initiale
!stg @keywords f_donnee
			!item [void f_donnee(int event)]	request de donn‚e
!stg @keywords f_type
			!item [void f_type(int event)]	request de type
!stg @keywords f_fct
			!item [void f_fct(int event)]	request de fonction
!stg @keywords type_popup_check
			!item [void		type_popup_check(int state);] able ou disable les 
				struct ou les union pour le pop up type. 0 normal, 1 pas de struct 
				ou d'union

		!end_description
###################################################
	!subnode rsc_bis.o
	!begin_description
!stg @keywords init_f_donnee
			!item [void init_f_donnee(char *nom,char *commen,char *vi,TYPE_D type,long tab,int flag,C_OBJ *autre)]
				Remplit les jolies cases du formulaire de donn‚es. Si on passe 
				NULL ou 0 comme paramŠtre alors tout est vierge
!stg @keywords return_f_donnee
			!item [void return_f_donnee(char **nom,char **commen,char **vi,TYPE_D *type,long *tab,int *flag,C_OBJ **autre)]
				Renvoi les valeurs du formulaires donnee
!stg @keywords init_f_type
			!item [void	init_f_type(char *nom,	char *commen,	int type,	int flag, C_OBJ *autre);]
				Renvoi les valeurs du formulaires type
!stg @keywords init_f_fct
			!item [void init_f_fct(char *nom,char *commen,TYPE_D type,int flag,C_OBJ *autre)]
				Remplit les jolies cases du formulaire de donn‚es. Si on passe 
				NULL ou 0 comme paramŠtre alors tout est vierge
!stg @keywords return_f_fct
			!item [void return_f_fct(char **nom,	char **commen,	TYPE_D *type,	int *flag, C_OBJ **autre)]
				Renvoi les valeurs du formulaire fonction

!stg @keywords return_f_type
			!item [void return_f_type(char **nom,char **commen,TYPE_D *type,int *flag,	C_OBJ **autre)]
				Renvoi les valeurs du formulaires type

!stg @keywords autre_type autre_type_affiche
			!item [void autre_type(WINDFORM_VAR wind, int pop)]	Affiche un boite d'alerte pr‚emtive 
				pour choisir le type de l'objet. (!I) L'objet selectionn‚ est 
				retourn‚ dans le masque du pop_up de obj (!i)
	!end_description
###################################################
	!subnode code.o
		!begin_description
!stg @keywords nouveau
		!item [void nouveau(void)] Cr‚e un nouveau ''programme''

!stg @keywords nouvelle_donnee where
		!item [void nouvelle_donnee(int where)]	Cr‚e une nouvelle donn‚e (!nl)
			si (!I)where(!i)==0 creer l'objet … la suite des autres objet (!nl)
			==1 creer l'objet apres l'objet courant.

!stg @keywords nouveau_prototype
		!item [void nouveau_prototype(int where)]	Cr‚e une nouvelle fonction

!stg @keywords nouvelle_fonction
		!item [void nouvelle_fonction(int where)]	Cr‚e une nouvelle fonction 
			""proc‚dure principale""

!stg @keywords nouveau_type
		!item [void	nouveau_type(int)]	cr‚e un nouveau type

!stg @keywords efface efface_objet
		!item [void efface(C_OBJ *obj,C_OBJ *obj_fin)]	Efface 
			r‚cursivement tout un programme. (!B) obj(!b) le premier objet … 
			effacer. (!B)obj_fin(!b)le dernier objet … effacer si NULL efface 
			jusque … la fin

!stg @keywords modif_objet modif_objet_2
		!item [void modif_objet(C_OBJ *obj)]	Modifie un object
		!item [void modif_objet_2(void)]

!stg @keywords generation
		!item [int generation(C_OBJ *obj);] retourne le nombre de g‚neration 
		(pere-fils) de l'objet.

!stg @keywords cree_fils_vide
		!item [void cree_fils_vide(C_OBJ *obj)] cree un objet vide qui est le 
			fils de obj, et le met … la fin de la liste.

!stg @keywords liste_type liste_type1 liste_type2 trier_liste_type
		!item [int liste_type(C_OBJ ***liste)] Fabrique une liste des type class‚e par 
			ordre alphab‚tique

!stg @keywords liste_var trier_liste_var
		!item [int	liste_var(C_OBJ ***liste);] Fabrique une liste des variables 
			class‚e


		!end_description
####################################################

	!subnode s_malloc.o
		debugge les MALLOCs
	
##########################################
	!subnode affichage.o
		GŠre les affichages
	
	!begin_description
!stg @keywords affiche
		!item [void affiche(void);] Affiche le programme

!stg @keywords ecrit
		!item [C_OBJ	*ecrit(C_OBJ	*obj,int x,int y,int wc,int hc,int ystop)]

!stg @keywords cherche_objet 
		!item [C_OBJ *cherche_objet(C_OBJ *obj,int ligne,int *compte);] retourne 
			l'adresse de l'objet souhaite. Ca marche en montant ou en descendant.
		!begin_description
			!item [obj]		objet d'ou commence la recherche
			!item [ligne]	nø de l'objet cherch‚
			!item [compte]	nø de l'objet de d‚part (!U)ATTENTION(!u) compte est 
				un pointeur donc on  ne pas passer le paramŠtre en ""imm‚diat""
		!end_description 

!stg @keywords selectionne_item
		!item [void selectionne_item(WINDFORM_VAR *nw);] Selectionne un objet 
			dans la fenˆtre et le met en inverse vid‚o

!stg @keywords ecrit_donnee
		!item [static void ecrit_donnee(C_OBJ *obj,char *ligne,int x,int y,int 
		wc,int hc,int *x1)] partie qui affiche une donn‚e

!stg @keywords ecrit_type
		!item [static void		ecrit_type(C_OBJ *obj,	char *ligne,	int x,	int y,	int wc,	int hc,	int *x1);]
!stg @keywords ecrit_procedure
		!item [static void		ecrit_procedure(C_OBJ *obj,	char *ligne,	int x,	int y,	int wc,	int hc,	int *x1);]
!stg @keywords ecrit_bloc
		!item [static void		ecrit_bloc(C_OBJ *obj,	char *ligne,	int x,	int y,	int wc,	int hc,	int *x1);]

	!end_description
##########################################
	!subnode fenetre.o
	!begin_description
!stg @keywords open_wind
		!item [void		open_wind(WINDFORM_VAR *nw);]
!stg @keywords redraw
		!item [void		redraw (int x, int y, int w, int h);]
!stg @keywords sized
		!item [void		sized (WINDFORM_VAR *nw);]
!stg @keywords fulled
		!item [void		fulled (WINDFORM_VAR *nw);]
!stg @keywords arrow
		!item [void		arrow (WINDFORM_VAR *nw);]
!stg @keywords hslider
		!item [void		hslider (WINDFORM_VAR *nw);]
!stg @keywords vslider
		!item [void		vslider (WINDFORM_VAR *nw);]
!stg @keywords sliders
		!item [void		sliders (WINDFORM_VAR *nw);]
!stg @keywords set_clip
		!item [void		set_clip (int clip_flag, GRECT *area);]
!stg @keywords wind
		!item [void		wind(int evnt,WINDFORM_VAR *nw);] Centralise le choix des 
		fenetre
!stg @keywords w_redraw
		!item [void w_redraw(WINDFORM_VAR w)] envoi un message de redraw pour la 
			fenetre w

	!end_description
##########################################
	!subnode f_expr.o
	!begin_description
!stg @keywords f_expr
	!item [void f_expr(int event)]	GŠre la fenˆtre ""expr‚ssion""

!stg @keywords affiche_droite
	!item [static void affiche_droite(int *pos,void (*aff)(int,int),int nl,int select)] 
		affiche les donn‚es de la fenˆtre de droite

!stg @keywords affiche_liste
	!item [static void (*affiche_liste)(int pos,int nl ,int flag);]	pointeur 
		qui affiche la liste de droite

!stg @keywords select_item
	!item [static select_item(int pos,int select)] selectionne l'item lorsqu'on 
		d‚place l'ascenseur

!stg @keywords affiche_operateur
	 !item [static void affiche_operateur(int pos,int nl,int flag);]	affiche 
			les operateurs dans la fenˆtre de droite

!stg @keywords affiche_variable
	 !item [static void affiche_variable(int pos,int nl,int flag);]	affiche 
			les variables dans la fenˆtre de droite
	!end_description
##########################################
##########################################

!node Modules
	#$&%]*! ?? (!nl)
\image\gemview\moduls.src\strcture\moduls.h:1:  (!nl)
\image\gemview\moduls.src\LOADmodl\imagelab.c:20: (!nl)
######################################
	!include windform.u

##########################################
!node Interface
!stg  5.0  @{WindGem link WindGem.hyp}
	!psubnode Couleur des formulaires
		!begin_itemize
			!item	Bleu:		G‚n‚ral, config, info
			!item Rouge:	Outil
			!item Vert:		Request relatif au travail
		!end_itemize
		
##########################################
!include struct.u
!include stru_prg.u
##########################################
!node Variables
!begin_itemize
!stg @keywords xb yb wb hb
!item 	int xb,yb,wb,hb; (!nl)
		coordonn‚e du bureau

!stg @keywords n_obj
!item 	long n_obj (!nl)
		Nombre d'objet cr‚er

!stg @keywords start obj curr_aff sel_obj
!item C_OBJ	*start (!nl)
	D‚part du programme
!item C_OBJ	*curr (!nl)
	object courant
!item C_OBJ *curr_aff (!nl)
	pointe sur le premier objet afficher
!item C_OBJ *sel_obj (!nl)
	L'objet selectionn‚

!stg @keywords info_var tbx_var sys_var prog donnee_var type_var fct_var
!stg @keywords expr_var
!item WINDFORM_VAR
	!begin_description
		!item [info_var]		Formulaire d'information
		!item [tbx_var]		Tool Box
		!item [sys_var]		M‚moire et companie
		!item [prog]			fenˆtre de travail
		!item [donnee_var]	Formulaire request donn‚e (!nl)
			si w_lin ==
			!begin_itemize
				!item 1:	nouvelle donn‚e
				!item 2:	modifie donn‚e
			!end_itemize
		!item [type_var]	Formulaire request type (!nl)
			w_lin a la mˆme fonction que donnee_var
		!item [fct_var]	Formulaire request fonction	(!nl)
			w_lin a la mˆme fonction que donnee_var
		!item [expr_var]	formulaire de cr‚ation des expr‚ssions
	!end_description
	
!stg @keywords adr_mes adr_desk adr_menu adr_autre_type
!stg @keywords adr_typ_pp adr_icon adr_operator
!item 	OBJECT
	!begin_description
		!item [adr_mes]	formulaire des message pour les fenˆtre
		!item [adr_desk]	fond du bureau
		!item [adr_menu]	adresse du menu
		!item [adr_autre_type]	formulaire autre type gerer en mode premtif
		!item [adr_typ_pp]	popup des type de donn‚e
		!item [adr_icon]	icone pour l'iconification
		!item [adr_operator]	liste des op‚rateurs
	!end_description
!end_itemize
##########################################
!node BUGS
!subnode corrig‚
	!begin_description
	!item [17.08.96] Si la rsc n'est pas charger ??? (!nl)
		main.c:36:
	!item [01.09.96 01.09.96]	Lorsque on rentre la premiere donn‚e la zone est 
	corompu. 	(!nl) Car les FREE de return_f_donnee ne sont initialise. On 
	peut resoudre le pb en effa‡ant la donn‚e avant de lire ce qu'il y a 
	dedans.
	!item [01.09.96]	On est dans le formulaire Nouvelle Donn‚e (!nl)
		On tape le nom et tout et tout (!nl)
		On clique sur LONG puis on change de type (!nl)
		et l… au lieu d'afficher Long on a Non sign‚ (!nl)
		Trop simple, lors de la premiŠre affectation, il faut mettre = et non += 
		comme ca tout les bits qui n'ont rien … voir sont … 0.
	!item [23.09.96 - 24.09.96]	quand un tableau fait plus de 16 bits de long ‡… plante
		code.c:62:
		affichag.c:66:
		rsc.c:336: (!nl) Dans affichag.c (!I)Dummy[] (!i) etait trop petit pour 
		recevoir un nombre de 32bits.
	!item [17.08.96 - 27.09.96] Redessiner le fenˆtre systŠme en envoyant un 
		message de REDRAW, car si une autre fenˆtre la chevauche ‡… ''bave''
	!item [27.09.96 - 29.09.96]	Penser … mettre des FREEs dans 
		return_f_donnee. Au passage j'initialise nom commm et vi, comme ‡…, il 
		plante pas au premier FREE.
	!item [18.08.96 - 29.09.96]	D‚tail amusant, si on appuis sur Return alors 
		que la Tool box en en premier plan, Il y a 2 bombes qui arrivent sans 
		que je demande rien, magique non? (!nl) (!B)(!I) encore plus 
		magique(!b)(!i), je reteste, et voil… que ‡… marche au poil!!!
	!item [28.09.96 - 29.09.96]	l'affichage commence toujours coll‚ au bord 
		gauche de la fenˆtre mˆme si c'est un fils. mettre un variable de 
		'g‚n‚ration' ou faire un fonction qui remonte juste … start. (!nl)
		J'ai opter pour la fonction (!S)generation(!s)
	!item [30.09.96 - 30.09.96]	Faire un fonction w_redraw qui g‚nŠre un 
		redraw
	!item [30.09.96 - 04.10.96]
		!begin_itemize
		!item [x] quand on efface, penser … re-affecter start et curr_aff...
		!item [] reconstruire la chaine (prec-suivant)
		!end_itemize
	!item [08.10.96 - 09.10.96]	Quand on modifie un type: 2 bombes.
	!item [10.10.96 - 11.10.96] Procedure DE, Procedure TYPE etc sont ... des 
		proc‚dures et il faut que ce soit des blocs donc:
		!begin_itemize
			!item Rajouter dans l'union SPEC, (!V)char *bloc (!v),
			!item modifier code.c:nouveau et affichage.c:ecrit
		!end_itemize
	!item [11.10.96 - 11.10.96] selectionne_item ou cherche_objet d‚conne. (!nl)
		En fait, c'‚tait compte qui ‚tait "trop local", et en remontant on ne 
		transmetait pas obj.
	!item [14.10.96 - 14.10.96] Si on selectionner une structure la donn‚e qui 
		ce cr‚e ‚tait au mˆme niveau que la structure
	!item [17.10.96 - 17.10.96] Quand on rejoute un nouveau type dans les 
		unions ca plante. De plus, les types se cr‚ent dans les variables 
		globale (voir les 3 premiere ligne de nouveau_type).
	!item [18.10.96 - 20.10.96] (x)	G‚nial on peut plus se servir des sliders 
		et autre gadget. Ca plante que quand on bouge les gadgets verticaux. OK 
		(!nl)
		(x)	les object de g‚n‚ration sup‚rieure … curr_aff ne sont pas afich‚s
		!begin_itemize
			!item on repŠte le type sup‚rieur
			!item l'alignement et toujours le mˆme que curr_aff
		!end_itemize
	!item [20.10.96 - 22.10.96] dans liste type, ne pas liste les type de 
		l'union (pas les fils de la liste). Donc ne pas commencer par start.
	!item [22.10.96 - 23.10.96] Gerer les ascenseurs de autre type de donn‚e
	!item [25.10.96 - 26.10.96]	2 bombes: On cr‚‚e une donn‚e d'un type qui 
		existe pas et boom. En effet dans ce cas d_autre pointer sur NULL. Et 
		d‚s que l'on y acc‚der: Bababoum.
	!item [15.01.97 - 15.01.97] Un clic sur le bureau et boum
	!item [18.01.97 - 18.01.97] Il n'y a plus de prototype de fonction quand on 
		confirme les fonctions
	!item [23.01.97 - 25.01.97] Dans (!I)Expr‚ssion(!i), quand on selectionne 
		un item et que l'on bouge l'ascenseur l'item selectionn‚ ne suit pas. 
		Mˆme problŠme dans (!I)autre type(!i)
	!item [25.01.97 - 27.01.97] Quand le curseur texte est sur un ED_VAR, le 
		UNDO ne marche plus, idem pour les raccourcis claviers. Le filtre pour 
		ED_VAR filtrer aussi les alts donc plus de raccourcis.

!end_description
############################
!subnode non corrig‚
!stg @alias bug
	!begin_description
	!item [11.12.96 - ] Quand on cr‚e une union struct ou proc‚dure, le premier 
		paramŠtre est correct (pas de valeur intiale), mais les autres ne le 
		sont pas.
	!item [ - ] . 
!end_description
!ifdest [tex]
	!tableofcontents
!endif
!end_document
