                     EZ/Midi-Score symbol vocabulary (03/17/88)

For all symbols (except for S_NOP which isn't really a symbol):

   +2.b = x-coord = pixels since last symbol or start of score (can be 0)

   +3.b = staff = 0-59, staves numbered from top to bottom, -1 for symbols
			         that aren't associated with a particular staff

   +4.b = y-unit = 0-90, numbered from top to bottom, -1 for symbols
					 	 don't have an exact vertical placement

	+15.b = reserved, should always be 0.  It is used as a temporary marker,
			  except where noted

	staff		y-unit		meaning
	-----		------		-------
	 >=0		 >=0			symbol positioned as specified
	 >=0		  <0			staff as specified, y-unit is function of symbol
	  <0		 >=0			y-unit as specified, top staff in current format
	  <0		  <0			symbol spans all staves / all y-units

---------------------------------- null symbol --------------------------------

 S_NOP      0      null quasi-symbol

   +1.b = 15 bytes = 0

---------------------------------- note family --------------------------------

   +0.w = symbol # =

 S_HDTNOTE  1    dotted stemless half note (used on printout, not on screen)
 S_HNOTE    2    stemless half note (used on printout, not on screen)
 S_1DTNOTE  3    dotted whole note
 S_1NOTE    4    whole note
 S_2DTNOTE  5    dotted half note
 S_2NOTE    6    half note
 S_4DTNOTE  7    dotted quarter note
 S_4NOTE    8    quarter note
 S_8DTNOTE  9    dotted eighth note
 S_8NOTE    10   eighth note
 S_16DTNOTE 11   dotted 16th note
 S_16NOTE   12   16th note
 S_32DTNOTE 13   dotted 32nd note
 S_32NOTE   14   32nd note
 S_64DTNOTE 15   dotted 64th note
 S_64NOTE   16   64th note
 S_128NOTE  17   128th note
 
   +5.b = bit 7    = 0 stem up (or no stem), 1 stem down
          bit 6    = 0 normal, 1 left-suspended note head 
			 bit 5    = 0 normal, 1 right-suspended note head

			 Tuplet display mode (ignored if note is not part of a tuplet):
			 
			 bits 4-2 = 0 reserved for additional tuplet info in Midi-Score
			 bit 1    = whether to display the :N portion of the tuplet
			 bit 0    = whether to display a square bracket over the tuplet

	+6.b = accidental =  0 no accidental
							  40 sharp
							  41 flat
							  42 natural
							  43 double sharp
							  44 double flat
							  45 natural-sharp (not used in EZ-Score)
							  46 natural-flat (not used in EZ-Score)
							  
          bit 7 is set for parentheses around accidental (not used in EZ-Score)

	+7.b = pixels from accidental to note

	+8.b = "beaming byte", bits are as follows: (all 0 if not beamed)

		7-2:	unused in EZ (all are 0), unused (so far) in MS
		1:		beamed back
		0:		beamed forward

		The beaming byte is the same for all notes in a chord.  Thus, when a
		note is deleted from the chord, the chord remains correctly beamed.
		Note that the # of beams on a given note depends entirely on what kind
		of note it is; it has nothing to do with the beaming byte.  Also, in
		EZ the following are calculated at display time:  broken beam direction
		and length, stem lengths including any lengthening needed for beaming.

	+9.b = "tie nibble", bits are as follows:
	
		7 -- 1: tied forward, 0 not tied forward
		6 -- tied forward curve: 1 up, 0 down
		5 -- 1: tied back, 0 not tied back
		4 -- tied back curve: 1 up, 0 down

		3-0: "head style nibble": (unused in EZ-Score)
			= 0 normal
			= 1 "x"
			= 2 diamond
			= 3 invisble
			= 4 miniature normal

	+10.b = "tuplet byte", exactly analogous to +8.b beaming byte, see above.
	
	+11.b = tuplet's M (M:N), 1-99, 0 if not in a tuplet
	+12.b = tuplet's N (M:N), 1-99, 0 if not in a tuplet

---------------------------------- rest family --------------------------------

   +0.w = symbol # =

 S_0DTREST  21   dotted double whole rest (not used in EZ-Score)
 S_0REST    22   double whole rest (not used in EZ-Score)
 S_1DTREST  23   dotted whole rest
 S_1REST    24   whole rest
 S_2DTREST  25   dotted half rest
 S_2REST    26   half rest
 S_4DTREST  27   dotted quarter rest
 S_4REST    28   quarter rest
 S_8DTREST  29   dotted eighth rest
 S_8REST    30   eighth rest
 S_16DTREST 31   dotted 16th rest
 S_16REST   32   16th rest
 S_32DTREST 33   dotted 32nd rest
 S_32REST   34   32nd rest
 S_64DTREST 35   dotted 64th rest
 S_64REST   36   64th rest
 S_128REST  37   128th rest

   +5.b = bit 7    = upper voice (stem-up)
          bit 6    = lower voice (stem-down)
			 when auto-stemming is on, both of these bits are set

   +8.b = "beaming byte" (see notes family above), unused in EZ (set to 0)
	+10.b = "tuplet byte", exactly analogous to +8.b beaming byte, see above.
	+11.b = tuplet's M (M:N), 1-99, 0 if not in a tuplet
	+12.b = tuplet's N (M:N), 1-99, 0 if not in a tuplet

-------------------------------- dynamics family ------------------------------

   +0.w = symbol # =

 S_PPP      80   pianissinissimo
 S_PP       81   pianissimo
 S_P        82   piano
 S_MP       83   mezzo-piano
 S_MF       84   mezzo-forte
 S_F        85   forte
 S_FF       86   fortissimo
 S_FFF      87   fortissitissimo

---------------------------------- free family --------------------------------

   +0.w = symbol # =

 S_FZ       90   forzato
 S_SFZ      91   sforzato
 S_SF       92   sforzato
 S_FP       93   loud/soft
 S_SFP      94   sforzato/soft
 S_FFP      95   very loud/soft
 S_BREATH   96   breath mark
 S_PAUSE    97   pause (railroad tracks)
 S_PEDDOWN  98   pedal (down)
 S_PEDUP    99   pedal up (asterisk)
 S_TENUTO   100  "ten."

----------------------------------- bar family --------------------------------

   +0.w = symbol # =

 S_BAR      110  normal bar line
 S_ENDBAR   111  ending double bar line
 S_DBAR     112  double bar line
 S_DBIGBAR  113  double thick bar line
 S_START    114  start of section
 S_END      115  end of section
 S_STARTEND 116  start and end sections back-to-back

   +3.b = staff = (-1)

   +4.b = y = (-1)

   +5.b = 

   +6.w = 1 if (bar # -1) is divisible by 100, else 0

   +8.b-9.b = rehearsal mark (2 characters, not null-term'd)
	+10.b= delta-y-unit for rehearsal mark.

	+11.b = bit 0 = bar is part of an ending
			  bit 1 = bar is end of an ending
			  bit 2 = ending is open/closed (0/1)
			  bit 3 = bar is start of an ending
			  
			  bits 4-7 = unused
			  
	+12.b = 0, unless bar is start of an ending, in which case:
				  Bits 7-0 correspond to "8." to "1."
	+13.b = 0, unless bar is start of an ending, in which case = delta-y-unit

-------------------------------- measure family -------------------------------

   +0.w = symbol # =

 S_FAINTBAR 117  faint bar line
 S_KEYSIG   118  key signature
 S_TIMESIG  119  time signature
 S_DS       120  "D.S."
 S_DC       121  "D.C."
 S_CODA     122  coda sign
 S_DALSEGNO 123  dal segno sign
 S_METRO    124  metronome mark
 S_INSERT   125  insert-space (will never occur in data structure)
 S_DELETE   126  delete-space (will never occur in data structure)
 S_SLASH		127  stemless chord slash
 S_CHORD		128  chord
 S_GUITAR	129  guitar chord
 S_REPEAT1  130  repeat last measure
 S_REPEAT2  131  repeat last two measures
 S_TREBCLEF 132  treble clef
 S_BASSCLEF 133  bass clef
 S_ALTOCLEF 134  alto clef (not used in EZ-Score)

   +3.b = staff = -1 for S_FAINTBAR, S_METRO

   +4.b = y = (-1) for S_KEYSIG, S_TIMESIG

   For S_KEYSIG:

   +5.b = number of accidentals within the key signature
	+6.b = kind of accidental in key sig: 0 natural, 1 sharp, -1 flat
   +7.b - +13.b = array of y-units for accidentals.  -1 for omitted
	               accidental (used in MIDI-Score for superimposing
						multiple key sigs)

      0 = treble clef's yu=40, = bass clef's yu=42

	For S_TIMESIG:

	+5.b = 1 common time, 2 cut time, 0 numerator and denominator follow:
	+6.b = numerator 1-99   (4 for common time, 2 for cut time)
	+7.b = denominator = 0-6 (displayed as 2^denominator)  (2 for common 
			 time, 1 for cut time)

	For S_METRO:

	+6.b = note type (1,2,3,...)
	+7.b = 0
	+8.w = bpm value (1-999)

	For S_CHORD:
	
	+5.b = 0 chord is undefined (bytes 6-14 should also be 0)
		  = 1-7 root of chord = A-G
	+6.b = 0-2 accidental on root of chord = none,flat,sharp
	+7.b = 0-3 type of triad = major (not displayed), minor, diminished, 
										augmented
	+8.b = 0 = normal triad, 1= triad with no 3rd, 2 = triad with no 5th
	+9.b = high nibble = 0-7 type of interval =
			 	0 means not displayed, 1-6 flat, sharp, natural, major, minor,
			 	diminished, augmented.   
			 low nibble = 0-6 interval = 0 means none, 1-6 means 5th, 6th, 7th, 
			 					9th, 11th, 13th
	+10.b= another interval
	+11.b= another interval
	+12.b= 0-2 = normal, sus2, sus4
	+13.b= high nibble= 0-3 type of added interval = not displayed, flat,
																	 sharp, natural
			 low nibble= 0-8 added interval = none, 2, 4, 5, 6, 7, 9, 11, 13
	+14.b= high nibble= 0-7 bass modifier= none, A-G
			 low nibble= 0-3 bass modifier accidental= none, flat, sharp, natural

	For S_GUITAR:
	
	+5.b - +10.b= one byte for each string, from left to right:	
					high nibble:  0 normal, 1 "o" above string, 2 "x" above
										string
					low nibble:	  0 no fret stop, 1-4 fret stop, 5-8 fret mute (x)
	+11.b=  fret offset -1  (0 = fret 1)
	+12.b=  high nibble:  leftmost string under bar (0-5)
			  low nibble:  rightmost string under bar (0-5)
			  Both nibbles same means no bar

-------------------------------- stretchy family ------------------------------

 S_HAIRPIN	140	(de)crescendo "hairpin"
 S_SLUR		141	slur
 S_LINE		142	generic line
 S_MULTIR	143	multi-measure rest (not used in EZ-Score)
 S_WAVYLINE	150	generic wavy line (not used in EZ-Score)

	For all stretchy symbols:
	
	+5.b = staff # of mate
	+6.b = y-unit of mate
	+7.b = 0 left mate, 1 right mate
	
	S_HAIRPIN:
					+8.b = 0 decrescendo, 1 crescendo
					+9.b = height of open end of hairpin

	S_SLUR:     +8.b = 0 curve upward (tie over), 1 curve downward (tie under)
					+9.b = height
				  +10.b = thickness = 1-4

	S_LINE:		+8.b = unused in EZ
					+9.b = line style (unused in EZ)
				  +10.b = thickness = 1-4

-------------------------------- text family ----------------------------------

 S_LYRICS    151	lyrics syllable

	+5.b	bit 0:  centered
				 1:  hyphen centered between this syllable and the next
				 2:  underscore extends from end of this syllable to just past
				 	  next note
				 3:  italics (not used in EZ)
				 4:  continuation (not used in EZ)
				 5:  continued (not used in EZ)
				 6-7: unused
	+6.b - +15.b  up to 10 ascii characters ($21 - $7e), not null terminated
					  but null padded on right.  Note that this is an exception
					  to the "+15 is reserved" rule.

 S_TEXT		 159	text
 
	+5.b - +14.b  up to 10 ascii characters ($21 - $7e), not null terminated
					  but null padded on right.

 	+15.b  bit 7: continuation (unused in EZ)
			 bit 6: continued (unused in EZ)
			 bits 5-4: effects (unused in EZ)
			 low nibble:  font # (0-15)
				Note that this is an exception to the "+15 is reserved" rule.
				 
--------------------------------- control codes -------------------------------

   For all control codes, +2.b = 0

 S_ORNABOVE -1    (ornament to appear above staff)
 S_ORNBELOW -2		(ornament to appear below staff)

	+3.b = staff # 
	+4.b = (-1)

	+5.b = # pixels above/below highest/lowest note in the column
	+6.b = symbol # (one of the above non-control symbols)

	+7.b = # pixels above/below highest/lowest note in the column
	+8.b = symbol # (one of the above non-control symbols)

	+9.b = # pixels above/below highest/lowest note in the column
  +10.b = symbol # (one of the above non-control symbols)

  +11.b = # pixels above/below highest/lowest note in the column
  +12.b = symbol # (one of the above non-control symbols)

  +13.b = # pixels above/below highest/lowest note in the column
  +14.b = symbol # (one of the above non-control symbols)

   There can be up to 5 ornaments per packet.  Any pair of 0,0 indicates
	an unused ornament.  Ornaments within a packet are not kept top-justified.

	Note that this imposes a limitation of no more than 5 ornaments above
	or 5 ornaments below any column of notes.

--------------------------------------------------------------------------------

UNFINISHED STUFF!!!

Text is divided and stored as 10 characters per packet.  There are five
kinds of text packets; this allows text packets to be grouped into double- or
triple-packets.  The longest case (a triple-packet) allows 30 characters.
Therefore no word typed in text mode or no syllable typed in lyric mode can
exceed 30 characters.  The five kinds of text packets are as follows:

     text 0:  a single-packet, used for an 10-character block of text.
              The next packet cannot be text 1,2,3, or 4.
     text 1:  used for the first 10 characters of a double- or triple-packet.
              The next packet must be either text 2 or text 3.
     text 2:  used for the second 10 characters of a double-packet.
              The next packet cannot be text 1,2,3, or 4.
     text 3:  used for the second 10 characters of a triple-packet.
              The next packet must be text 4.
     text 4:  used for the last 10 characters of a triple-packet.
              The next packet cannot be text 1,2,3, or 4.

     The "special" field for any of the text packets is:

     +0       Byte used for text/lyric attributes, font #, etc.
     +1       10 characters

