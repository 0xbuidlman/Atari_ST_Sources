03/18/88

I.  Introduction

A "Midi-Score file" is a score file (*.SCO) written by any of the Midi-Score
ST series of scoring programs.  Files are upward-compatible from lower to
higher versions of Midi-Score.  A "version" has a major (high nibble) part
and a minor (low nibble) part.  "EZ-Score Plus" is another name for any
version having 0 for its major part.  "Upward-compatible" means that higher
versions of Midi-Score can read the files written by lower versions, but not 
necessarily vice versa.  The mechanism by which this upward compatibility is 
achieved is one of the subjects of this document.

This document describes the file formats written by each version of Midi-Score,
including indications of where this file format differs between different 
versions.  This document also describes the format of a score image as it is 
represented in RAM.  (which is very similar to the disk file format.)

II.  File Overall Structure

The structure of a Midi-Score file is:

	Header / Data

For any given version of Midi-Score, the header length is constant, while
the data length is variable.  The data length can be 0.  The header length
varies between Midi-Score versions.

The structure of the header is:

	Magic longword / header length / 
		section i.d. / section length / section /
		section i.d. / section length / section /
		section i.d. / section length / section /
		.
		.
		.
		section i.d. / section length / section /
		
The number of sections -- i.e., "i.d. / section length / section" units -- 
varies between Midi-Score versions.  This accounts for the variability of 
header length from version to version.

The Magic longword is 0x48414Dnn, where nn is the Midi-Score version number.
The version number high nibble is the major part, and the
low nibble is the minor part.  The initial release of EZ-Score Plus
has a version number of 0 (major=minor=0), the first EZ-Score Plus update
would have 1 (major=0, minor=1), the initial release of Midi-Score Pro-
fessional would have $10 (major=1, minor=0), and so on.  Various versions
of EZ-Score Plus and/or Midi-Score generate different error messages
depending on which nibble(s) is/are found to be less than the current
program version.  (Curious readers will note that the magic longword is
"HAM" followed by the version number.  It has become customary for Hybrid Arts'
magic numbers to refer to meats.)  It is also possible that versions such as
"1.1a" or "1.1b" would exist.  These would be specific bug fixes with no
significant new features; the version byte in the files would be exactly
the same for 1.1a and 1.1b.

The header length is a longword.  It is a byte count of the entire header,
including the magic longword and the header length longword.  Alternatively,
the header length longword can be thought of as a byte offset from the start
of the file to the start of the data segment.  For obscure technical reasons
the header length will never exceed 30480 in any version of Midi-Score.

Most of the header is a string of "sections".  Each section has a unique i.d. 
number assigned to it.  For any given version of Midi-Score, no two sections
will have the same i.d. number.  For all versions of Midi-Score, any two
sections having the same i.d. number will have the same length.  The i.d.
number uniquely identifies the function of that section.  In practice, there
are names associated with each i.d. number, so, for example, it is more common
to speak of "the MAT" than of "section 0".

The section i.d. # and the section length are both words.

For any given version of Midi-Score, the existence and order of sections is
a constant.  In other words, for any given version of Midi-Score the structure
of the header (but, of course, not the contents of the header) is a constant.
Thus, in explaining the structure and function of each section, we can 
describe all of them, and simply note which sections are omitted in various
versions.  Interestingly, when Midi-Score loads a file it does not depend on 
the sections being in any particular order.  Obviously, Midi-Score writes the 
sections in a predetermined order, but if someone used a powerful disk editor 
to rearrange the order of the sections without disturbing their contents, 
Midi-Score could still load and correctly interpret the file!

III.  Header Sections

The structure and function of each section within the header is now explained,
in the order in which they would appear in most versions of Midi-Score.

A.  i.d. 0x00 -- length 5000 -- Memory Allocation Table ("MAT")

This section appears in all versions of Midi-Score.  It is probably the most
important section, because it describes the structure of the data segment.

Structure of MAT is:   NBLOCKS + M_START + M_END + M_LASTBAR + MLT

     NBLOCKS -- (word) number of data blocks that have been used. (0-1248)

     M_START -- (word) # of first data block in the data thread.
     M_END   -- (word) # of last data block in the data thread.
     These are both 0 if there is no data (and sometimes even when 
     there is data).  Block #s range from 0-1247.

     M_LASTBAR -- (word) bar # of last bar in score, 0 if there are no bars.

     MLT ("Memory Link Table") 
     -- 2496 words -- has two words for each block;  first word is # of 
     previous block in the thread (-1 if this block is the first in the thread).
     Second word is # of next block in the thread (-1 if this block is the last
     in the thread).  Note that both words will be 0 if the block is unused 
	  (and never otherwise).

B.  i.d. 0x10 -- length 100 -- ENVIRINFO1

This section contains various user-set options which define a "working 
environment".

Structure of ENVIRINFO1 is:

   +0   entering command menu safety         0/-1 off/on
   +1   entering symbol menu safety          0/-1 off/on
   +2   channelize midi thru: 0-15, -1 means don't
   +3   loop playback (not used in EZ-Score) 0/-1 off/on
   +4   playback over midi                   0/-1 off/on
   +5   playback over internal voices        0/-1 off/on
   +6   automatically backup files when overwriting             0/-1 off/on
   +7   # measures for right-click horizontal scroll
   +8   window info line name field (null terminated)
   +50  score version byte                  (0-127)
   +51  mouse cross-hair                    0/-1 off/on
   +52  auto-stem                           0/-1 off/on
	+53  MIDI thru                           0/-1 off/on

	Midi step-entry map:
	+54  continuous controller # for duration command:  1,4,6,7,8,10
	+55  sustain switch mapped to:  0 ignore, 1 rest, 2 staff, 3 bar	
	+56  portamento switch mapped to:  0 ignore, 1 rest, 2 staff, 3 bar	
	+57  soft switch mapped to:  0 ignore, 1 rest, 2 staff, 3 bar	
	+58  hold switch mapped to:  0 ignore, 1 rest, 2 staff, 3 bar	
	+59  increment switch mapped to:  0 ignore, 1 rest, 2 staff, 3 bar	
	+60  decrement switch mapped to:  0 ignore, 1 rest, 2 staff, 3 bar	
	+61  key 1 mapped to:  0 ignore, 1 rest, 2 staff, 3 bar	
	+62  key 2 mapped to:  0 ignore, 1 rest, 2 staff, 3 bar	
	+63  key 1 value (0-127)
	+64  key 2 value (0-127)

	+65  # pixels to move cursor on shift-arrow commands (0-99)
	+66  mouse auto-repeat rate (0-9, 0 fastest)
	+67  MIDI input: -1 disabled, 0 enabled
	+68  play range: 0 all, 1 screen, 2 cursor to end, 3 section (prompt)
	+69  accidentals playback option:  0 next note only, 1 rest of measure, 
												  2 rest of measure including octaves
	+70  screen chase during playback: 0 off -1 on
	+71  playback tempo divider: 6-25
	+72  midi-input enharmonic handling: 0 flats, 1 sharps
	+73-79 unused in EZ-Score
	+80  1/0 allow / don't allow "free" accidentals and ornaments
	+81  right-click insert/delete space amount (pixels)
	+82  keyboard-controlled punctuation: 10 bytes, each is 0-99

C.  i.d. 0x11 -- length 120 -- VOICEINFO

This section contains midi channel assignments for playback for each voice (2 
voices per staff).

Structure of VOICEINFO is:

120 bytes, each byte = 0-$F (midi channel), high bit set for voice off

D.  i.d. 0x01 -- length 400 -- STAFFINFO

This section contains information which defines the score format -- i.e., the 
number of staves, order of staves, visibility of staves, spacing between 
staves, etc.

Structure of STAFFINFO is:

     +0  Number of staves (In EZ-Score Plus this will be 1 or 3)

     +1...+120   For each staff, # ledger lines above , # ledger lines below
                 (1-20 for each, sum of two bytes cannot exceed 21).
                 Can be non-zero regardless of staff existence or visibility.

     +121...+180 For each staff, a connection byte:

                 -- | -- | -- | --
                                barring
									unused
                      left-edge brace
                 left-edge bracket

                 For each 2-bit group:  right bit = top end
                                         left bit = bottom end
                 Note that this system does not allow nested or over-
                 lapping left-edge connections.
                 Connection byte is 0 for non-existent staves.

     +181...+240 For each staff, =(-1) means invisible, =0 means visible
                 (=0 for nonexistent staves)

     +241...+360 Order (from top to bottom) in which staves are displayed:
	  				  For each staff, 2 bytes:  1st byte is # of previous staff
					  (0-59, -1 if none), 2nd byte is # of next staff (0-59,
					  -1 if none).  These bytes are valid even if a staff is
					  invisible.  If a staff does not exist (if its staff #
					  >= NSTAVES) then both bytes are -1.

	  +361...+399 currently unused

E.  i.d. 0x20 -- length 200 -- CHORDINFO

This section contains a pallette of 20 chord symbols, 10 bytes per chord
symbol.

F.  i.d. 0x21 -- length 200 -- GUITARINFO

This section contains a pallette of 20 guitar symbols, 10 bytes per guitar 
symbol.

G.  i.d. 0x30 -- length 1024 -- REHRTABLE

This section contains a table of up to 128 rehearsal marks.  Each entry in 
this table is 4 words:  rehearsal mark / block / packet / reserved word.

H.  i.d. 0x31 -- length 1280 -- BARNTABLE

This section contains a table of block and packet # for every 100th bar line.
The table is in b,p,b,p,b,p,... form,

I.  i.d. 0x12 -- length 400 -- AUTOINFO

This section contains information for auto-scoring:

	+0...+59	for each staff, miscellaneous on/off options:  
	
		bit 0 : set to skip (i.e. don't auto-score) this staff
		bit 1 : set for quantizing in triplets
		bit 2 : reserved
		bit 3 : set to minimize ties
		bit 4 : set to minimize rests
		bit 5 : set to auto-beam
		bits 6-7 currently unused

	+60...+119 for each staff, quantization value (high nibble for note-on,
				low nibble for note-off):  0 = half note, 1 = quarter note,
				2 = eighth note, 3 = 16th note, 4 = 32nd note.

  +120...+239 1 word per staff, midi bit field (bit n set to include midi
  				  channel n)

	+240...+359 note ranges (2 bytes -- low/high -- for each staff)
	+360	= auto-scoring enharmonic handling, 0=flat, 1=sharp
	+362-363 = # of measures to skip at start
	+364-365 = # of measures to auto-score
	+366...+399 reserved

J.  i.d. 0x40 -- length 600 -- PAGEINFO

This section contains information about the page layout for the printer.

K.  i.d. 0x13 -- length 60 -- AUT2INFO

One byte per staff.  Each byte is 0-59, a track # for each staff, indirected
through a list of auto-scorable tracks.  The list is built at run-time each
auto-score.

IV.  Data Segment

Structure of Data is:

     Block 0 + Block 1 + Block 2 + ... + Block N

Structure of Block is:

     Packet 0 + Packet 1 + Packet 2 + ... + Packet 63

     There are 1024 bytes per block (16 bytes per packet).

Structure of Packet is:

     +0   symbol # -- a unique code for each symbol ("quarter rest", "tenor 
	  			 clef", etc.)  Note that some things which appear to the user to 
				 be symbols are not really:  For example, an accidental is usually
				 not a symbol; more commonly it is an attribute associated with
             a note.  Symbol 0 is defined as a NOP, i.e. an empty or 
				 deleted symbol.  Packets within a block are kept sorted so that 
				 NOPs are last.  If high bit is set, the symbol is a "control
				 symbol."

A.    For a non-control symbol, the rest of the packet is:

     +2   X coordinate -- the number of x-units (typically pixels) since the 
	  		 preceeding symbol in the data thread.  (Or since the beginning of
			 the thread, if this is the first symbol in the thread.)

     +3   Staff # -- 0-59, numbered from top to bottom (counting invisible
          staves)  This may be (-1) for some symbols, indicating that they
			 are not rigidly associated with any particular staff.  An example
			 of this would be a bar line.

     +4   Y coordinate -- 0-90 the number of Y units from top of an imaginary
          staff having 20 ledger lines above and below.  I say "imaginary"
          because, as noted above, the total # of ledger lines for a staff
          cannot exceed 21, but if Y coords are numbered according to 40
          ledger lines, then adding/deleting ledger lines does not require
          Y coords of all symbols on that staff to be changed.  Another way
          of saying this is that the Y coord of each staff line or ledger
          line is a unique number, independent of staff spacing.
          Each Y unit = distance between two diatonically adjacent notes.
          Y coordinate is (-1) for some symbols, indicating that they are
			 not rigidly associated with any particular vertical position.

     +5   "special": 11 bytes that serve different purposes depending on the 
          symbol number in packet bytes 0-1.

B.   For a control symbol, the rest of the packet is 14 specialized bytes.
     Control symbols are designed so that multiple operations can be packed 
	  into one symbol.     

C.   A more detailed explanation of packet structures is found in the file
	  "SYMBOLS.DOC".  This includes a complete list of the symbol vocabulary,
	  and an explanation of the special bytes for each symbol in the
	  vocabulary.

D.

Symbols within the data thread having X=0 (ones that line up horizontally)
are not sorted by Y.  However, symbols within a chord are kept contiguous,
and control symbols related to that chord immediately follow the chord.
A chord is "a group of notes, on the same staff, having the same x coord,
all having the same stem direction, or all having no stem."

V.  Score Image structure in RAM

The structure of the score image as it exists in RAM is exactly the same
as the image as written to a disk file, except the following within the header
are omitted:  The magic longword, the header length longword, and the i.d. #
and length of each section.  Also, the order of the sections within the
RAM image is as described above in section III and is NOT arbitrary.  Normally
this order corresponds exactly to the order of sections within a disk file,
but, as previously described, Midi-Score would rearrange the order of sections
upon loading a file whose header had been scrambled.

If Midi-Score version N loads a version M file, and M<N, there exists the
possibility that the file's header may omit sections that a version N file
would have.  In this event, the RAM image of the omitted sections are all
set to default values, unless any one of the omitted sections is essential
(for example, the MAT) Midi-Score in which case an error message is generated
and the load process is aborted.
