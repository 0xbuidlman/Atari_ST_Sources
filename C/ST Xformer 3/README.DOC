
ST Xformer 3.00 Source Code
===========================

by Darek Mihocka

June 12, 1995

For additional information contact Darek Mihocka at:

Emulators Inc.
14150 N.E. 20th Street, Suite 302
Bellevue, WA  98007, U.S.A.

Tech support:   206-236-0540
Fax:            206-236-0257
Internet:       darekm@emulators.com
World Wide Web: http://www.emulators.com


The ST Xformer 3.00 source code is for the exclusive use of Internet users.
The source code may not be copied or reuploaded to any bulletin board, disk
library, or used in any commercial package. It must strictly be kept off
Compuserve, America Online, GEnie, Delphi, Prodogy, and other pay services.

This ZIPped file contains all of the source and object file necessary to
produce an executable version of ST Xformer 3.00, which was released about
two years ago and included in the Gemulator 3.0 package before it was replaced
by PC Xformer in Gemulator 3.02.

Laser C and MADMAC are required to compiler and assemble the source code.
The Laser C linker is required to link the object files. The final size
of the executable should be 128460 bytes, but your milage will probably
be larger if you use the standard runtime library. I have included the
file XINIT.O, which may be used in place of Laser C's INIT.O file. My custom
startup code doesn't pull in a lot of the junk the standard C runtimes do.

The .LNK file assumes the source code is on the D: drive, but you need
not use the .LNK file provided. Just link either INIT.O or XINIT.O first
followed by all the other .O files.


The source code is divided into 3 areas. The .RSC, .RSH, .DFN files make
up the resource file for the programs. The .C files are mainly used for
dialog box controls, the 6502 debugger, virtual disk drive emulation,
and Xformer cable support. 

The file XROMS.S contains the 130XE operating system, along with patches
that were made to it to allow it to run on the Xformer. The character
set has been patched ep to give 4 different fonts. I will be taking this
out in 2.6.

The file X6502.S contains the 6502 interpreter, as well as the hardware
emulator. This is the most compicated of the files and there are many
subtle tricks used to obtain maximum possible speed. As far as I know,
this is the fastest implementation of a 6502 emulator for a 68000
anywhere. Compared to the speed of the emulators I have seen on those 
_other_ 68000 machines, Xformer is 60%-150% faster than any of them,
running at about 50% the speed of a real 6502.

One hint about the code is that the emulation code occupies 64K of
memory. The 256 opcode routines are placed at 256 byte intervals, and
the hardware emulation routines are also placed at 256 byte intervals
but offset 128 bytes. Within each opcode routine is a small header of
instructions. Depending on the values of registers A5, which determines
the "mode" of the 6502, when an opcode is fetched it will jump to one of
the word in the header, which will then cause a branch to the appropriate
code. This is how the decimal flag is emulated without ever having to 
check the decimal flag, and how interrupts are emulated without having
to constantly poll for interrupts. But it is all _very_ sensitive, and
one small change can cause it allto blow up. I have provided some macros
which do things like make sure that the routines are at 256 intervals.

The file XGRAPHIX.S has all of the graphics emulation routines. They are
much different from earlier versions, because the were now all rewritten
in assembler, and have less overhead than their C counterparts.


Keep in mind that this code (specifically the assembly language code) is
heavily optimized for the 68000 chip. Over the last few years several people
who were apparently gifted from God, approached me to tell me that they would
take the ST Xformer 2.55 source code (which had been posted to the public
back in 1989) and "make it faster". One moron even went so far to say that he
would rewrite it in GFA Basic because "GFA Basic produces better code than
assembler". Needless to say, none of these idiots succeeded, and the point of
releasing these sources is not to see who can improve on the code. As far as
the 68000 is concerned, you can't speed it up, trust me.

However, the 68030 is a whole different story. In 1991 I had managed to port
this code to the TT and get it up and running on both the TT and later on the
Falcon. The trick is to turn off the TT (or Falcon's) 68030 cache and run in
the slow cache off mode. This is because of the way Xformer's 6502 fetch and
dispatch code works. Each dispatch is a pair of self modifying instructions,
where the first MOVE.B instruction changes the effective address of the
following JMP instruction. It's faster than using a jump table on a 68000.
Unfortunately this interfere's with the 68030's cache, so you need to turn off
the cache. You also need to modify the code to have a couple of NOPs between
the MOVE and JMP so that the 68030 prefetch mechanism picks up the changed
code. This will now work on a 68030 but run no faster than an equivalent
68000.

Another way, which requires no self-modifying code, is to just do a more
traditional "fetch, shift, and jump". If you look at x6502.sh at the "dispatch"
macro around line 115, you'll see that code. Just change the IF 1 to IF 0 to
get that code. Again, this will slow you down big time on a 68000 but work on
a 68030.

You may also want to attempt the traditional jump table method. This is the
fastest way to dispatch code on a 68040 chip while the other methods may work
better on a 68030. Hint: there is one other method of dispatching code that I
have not described which is actually the fastest way I have found to to
dispatch a 6502 instruction on the 68020 and 68030. It's also not too bad on
a 68040. I'll leave it up to the reader to explore the half dozen or so other
methods of dispatching code to figure out which is the fastest, so be warned
that different methods have different results on the various 68020, 68030,
and 68040 chips.


Another piece of 68000 specific code is in XSIO.C, the code that handles the
Xformer Cable. Since the cable operates off the parallel port, not the serial
port (back in 1988 when I was in college and developed the cable, I basically
sat down one night and decided I was going to make an interface cable for
the 8-bit drivers and the ST. Since I had to use what I had on hand, which was
a bunch of wire and connectors, I didn't have the luxury of a voltage converter
chip which would be required to use the serial port. So I chose the parallel
port which is voltage compatible with the 8-bit serial ports). The Atari 8-bit
serial port operates at 19200 baud, and so this requires polling the parallel
port 19200 times a second, every 52 microseconds or about 400 clock cycles on
the 68000. Unlike the serial port that has hardware to do this and only needs
to be polled 1/10th as often, the parallel port must be monitored using a
polling loop. Using times and interrupts would be pushing it, and due to
interrupt latency and other factors I decided not to use interrupts. This has
one side effect - the code only works on an 8 Mhz 68000 and on nothing else.
If you speed up the processor, the timing speeds up to and you get the wrong
baud rate. So if you plan to port the XSIO.C code to the 68030, you'll need
to change it to use interrupts.


Another goal of releasing this source code is to have a more common disk image
format for the various Atari 8-bit emulators. I give no secrets away by showing
this code because in PC Xformer the techniques required to optimize for the
486 chip are completely different and so the whole architecture of the emulator
on the 486 is completely different. My goal here is to see versions of Xformer
on the TT, Falcon, and other 680x0 machines. But what I don't want to see is
every port of Xformer using some different technique to access the disk.

The disk format used by Xformer is "XFD" (Xformer Floppy Disk) also known
earlier as .SD or .DD depending on the density. In Xformer 2.4 I added the
ability to access pretty well any size disk image, so the extension XFD was
picked to be a generic case. The XFD format is quite simple. It is just a 
sector dump of a real 8-bit drive. Take the number of sectors on the disk
and multiply by the sector size (128 or 256) and that is the size of the XFD
file. No headers, no extra info.

This is similar to the SIO2PC .ATR format, which has a 16 byte header at the
beginning followed by the raw sector dump. ST Xformer does not support the
SIO2PC format. It's not that hard to add, just check for the 16 byte header.

Any 8-bit emulator should support both formats. There are other formats, like
the DiskComm format used mainly on the real 8-bit computer. This is a 
compressed format which for speed reasons may not be suitable for use in the
emulator, but nevertheless is a popular format and should be considered. This
would permit 8-bit users and Xformer users alike to download and share the
same disk images.


That's all for now. If you have any questions about the sources, please email
me at brasoft@halcyon.com or any of the other email addresses above. If you
plan to seriously port this code to another computer (such as the TT) let me
know and keep me up to date on your progress.


