Font file format

Meaning of the font dimensions:

................  top line 13
................  
...XX...........  ascent line 11
..XXXX..........
.XXXXXX.........
.XX..XX...XXXXX.  half line = 8 above the base line
.XX..XX..XXXXXX.
.XX..XX..XX..XX.
.XXXXXX..XX..XX.
.XXXXXX..XX..XX.
.XX..XX..XX..XX.
.XX..XX..XXXXXX.
.XX..XX...XXXXX.
.XX..XX......XX.  base line
.........XXXXXX.
.........XXXXX..  descent line, bottom line = 2 below the base line


This file format is the same as the "GDOS font" on the Atari; it is usually 
little-endian even on the otherwise big-endian Atari. 

The file starts with a font header: 

	DEFW	font id 	;Unique to a font; eg 14 for Roman, 2 for
				;Sans Serif
	DEFW	point size
	DEFS	32		;Name, ASCII, 0-terminated
	DEFW	first char defined
	DEFW	last char defined
	DEFW	top,ascent,half,descent,bottom	;Dimensions
	DEFW	max char width
	DEFW	max cell width
	DEFW	left offset	;Amount character slants left when skewed
	DEFW	right offset	;Amount character slants right
	DEFW	thicken		;No. of pixels to thicken by 
	DEFW	ul_size		;Size of underline
	DEFW	lighten		;AND with this mask when lightening
	DEFW	skew		;Mask for skewing
	DEFW	flags		;Bit 0: Default system font
				;Bit 1: Use horizontal offsets table
				;Bit 2: Font image is in byteswapped format
				;Bit 3: Font is monospaced
				;Bit 5: Extended font header
	DD	hoffs		;Offset of horizontal offsets table from
				;start of file (if bit 1 of flags is set)
	DD	coffs		;Offset of character offsets table from 
				;start of file
	DD	bmps		;Offset of bitmaps table from 
				;start of file
	DEFW	width		;Width of form
	DEFW	height		;Height of form
	DD	0		;Used by the VDI when the font has loaded, as
				;pointer to the next font in the linked list.

If there is an extended font header, this follows:

	DD	next		;Offset of next section of this font
				;from start of file (eg, another character
                                ;range). The next section will have its
                                ;own font header.
	DD	0		;Reference count when the font is loaded
	DD	offset_tbl	;File offset of horizontal offset table
	DEFW	offset_len	;Length of horizontal offset table
	DEFS	14		;Reserved
	DEFW	dflags		;Device flags
	DEFS	32		;Escape sequence buffer


If there is a horizontal offsets table, this comes next. It contains two bytes 
for each character. The first is the number of pixels by which that letter 
should be moved to the left when it is displayed; the second is the number 
of pixels by which the next letter printed should be moved to the left. 
In other words, these two implement proportional spacing by making the 
letter narrower than the cell size in the header. 

The character offsets table consists of one word for each character; this word 
is the X-coordinate of the glyph in question within the font. 

The font itself is stored as a bitmapped image of all the characters side by side. 
If the image is in byteswapped format, each byte will appear to be swapped with 
its neighbour (as in a standard GEM device-independent bitmap). 

