SPEZIFIKATIONEN:
----------------

* Neue Compose Character Funktion:
----------------------------------

StateMachine: Bei jedem Tastaturinterrupt (-> ikbdsys) wird die State
Machine aufgerufen. Wenn nichts angegeben wird, wird das aktuelle
Zeichen unver„ndert gelassen. Es gibt 2 Grundoperationen, die den
Tastaturpuffer ver„ndern: remove_char und insert_char. Daraus leitet
sich change_char ab.



2 Modi:  DEC MODE   &   MULTICHAR MODE
---------------------------------------


1. DEC-MODE COMPOSE CHARACTERS:
-------------------------------
* Die Funktion arbeitet exakt wie das Vorbild auf den VT2xx Terminals
der Firma Digital Equipment Corporation (DEC).

* Die 'Composed Chars' sind nicht 'order sensitive'; also nach
Bet„tigen der ALT-Taste (Compose!) ist es egal ob  e^ oder ^e
eingegeben wird. Raus kommt immer ˆ.

* W„hrend einer 'Compose'-Sequenz sind die Zeichen nicht sichtbar.
Somit werden vor dem Senden des definitiven Zeichens keine falschen
Zeichen mittels Backspace korrigiert.

* Laufende Sequenzen k”nnen zu jedem Zeitpunkt mit ESC oder BackSpace
abgebrochen werden.



State description DEC MODE:
---------------------------

STATE_DIAGRAM DEC_mode:

    STATE Normal_operation:
        IF (Alt_pressed)        GOTO Prepare_CC
        ELSE IF (Alt_released)  GOTO Normal_operation
        ENDIF

    STATE Prepare_CC:
        IF (Alt_released)
            Klick_sound
            GOTO Compose_1
        ELSE IF (Timed_out)     GOTO Normal_operation
        ELSE IF (other_key)     GOTO Normal_operation
        ENDIF

    STATE Compose_1:
        remove_char
        Store_char1
        IF (char==ESC || char==BS) THEN
            GOTO Normal_operation
        ELSE
            GOTO Compose_2
        ENDIF

    STATE Compose_2:
        IF (char==ESC || char==BS) THEN
            GOTO Normal_operation
        ELSE IF (valid_compose) THEN
            change_char(Composed_char)
        ELSE
            remove_char
            Bell_sound
            GOTO Normal_operation
        ENDIF

END_DIAGRAM DEC_mode.




2. MULTICHAR-MODE COMPOSED CHARACTERS:
--------------------------------------

* Die Funktion arbeitet „hnlich EXTKEY: Nach Einleiten einer Compose
Sequenz werden die zwischendurch eingegebenen Zeichen geechoed. Die
laufende Applikation muž also mit schnellen Backspace-Folgen
klarkommen.

* Die Composed Chars sind nun 'order sensitive'. Es muž die vorgegebene
Reihenfolge eingehalten werden, sonst wird abgebrochen.

* Laufende Sequenzen k”nnen zu jedem Zeitpunkt mit ESC oder BackSpace
abgebrochen werden.



State description MULTICHAR MODE:
---------------------------------

STATE_DIAGRAM Multichar_mode:

    STATE Normal_operation:
        IF (Alt_pressed)        GOTO Prepare_CC
        ELSE IF (Alt_released)  GOTO Normal_operation     // neutral
        ENDIF

    STATE Prepare_CC:
        IF (Alt_released) THEN
            Klick_sound
            GOTO Compose_1
        ELSE IF (Timed_out)     GOTO Normal_operation
        ELSE IF (other_key)     GOTO Normal_operation
        ENDIF

    STATE Compose_1:
        IF (char==ESC || char==BS) THEN
            GOTO Normal_operation
        ELSE IF (key_in_table()) THEN
            Store_char1             // zeichen merken
            GOTO Compose_multi      // zeichen normal ausgeben!
        ELSE
            GOTO Normal_operation
        ENDIF

    STATE Compose_multi:
        IF (char==ESC || char==BS) THEN
            GOTO Normal_operation
        ELSE IF (key_in_table()) THEN
            change_char(BackSpace)
            insert_char(composed_char)
            Store_char1                         // store as primary!
            GOTO Compose_multi                  // neutral
        ELSE
            GOTO Normal_operation
        ENDIF

END_DIAGRAM Multichar_mode.

------------------------------------------------------------------------

