===============================================================================
Atari Game Tools: art cutting tool, a brief guide:
===============================================================================
v0.17 : dml : 07/04/2016
-------------------------------------------------------------------------------


         .__________________________________________________.
         ||////////////////////////////////////////////////||
         ||////////////////////////////////////////////////||
         ||////////////////////////////////////////////////||
         ||////////////////////////////////////////////////||    ___.
         ||////////////////////////////////////////////////||   /    \
         !__________________________________________________!  |      |
         |   __ __ __ __ __ __ __ __ __ __  /|\ ATARI 1040ST|  |      |
         |__/_//_//_//_//_//_//_//_//_//_/____________--____|  |  .---|---.
         | ______________________________________________   |  |  |   |   |
         | [][][][][][][][][][][][][][][__] [_][_] [][][][] |  |  |---'---|
         | [_][][][][][][][][][][][][]| |[] [][][] [][][][] |  |  |       |
         | [__][][][][][][][][][][][][__|[] [][][] [][][][] |  |  |       |
         | [_][][][][][][][][][][][][_]            [][][]|| |  |  |  /|\  |
         |    [_][________________][_]             [__][]LI |  |   \_____/
         |__________________________________________________|  ;
                                                          \___/



This tool is intended to make the conversion of scrolling game maps and sprite
assets as easy and painless as possible for Atari ST game prototyping. It is
the primary datapath tool for use with AGT playfield & sprite engine but is
hopefully general enough to be used with other codebases.

Pay attention to warnings issued by the tool - image formats are complex and
the type of format used may affect what the tool has to do. It will usually
take the most obvious course of action (e.g. reducing colours) but will warn
when it takes such a decision. If what you got is not what you expected, check
the output from the tool, then check the details of the file types involved.


===============================================================================
changenotes:
===============================================================================

v0.17	07/04/2016
---------------------------------------
* added support for reading palettes direct from .cct tile libraries, to help
  map sprites directly to backgrounds 
* added '-kg/--key-guard' and '-kt/--key-tol' options to control colours
  being accidentally remapped to the transparent key colour

===============================================================================
Examples: [maps & tile libraries]
===============================================================================

Maps are emitted as '.ccm' files (format described towards end)
Tile libraries are emitted as '.cct' files (format described towards end)


This command will cut a map & tile library from an 8bit BMP without remapping
any colours. It will emit the tile library to a series of Degas PI1 files.

 -cm tiles -o degas -s shark_16col.bmp


This will do the same, but emitting to the direct format used by AGT playfield
engine.

 -cm tiles -o direct -s shark_16col.bmp


Same again, but will colour-reduce a 24bit PNG to a specified (RIFF) palette.
See help for other palette formats!

 -cm tiles -o direct -s shark_24bit.png -p shark.pal


Same again, but will attempt to optimize tiles away based on similarity and
a specified tolerance.

 -cm tiles -t 0.75 -o direct -s shark_24bit.png -p shark.pal



===============================================================================
Examples: [spritesheets]
===============================================================================

Spritesheets are emitted as '.sps' files (format described towards end)


This command will cut 9 sprite frames from the source image, arranged in a
vertical column starting from coordinate 46x2 and stepping 18 pixels vertically
downwards for each frame to be cut. It will directly use the indexed colours 
already assigned in the 16-colour PNG or BMP without any remapping. It will
by default attempt to optimize unused pixels out of the frames so each frame
could end up with a different size in memory.

 agtcut -cm sprites -s sprites_16cols.png -sxp 46 -syp 2 -sxs 23 -sys 16 -sxi 0 -syi 18 -sxc 1 -syc 9

This will do the same as the first example, but cutting a regular 4x4 grid of
16x16 sprites without optimizing away the transparent pixels/lines. All frames
will be exactly the same size in memory ('-sopt off').

 agtcut -cm sprites -s sprites_16cols.png -sopt off -sxp 0 -syp 0 -sxs 16 -sys 16 -sxi 16 -syi 16 -sxc 4 -syc 4



This will cut a single sprite frame, but the highest colour index found in the
source image is greater than the 16 available colours for 4-plane tiles, so it
will reduce  the image to a specified palette encoded in a Degas PI1 (see help
for more  formats).

 agtcut -cm sprites -s sprites_256cols.png -p mypal.pi1 -sxp 46 -syp 2 -sxs 23 -sys 16 


This time we use an existing background tile library (.cct) as the source of 
our palette for remapping sprites. This ensures sprites match the background!
(see help for more formats).

 agtcut -cm sprites -s sprites_256cols.png -p tiles_f0.cct -sxp 46 -syp 2 -sxs 23 -sys 16 
 


The -prv option will provide feedback on colour indices and transparency/mask

 agtcut -cm sprites -s sprites_16cols.png -prv -sxp 46 -syp 2 -sxs 23 -sys 16 

 sprite dimensions [23, 16]
 cutting sprite frame 0 from position [46, 2]

                       09 09 02
                 09 02 09 0a 0a 02 09 0e
                    01 02 02 02 02 02
                 01 07 02 02 09 0a 0a 09 02 06
                 01 04          02 02 09 09 06 09 02
                    01    09 09 02 02 02 02 02 02 09 0a 09 02 02
        01 04 02 02    02    09 09 09 09 09 02 02 02 02 02 09 09 0a 0a 0a 09
           02 02    02 02 04                02       02 02 09 02
           09          02 04    02 02 02 02    04 04    02 09 02
           02 02    02 02 04                02       02 02 02 09 0a 0a 09 02
                 02 02 02    09 09 09 09 09 02 02 02 02 02 02 02
                    02    09 09 02 02 02 02 02 02 02
                 01 04          02 02 02 02 06
                 02 02    02 02 02 02 02
                       02 02 02 02
                       02 02 02

 created sprite frame 0 from offset [0, 0] size [23 x 16]


The -key option will allow the transparent colour to be changed when generating
precalculated masks, and to allow a chosen colour to be remapped to 0, in the
case where no explicit mask data is to be generated.


 agtcut -cm sprites -s sprites_16cols.png -prv -key 2 -sxp 46 -syp 2 -sxs 23 -sys 16 

 sprite dimensions [23, 16]
 cutting sprite frame 0 from position [46, 2]

        00 00 00 00 00 09 09    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
        00 00 00 09    09 0a 0a    09 0e 00 00 00 00 00 00 00 00 00 00 00 00
        00 00 00 00 01                00 00 00 00 00 00 00 00 00 00 00 00 00
        00 00 00 01 07       09 0a 0a 09    06 00 00 00 00 00 00 00 00 00 00
        00 00 00 01 04 00 00 00       09 09 06 09    00 00 00 00 00 00 00 00
        00 00 00 00 01 00 09 09                   09 0a 09       00 00 00 00
        01 04       00    00 09 09 09 09 09                09 09 0a 0a 0a 09
        00       00       04 00 00 00 00 00    00 00       09    00 00 00 00
        00 09 00 00 00    04 00             00 04 04 00    09    00 00 00 00
        00       00       04 00 00 00 00 00    00 00          09 0a 0a 09
        00 00 00          00 09 09 09 09 09                      00 00 00 00
        00 00 00 00    00 09 09                      00 00 00 00 00 00 00 00
        00 00 00 01 04 00 00 00             06 00 00 00 00 00 00 00 00 00 00
        00 00 00       00                00 00 00 00 00 00 00 00 00 00 00 00
        00 00 00 00 00             00 00 00 00 00 00 00 00 00 00 00 00 00 00
        00 00 00 00 00          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00

 created sprite frame 0 from offset [0, 0] size [23 x 16]


The -gm option will force the tool to generate explicit mask data. The -ml
option will specify how this mask data is laid out in the file format.

'-gm -ml interleaved' will emit 1 mask word before each group of colour plane
words.

 agtcut -cm sprites -s sprites_16cols.png -gm -ml interleaved -key 2 -sxp 46 -syp 2 -sxs 23 -sys 16 

'-gm -ml planar' will emit the entire mask bitplane before any of the colour
plane words. The colour planes however remain interleaved (ST screen format).

 agtcut -cm sprites -s sprites_16cols.png -gm -ml planar -key 2 -sxp 46 -syp 2 -sxs 23 -sys 16 


The '-kg' and '-kt' options can be used together to protect the transparent
key colour from being used by other similar colours during colour reduction.
This effectively makes the key colour 'harder to match' than other colours.


Here's the sprite reduced without the key-guard option:

 agtcut -cm sprites -s sprites_16cols.png -prv -sxp 46 -syp 2 -sxs 23 -sys 16 

                       09 09 02
                 09 02 09 0a 0a 02 09 0e
                    01 02 02 02 02 02
                 01 07 02 02 09 0a 0a 09 02 06
                 01 04          02 02 09 09 06 09 02
                    01    09 09 02 02 02 02 02 02 09 0a 09 02 02
        01 04 02 02    02    09 09 09 09 09 02 02 02 02 02 09 09 0a 0a 0a 09
           02 02    02 02 04                02       02 02 09 02
           09          02 04    02 02 02 02    04 04    02 09 02
           02 02    02 02 04                02       02 02 02 09 0a 0a 09 02
                 02 02 02    09 09 09 09 09 02 02 02 02 02 02 02
                    02    09 09 02 02 02 02 02 02 02
                 01 04          02 02 02 02 06
                 02 02    02 02 02 02 02
                       02 02 02 02
                       02 02 02

...and recut with key-guard enabled and a key matching tolerance of 0.01

 agtcut -cm sprites -s sprites_16cols.png -prv -kg -kt 0.01 -sxp 46 -syp 2 -sxs 23 -sys 16 
 
                      05 05 0d
                05 0d 05 04 04 0d 05 07
                   09 09 09 0d 09 09
                09 0b 09 0d 05 04 04 05 0d 0b
                09 06 09 03 09 0d 0d 05 05 0b 05 0d
                   09 09 05 05 0d 0d 0d 0d 0d 0d 05 04 05 0d 09
       09 06 0d 0d 03 0d 03 05 05 05 05 05 0d 0d 0d 0d 0d 05 05 04 04 04 05
       03 09 09 09 0d 09 06 09 03 03 03 09 0d 03 03 0d 0d 05 09
       03 05 03 09 03 09 06 09 0d 0d 0d 0d 03 06 06 09 0d 05 09
       03 0d 09 09 09 09 06 09 03 09 03 09 0d 09 03 0d 0d 0d 05 04 04 05 0d
                0d 09 0d 03 05 05 05 05 05 0d 0d 0d 0d 0d 09 09
                   09 03 05 05 0d 0d 0d 0d 0d 09 09
                09 06 09 03 09 0d 0d 0d 09 0b
                0d 09 09 0d 0d 0d 0d 09
                      09 0d 0d 09
                      09 09 09
                      
Some darker colours were originally mistaken for key colour 0 (black) but
the key-guard flag protects all but very close matches to the key colour.

Note: For STF sprite rendering in the AGT playfield engine, colour 0 is always
assumed to be the key colour regardless of what -key is specified. The -key
option will remap the chosen colour to use colour 0 so it is better to prepare
the assets beforehand.
 
For sprites generated with explicit masks, the -key option allows masks to
be generated for the specified key colour. It also remaps the key colour to
0 in the colour data channel to allow mask logic to work properly at drawtime.


===============================================================================
File Formats: 
===============================================================================

All fields are Motorola/BigEndian format, ready for reading on Atari.

No preshifting is provided yet - this will be added soon and will require
some changes to the map/tile library formats (i.e. new format). The spritesheet
format should cope with preshifting already.


===============================================================================
File Formats: Maps [.ccm]
===============================================================================

Map format is very simple, since you may want to convert it to some other form.

This is the same format emitted by the CryptoChrome tool (PCS v6.2x - except
the other tool emits 2 sets of maps for interlacing with).

width_in_tiles:		4 bytes
height_in_tiles:	4 bytes
tilelib_indices:	4 bytes * (width_in_tiles * height_in_tiles)



===============================================================================
File Formats: Tile Libraries [.cct]
===============================================================================

This is the same format emitted by the CryptoChrome tool (PCS v6.2x - except
the other tool emits 2 sets of tiles for interlacing with).

palette:		32 bytes (16 palette words in STE HW format)
flags:			1 byte	(0, reserved for now)
num_bitplanes:		1 byte	(if==0, must interpret as 4 planes!)
num_tiles:		2 bytes
tilelib_data:		(num_bitplanes * 2 bytes * 16 lines) * num_tiles


===============================================================================
File Formats: Sprite Sheets [.sps]
===============================================================================

The sprite sheet format is a bit more complicated, mainly to accommodate some
data layout and pixel preshifting options.


[databytes]:		4 bytes (excluded! so true filesize = databytes+4)
version_info:		2 bytes	(file format version: 0x0100 for version 1.0)
frame_count:		2 bytes
num_bitplanes:		2 bytes
flags:			2 bytes	(see section on flags for info)
preshift_range:		1 byte	(0, reserved for now)
preshift_step:		1 byte	(0, reserved for now)
source_width:		2 bytes (i.e. sprite size before optimization)
source_height:		2 bytes
[frame_index]:		4 bytes * frame_count


The [frame_index] is a table of 4byte offsets to frames, from the [frame_index] 
table start. 

So to calculate the file position of the third frame...

..in pseudocode:

	frame_data_addr = frame_index[2] + frame_index
 
..in 68k asm:

	; sps header in a0
	; frame in d0
	add.w		d0,d0
	add.w		d0,d0
	lea		sps_frameindex(a0),a1	; access frame index
	add.l		(a1,d0.w),a1		; access sprite frame data



Immediately following the frame index, are the frames themselves, one after
the other in sequence until the file completes:

framewidth:		2 bytes	(optimized width of stored frame)	
frameheight:		2 bytes	(optimized height of stored frame)
xoffset:		2 bytes	(compensate for optimized size vs src size)
yoffset:		2 bytes	(compensate for optimized size vs src size)
[framedata]:		...


Three layouts currently possible for the frame data. This is based on 
the contents of the 'flags' field and mainly involves mask options. More
layouts will likely be added in future e.g. plane-by-plane colour data.

1) no explicit mask (default)
	colour data: 	(num_bitplanes * 2 bytes) * ((framewidth + 15) >> 4) * frameheight

2) interleaved mask			
	combined data: 	((1+num_bitplanes) * 2 bytes) * ((framewidth + 15) >> 4) * frameheight

3) planar mask
	mask data: 	2 bytes * ((framewidth + 15) >> 4) * frameheight
	colour data: 	(num_bitplanes * 2 bytes) * ((framewidth + 15) >> 4) * frameheight


The sprite frame should be drawn at xpos+frame.xoffset, ypos+frame.yoffset to
reproduce the original assets, if cutting optimization has been used.

Note: Currently no precalculated mask data is stored. This will be added soon
for blitter based sprites. Software based sprites can be drawn more efficiently
using keycolour=0, without a pre-calculated mask.


Sprite Sheets flags
-------------------------------------------------------------------------------

The 16bit .sps flags field is formatted as follows.

      1                             
      5             8   7             0
      ---------------------------------
bits: 0 0 0 0 0 0 0 0 : 0 0 0 0 0 L L M
 
 
        M:  1 = explicit mask data present (-gm was specified)

       LL: 00 = mask layout is interleaved. 1 mask word emitted before each
	        group of N plane words.
           01 = mask layout is planar (-mg planar was specified). The whole
                mask plane comes before any colour data. 


The other flags are reserved for now...



===============================================================================
Quick Help info
===============================================================================

Atari GameTools: map, tile & sprite cutter v0.16 / dml
built on Apr  7 2016
usage:
 atgcut [opts] [infile]

 -?, -h, --help       > show help/usage
 -v, --verbose        > more output
 -q, --quiet          > less output
 -wk, --wait-key      > wait key on exit

general:
 -s, --src            > source image containing tiles/sprites:
                      > pre-mapped: png,bmp (i.e. use indexed 4/8bit colour w/no remapping)
                      > unmapped:   png,bmp,jpg,psd,tga,gif,hdr,pic,ppm/pgm/pnm
 -cm, --cutmode       > cutting mode: tiles,sprites
 -p, --pal            > fixed palette to use: pi1,pal(riff),bmp,png
 -bp, --bitplanes     > #bitplanes to generate: 1-8
 -key, --key-colour   > colour index assumed to be transarent: 0-255

sprite cutting mode:
 -sxp, --sprxpos      > first frame xpos: 0+
 -syp, --sprypos      > first frame ypos: 0+
 -sxs, --sprxsize     > all frames xsize: 1+
 -sys, --sprysize     > all frames ysize: 1+
 -sxi, --sprxinc      > x step for next frame in row: 0+
 -syi, --spryinc      > y step for next row: 0+
 -sxc, --sprxcount    > frames per row: 1+
 -syc, --sprycount    > frames per column: 1+
 -sc, --sprcount      > total frames to cut, if stopping early: 0+, where 0=ignore
 -gm, --gen-mask      > generate 1bpl mask data along with colour data
 -ml, --mask-layout   > mask layout strategy: interleaved,planar
 -sopt, --soptimize   > optimize away unused pixels: on/off (compensated w/offsets)
 -prv, --preview      > show ASCII preview of extracted colours + masking

map & tile cutting mode:
 -t, --tol            > tile matching tolerance: 0.0+
 -om, --outmode       > tile library output mode: direct,degas

