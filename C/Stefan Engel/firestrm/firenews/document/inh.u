#-----------------------------------------------------------
# Description of the Mesasge-base *.HDR-file
#-----------------------------------------------------------
!subnode* *.INH
(!B) OBS!!!! (!b)
The old HDR files have been reorganized into a binary (ie you are not able 
to read it in a text-editor any more) system, containing more info than 
previous.
(!B) OBS!!!! (!b)

The *.INM files and the *.INH files is the message-base of Babel, in these 
files the news-messages are stored and also other information is stored 
here.

Under NO circumstances should the user edit any of these files by hand, they 
 are maintained for you by babel and your newsreader. This documentation is 
therefore intended primarily for programmers of newsreaders, for  people  
with a general interest and for people who are trying to recover some scrap 
of sanity after a major fault (which should never happen :) )

The *.INH files containes information about the messages in the *.INM files and 
it is the important file of the two (in a programmers point of view)
the information is stored in a binary format, ie it cannot be edited in an 
text-editor (which the old HDR format could)

The structure of the *.INH file is like this.
The first 8 bytes holds the identification of this file (at the moment it 
should be 'NEWS0.50') so that there will be no mistakes.
After that follows the news-information, message by message, this 
information should be 160 bytes long. so if you have 1 message your file 
should be 168 bytes long, 2 messages would give you 328 bytes...

The structure of the news-information is like this.

!begin_raw
typedef struct _newsheader
{            
  long       offset;     /* The Offset in the messagefile                 */
  long       length;     /* The size of the message Including the         */
                         /* endterminator "." */
  
  struct i               /* This structure holds the information about the*/
                         /* tree-structure of the messages                */
  {
    long  parent,        /* Parent message                                */
          child,         /* child message                                 */
          next,          /* next message that have the same parent        */
          prev;          /* prev message that have the same parent        */
  } i;
  struct flags           /* the different flags in the message            */
  {
    int deleted     :1,  /* The message has been soft-deleted on the HD   */
        header_only :1,  /* This mesage contains only the header          */
        keep        :1,  /* This message is to be kept no matter what.    */
        outgoing    :1,  /* this message is to be sent to the server      */
        requested   :1,  /* This message is to be recieved from the server*/
        undef_05    :1,
        undef_06    :1,
        undef_07    :1,
        undef_08    :1,
        undef_09    :1,
        undef_10    :1,
        undef_11    :1,
        undef_12    :1,
        undef_13    :1,
        undef_14    :1,
        undef_15    :1,
        undef_16    :1,
        undef_17    :1,
        undef_18    :1,
        undef_19    :1,
        undef_20    :1,
        undef_21    :1,
        undef_22    :1,
        undef_23    :1,
        undef_24    :1,
        undef_25    :1,
        undef_26    :1,
        undef_27    :1,
        undef_28    :1,
        undef_29    :1,
        new         :1,   /* This message is new on the HD, ie not yet    */
        replied     :1;   /* this message has been replied to             */
  }flags;
  char       from[NEWS_FROMSIZE]; /* who is the writer of the message     */
  char       subject[NEWS_SUBJECTSIZE]; /* what is the message-subject    */
  long       date;        /* Date of message Atari-system-compatible date */
} NewsHeader;
!end_raw

!end_description
