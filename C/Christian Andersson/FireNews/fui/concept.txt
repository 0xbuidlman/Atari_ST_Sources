FUI (FireSTorm/(Fenix?) User Interface)

OK, this is purely how I want things to be done :)
much of it is based on the standard GEM way, but there is a lot of 
changes... As you will see if you read through this, this is just a 
description of how I would like it, not a sollution! :)

Main Advantages.

* Resolution independent.
* Size independent
* Font independent
* Resizeable dialogs.
* Langauge changing within the programs
* Easy translations to different languages.
* More type of objects.
* Better handling uf user-specified objects.


OK, lets take a look at the above points in specific.

* Resolution independent.
  The new system should be resolution independent, ie the same 
  resource-structure should be usuable without any modifications at   
  all when used in different resolutions. In the current (GEM) 
  resource system, this is not true, since 2 different resolutions   
  makes you either to have 2 different resource-files, or to have 
  some routines/functions in your program that rescales the resource.. 
  This should not be necessery, only one resource-file should be 
  needed for every resolution ( I know that it is the size of the 
  system-font that is the real problem, but the problem is there)

* Size independent.
  The user/program should not be concerned that the dialog does not 
  fit into the current resolutions screen width and height, the 
  dialog system will take care of those sort of things, there are  
  several ways to do that, either the dialog-system could rescale all 
  objects so that the dialog will fit (using smaller fonts, and  
  rescaling images, etc..) Or it could just introduce scrollbars. the 
  possibilities are many..

* Font independent.
  the program system should not behave different if the fonts to be 
  used are proportional or not, if the size is changed, if any   
  effects is used on the fonts, etc. All of this is to be taken care 
  of by the dialog-system. automaticly, and it should even handle  
  run-time changes... ie Changing system-fonts makes the dialog to 
  use the new system-font automaticly.

* Resizeable dialogs.
    the dialog system should be able to handle resizing by the user, 
    ie if the dialog is able to be resized the user should be able to 
    take a corner/side(or something like that) and drag it to a new 
    size... this resizing could then make some objects inside the 
    dialog larger but others would stay the same... ie if you have a 
    "text-area" in a dialog, you might want it to change the size, 
    while the buttons would stay the same size..
    
* Langauge changing within the programs
  The user should be able to change the language of a program while 
  it is running. The programmer would only have to call a single 
  system-routine that would change the entire language of the 
  resource.. (ofcourse every text in the program would then have to   
  be stored in the resource language file , but that is also how it 
  should be). The language in a program should be based on 3 
  different things.
  1 - the saved language in the programs-configfile (if the language 
      is saved in the config-file that is)
  2 - the Default language of the system, ie somewhere the user will 
      be able to set the system-language, and this language will then 
      be the prefered language for all programs (unless the language 
      is saved, see 1)
  3 - The default language of the resource. ie there will always be 1 
      language shipped with the resource, and this languge is    
      specified in the resource. this is the final language that is 
      to be loaded, and it will do so if step 1 and 2 did not work.

* Easy translations to different languages.
  The language is to be stored in a seperate file then the resource-
  structure. this file should have the same name as the resource 
  have, except that the .rsc will be changed into a .se or .de or 
  whatever language is supported. this extension of the file name is 
  the standard ISO-(XXXX) for land-codes (there should be one for 
  languages also if I'm not mistaken, but I have not found one
  yet) this seperate file is to be a pure ASCII-file that can be 
  edited in a normal text-editor (Qed, Everest, etc...) and it should 
  look something like this.

  (Root-Object Name)
  {
    (Object Name),(Language-specifik data for this object)
    ...
  }
  ...
  
  --Example begin--------------------------------
  "Dialog 1"
  {
    "Button 1","Press here to continue","<ALT>C"
  }
  --Example end----------------------------------

  There is many way one can do the names of dialogs/Objects, one is to use a string as I did above
  this I think would make it easier for the translator, but it would take more memory, and more
  complex code in the system. an other way would to use number-indexes like 1,26434, ... this would
  make it easier for the system and would save some memory, but i belive it would make it harder
  for the translator, and the designer of the resources... anyway whatever way we choose the names
  should not change if we insert objects between 2 other objects, also the data that stands after
  the object-names should be interpreted byt routines in the object..
  there are some "standars" they must follow thoe :)
  A string is a normal "C" -string between "" chars... so if you want 
  to have an " in your program you will have to do it by using the 
  "C" way :))) ie like this "\"" a new line is then "\n".

* More type of objects.
  All the normal GEM objects should be supported, but also we should make a new set of objects
  and include them also. for instance a "Secret" text-input would be nice :)

* Better handling uf user-specified objects.
  There should be a couple of routines/functions to add a new object type to the system.
  the new object type could be for the current running program only, or for the whole system.
  Instead of in GEM where there is 1 user-object which holds different functions, Every object-type
  can be a user-ubject, what you have to do to make it an user-object is to register the type you want
  to use, and also send in a pointer to a list of functions that the system will use, ie a function to
  draw, to handle mouse-events, key-events, etc...
  if you want to change the button-behaviour all you have to do is the register the button-type and
  insert your own functios instead of the systems.
  By using TSR:s the system-dialog handling could then be totaly replaced, or just partly, however,
  replacing standard objects with your own ones, they need to be compatible :)

I do not at the moment have a proper structure of the resource-objects, but these "properties" I
believe it must have

 Object_id      long or char[16]
 Object_type    short or long
 Data           Pointer to object specific data, it could be text, etc..
 flags          bits Different flags that handle the resizeing, and such stuff, if an object is
                pressed or not shoul dnot be here.. one of these flags will also tell if the object
                is an active or passive
in_w/h          short or byte  how much inside the object should be reserved, ie not usuable by any
                child-objects.
out_w/h         how much outside an object should be reserved, ie not usuable by any sisters/brothers
                or perheps parents

The flags above are currently the hardest parts since some of these flags will control how an object will
be sized, placed, and how it should react to user-resizes, etc...

I have been talking to johan Klockars about this, and all I can say is that we agree that we disagree :)

some functions that must exist... (the names are changed from the ordinary GEM-names so that they are not
confused)

Register_Object_Type(...)
Load_Resource(...)
Load_Language(...)

Each object must have some functions, and here are what I think should be necessery
Draw(...)
Calc_small_size(...)
Handle_event(...)




Well that is it, comments, flames, etc har Happily recieved.....

