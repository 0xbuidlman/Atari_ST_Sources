One should note that you may use any C like arithmetic expression everywhere
an immediate value is used. ( without any space between operands ) 
ex: the <<, *, -, or >> can be used...

also, a68k has a buildin limit of 127 characters by line

include "xxxx"     This will replace the include with the file xxxx
                   and will treat it as any source assembly file: it will try
                   to assemble it.

incbin  "xxxx"     Works just like include except that it will not try to
                   assemble it. The whole file will be treated as a dc.x
                   directive.

even               it will align the data after it on a longword boundary

cnop x,y           forces alignment, (y=2^n). EVEN==CNOP 0,2

xdef               it will define an external symbol ( in the hunk_ext
                   $000003ef hunk. see \doc\amiga.txt )

xref name          this one is just added for completeness, you needn't
                   include it. On the amiga it allows you to reference XDEF
                   symbols. As XDEF allows you to declare labels as external
                   (if you like), so that other object files can reference
                   them with XREF.

section name       defines a section 

bss                data section ( the data section can only contain zeros )

end                It is used to indicate the end of a section/of a symbol

dc.x               It will reserve a small data area: dc.b 0  will be
                   traduced by the assembler by $00, dc.w $ffff will be
                   traduced by $ffff...
                   Can also be used that way: dc.x  y,z,t,..... to initialize
                   as many bytes or words or longwords as wished.
                   a well known example is: dc.b "A cool program !"

ds.x yyy           It will reserve an yyy bytes long memory area ( if x=b )
                   word long if x=w .. and so on...

dcb.x n,v          declares n x's of value v

macro/endm         It allows the user to define newer macros
                   For example, the macro moov:

                                  moov    MACRO
                                          move.\0 \1,\2
                                          ENDM

                   the macro call

                                  moov.l  d0,d1

                   would be expanded as

                                  move.l  d0,d1

< ... >            used to send an entire statement as a macro parameter

equ                it allows the user to define constants
or =               for example, lcd_mem    equ  $00000000
                   This means that all reference done to lcd_mem in the code
                   will be replaced by a zero

name EQUR reg      allows name to be used to represent reg

name SET val       allows variables to be defined, in that the value can
                   change in the program

ifxx value         parse block if tested VALUE meets condition (xx):
                   EQ   : equal   to 0
                   NE   : non equal  to 0
                   GE   : greater or equal to 0
                   GT   : greater than 0
                   LT   : less than 0
                   LE   : lower or equal to 0
                   C    : carry
                   NC   : no carry
                   parse block if symbol VALUE is:
                   D    :  defined
                   ND   : not defined

                   Where VALUE is a variable defined by the set directive
                   ex:
                   ifeq  mode-2
                   ; code assembled only if mode equal to 2
                   endif

endc               ending block for ifxx
endif              alternative for ENDC

\xxxxx             local label named \xxxxx
                   the limits within which a local label is defined are the
                   last and next labels
\xx@yy LABEL       local enumeration label, for use in MACROs
                   (xx & yy part of label name)
