*****************************************************************************
			       Lesson II
*****************************************************************************

This lesson is dedicated to the use of the keyboard ( how to detect which keys
are hit ) and on the use of the stack to pass parameters to subroutines.

I ) Specific keys: arrows for exemple
  I.1 ) the tios keyboard buffer 
  I.2 ) the keyboard
  I.3 ) Conclusion: TI OS

II ) Numbers/characters
  II.1 ) Intro
  II.2 ) the routine
  II.3 ) how it works
  II.4 ) The stack


I ) Specific keys: arrows for exemple

  I.1 ) the tios keyboard buffer 

 It is often necessary in games to detect which arrow was hit so that the ship
position recalculated...
Fargo offers a routine to detect the keys hit: "flib::idle_loop". This
function will make a pooling on the keyboard: it will wait till a key is
pressed or till enough time is ellapsed ( the calc is then switched off ).
The main problem with this routine is that it does a pooling: you can' t do
anything when you are waiting for the key: this is NOT a good solution to
our problem.
 The solution is to use directly the keyboard buffer. Here is its structure:

$075AA  : (000A) circular word buffer (used for key buffer)
	+0000.W : buffer tail (insert word at [buffer+tail])
	+0002.W : buffer head (read word from [buffer+head])
	+0004.W : size of buffer (default: 0002)
	+0006.W : number of bytes currently stored in buffer
	+0008   : circular buffer

This buffer is $10 bytes long: the adress given here is valid only with
rom 1.x . To get its adress, you should use the variable: "tios::kb_vars".

   move.l   (tios::kb_vars+$16),a0     will move the needed adress in a0

Note: look at "ram-1_x.txt": the tios::kb_vars begins at $7594

Every time a key is hit, this buffer is updated ( if interruptions are
enabled ). The code ( coded on one word as explained in ti manual ) of the
key hit is stored there. So, the first thing to do is to test whether a key
was hit or not: we need to test the number of bytes in the buffer:

test:
   tst.b  (tios::kb_vars+$1c)
   beq    nothing
   ; a key was hit

nothing:
   ; no key was hit

If one key or more was hit, we need to know if the ones we bother about were
and if so, to react acordingly.

keyb_routine:
   movem.l d0/a0,-(a7)               ; saves registers used
   tst.w   (tios::kb_vars+$1c)       ; test is a key was hit
   beq     no_key                    ; no then goto no_key (end of routine) 

   move.l  #tios::kb_vars+$1e,a0     ; yes ! moves adress of 1st scancode
loop:                                ; in a0
   move.w  (a0)+,d0                  ; gets the 1st scancode in d0
   cmp.w   #337,d0                   ; left ? 
   beq     left_arrow                ; then goto left_arrow
   cmp.w   #338,d0                   ; up ? 
   beq     up_arrow                  ; then goto up_arrow
   cmp.w   #340,d0                   ; right ? 
   beq     right_arrow               ; then goto right_arrow
   cmp.w   #344,d0                   ; down ? 
   beq     down_arrow                ; then goto down_arrow
   bra     one_key                   ; none of our keys was hit: goto one_key
				      
one_key
   sub.w   #1,(tios::kb_vars+$1c)    ; we tested one key: we check if one is  
   tst.w   (tios::kb_vars+$1c)       ; left on the buffer
   bne     loop                      ; one is left then goto loop
no_key:                              ; else, goto nokey
   movem.l (a7)+,d0/a0               ; restores registers used
   rts

left_arrow:
   ; code for left
   bra     one_key
up_arrow:
   ; code for up
   bra     one_key
right_arrow:
   ; code for right
   bra     one_key
down_arrow:
   ; code for down
   bra     one_key


 This routine will work but it is not very efficient: it can be optimized in
terms of speed and/or size: this should be done after having finished the
whole program: that way, if necessary, the routine will be optimized but
there is no need for us to do so unless needed.

 It is build to be easily called: it saves the registers used and restores
them. The comments are self explanatory. 

 This type of key testing routine is usefull when wishing to test only a few
keys. It simulates more or less a "case of 1,2,3..." structure.
However, when programming a game, it is often necessary to have a very fast
program. Optimizing this routine and the program itself is not allways enough
There are then 2 solutions left:
 1) change the algorythm
 2) disable interrupts: the program will run approximatively 20 to 50 percent
    faster
Disabling the interrupts has a few drawbacks: the ti os uses interrupts to
keep track of events: to keep the key buffer we just used filled and fargo
uses them to get grayscale graphics.

On the whole, disabling interrups means that we must renounce to:
grayscale graphics, tios keyboard buffer and i/o link...
If you ever decide to do so, then you will have to read directly the keyboard.
This is not particularly difficult.

Note:
1) The 92 is mainly slowed down by the auto-int 1: using a custom
   auto-int 1 wil dramatically increase the speed
2) The easiest way to check values is to use '' around the character,
   ex:   cmp.w #'0',d0                 ;'0'=48
   The assembler will automatically replace the #'0' by #48

      

  I.2 ) the keyboard

The keyboard can be accessed by the $600018 and $60001B ports.
The working of these ports is cleanly explained in the "lowlevel.txt" 
If you allready went through \system.txt and read section II.5, then you can
imagine the principle of reading the keyboard.
 Writing a one to a bit of the mask port will drive the corresponding row
to 0V while reading the 1A port will allow you to directly read the colomns:
a bit set to one will mean that the colomn is driven to +5V: a key was hit
in the colomn. 
 This works just like in our 4 key exemple... 

For exemple, here is how it can be used to detect the arrows hit:
We have chance: all arrows are on the first row. We need thus first to mask
all other rows by: move.w  #%111111110,($600018)
wait a little and then to check the different bits of ($60001A)

key_test:
  move.b   d0,-(a7)
  move.w   #%111111110,($600018)
  nop
  nop
  nop
  nop
  move.b   ($60001B),d0

  lsr.b    #4,d0             ;  this tests if one of the four arrow
  cmp.b    #%00001111,d0     ;  was hit.
  beq      no_key            ;  if none was hit, then goto no_key

  btst     #0,d0             ;  else, test the 1st bit: if set, 
  beq      left_arrow        ;  left was hit
  btst     #1,d0             ;  2nd bit 
  beq      up_arrow          
  btst     #2,d0              
  beq      right_arrow
  btst     #3,d0
  beq      down_arrow

no_key:
  move.b   (a7)+,d0
  rts


left_arrow:
  ; code
  bra      no_key
up_arrow:
  ; code
  bra      no_key
right_arrow:
  ; code
  bra      no_key
down_arrow:
  ; code
  bra      no_key

This program will also work cleanly but it requires some little remarks:

  lsr.b    #4,d0             ;  this tests if one of the four arrow
  tst.b    d0                ;  was hit.
  beq      no_key            ;  if none was hit, then goto no_key

This simply first gets rid of all lowest bits ( which represent the hand,
shift, diamond and second keys ) by shifting the register to the right of 4
bits. The bits freed to the left of the register are now filled with zeros.
Thus, if one of the four arrows was hit, one of the four lowest bits is set:
if tst.b d0 sets the z flag, then no key was hit and it saves us four bit
tests. If one key was hit, d0.b is different from zero and we will do four
tests on d0 to determine which key exactly was hit. As keys are not very
often hit, this saves quite some tests and time...

Then, as the register was shifted to the right, the 4,5,6 and 7 bits are now
bits nø 0,1,2 and 3 . The fact that bits are counted from zero is extremly
important...


Note:
 1) This routine needs pooling: you must call it regularly so that some key
 hits are not forgotten.
 2) There is a way to further improve the routine: the last bit test is not
 necessary and if you test only the arrows, setting the $600018 bit mask
 everytime you call the routine is not necessary
 3) The number of "nop" is important: it has something to do with timing..
 I don' t know much about it...

  I.3 ) Conclusion: TI OS

  The TI OS uses auto-interrupt 1 which is called regularly by the timer to
read the mapped i/o peripherals ( at $6000xx ) and to translate the
information it reads into usable information : it updates the buffer we talked
about for exemple: it writes there the character codes of the keys hit.
That is why disabling interrupts has some effects on keyboard reading.

-----------------------------------------------------------------------------

II ) Numbers/characters
  
  II.1 ) Intro

  We have only studied a way to do some tests on specific keys but it is not
allways the case: getting a player's name for a highscore table is sometimes
necessary while a text editor cannot test only the arrows...
  The fargo "flib::idle_loop" routine may be used in this case: it works fine
and it returns the scancode of the key hit . Reading directly the key buffer
is also possible but is not really necessary...
  It is often necessary to do an echo on the screen: we need to build
a string on the basis of the character set which can then be easily displayed
by the tios routines if adding at its end a $00 character.

 Here are the numbers of the character set

Number:         0    1    2    3    4    5    6    7    8    9
Character set: 48   49   50   51   52   53   54   55   56   57
ascii:         48   49   50   51   52   53   54   55   56   57

 As the ascii code and the scancode are similar, ( only for alpha numerical
values ) the problem is allready solved. All you need to check is that the
scancodes you get are within certain values, then to add then to a chained
list to which we add a $00 at the end so that it becomes a string. ( The
format of a string is: $xxxxx$00: it is a null terminated string: a zero is
added at the end of the characters codes.

  II.2 ) the routine

input:  number of characters - 1 (word) 
	x position for echo on screen (byte)
	y position for echo on screen (byte)
	pointer to output string ( of the right lenght ) (longword)
	color (word)

output: none

-------------------------------------------------
 include "flib.h"
 include "tios.h"
 xdef _main
 xdef _comment

_main:
   jsr       flib::clr_scr
   move.w    #4,-(a7)
   pea       string(pc)
   move.w    #0,-(a7)
   move.w    #0,-(a7)
   move.w    #7-1,-(a7)
   bsr       echo
   add.l     #12,a7
   jsr       flib::idle_loop
   rts

echo:
   movem.l   d0-d3/a0-a2,-(a7)  
   move.w    32+0+0(a7),d3           
   move.l    32+0+08(a7),a2          
   move.w    32+0+10(a7),-(a7)       
   move.l    32+2+08(a7),-(a7)       
   move.w    32+6+04(a7),-(a7)       
   move.w    32+8+02(a7),-(a7)       
\loop:      
   jsr      flib::idle_loop
   cmp.w    #48,d0
   bls      loop
   cmp.w    #122,d0
   bhi      loop
   move.b   d0,(a2)+
   move.b   #$0,(a2)
   jsr      tios::DrawStrXY
   dbra.w   d3,\loop
   add.l   #10,a7
   movem.l (a7)+,d0-d3/a0-a2
   rts

_comment:
 dc.b "essai",0

 dc.b 0
string:
 dc.b "0000000",0

 end
-------------------------------------------------------

Note: the input should be pushed on the stack just like in the
      "tios::DrawStrXY" routine with one more parameter: the number of
      characters - 1.
      This routine was especially written so that it doesn' t destroy any
      register.
      One last thing: the string is after the _comment... It is necessary
      to get the program to work: just the way the fargo object code is
      build

  II.3 ) how it works

Here is how it works:

_main:
   jsr       flib::clr_scr
   move.w    #4,-(a7)
   pea       string(pc)
   bclr.b    #0,(a7)
   move.w    #0,-(a7)
   move.w    #0,-(a7)
   move.w    #7-1,-(a7)
   bsr       echo
   add.l     #12,a7
   jsr       flib::idle_loop
   rts
This is a standard call to a routine, the parameters are pushed and the stack
is cleaned after the routine was called. The routine was written so that it
may be included in any library. calling it is simple...

The routine itself is not very complex : 

loop:
   jsr      flib::idle_loop      ; a key was hit ? 
   cmp.w    #48,d0               ; yes  ! check if it is a number
   bls      loop                 ; or letter
   cmp.w    #122,d0              ; if not, goto loop
   bhi      loop                 ;
   move.b   d0,(a2)+             ; else, add this character to the string
   move.b   #$0,(a2)             ; add a zero so that it is a null terminated
   jsr      tios::DrawStrXY      ; string and display it
   dbra.w   d3,loop              ; all caracters were disp ? 
   add.l    #10,a7               ; yes ! restore the stack 

This piece of the routine assumes that the number of characters to display -1
is stored in d3.w and the pointer to the string is in a2. A call to
"flib::idle_loop" will return the key scancode hit in d0.w: this scancode is
tested to check it is a letter or number. If it is not a valid scancode, the
routine will ask the user for a new key hit. if it is valid, it will add it
to the string with a zero and display it.

  II.4 ) The stack

  What is complex are the calls to the stack...
  When we called our routine, there were 5 parameters: one for our routine and
4 for the "tios::DrawStrXY" routine. When we get in the routine, the processor
pushes on the stack the PC (program counter) so that it may return to the main
program ( by using the RTS opcode) when the subroutine is completed. We need
to save the registers that we and the tios routine will destroy.


echo:
   movem.l   d0-d3/a0-a2,-(a7)   ; Saves all may be destroyed registers

After executed this piece of code, here is what the stack looks like:

  Adress: A7            Stack

		----------------------
$3000           |      $0004         |   ---> first param: color
		----------------------
$2FFE           |      $xxxx         |   ---> ;
		----------------------        ;  pointer to string
$2FFC           |      $xxxx         |   ---> ;
		----------------------
$2FFA           |      $0000         |   ---> ; y pos
		----------------------
$2FF8           |      $0000         |   ---> ; x pos
		----------------------
$2FF6           |      $0006         |   ---> ; number of carac to disp - 1
		----------------------
$2FF4           |      $yyyy         |   ---> ; return adress when calling
		----------------------        ; the subroutine: stored there
$2FF2           |      $yyyy         |   ---> ; by the bsr opcode
		----------------------
			  .
			  .                   ; 
			  .       ----------> ; saved registers
			  .                   ; 
			  .                   ;
		----------------------        ; highest byte of the a2.l 
$2FD6           |      $xxxx         |        ; saved register
                ----------------------        ;

A7 now points to $2FD6

There are 4*7   +   4   = 32  bytes between a7 and the last parameter pushed
           ^        ^
saved registers     return pointer

 Thus, when it is time to call the tios routine, (a few lines later) its
parameters, pushed before calling the subroutine, are far back in the Stack:
we need to put them back to the begening of the stack so that this routine
executes itself cleanly...
  A solution is to update the Stack pointer (A7) so that it points to the
parameters... Not a very good idea: the tios routine uses some subroutines
and will thus destroy everything which is bellow its parameters: our
parameters and the return adress to the main program...
  The only solution left is to repush the parameters to the stack: get them
where they are and repush them on the stack...

  Here is how we are going to proceed:

            /-----stack frame
            Ý /---amount allready pushed in current routine
            | | /-displacement from last pushed item before calling subrout
    move.w  4+2+4(a7),-(a7)

The Stack Frame is the amount of bytes between you ( when you begin to Repush
your parameters ) and the parameters. Here, as we allready calculated it: 32
The amount allready pushed is the number of bytes you allready Repushed.
The displacement from last pushed item before calling subroutine is the
number of bytes from the begening of the parameters to the parameter you are
effectively Repushing. ( This convention will be used from now in all code
given in this tutorial and i strongly suggest you to use it: the code is much
nicer to read...)

   move.w  32+0+0(a7),d3
This will simply get the first parameter in d3.w (the number of characters)

   move.w    32+0+10(a7),-(a7)   ; Repush
The color is the first pushed parameter: it is 10 bytes from the begening
of the parameters when going up in the stack.

   move.l    32+2+08(a7),-(a7)   ; the parameters
You allready pushed color ( 2 bytes ) and take the pointer ( 8 bytes from
begening )

   move.w    32+6+04(a7),-(a7)   ; for the tios::DrawStrXY
You allready pushed color and pointer ( 2+4 bytes ) and take the Y position

   move.w    32+8+02(a7),-(a7)   ; routine
You allready pushed color ,pointer and Y pos ( 2+4+2 bytes ) and take the
X position.

Thus, the folowing piece of code is self explanatory:

echo:
   movem.l   d0-d3/a0-a2,-(a7)   ; Saves all may be destroyed registers
   move.w    32+0+0(a7),d3       ; get parameters for our routine
   move.l    32+0+08(a7),a2      ; number of charac and pointer to string

   move.w    32+0+10(a7),-(a7)   ; Repush
   move.l    32+2+08(a7),-(a7)   ; the parameters
   move.w    32+6+04(a7),-(a7)   ; for the tios::DrawStrXY
   move.w    32+8+02(a7),-(a7)   ; routine


  Now, you should compile the program given and use db92 to study the way a7
changes...

  The method i used to pass these parameters may seem a little complex:
using the registers would have saved us the trouble to bother about the Stack.
In fact, this method has two great advantage: it is Reentrant and is VERY
easy to use when you need it in one of your programs as it does not destroy
any register. Note that the Stack is allways used by C compilers to
build subroutines: that is why the 92 rom is allmost allways written that
way...

 While the reeantrant property is not very usefull here, it is when you
write a multitasking OS and wish to share some code and/or data or when you
just want to write a TSR program or an interrupt handler. A Reentrant program
is a program which doesn' t modify its code and its data. As my aim is not to
do a lesson on system programming ( i would be unable to do so ), i suggest
you to get a good book on system programming ( french readers can look in the
bibliography in \readme.txt: "architecture des systemes d' exploitation" ).
 I would thus strongly suggest you to follow the precedent method for
subroutines which needn' t to be fast but just need to be easy to call and
easy to use...

*****************************************************************************
				 Lesson II
*****************************************************************************

