*****************************************************************************
                               Lesson III
*****************************************************************************

This lesson is dedicated to the programming of the screen and grayscale
graphics.

I ) B & W Screen
 I.1 ) A simple example
 I.2 ) Another simple example
 I.3 ) Sprites..

II ) the $600010 port of the screen MCU
 II.1 ) A small example
 II.2 ) A more interesting example

III ) Auto interrupts
 III.1 ) Interrupts: error treatment
 III.2 ) Auto Interrupts: parallelism
 III.3 ) About the use of auto interrupts

IV ) Grayscale graphics
 IV.1 ) introduction
 IV.2 ) Grayscale graphics


I ) B & W Screen

 As explained in \system.txt, section II.3, the screen is a simple B/W
screen. Each pixel can be represented by a bit . The screen is mapped line by
line, from the left to the right.
 I will first present a simple way to draw a horizontal line and a vertical
line.

 I.1 ) A simple example

 As explained in \system.txt, sections III.3 and III.4, the adress of the
screen memory varies depending on the rom version. Thus, it is necessary to
use the system variable "tios::main_lcd".

  move.l  #tios::main_lcd,a0   ; will move the screen base adress in A0

input:  nb (line number)
output: none       

variables used:
lcd_mem      :    screen base adress   : a0.l
nb           :    line number          : d0.w
temp         :    temporary counter    : d1.b

********************************
 include "flib.h"
 include "tios.h"
 xdef _main
 xdef _comment


_main:
  jsr     flib::clr_scr        ; delete the screen
  move.w  #5,d0                ; pushes input param: line nb 5
  move.l  #tios::main_lcd,a0   ; will move the screen base adress in A0
  mulu.w  #240/8,d0            ; gets the number of bytes from lcd_mem
  add.l   d0,a0                ; to the begening of the line nb 5

  move.b  #30,d1               ; initializes temporary counter
loop:
  move.b  #$FF,(a0)+           ; writes $FF=%11111111 to the screen mem 
  sub.b   #1,d1                ; 30 times: 8*30=240 bits: 240 pixels: 
  tst.b   d1                   ; one line ! 
  bne     loop

  rts

_comment:
  dc.b "essai",0

 end

*****************************

 I.2 ) Another simple example

 Here, we will draw a vertical line...

input:  nb (line number)
output: none       

variables used:
lcd_mem      :    screen base adress   : a0.l
nb           :    line number          : d0.w
temp         :    temporary variable   : d1.b
i            :    temporary counter    : d2.b

*****************************             
 include "tios.h"
 xdef _main
 xdef _comment


_main:

  move.w  #10,d0               ; gets input parameter: nb of column: 10
  move.l  #tios::main_lcd,a0   ; will move the screen base adress in A0
  divu.w  #8,d0                ; note: could be faster with a shift...
  move.w  d0,d1                ; gets the quotient of d0/8 in d1
  add.l   d1,a0                ; and add these bytes to the begening adress
  clr.w   d0                   ; gets the rest of d0/8
  swap.l  d0                   ; in d0: this is the bit number to set,
                               ; counting from the left
\if                            ;
  tst.b    d0                  ;
  bne      \else               ;
\then                          ; then, the bit number to set in d2, counting
  sub.l    #1,a0               ; from the right...
  move.w   d0,d2               ;
  bra      \end_if             ; see below for an explanation.
\else                          ;
  move.w   #8,d2               ;
  sub.w    d0,d2               ;
\end_if                        ;


  move.b  #128,d3              ; initializes i to 128: 128 pixels verticaly
loop:
  bset    d2,(a0)              ; sets a pixel
  add.l   #240/8,a0            ; adds nb of bytes to get adress of folowing
  sub.b   #1,d3                ; byte which contains the folowing pixel
  tst.b   d3
  bne     loop

  rts

_comment:
  dc.b "essai",0

 end
***********************

 The main difference between this program and the program in I.1 is the use of
the bset which requires us to calculate the adress of the byte which contains
the bit to set and the number of the bit to set within the byte.
 In I.1, using bset was not necessary as all the bits wich needed to be set
were at consecutive adresses in memory. All what was needed was to write ones.
It is easier and faster to write a byte in one piece than to write 8 bits..
 The main problem with the bset instruction here is that bits are numbered
from the right to the left within a byte ( from 0 to 7 )
---------------------------------------
|7|6|5|4|3|2|1|0|7|6|5|4|3|2|1|0|7| ...
---------------------------------------
 byte nb 1     |  byte nb 2    |  byte nb 3 ...

 and we know which bit to set counting from the left to the right within a
byte. A simple way to change between these two way to count is : 8-x=y.
Where x is the number in a counting way and y in another one...
However, this would not work if x=0 as y would then be 8 which would be
uneffective if using bset with indirect adressing.
( only the bset.b z,(ai) is accepted: bset.l z,(ai) does not exist... )
That is why a test is done to check that y will not be 8 . One should try
to follow exactly the code to understand what i just explained... It is rather
complex and it took me quite some time to figure out that my routines were
wrong when not taking into account this behaviour...

 I.3 ) Sprites

 Sprites are often used in games: i would strongly suggest you to look at
sprite.asm with fargo after having looked at the part about grayscale
graphics. Note that the example developped in \newbies.txt by db92 author in
the last section also good. Here are simply some general ideas about sprites.
 A sprite is an object. A Way to understand what a sprite is is to think to
characters. The characters which are displayed using the tios::DrawStrXY
routine are sprites. The ascii numbers represent the number of an entry in
an array which is located in rom. Each entry in this array is a serie of bits.
Here is, for example, one entry:
%0001100000111000011110000001100000011000000110000111111000000000
Which doesn' t look very nice but which, is much nicer under another form:
00011000
00111000
01111000
00011000
00011000
00011000
01111110
00000000

To display this "one" on peculiar place in the screen, you just need to copy
the entry number xx ( where xx is the ascii code of the character ) in the
video memory, making sure to jump one line after each byte copied...
 A good example of this is in "hexdump.asm" .
 Sprites are just characters... With a special look ! 

-----------------------------------------------------------------------------

II ) the $600010 port of the screen MCU

 It is possible to change the adress of the virtual screen. The $600010 port
is used to do so. It tells the screen MCU ( microcontroler ) where the screen
memory is. It can be usefull sometimes and is used for grayscale graphics.

:WO [600010]
    <76543210|76543210> = Address of LCD memory divided by 8

 Let' s assume that the virtual screen adress is a multiple of 8 .
 Then, move.w #$adress/8,($600010)
 On a rom 1.x where the screen system memory is located at $4440,
$888=$4440/8 is written to this port. If you are not sure of what you wrote to
this port and wish to exit your program cleanly, just:

move.w #$888,($600010)     ; will tell the video MCU to get the virtual screen
                           ; at adress $4440=$888*8

Please, note that one should use the tios::main_lcd variable to do so...


 II.1 ) A small example

Now, here is a small program which will create a new virtual screen so that
the screen upon exit is given back as it was upon entry.

************************
 include "tios.h"
 include "flib.h"
 xdef    _main
 xdef    _comment

_main:
   move.l   #$F00+8,-(a7)             ;  all this asks for a $F00 bytes
   jsr      tios::HeapAlloc           ;  long memory area which begins
   add.l    #4,a7                     ;  at an adress which can 
   move.w   d0,VU_handle              ;  be divided by 8
   tios::DEREF d0,a0                  ;  the adress to the memory area (VU) 
   move.l   a0,d0                     ;  is stored in VU_adress
   add.l    #7,d0                     ;  and VU_adress/8 is stored in
   asr.l    #3,d0                     ;  VU_adress_8
   move.w   d0,VU_adress_8            ;  VU_adress_8 is used to replace $888
   asl.l    #3,d0                     ;  at $600010
   move.l   d0,VU_adress              ;

   bsr      initialize                ;  the new Virtual Screen is enabled
   jsr      flib::idle_loop           ;  just wait some time: look: weird ! 
code:

   bsr      reset                     ;  gets back the original screen

   move     VU_handle,-(A7)           ;  gives back the memory requested 
   jsr      tios::HeapFree            ;  to tios...
   lea      2(A7),A7                  ;
   rts                                ; the end ! 

initialize:
   move.w   VU_adress_8,($600010)
   rts

reset:
   move.l   #tios::main_lcd,d0
   asr.l    #3,d0
   move.w   d0,($600010)
   rts


VU_handle:   dc.w 0
VU_adress:   dc.l 0  
VU_adress_8: dc.w 0

_comment:
 dc.b "essai",0

 end
***************************

This program illustrates how switching between different Virtual screens
is easy: it is now possible to replace any reference to #tios::lcd_main
by VU_adress in the "code" label...
This is not really usefull but is a good example..

 II.2 ) A more interesting example

 Here is a more usefull example: what often hapens in games where intense
action take place on the screen is a little flickering. You write to the
screen during the refreshing time. The screen is displayed when it has not
been entirely updated.. Not very good.
 The solution is to have 2 VU. Imagine:
 1) an image is displayed with screen VU_1
 2) the new image is done on VU_2 which is not displayed.
 3) VU_2 is displayed and VU_1 is used to build the third image...
 And so on...

 Here is a small piece of code which will do this:

************************
 include "tios.h"
 include "flib.h"
 xdef    _main
 xdef    _comment

_main:
   move.l   #$F00+8,-(a7)             ; 
   jsr      tios::HeapAlloc           ;
   add.l    #4,a7                     ;  
   move.w   d0,VU_handle              ; This is some simple code
   tios::DEREF d0,a0                  ; creating a VU 
   move.l   a0,d0                     ;  
   add.l    #7,d0                     ;  
   asr.l    #3,d0                     ;  
   move.w   d0,VU_adress_8            ;  
   asl.l    #3,d0                     ;  
   move.l   d0,VU_adress              ;

loop:
   bsr      buffer_system             ; calls a sub which exchanges
                                      ; the VU's

; there, the code of the main loop of your program
; all you need to do is to replace all "#tios::main_lcd" to "screen"

   bra      loop       ; will loop endlessly.. Should be some test on keys
end_loop:

   move.l   #tios::main_lcd,d0        ;
   asr.l    #3,d0                     ; gives back the original screen
   move.w   d0,($600010)              ;
   move     VU_handle,-(A7)           ; gives back the memory requested 
   jsr      tios::HeapFree            ; to tios...
   lea      2(A7),A7                  ;
   rts                                ; the end ! 



buffer_system:                      ;
   move.l   d0,-(a7)                ;  if you wrote to the original screen,
If:                                 ;  the routine will change the screen
   move.l   screen,d0               ;  pointer to the other VU so that
   cmp.l    #tios::main_lcd,d0      ;  you write to the other VU the 
   bne      else                    ;  next time the main loop is launched.
then:                               ;  then it displays the original screen.
   move.l   VU_adress,screen        ;  otherwise, screen is made to point to
   bsr      clr_screen              ;  the original screen while the VU 
   move.l   #tios::main_lcd,d0      ;  created is displayed...
   asr.l    #3,d0                   ;  rather simple.. This routine was not
   move.w   d0,($600010)            ;  optimized: it can be done much faster..
   bra      end_if                  ;  probably 5 or 10 times faster..
else:                               ;  I have succeeded in reducing this 
   move.l   #tios::main_lcd,screen  ;  routine to 9 consecutive instructions
   bsr      clr_screen              ;  in a program of my own. see lesson_4
   move.w   VU_adress_8,$600010     ;  for a small scan of the ways to
end_if:                             ;  optimization.
   move.l   (a7)+,d0                ;
   rts                              ;

clr_screen:                        ; 
   movem.l  d0/a0,-(a7)            ; This subroutine will erase $F00 bytes
   move.w   #$F00/4-1,d0           ; from the adress specified by "screen"
   move.l   screen,a0              ;
clr_loop:                          ;
   move.l   #0,(a0)+               ;
   dbra     d0,clr_loop            ;
   movem.l  (a7)+,d0/a0            ;
   rts                             ;


VU_handle:   dc.w 0
VU_adress:   dc.l 0  
VU_adress_8: dc.w 0
screen:      dc.l 0

_comment:
 dc.b "essai",0

 end
**************************

 Using this code will remove all flickering from some programs...

-----------------------------------------------------------------------------

III ) Auto interrupts

 Interrupts are widely used for grayscale graphics. Here is the occasion
to learn a little on them...

 Interrupts is a way computer scientists found to :
 1) treat errors
 2) simulate a "paralelism"

 III.1 ) Interrupts: error treatment

The conceptors wanted that every time an error is generated by the processor
 ( for example, when an illegal opcode is fetched or when a bus or adress error
is generated ), the best solution is found to correct this error.
The processor must recover as much as possible from the error, while allowing
the programmer or the hardware conceptor to find where the error comes from.
These two conditions led them to seek a process which:
 1) has a different behaviour with each different kind of error.
 2) has a behaviour which is easy to change.

 To do this, the 68000 conceptors chose to use an interrupt vector table.
To each kind of error, is associated a number and to each number is associated
an entry in this table. Each entry in this table is a longword adress.
These adresses will point to the routines in charge of the different errors.
That way, whenever an error occurs, the processor launches the routine the
error vector points to. It is rather easy to change the routine: just change
the vector ! The processor will behave as if nothing had ever happened.


 III.2 ) Auto Interrupts: parallelism

 Among interrupts, there exist a special kind: instead of beeing generated by
random events ( errors may happen anytime ), these special interrupts are
regularly generated. By an external timer which will trigger the interrupt
every x clock cycles or by an internal interrupt...
 Thus, executing these auto interrupt routine will achieve a certain
parallelism ( for the user ). If an application is hooked on an auto interrupt
it will seem to the user that this application is executed in parallel to his
own work.. This is what is done with printer spoolers for example..

 Grayscale library just hook on an auto interrupt: then, the routine in
charge of switching between different virtual screens ( planes ) is executed
every time the interrupt is launched. ( see IV )

 III.3 ) About the use of auto interrupts

 As has allready been stated, the process ( execution of autointerrupts ) must
be transparent to the user.
 To do so, it is necessary to:
 1) save all registers before begening to execute the interrupt and restore
    them before leaving.
 2) allow the autointerrupt which allready existed to execute itself.
    ( the os generally uses these interrupts so kidnaping one of these will
    probably end in many routines of the os to not work anymore. )

Saving all registers is not very difficult: the use of the "movem" instruction
is allready well known..
What is a litle more difficult is 2). The simplest way to work around this is
to use RTS...
 Some assembly programmers who don' t really care about the maintenance of
their code use rts a little everywhere.
Executing an rts opcode does not mean that a jsr or bsr was executed before.
It just means that the longword which is in the stack will be used to update
the PC ( program counter ) . If a jsr was executed before, this will simply
return to the calling routine but is no jsr was executed before, then the rts
will just do the same as a jsr... except that no return information is stored
on the stack.
Here is a piece of code which will do this:

******************************
 include "flib.h"
 xdef    _main
 xdef    _comment

_main:
  bsr    install                   ; install the new interrupt
  jsr    flib::idle_loop           
  bsr    uninstall                 ; uninstall the new interrupt
  rts

int_1:                             ;
  ; your code ..                   ; The new interrupt: it will also
  ;                                ; execute the old interrupt after her
  move.l   old_int_1,-(a7)         ;
  rts                              ;


auto_vect_1     equ  $64

install:                             ;     
  movem.l  d0-d7/a0-a6,-(a7)         ;  saves all regs
  move.w   #$0700,d0                 ;  puts the highest interrupt mask
  trap     #1                        ;  in fact, disables interrupts
  move.l   (auto_vect_1),old_int_1   ;  saves the old interrupt
  bclr.b   #2,$600001                ;  disables write protection 
  move.l   #int_1,(auto_vect_1)      ;  installs new interrupt
  bset.b   #2,$600001                ;  restores write protection
  trap     #1                        ;  restore interrupts..
  movem.l  (a7)+,d0-d7/a0-a6         ;  restore all regs
  rts
  
uninstall:                                ;
  movem.l  d0-d7/a0-a6,-(a7)              ;
  move.w   #$0700,d0                      ;
  trap     #1                             ;  just like install...
  bclr.b   #2,$600001                     ;
  move.l   old_int_1(pc),(auto_vect_1)    ;
  bset.b   #2,$600001                     ;
  trap     #1                             ;
  movem.l  (a7)+,d0-d7/a0-a6              ;
  rts

old_int_1:
 dc.l 0

_comment:
 dc.b "essai",0

 end
******************************

-----------------------------------------------------------------------------

IV ) Grayscale graphics

 VI.1 ) introduction

 As the 92 has no grayscale screen, it is theorically impossible to generate
some grayscale graphic...
A way to do so nonetheless exists. The idea is to have different images which
are switched very quickly.
A dark pixel will be on in all the images.
A gray pixel will be on in 2 or 3 images.
A white pixel will not be on in any image.
for example:

11111111         11111111         11111111
11111111         11111111         11111111
11111111         11111111         00000000
11111111         11111111         00000000
00000000         00000000         00000000
00000000         00000000         00000000

image 1          image 2          image 3

If you switch between these three images very quickly, you will see some
grayscale lines... The upper line will be dark, the line in the middle
will be gray and the lowest line will be white.
 The main problem with this method is the switching:
  1) If you write a loop which display them one at a time, you cannot do
     anything else than displaying the thing.. Thus, you need a way to switch
     between the different planes so that you can do something else during
     the switching.
  2) If you have a way to switch between planes, you cannot have 3 memory
     areas with the planes and one for the screen, copying one image at a time
     in the screen memory. It is too time consuming

The solution to the second problem is rather simple.
 As allready explained, it is possible to change the adress of the virtual
screen. The $600010 port is used to do so. It tells the screen MCU
( microcontroler ) where the screen memory is. ( see II ) 
Then, all you need is the 3 planes. The only thing to do is to change
regularly the adress to the screen memory.
The solution to the second problem is more difficult... It uses the
interrupts. ( see III )

 IV.2 ) Grayscale graphics

 Now that the basic knowledge about grayscale graphics was introduced to you,
i would suggest you to look at the source of the library "gray4lib.asm" .
 Note that i more or less nearly copied the gray4lib library in the
precedent example...

*******************************
*      on subroutine          *
*******************************
on:
	movem.l	d0-d7/a0-a6,-(sp)

        move.l  #$F00*1+8,-(sp)    ; ask for the mem for a plane
	jsr	tios::HeapAlloc
	add.l	#4,sp
        tst.w   d0                 ; check if the allocation suceeded
	beq	graylib_fail
        move.w  d0,handle          ; save the handle number

        tios::DEREF d0,a6          
        move.l  a6,d0              
	add.l	#7,d0
	lsr.l	#3,d0
        move.w  d0,table+2*0       ; get the pointer/8 to the plane
        lsl.l   #3,d0              
        move.l  d0,plane0          ; get the pointer to the plane

        move.l  #LCD_MEM,d0        ; 
        move.l  d0,plane1          ; initialize other planes
        lsr.l   #3,d0              ;
        move.w  d0,table+2*1       ;
        move.w  d0,table+2*2       ;

        move.w  #$0700,d0          ; 
        trap    #1                 ;
        move.l  $64,old_int_1      ;  install new int_1
        bclr.b  #2,$600001         ;
        move.l  #int_1,$64         ;
        bset.b  #2,$600001         ;
        trap    #1                 ;

	movem.l	(sp)+,d0-d7/a0-a6
	st.b	d0
	rts
***********************************

 At the end of this initialization process, the array "table" contains:
as a first entry, a pointer/8 to a plane, second, pointer/8 to another plane
and third, pointer/8 to the same last plane.

***********************************
*          interrupt 1            *
***********************************

int_1:
        move.w  #$2700,sr            ; does not allow any interruption
                                     ; during this process: critical process. 
        add.w   #1,vbl_phase         ; changes the plane every 3 times the  
        and.w   #3,vbl_phase         ; interrupt is called
        bne     int_1_skip           ; 

        movem.l d0/a0,-(sp)          ; change the plane 

        move.w  phase(pc),d0         ; display the plane whose pointer/8
        lea     table(pc),a0         ; is in table[phase]
        move.w  0(a0,d0.w),($600010) ;

        add.w   #2,d0                ;
        cmp.w   #2*3,d0              ; make sure that
        bne     no_wrap              ; the phase ( used to know which plane
        clr.w   d0                   ; was last displayed ) is increased
no_wrap:                             ; for the next plane change
        move.w  d0,phase             ;
	movem.l	(sp)+,d0/a0

int_1_skip:
	move.l	old_int_1,-(sp)
	rts
**********************************

Some will notice that this method uses two planes and simulates 3 planes as
the second entry in table is repeated in the third...

Lastly, the off subroutine will bring everything back...

 These routines will handle all the display part of grayscale graphics. But
one thing is left. Their use !
 There are two variables: plane0 and plane1

 move.l  (plane0),a0 will move the pointer to one of the planes in a0.

 All you need to do, to use the graylib library, is to initialize the library
by calling the on soubroutine, then to get plane0 and plane1.
Now, if you have included in your program the binaries of your picture, all
you need to do is to copy them in the planes. If you used a compression
library, then decompress them before.
 Lastly, if you wish, for example, just to plot some grayscale pixels, you can
simply plot your pixels twice if they are black ( in the two planes ) . If the
pixels are gray, plot them only once in one plane... Rather simple if you
followed me there .
 
*****************************************************************************
*                              Lesson III                                   *
*****************************************************************************
