*****************************************************************************
                             Lesson I                                       
*****************************************************************************

I ) Sine calculus

II ) Optimization



I ) Sine calculus

 Here is the 1st lesson: we' ll try to build a subroutine which calculates
a sinus. To do so, we will use the following formulla which is valid
provided the angle is in radian: 180ø = Pi radian.
sin(x)=x-x^3/(3!)+x^5/(5!)-....+(-1)^r * x^(2*r+1) / (2*r+1)!
The more terms, the highest the precision.
Note: n!=n*(n-1)*(n-2)*...*3*2*1, n is an integer

 We know that the values of the sine function are between -1 and +1. Thus,
we will need some numbers after the point: The folowing function will allow us
to reach 10^-3 precision...
For example, the float 13.5003 is converted into an integer by the function:
trunc( 13.5003 * 1000 ) =13500

Let's do it that way:
 We want: trunc( 1000*sin(x))= trunc( 1000*x -1000*x^3/3! +...+1000*(-1)^r.. )
here is an algorythm which will do this for us: it will calculate terms till
they are lower than 10^-3.

this program will need one input: "ang_input"
and will answer one output: "output"

"range" is the "r" used in the formula

Prgm:
  3-> Power
  2-> range
  ang_input->output             ; the first term to which we will add others
  Do:
    function term_calculus
    function test_precision
    if range even
      then output + temp_1 -> output
      else output - temp_1 -> output
    end_if
    power + 2 -> power
    range + 1 -> range
    goto Do
  end_do:
end_prgm:

function: "term_calculus"   ; input: ang_input, power
                            ; output: temp_1

  (ang_input)^power -> temp_1
  power! -> temp_2
  temp_1/temp_2 -> temp_1

end_function:


function: "test_precision" ; input: temp_1
                           ; output: none

  if temp_1 <= 1 then goto end_prgm

end_function

Now it is time for us to do some ASM: we have some sort of pseudo code...
We will first write the table descriptor:

** Table Descriptor **

ang_input:  longword, D0
output:     longword, D1
temp_1:     longword, D2
temp_2:     longword, D3
power:      byte,     D4
range:      byte,     D5
temp_3:     byte,     D6

temp_3 is a temporary var used in the program when we will translate that
pseudo code in ASM: it is used as a counter in the loops for th calculation
of the power and the factoriel.

now, let' s look at these functions: we will implement them as subroutines.
They will be called using this syntax: "bsr  term_calculus"
and we will exit from them subroutines using the "rts" command.

Here is how i would code the calculus subroutine:

; here is how to calculate the power

  move.b   D4,D6
  sub.b    #2,D6
  move.w   D0,D2
power_loop:
  mulu     D0,D2
  divu     #1000,D2
  ext.l    D2                      ; to get rid of the rest of the division
  dbra.b   D6,end_power_loop
end_power_loop

; here is how to calculate the factoriel

  move.b   D4,D6
  sub.b    #1,D6
  ext.w    D6
  move.b   D4,D3
  ext.w    D3
factoriel_loop:
  mulu     D6,D3
  sub.w    #1,D6
  tst.w    D6
  bne      factoriel_loop


 Now that both of these loop have been written, we' ll try to put them in one
but before, i suggest you taking a pen and trying to follow what these loops
do for power 3.
Note: in the power calculus, D6 is used as a temporary counter: It is
initialized to "power-2" because dbra will debranch only when d6.b = -1
In the factoriel calculus, D6 is not only a temporary counter: we use it to
multiply. Thus, it is the exact value of this counter which interest us, not
only the number of times the loop will be runned. If we had used dbra, the
last multiplication would have been 0*D3-D3=0... Completely useless....
That' s why we use that good old "sub/tst/bne".

 You may wonder about the use of "ext".
The explanation is simple: we are moving in D6 and D3 a byte and we multiply
D6 and D3...  But mulu use words: thus, we need to clear the upper byte of D6
and D3 so that the multiplication works well. A simple way to do this is
"ext". ( see \newbies.txt for details, arithmetics section ) the upper byte
will be cleared if D6 and D3 are lower than 64=2^7. We will have to think to
this limitation when writing the whole program: we need to be sure that the
power unknown is lower than 64...

now ,  the whole term_calculus routine:

term_calculus:
  move.b   D4,D6
  sub.b    #1,D6
  ext.w    D6
  move.b   D4,D3
  ext.w    D3
  move.w   D0,D2
loop:
  mulu     D0,D2
  divu     #1000,D2    
  ext.l    D2
  mulu     D6,D3       
  sub.w    #1,D6
  tst.w    D6
  bne      loop

  ext.l    D2          ; because divu needs the 2nd param to be a longword
  divu     D3,D2
  ext.l    D2          
  rts


Testing the precision should be quite easy:

test_precision:
  cmp.l   #1,D2
  bls     end_do

 One thing is not clear yet: how will we test if "range" is odd or even ?
If you try to write a few numbers in binary, you will see that what
caracterizes the parity of a number is its first bit: if set, the number is
even ( 3,5,7,9..). If not, the number is odd ( 2,4,6,8...)

Thus, to do this, we will use the folowing code:
if_1:
   btst   #0,D5
   beq    else_1
then_1:
   sub.l  D2,D1
   bra    end_if_1
else_1:
   add.l  D2,D1
end_if_1:

the whole program:

-----------------------------------------------------------------------------
 include "hexlib.h"
 include  symb.inc
 xdef     _main
 xdef     _comment

       dbl_begin
        dbl_add _main
        dbl_add sine
        dbl_add if_1
        dbl_add end_if_1
        dbl_add term_calculus
        dbl_add loop
        adl_add disp
       dbl_end

       dbv_begin
        dbv_add _comment,dbv_byte
       dbv_end

        db92_symbols

_main:

   move.l   #500,D0             ; 0.5->ang_input
   bsr      sine
   bsr      disp
   rts

sine:
   movem.l  D2-D6,-(A7)          ; saving to be destroyed regs
   move.b   #3,D4                ; initializing all variables
   move.b   #2,D5
   move.l   D0,D1

do:
   bsr      term_calculus
test_precision:
   cmp.l    #1,D2
   bls      end_do
end_test_precision:
if_1:                             ;
   btst     #0,D5                 ;
   beq      else_1                ;
then_1:                           ;  to test the parity of "range"
   add.l    D2,D1                 ;
   bra      end_if_1              ;
else_1:                           ;
   sub.l    D2,D1                 ;
end_if_1:                         ;
   add.b    #2,D4
   add.b    #1,D5
   bra      do
end_do:
   movem.l  (A7)+,D2-D6
   rts                            ; end of the sine subroutine

term_calculus:
   move.b   D4,D6
   sub.b    #1,D6
   ext.w    D6
   move.b   D4,D3
   ext.w    D3
   move.w   D0,D2
loop:
   mulu     D0,D2
   divu     #1000,D2    
   ext.l    D2
   mulu     D6,D3       
   sub.w    #1,D6
   tst.w    D6
   bne      loop

   ext.l    D2          ; because divu needs the 2nd param to be a longword
   divu     D3,D2
   ext.l    D2
   rts

disp:
   move.l   D1,D0
   clr.l    D1
   clr.l    D2
   move.l   #8-1,D4
   jsr      hexlib::put_hex
   rts

_comment:
   dc.b     "Sine, Lesson I",0

 end
-----------------------------------------------------------------------------

 If you have tested this program ( ie: compiled and launched ), then you
have had $01E0  on the screen... this is the hex value of sine(0.5) with
10^-3 precision.

II ) Optimization

 However, if you need to run this routine often, you will see that this
program is quite slow. It can be greatly improved.
 By the use of shifts on the first hand.

 Now, to get back on our problem, how could we use these intructions to
replace some mulu or some divu ?
well: first, for example, if we want ( still ) a 10^-3 precision, we could
mutiply our result by the 2 power the nearest to 1000 ( 1024=2^10 )
Note: on computers, a kb ( kilobyte ) is in fact 1024 bytes.
the only thing changed in our program would be the term_calculus routine.
here is the new one:

term_calculus:
  move.b   D4,D6
  sub.b    #1,D6
  ext.w    D6
  move.b   D4,D3
  ext.w    D3
  move.w   D0,D2
loop:
  mulu     D0,D2
  lsr.l    #8,D2               ; we just replaced the divu and ext by 
  lsr.l    #2,D2               ; these 2 lines
  mulu     D6,D3       
  sub.w    #1,D6
  tst.w    D6
  bne      loop

  ext.l    D2          ; because divu needs the 2nd param to be a longword
  divu     D3,D2
  ext.l    D2
  rts

 now, i believe you may try this program: you will still get the same result
but a little faster... There are a few other ways to improve the speed
of this program but it would be truly time consuming ( for you ) with little
improvement.
 To train, you may try to add the ability to choose the precision ( in fact
adding another input param: the number of bits to shift )
 Then it would be great if one of the readers ( a true beginner ) wrote a
real math library: cosine, sine, tangent, square root, logarythm, exponential

*****************************************************************************
                                  Lesson I
*****************************************************************************

