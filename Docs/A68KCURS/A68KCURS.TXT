
===============================================================================
The programming of the TI-92 with Fargo II
English
by MXM Projects
http://members.vol.at/schoenach
===============================================================================

Currently this script is only a previous version, because many people need
this. We are writing and writing for you, so please understand, if we are
slow ( we are writing some FARGO and DOS programms ). We would be faster if
some people would help us ( Look at our homepage ).


Introduction
------------

The TI-92 has got a Motorola 68000 integrated, which is a very fast processor,
because the right usage of them can generate games in 3D and that on the TI-92.
This document should be an introducing into the world of the TI-92 programming,
which can create a lot of fun and the other side of that.


Topics
------

	I.	Description of some shortcuts
	II.	Compiling of FARGO programms
	III.	The structure of assemblerfiles
	IV.	Introduction into the world of the processor
	V.	The instructions of the processor
	VI.	The Stack
	VII.	I/O Ports
	VIII.	Traps / Autoints
	IX.	Two little programms
	X.	A program with a subroutine
	XI.	Using of Libraries
	XII.	Discussing about libraries
	XIII.	Some internals of the TI92 / technical informations
Appendix	About this documentation

===============================================================================
I.	Description of some shortcuts
===============================================================================

*** will be added soon ***


===============================================================================
II.	Compiling of FARGO programms
===============================================================================

Before we begin to program, I will show you, how to compile FARGO programms.
For example, we are going to compile a demoprogram from FARGO, SPRITE.ASM.
First you have to change into the directory PRGM. There you have to do this:

	C:\FARGO\PRGM>fargo sprite

Don't type the ".ASM", the batchfile FARGO.BAT automatically adds the ".ASM".
After compiling [A68k] starts FLINKER, which generate the header for the FARGO
on the TI-92. After the compiling you have to send the file on the TI-92. Type
this:

	C:\FARGO\PRGM>flink -s sprite.92p

This will send the file on the TI-92. For better compiling of FARGO programms
I recommend you to edit "FARGO.BAT". Add after the FLINKER ... directive this:

	flink -s %1.92p

This is in my opinion much finer.

[ *** Wait for the MXM Linker *** ]

===============================================================================
III.	The structure of the assemblerfiles
===============================================================================

I'll describe you the principial structure of an assemblerfile. For this look
at this example:

	include "flib.h"
	include "tios.h"
	xdef _main
	xdef _comment

_main:
; Comment, ignored by the compiler. Useful for descriptions.

	rts

_comment	dc.b "SHELLTEXT",0
	END

This is the principial structure of an assemblerfile. The first two operands
are INCLUDE. This includes the FLIB.H, which is a textfile. In this textfile
are descriptions of some procedures that are exported by the library. Then
follows the XDEF. This defines the entrypoint of the program, there starts
the program. After the XDEF can only stand this names:

	_main		Entrypoint of a program
	_library	Entrypoint of a library
	_comment	Text, which is shown in the shell
	_tibasic	Compiled TI-BASIC code. Useful for own functions.
	name@xxxx	Entrypoint of a libraryprogram/function.

After this comes the entrypoint of the program. It starts with the RTS operand.
In all programs you have to add RTS to return to the caller (shell or TIOS).
If you will not add this your TI-92 would probably crash. Then comes the
_comment. It has to be the last variable in the program. This is a
zeroterminated string. This string is shown in the SHELL. The TI-92 needs
generally the ZERO at the end, because then it knows that the string is ended.
But their is one great question: What is this "dc.b"? This dc.b is a
typdefinition. The first two characters describes, if this are all chars or if
this is space, which have to be allocated. After this comes a point. Then comes
the type of variable. There are only 3 types:

	Name of the type	Bits		Numbers

	Byte			8		0 to 255, 	-128 to 127
	Word			16		0 to 65535, 	-32768 to 32767
	Long			32		0 to 2^32,	-2^31 to 2^31-1

A string can only be a byte!
Here some examples:

helloworld	dc.b "Hello world!",0

lives		dc.b 3

points		dc.w 0

pointer		dc.l 0

livearray	dc.b 3,3,3
This is a list with a dimension of 3.

allocatedspace	ds.b 40
This is a list too, but with a dimension of 40 and every item has got 0.


The last operand is the END. This is for the assembler, because it needs to
know, where the source ends.

===============================================================================
IV.	Introducing into the world of the processor
===============================================================================

First we need some fundamental knowledge.


1. Numerical systems
--------------------

We know the numerical system with the base 10, but there are more numerical
systems. There are the binary (base 2) and the hexadecimal (base 16) system.
In the binary system are 0 and 1.
In the hexadecimal system are: 0,1,2,3,4,5,6,7,8,9,a,b,c,d,e,f

This systems are useful sometimes, but what is with the conversion from the
hexadecimal or binary into our decimal system?
An example:

	10010 [Binary] = ? [Decimal]

Count the position of the first 1 from right and subtract one. Now intensify
the base (2) with this number. Add the results and you have got the decimalic
number.

	1 * 2 ^ ( 5 - 1 ) + 1 * 2 ^ ( 2 - 1 ) = 18

The decimalic number is 18.

But how is the conversion from the decimal into another system?
An example:

	100 [Decimal] = ? [Hexadecimal]

The remainder of the decimal number divided by the base will be written. Then
subtract the remainder from the decimal number, divided that by the base and
begin from new on until the decimal is zero!

	100	:	16	= 4
	6	:	16	= 6
	0	:	16	finished

Then read the number from the bottom to the top. The result is in this case
64.

How do I see, what system it is?
Numerical systems have got an identificer. This are $, % and nothing.

Nothing		Decimal
$		Hexadecimal
%		Binary

Example:

	10000		stands for 10000 	Decimal
	$4f5		stands for 4F5		Hexadecimal
	%10011		stands for 10011	Binary


2.	Stack
-------------

You can compare a stack with a stack of letters. The first letter which you put
on the stack is the first you will get back. This is the princip of a computer-
stack. The first number you put in is the first you will get out (LIFO,
"Last in first out" princip).

3.	References to the memory -> pointers
--------------------------------------------

The processor works always with the memory, but how does it know, where a
variable or similar things are. The answer is a pointer. This pointers do, what
their name says. They point to an address in a chip. Pointers are 32 bits long.
This is all what you have to know about pointers, currently.


4.	Macros
--------------

Macros are subroutines, but the compiler insert the code into your source,
while it is compiling. This produces more code, but at some places it is
better, instead of subroutines.


5.	Subroutines
-------------------

Subroutines are only once in the code. This is useful, for creating small
programms. A good example is the reading of the keyboard.


6.	Interrupts
------------------

Interrupts are similar to subroutines, but they are mostly called by the hard-
ware. The processor executes then a program and returns then to the currently
program. Your program doesn't recognize that.

7.	The registers of the processor
--------------------------------------

A lot of processor have got registers inside. This registers are the same like
variables, but a lot faster, because the processor doesn't have to search that
in the memory. This is useful for very fast math operations. The
Motorola 68000 has got the following registers:

	D0 to D7	For mathematical operations
	A0 to A6	This registers are used for the memory (A = Address).
			You can use this as a puffer.
	A7		Pointer to the stack. Don't change this
	SP		The same like A7
	SR		This register is only availabel in interrupts. This is
			for, e.g. shutdown interrupts.
	PC		This is a pointer to the current codeinstruction. The
			processor reads there some bytes (till it is an
			operand) and then it increments the register. You
			can't change that.


===============================================================================
V.	The instructions of the processor
===============================================================================

The processor needs instructions to know, what it has to do (logical, I know).
This instructions will be listed here. The most of the instructions need a
typdefinition to know, if it is a word or a byte and so on. This is listed in
<  >. Variabels are in {  }.

The shortcuts are used to show, what is aligned.
Shortcuts:
	N	stands for Number
	A	memoryaddress
	V	variable
	L	Label
	P	Programname
	I	Libraryname
	R	Register

	Instruction [Operand, Operand]
	Explanation
	Example
	Explanation of the Example
	Equals in C/C++

лл   Now, there is a big difference between number and memoryaddress. To signal
лл   that this is a number there is a "#" and then comes the number. Isn't the
лл   "#" then it is an address

Mathematical instructions
-------------------------

	move.<type> RNAV,RAV
	Writes the first operand into the second.
	move.w #100,points
	Writes 100 into the variable {points}
	points = 100;

	clr.<type> RAV
	Writes ZERO into the operand
	clr.w lives
	Writes ZERO into {lives}
	lives = 0;

	st.<type> RAV
	Writes -1 into the operand
	st.w flag
	Writes -1 into {flag}
	flag = -1;

	sf.<type> RAV
	Write 1 into the operand
	sf.w flag
	Writes 1 into {flag}.
	flag = 1;

	add.<type> RNAV,RAV
	Adds the first operand to the second and saves the result in the
	second.
	add.w #1,energy
	Adds 1 to {energy} and saves the result in {energy}
	energy = energy + 1;

	sub.<type> RNAV,RAV
	Subtracts the first from the second operand and saves the result in the
	second.
	sub.w #1,energy
	Subtracts 1 from {energy} and saves the result in {energy}
	energy = energy - 1;

	mulu.<type> RNAV,RAV
	Multiplicates the first with the second and saves it in the second, but
	this operation is unsigned. There is no sign in the numbers! (No + -).
	mulu.w #10,d0
	Multiplicates d0 with 10 and saves in d0
	d0 = d0 * 10;

	muls.<type> RNAV,RAV
	Multiplication, SIGN!
	muls.w #-5,d0
	Multiplicates d0 with -5 and saves in d0
	d0 = d0 * (-5);

	divu.<type> RNAV,RAV
	Division, UNSIGNED!
	divu.w #5,d0
	D0 will be divided with 5 and saved in d0
	d0 = d0 / 5;

	divs.<type> RNAV,RAV
	Division, SIGNED!
	divs.w #-5,d0
	D0 will be divided with -5 and saved in d0
	d0 = d0 / (-5);

	lsr.<type> NR,RAV
	This shifts operand 2 to the right side. This is a division with
	2^(NR).
	lsr.w #3,d0
	This will shift d0 3 bits to the right side ( = Division by 8 ).
	d0 = d0 >> 3;

	lsl.<type> NR,RAV
	This shifts operand 2 to the left side. This is a multiplication
	with 2^(NR).
	lsl.w #3,d3
	This will shift d3 3 bits to the left side ( = Multiplication by 8 ).
	d0 = d0 >> 3;

	ror.<type> NR,RAV
	This rols operand 2 to the right side.
	D3.B contain %01101001
	ror.b #4,d3
	D3 will be rolled 4 bits to the right side ( D3 now contains 
	%10010110 ).
	// ??

	rol.<type> NR,RAV
	This rols operand 2 to the left side.
	D6.B containn %11001011
	rol.b #3,d6
	D6 will be rolled 3 bits to the left side ( D6 now contains
	%01011110 ).
	// ??


Logical functions
-----------------

Logical functions are combinations of two bitnumbers.

	Number1		Number2		Result
AND	0		0		0
	0		1		0
	1		0		0
	1		1		1

OR	0		0		0
	0		1		1
	1		0		1
	1		1		1

XOR	0		0		1
	0		1		1
	1		0		0
	1		1		0

This are the importantes functions.

	and.<type> N,RAV
	This is the logical "and" function.
	and.w #$F,d0
	Now you have got the lower 4 Bits in {D0.W}.
	d0 = d0 && 0x10;

	or.<type> N,RAV
	This is the logical "or" function.
	or.w #$10,d0
	This will set the Bit 3 (2^(4-1)) in d0
	d0 = d0 || 0x10;

	eor.<type> N,RAV
	This is the logical "xor" function.
	eori.w #$10,d0
	This will toggle the Bit 3 in d0.
	d0 = d0 ?? 0x10;

	bset.<type> NR,RAV
	This sets the bit number {NR} in {AV}
	bset.b #4,d0
	Sets bit number four in d0.
	d0 = d0 || 0x10;

	bclr.<type> NR,RAV
	This clears the bit number {NR} in {AV}
	bclr.b #4,d3
	Clears bit number four in d0.
	d0 = d0 || (0xFF-0x10);

	bchg.<type> NR,AV
	This changes the bit number {NR} in {AV}
	bchg.w #7,d5
	Toggles bit number 7 in d5.

Comparing and branchs
---------------------

	cmp.<type> RNAV,RAV
	Compares operand one with operand two. After comparing, there are the
	branchs. Branchs are jumps, only if a condition is true. This branchs
	are a "b" and the condition and then a label, where to jump if this
	condition is true.

	Conditions:
		eq	==
		ne	!=
		hi	>
		cc	>=
		le	<
		cs	<=

	Example:
	D0 contain 10.

	cmp.w #10,d0
	beq _d0_is_ten
; Unreachable, if d0 == 10
;	...
_d0_is_ten:
; Code, if d0 == 10
; 	...

	In this code, the program jumps to the label "_d0_is_ten".
	C/C++ code:
	if (d0 == 10) {
	// ...
	} else {
	// ...
	}

	tst.<type> RAV
	This is nothing else than cmp.<type> #0,RAV. This is useful for TRUE or
	FALSE condition.
	tst.w d0
	beq _d0_is_zero
	Here will be jumped, when d0 is zero.
	if (d0 == 0) { ... }

	bra L
	This is an unconditional jump. If the processor is here, then it will
	jump.
	bra _wait_for_a_key
	This jumps to the label "_wait_for_a_key"
	goto _wait_for_a_key;

	rts
	This is the return to the previous caller.
	rts
	Return to the caller.
	return 0;

	rte
	This is the return from an interrupt.
	rte
	Returns to the previous instruction.
	// End of an interrupt, this is various.

	bsr P
	This will jump into a subroutine, which is terminated by the RTS.
	bsr _wait_for_a_key
	move.w #10,d0
	Jumps to the subroutine _wait_for_a_key. If it is finished the
	processor is at the "move" directive.
	_wait_for_a_key();
	d0 = 10;

	jsr I
	This will jump into a librarysubroutine. Libraries, which are included
	by the "INCLUDE" directive exports functions and procedures. For
	example FLIB exports idle_loop, which waits for a key. You have to call
	that so:
	jsr flib::idle_loop
	The "::" is to identific the procedure/function which is called.
	// Calling of a DLL


	dbf.<type> R,L
	This is a tester and jumper inside. You can use this to create a loop.
	If the Register isn't $FF / $FFFF / $FFFFFFFF then the program jumps
	to the label L. If the register isn't $FF then it will be decremented
	by 1.
	dbf.w d0,_classical_loop
	Jumps to _classical_loop till d0 = -1
	do {
	d0--;
	} while (d0 != -1);

	dbra.<type> R,L
	Is the same like DBF, I think.

Operations with pointers
------------------------

Befor I explain the operations with pointers you have to know, how to write
a reference to the memory. If a number or register (Ax) is in rackets ( ),
then it is a reference to the memory. Examples

	move.b (a0),d0
	Gets the byte from the memoryaddress, which is pointed by A0 to D0.

	move.b ($015234),d0
	Gets the byte from the memoryaddress $015234 into D0.

	If you use registers, then you could increment / decrement the register
	automatically, that mean the register points to the next item. This
	will be done with a + behind and a - before the rackets.

	Operandtype		Increment	Decrement
	Byte			1		-1
	Word			2		-2
	Long			4		-4

	move.b (a0)+,d0
	Gets the byte from the memoryaddress A0 into D0. After this A0 will
	be incremented by #1.

	move.b d0,-(a2)
	Writes d0 into the memoryaddress A2. Then A2 will be decremented by #2.

----------
| Notice |
----------

	If you use a word or a longint, then the address have to be on a word
	boundary, that mean the number must not be an odd number.
	If A0 contain 100123 and you use a word or long, then your TI-92 will
	crash with an "Address Error"!
	If you use a byte, then this won't matter, so if you have got an 
	"Address Error", then this will be a good station of debugging.

	If you write a number in front of these rackets, then the register will
	be temporarly incremented / decremented by the number.

	move.b d0,3(a0)
	Writes d0 into the memoryaddress (A0 + 3).

	move.b d4,-6(a4)
	Writes d4 into the memoryaddress (A4 - 6).

	move.l RNAV,<Register Ax>
	This will write the first operand into the register Ax.
	move.l #LCD_MEM,a0
	This will write the address of the TI-92 screenaddress into A0. Now
	A0 points to the pixels in the left top corner. This # is necessary,
	because the FARGO Kernel will modify this LCD_MEM to a number!
	A0 = LCD_MEM;

	lea V(PC),<Register Ax>
	This will write the address of the variable into the register Ax. The
	(PC) is to locate the right destination of the variable, because the
	program is moved in the memory, so the addresses are various. Remember
	that PC is a pointer to the code. The assembler will then write the
	offset in front of the PC.

	pea V(PC)
	This is same like lea V(PC),-(a7). This will write the pointer of the
	variable in the stack. The stack will be then decremented. More later!

	Special things:

	lea 10(a3),a3
	This is an addition with 10. A3 = A3 + 10;

	lea 0(a0,d0.w),a0
	This will write A0 + D0 into A0, useful for point to a special entry.

This are a lot of very useful instructions.

===============================================================================
VI.	The stack
===============================================================================

The stack is a communicationcenter between your program and all ROM functions
and some FARGO functions. When you call a function then you have first to put
the numbers etc. on the stack, then call the procedure and then you have to
CORRECT the stack.
Example:

	move.w #4,-(a7)		; Write 4 in the stack
	pea hello(PC)		; Write the address of hello in the stack
	move.w #1,-(a7)		; Write 1 in the stack
	move.w #1,-(a7)		; Write 1 in the stack
	jsr tios::DrawStrXY	; Call the text output function from the ROM
	lea 10(a7),a7		; Correction of the stack.

The correction is the addition of all typesizes, which was put on the stack.
In this case it are:

	WORD + POINTER + WORD + WORD = 2 + 4 + 2 + 2 = 10

This number will now be added to a7 with the "LEA" directive. If you won't
correct the stack, then your TI-92 crashs, because the return address to the
TI-92 is there too and so it is lost!

===============================================================================
VII.	I/O ports
===============================================================================

To communicate with the hardware, there are I/O Ports. The TI-92 have got a
memory map for the I/O ports. The I/O Ports begin at the address $600000. If
you want to get a byte from a port you can mostly direct read it, but sometimes
you have first to write a code to a port wait a little bit an then read it.
For example, we use the keyboard (for detailed information read LOWLEVEL.TXT
from the Fargodocumentation). First we write #$FFFE to $600018. Next we wait
a little bit. After this we can read a byte from $60001B.
Source:

	move.w #$FFFE,d0
	move.w d0,($600018)
; Waiting
	nop
	nop
	nop
	nop
	nop
	nop
; Read byte
	move.b ($60001B),d1
; Now we have got the first row of the keyboard matrix!


===============================================================================
VIII.	Traps and autoints
===============================================================================

Traps are interrupts, which can be called by the program. Use Traps to do
some very interesting things with your TI-92. The instruction for this is
called "TRAP". After this you have to put the Trapnumber. For description
of the traps view the Fargodocumentation TRAPS.TXT.
Example:

	trap #4		; Turn calculator off
; Calculator is on:
	move.w #10,d0

Autoints are called periodically or if an event happens (like the pressing
of the ON key). For example, the autoint 6 is being called, if you press the
ON key.


===============================================================================
IX.	The first programms
===============================================================================

Now we have got a lot of knowledge, now to the pratical things. First some
significations of an assemblerfile. Labels have to begin at the first row, like
this line. An instruction must not be on the first, it has to be signed with
min. 1 space! So now we could begin with the Hello world program.

1. Hello world
--------------

It is very simple, but we have to start with an easy program. First the
source and try to understand it, while you are reading it!

; HELLO.ASM
	include "flib.h"
	include "tios.h"
	xdef _main
	xdef _comment

_main:
	jsr flib::zap_screen
	move.w #4,-(a7)
	pea helloworld(PC)
	move.w #50,-(a7)
	move.w #50,-(a7)
	jsr tios::DrawStrXY
	lea 10(a7),a7
	jsr flib::idle_loop
	rts

helloworld	dc.b "Hello world!",0
_comment	dc.b "PRGM: Hello world!",0
	END

The program calls first FLIB::ZAP_SCREEN. If you read "FLIB.H" then you will
see that this subrouting clears the screen. After this we push some parameters
for TIOS::DRAWSTRXY on the stack. If you read the "TIOS.H" then you will see
how to push the numbers on the stack. From the right side to the left side!

	DrawStrXY(int x,int y,char *text,int attr);

First we push the attribute (see in Fargodocu "TYPES.TXT" for the attributes)
then the string then y and then x to the stack. Next we call TIOS::DRAWSTRXY
and then we correct the stack. FLIB::IDLE_LOOP waits for a key an then the
program returns to the caller. This program is very easy, but contains a lot
of informations.

2. Starfieldgenerator
---------------------

Now we will study the screen. You have readed the LCD_MEM variable, which is
declared in TIOS.H. It points to the top of the left corner. Now, the TI-92
has got one special thing: Every bit describes 1 pixel, but we can only address
Bytes = 8 bits, so we have to calculate the byteaddress and the bitnumber.
	
	bitaddress = 	(Y * 30 + X) / 8;

30, because 240 / 8 = 30 Bytes per pixelcolumn.

	bitnumber  = 	(Y * 30 + X) % 8;

% is the remainder of the division.
After this we have to load LCD_MEM into Ax add bitaddress and set bitnumber in
Ax.

	move.l #LCD_MEM,a0
	move.w bitaddress,d0
	adda.w d0,a0		; ADDA is the addition, but ADDRESS!
	bset.b bitnumber,(a0)

For better practical things we use the stack and call then FLIB::PIXEL_ON. We
use a loop to generate 200 stars. And now the source:

	include "tios.h"
	include "flib.h"
	xdef _main
	xdef _comment

_main:
	jsr flib::zap_screen
	move.w #199,d3
; Remember 200 - 1 = 199, DBRA!
_createstars:
; First the x coordinate
	move.w #240,d0
	jsr flib::random
; Save the x coordinate
	move.w d0,d1
; The y coordinate
	move.w #128,d0
	jsr flib::random
; Now push the coordinates onto the stack
	move.w d0,-(a7)
	move.w d1,-(a7)
	jsr flib::pixel_on
	lea 4(a7),a7
	dbra.w d3,_createstars
	jsr flib::idle_loop
	rts

_comment	dc.b "PRGM: Starfield",0
	END


We have to study the Libraries, because the next programms will need that!

===============================================================================
X.	A program with a subroutine
===============================================================================

From now on we use "MACROS.H" for writing texts to the screen!

Now we will write a program which shows a sprite on the screen. Since the
screen is a special building, this program has got a limitation:
The sprite is in X-direction only at every 8th pixel visibel and this sprites
are only 8 x 8 pixels.

Sprites are little picture, which are "moveable" on the screen.
Source:

	include "flib.h"
	include "tios.h"
	include "macros.h"
	xdef _main
	xdef _comment

put8x8sprite:
; In	D0	X coordinate [ 0..28 ]
;	D1	Y coordinate [ 0..119 ]
;	A0	Pointer to the sprite
; Out	Nothing

; Building of the screenaddress
; ADDRESS = Y * 30 + X
; 30 bytes per line!
	mulu.w #30,d1
; + X
	add.w d0,d1
	move.l #LCD_MEM,a1
	lea 0(a1,d1.w),a1
	move.w #7,d0
; Looping to show every line
showsprite:
; Line x
	move.b (a0)+,(a1)
	lea 30(a1),a1
	dbra.w d0,showsprite
	rts

_main:
	jsr flib::zap_screen
	lea sprite1(PC),a0
	move.w #10,d0
	move.w #50,d1
	bsr put8x8sprite
	jsr flib::idle_loop
	rts

sprite1		dc.b %00011000,
		dc.b %00011000,
		dc.b %00011000,
		dc.b %11111111,
		dc.b %11111111,
		dc.b %00011000,
		dc.b %00011000,
		dc.b %00011000
_comment	dc.b "PRGM: Subroutines",0
	END

You see the cross, which will be shown on the screen! Try to create own
sprites.

===============================================================================
XI.	Using of Libraries
===============================================================================

Libraries are very useful for a TI-92, because they will decrase the size of a
program. The only question: How?

We will look at FLIB.H. The random function will get its arguments in the
registers and this isn't very difficult.

; random(void)

This "void" shows that no arguments are pushed to the stack, and below this is
shown, which registers are used and which registers are used for a result.

The second and difficulter calling is, when a function get their parameters in
the stack. For example we look at TIOS.H:

;----------------------------------------------------------------------------
; int sprintf(char *buffer, char *format[, argument, ...])
;
; Function: Uses {format} as a template to output a string to {buffer},
;           substituting arguments when '%' is found in {format}.
;
; Return: D0.W = number of bytes output
;
; For an explanation of format specifiers, please see a reference on the
; C programming language.
;----------------------------------------------------------------------------
tios::sprintf			equ	tios@000F

This is the difficultest example, but the best way to explain that. This
arguments are:

	char *			This is a pointer, everything with a "*" is
				a pointer, like byte *number etc.
	WORD			Unsigned word
	INT			Signed word
	BYTE			Word too!
	LONG			Longint
	...			You can put so many arguments as you want /
				or the procedure needs

SPRINTF is a procedure for formating of strings. I'll explain this format:

The formatstring is a string, but if a "%" is founded, then some chars behind
this "%" is a specifier for a format! Formatspecifier:

	%%			The "%" char!
	%d			Signed word, put the number onto the stack.
	%s			string, put a pointer to this string onto the
				stack.
	%u			Unsigned word, ...
	%x			Hexadecimal number
	%lu			Longint
	%c			Char

This are the most important formatspecifier. How to push onto the stack.

Push the numbers from the right to the left that means begin with the argument
which is at the end of the calling convention. For SPRINTF the last argument
is the last formatspecifier from the formatstring.

Example:
	formatstring	dc.b "%d + %d = %lu",0
	output		ds.b 50

	Now the calling convention is of sprintf:

	sprintf (char *formatstring, char *output, int first%d, int second%d,
		 long result_%lu);

After calling of this function, you have to correct the stack. In this case
it would be:

 POINTER + POINTER + WORD + WORD + LONG = 4 + 4 + 2 + 2 + 4 = 16

-> After the jsr tios::sprintf you have to put lea 16(a7),a7!

Examplesource ( 5 + 5 = 10 will be the output):

	include "tios.h"
	include "flib.h"
	xdef _main
	xdef _comment

_main:
; Clear screen
	jsr flib::zap_screen

; Push the arguments onto the stack
	move.l #10,-(a7)
	move.w #5,-(a7)
	move.w #5,-(a7)
	pea output(PC)
	pea formatstring(PC)
; Call the function
	jsr tios::sprintf
; Correction of the stack.
	lea 16(a7),a7
; Now output is the formated string and we will display it now!
	move.w #4,-(a7)
	pea output(PC)
	move.w #1,-(a7)
	move.w #1,-(a7)
	jsr tios::DrawStrXY
	lea 10(a7),a7
; Waiting for a key
	jsr flib::idle_loop
	rts

formatstring	dc.b "%d + %d = %lu",0
; Space for 50 chars, should be more than enough
output		ds.b 50
_comment	dc.b "PRGM: Using of libraries",0
	END


===============================================================================
XII.	Discussing about the TI92
===============================================================================

The TI92 is a very complex construction! Since the TI92 II the TI92 has got
some more features ( like the Language ) etc. But how can I use this functions?
Currently you can't use a lot of the TI92 functions, but David Ellsworth is
working...

So we have to use the libraries. Now we will discuss about a lot of libraries
and their usage. The most of these libraries have got a very good description
in this *.H file. Here we'll show which library is for what.


1.	KERNEL.H
----------------

KERNEL.H currently only supports the executing of other Fargo programs. All
what you have to do is to push the memoryhandle of the program onto the stack.
To get the handle you have to use "tios::FindSymEntry".


2.	TIOS.H
--------------

The TIOS.H is a "pseudolibrary" that mean it doesn't exist, it is exported by
the Fargo kernel. In this library are a lot of functions for the memory or
strings etc. I think every program needs TIOS.H.


3.	FLIB.H
--------------

Flib (Fargolibrary) is very useful for fundamental operations. You can read a
key, get a random number etc. Look at FLIB.H


4.	GRAYXLIB.H
------------------

The 2 GRAYLIBs are for showing of grayscaled graphic. This use a simple trick.
There are two screens, which overlap themself. The first screen is the normal
LCD_MEM and the second (GRAY4) and third (GRAY7) is an allocated memoryblock,
which will be shown. The library uses the AutoInt 1, which is peridically
called. To get the address of each "plane" (each screen), you have to load
grayXlib::planex into a processorregister. The planenumbers are from 0 to 1 or
2. To activate the grayscalegraphic start GRAYXLIB::ON. If the result in D0.L
is nonzero there was a sucess, else you don't have got grayscalegraphic!
Example for clearing of the TI92 display, when GRAYXLIB is active:

; We have got GRAY4LIB activated.
clear_gray4lib_screen:
	movem.l d0/a0-a1,-(a7)
	move.l gray4lib::plane0,a0
	move.l gray4lib::plane1,a1
; GRAY4LIB::PLANE1 is always LCD_MEM!
	move.w #959,d0
clearscreenloop:
; Clear screen 1
	clr.l (a0)+
; Clear screen 2
	clr.l (a1)+
	dbra.w d0,clearscreenloop
	movem.l (a7)+,d0/a0-a1
	rts

5.	HEXLIB.H
----------------

Hexlib is for showing of hexadecimal or binary numbers. I think it's not very
useful, but if you need it look at HEXLIB.H.


6.	HUFFLIB.H
-----------------

I think Hufflib is one of the interesting libraries, because it is for
decompressing of pictures or textes etc. With hufflib you could create a good
looking titlepicture ( GRAYSCALE ) and compress it ( Example: Without
compression a GRAY4LIB picture [ 240*128 ] needs 2 * 3840 bytes, with
compression it is various, but you'll get a ratio of 40-60% ).
Look at HUFFLIB.TXT a very good description.

7.	PK92LIB.H
-----------------

This is the new compression algorithm, which is a little bit better, but
HUFFLIB is currently a standard. Use both, HUFFLIB and PK92LIB to compress
and use then the library which compressed better!

8.	TRIGLIB.H
-----------------

I don't have got TRIBLIB.H, so please help me!


9.	MXMLIB.H
----------------

This library is mostly used for savegames. It also supports a menu and some
mathematical functions, but it is best for savegames. Look at MXMLIB.TXT for
a description.

10.	MXMTSR.H
----------------

This library is used for creating (T)SR programms. This are programs, which
are activated by an event, like the turning off of the calc, etc. So some very
interesting procedures are createable ( like the creating of a passwordprogram,
which don't have to be activated by the user ).

===============================================================================
XIII.	Technical informations about the TI92
===============================================================================

The TI92 has got an Motorola 68000 with 10Mhz ( each TI92 ). The TI92 II is
faster, because it has got more memory and the ROM functions are optimized.

The memory is varios ( 128k/256k and 512k). The memory is moveable. But there
is a little section, which isn't moveable. This section is used by the Fargo
kernel and MXMTSR.

The link services is able to transmit 30kbit per second! With this speed are
sounds on the TI92 also possible ( there are some programs, but you have to
make a 2.5mm headphone ).

The software of the TI92 is written in C/C++ (?).

===============================================================================
Appendix
===============================================================================

You've reached the end and you know a lot about FARGO programming. If you
have got questions, then write us an email. Contact us if you have got some
suggestions etc.

alexander.grutsch.htlr@schulen.vol.at

http://members.vol.at/schoenach

So contact us or send us your FARGO programs, when you've finished it...
Read you later

MXM Projects Team