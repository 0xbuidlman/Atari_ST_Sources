
-----------------------------------------------------------------------------
   
                           THE 68030 INSTRUCTIONS
      
                              par Rusty / E.K.O

------------------------------------------------------------------------------


     Yoyo ,voici les instructions du 68030 et ces principales caracteristiques
pour que toutes les personnes codant sur 68000 exploitent a fond les possibli-
-lites de ce super micro-proscesseur.La prochaine fois il y aura un expose sur
les nouveaux modes d'addressage !!!!  
Avant de passer a l'article en lui meme,je tiens a avertir les lecteurs que je
vais faire plein de tests de rapidite des  instructions sur mon falcon.  Ainsi  
je suis interresse par n ' importe quelle remarque surtout sur l ' utilisation
du cache d' instruction et de donnee.  Surtout si vous arrivez a faire tourner
le blitter et le cache en meme temps. Par exp, pour effacer l'ecran on pourait
faire comme sur amiga,1/2 au 68000 et 1/2 par le blitter. Pour tout ca ecrivez
moi chez ALEX ... (c moi !!!)



 Presentation Generale du 68030:
---------------------------------

( Pique dans MISE EN OEUVRE DU 68030 ).
-> Code objet compatible avec les predecesseurs de la famille 68000.
-> 16 registres generaux d'adresses et de donnees sur 32 bits.
-> 18 registres de controle dont trois pointeurs de pile. 
-> Un cache d'instruction de 256 octets.
-> Un cache donnee de 256 octets.
-> 18 Modes d'adressage.

 Presentation du CACHE D'INSTRUCTION DU 68030:
-----------------------------------------------

Le cache d'instructions du 68030 est naturellement situe au sien du processeur
Il sert a memoriser les instructions. Ainsi , en plus de la rapidite effective 
obtenue dans la recherche des instructions , l' existence de ce cache provoque
une diminution du taux d'occupation des bus ...
Le cache d' instruction offre une capacite de 256 octets compose de  16 blocs.
Chaque bloc contient 4 mots longs soit 16 octets. Le cache instruction  permet
la recherche rapide des instructions sans acces  a la memoire externe et  donc
les bus sont libres pour effectuer d'autres operations en parallele.

 Presentation du CACHE DONNEE DU 68030:
----------------------------------------

   Ce cache interne au processeur permet de stocker les donnees referencees au
cours de l'execution d'instructions. Cela a l'exception d'un adressage dans l'
espace CPU,d'un adressage en mode relatif (induit l'acces en espace programme)
,de l'instruction MOVES.


 INSTRUCTIONS ARITHMETIQUE:
----------------------------


ADD: 
Dn,<ae> ou <ea>,dn         
Taille operandes: 8,16,32 bytes
source+destination-->destination

ADDA:  
<ae>,An
Taille operandes: 16,32
source+destination-->destination

ADDQ:  
#<donnee>,<ae>
Taille operandes: 8,16,32 bytes
donnee+destination-->destination

ADDX
Dn,Dn ou -(An),-(An)
Taille operandes: 8,16,32 bytes
source+destination+X-->destination

CLR
<ae>
Taille operandes: 8,16,32
0--->destination

CMP
<ae>,Dn
Taille operandes: 8,16,32
destination-source

CMPA 
<ae>,An
Taille operandes: 16,32
destination-source
 
CMPI 
#<donnee>,<ae>
Taille operandes: 8,16,32
destination-donnee

CMPM 
(An)+,(An)+
Taille operandes: 8,16,32
destination-source

CMP2 
<ae>,Rn
Taille operandes: 8,16,32
limite inferieure<Rn<limite superieure

DIVS/DIVU
<ae>,Dn
Taille operandes: 32/16-->16:16
destination/source-->destination 
signe ou  non signe (- ou +)

DIVS/DIVU
<ae>,Dr:Dq
Taille operandes: 64/32-->32:32
destination/source-->destination 
signe ou  non signe (- ou +)

DIVS/DIVU
<ae>,Dq
Taille operandes: 32/32-->32
destination/source-->destination 
signe ou  non signe (- ou +)

DIVSL/DIVUL
<ae>,Dr:Dq
Taille operandes: 32/32-->32:32

EXT
Dn
Taille operandes: 8-->16 ou 16-->32
destination etendue par le signe.
(- ou +) --> destination 

EXTB
Dn
Taille operandes: 8-->32
destination etendue par le signe.
(- ou +) --> destination

MULS/MULU
<ae>,Dn
Taille operandes: 16*16-->32
source * destination-->destination
(signe ou non signe)


MULS/MULU
<ae>,Dl
Taille operandes: 32*32-->32
source * destination-->destination
(signe ou non signe)


MULS/MULU
<ae>,Dh:Dl
Taille operandes: 32*32-->64
source * destination-->destination
(signe ou non signe)

NEG
<ae>
Taille operandes: 8,16,32
0-destination-->destination

NEGX
<ae>
Taille operandes: 8,16,32
0-destination-X-->destination

SUB
<ae>,Dn ou Dn,<ae>
Taille operandes: 8,16,32
destination-source-->destination

SUBA
<ae>,An
Taille operandes: 16,32
destination-source-->destination

SUBI
#<donnee>,<ae>
Taille operandes: 8,16,32
destination-donnee-->destination

SUBQ
#<donnee>,<ae>
Taille operandes: 8,16,32
destination-donnee-->destination

SUBX
Dn,Dn ou -(An),-(An)
Taille operandes: 8,16,32
destination-source-x-->destination

NOP
aucune
aucune
PC+2-->PC



 INSTRUCTIONS LOGIQUE:
-----------------------

AND
<ae>,Dn ou Dn,<ae>
Taille operandes: 8,16,32
source AND (ET) destination
-->destination

ANDI
#<donnee>,<AE>
Taille operandes: 8,16,32
donnee AND (ET) destination
-->destination  

EOR
Dn,<ae>
Taille operandes: 8,16,32
source OU exclusif (ou exclusive) 
destination-->destination

EORI
#<donnee>,<AE>
Taille operandes: 8,16,32
donnee immediate OU exclusif
destination-->destination  

OR
<ae>,Dn ou Dn,<ae>
Taille operandes: 8,16,32
source  OU 
destination-->destination

ORI
Taille operandes: 8,16,32
#<donnee>,<ae>
8,16,32
donnee OU 
destination-->destination  

NOT
<ae>
Taille operandes: 8,16,32
NOT(destination)-->destination

TST
<ae>
Taille operandes: 8,16,32
source-0-->
positionnement des indicateurs

Scc
<ae>
Taille operandes: 8
Si condition vraie:$ff-->destination
sinon $00-->destination



 INSTRUCTION de DECALAGES et de ROTATIONS:
-------------------------------------------

ASL
Dn,Dn:Taille operandes: 8,16,32
#<donnee>,<dn>:Taille operandes 8,16,32 
<ae> :Taille operandes: 16 

ASR
Dn,Dn:Taille operandes: 8,16,32
#<donnee>,<dn>:Taille operandes 8,16,32 
<ae> :Taille operandes: 16 


LSL
Dn,Dn:Taille operandes: 8,16,32
#<donnee>,<dn>:Taille operandes 8,16,32 
<ae> :Taille operandes: 8,16,32 

LSR
Dn,Dn:Taille operandes: 8,16,32
#<donnee>,<dn>:Taille operandes 8,16,32 
<ae> :Taille operandes: 8,16,32 

ROL
Dn,Dn:Taille operandes: 8,16,32
#<donnee>,<dn>:Taille operandes 8,16,32 
<ae> :Taille operandes: 8,16,32 

ROR
Dn,Dn:Taille operandes: 8,16,32
#<donnee>,<dn>:Taille operandes 8,16,32 
<ae> :Taille operandes: 8,16,32 

ROXL
Dn,Dn:Taille operandes: 8,16,32
#<donnee>,<dn>:Taille operandes 8,16,32 
<ae> :Taille operandes: 8,16,32 

ROXR
Dn,Dn:Taille operandes: 8,16,32
#<donnee>,<dn>:Taille operandes 8,16,32 
<ae> :Taille operandes: 8,16,32 

SWAP
Dn : Taille operandes: 32



 INSTRUCTION de MANIPULATION de BIT:
-------------------------------------

BCHG
Dn,<ae> ou #<donnee>,<ae>
Taille operandes: 8,32
Bit numero X(indique par source)
de destination teste -->z
ce bit est inverse.

BCLR
Dn,<ae> ou #<donnee>,<ae>
Taille operandes: 8,32
Bit numero X(indique par source)
de destination teste -->z
bits est mis a 0.

BTST
Dn,<ae> ou #<donnee>,<ae>
Taille operandes: 8,32
Bit numero X(indique par source)
bits teste -->z


BSET
Dn,<ae> ou #<donnee>,<ae>
Taille operandes: 8,32	      
Bit number X(show by the source)
of destination tested -->z;
ce bit est mis a 1.


 INSTRUCTIONS de MANIPULATION de CHAMP de BITS:
------------------------------------------------
  

BFCHG
<ae>(deplacement,largeur)
Taille operandes: 1-32
Champ de bits inverse

BFCLR
<ae>(deplacement,largeur)
Taille operandes: 1-32
Champ de bits is clear

BFTST
<ae>(deplacement,largeur)
Taille operandes: 1-32
Champ de bits teste-->N ET Z

BFSET
<ae>(deplacement,largeur)
Taille operandes: 1-32		
Champ de bits est mis a 1.

BFEXTS
<ae>(deplacement,largeur),Dn
Taille operandes: 1-32
Champ de bits -->Dn;
extension du signe.

BFEXTU
<ae>(deplacement,largeur),Dn
Taille operandes: 1-32
Champ de bits -->Dn;
etendu par 0

BFFFO
<ae>(deplacement,largeur),Dn
Taille operandes: 1-32	
scrutation of the first 1 in
Champ de bits -->Dn

BFINS
Dn,<ae>(deplacement,largeur)
Taille operandes: 1-32
Dn-->Champ de bits 



 INSTRUCTIONS BCD:
-------------------

ABCD 
Dn,Dn ou -(An),-(An)
Taille operandes: 8
source(10)+destination(10)+X
-->destination

NBCD
<ae>
Taille operandes: 8
0-destination(10)-X
-->destination

SBCD
Dn,Dn ou -(An),-(An)
Taille operandes: 8
source(10)-destination(10)-X
-->destination

PACK
-(An),-(An),#<donnee>
ou Dn,Dn,#<donnee>
Taille operandes: 16-->8
source non packee +donnee
-->destination packee

UNPACK
-(An),-(An),#<donnee>
ou Dn,Dn,#<donnee>
Taille operandes: 8-->16
source packed
-->source non packee;
source non packee+donnee
-->destination non packee

 

 INSTRUCTION de TRANSFERT:
---------------------------

EXG
Rn,Rn
Taille operandes: 32
Rn<-->Rn

LEA
<ae>,An
Taille operandes: 32
<ae><-->An

LINK
An,#<d>
Taille operandes: 16,32
An-->(Sp);(Sp)-->An
Sp+d-->Sp

MOVE
<ae>,<ae>
Taille operandes: 8,16,32
source-->destination

MOVEA
<ae>,An
Taille operandes: 16,32-->32
Source-->destination

MOVEM
registre liste,<ae>
Taille operandes: 16,32
registre liste-->destination

MOVEM
<ae>,registre liste
Taille operandes: 16,32
destination-->registre liste

MOVEQ
#<donnee>,dn
Taille operandes: 8-->32
donnee-->destination

MOVEP
Dn,(d,An)
Taille operandes: 16,32

MOVEP
(d,An),Dn
Taille operandes: 16,32

PEA
<ea>
Taille operandes: 32
<ea>-->(sp)

UNLINK
An
Taille operandes: 32
An-->sp;(sp)-->An

 INSTRUCTION de BRANCHEMENT:
-----------------------------

Bcc
<label>
Taille operandes: 8,16,32
If condition is true
PC+d-->PC

DBcc
Dn,<label> 
Taille operandes: 16
If condition is wrong
Dn-1-->Dn
If Dn <>-1:PC+d-->PC

BRA
<label>
Taille operandes: 8,16,32
PC+d-->PC

BSR
<label>
Taille operandes: 8,16,32
pc-->(sp);PC+d-->PC

JMP
<ae>
Taille operandes: aucune
destination-->PC

JSR
<ae>
Taille operandes: aucune
pc-->(sp);destination-->PC

RTD
#<d>
Taille operandes: 16
(sp)-->PC;SP+d-->SP

RTR
aucune
Taille operandes: aucune
(sp)-->CCR;(SP)-->PC

RTS
aucune
Taille operandes: aucune
(sp)-->PC



 INSTRUCTIONS PRIVILEGES:
--------------------------

RESET
aucune
Taille operandes: aucune
reset

RTE
aucune
Taille operandes: aucune
(sp)-->sr;(sp)-->pc

STOP
#<donnee>
Taille operandes: 16
donnze immediate-->sr:
suspension de l'activite


 INSTRUCTIONS d'EXCEPTIONS:
----------------------------

BKPT
#<donnee>
aucune

CHK
<ae>,Dn
Taille operandes: 16,32
SI Dn<0 ou Dn< <ae>,exection CHK

CHK2
<ae>,Dn
Taille operandes: 8,16,32
SI Rn<limite inferieure ou Rn>limite superieure
exeption CHK

ILLEGAL
aucune
Taille operandes: aucune
illegal

TRAP
#<donnee>
Taille operandes: aucune
exeption TRAP

TRAPcc
aucune ou #<donnee>
Taille operandes: aucune ou 16,32
exeption TRAPcc

TRAPV
aucune
Taille operandes: aucune
SI V=1 exection TRAPV
meme vecteur that TRAPcc




                             
 INTRUCTIONS MULTIPROCESSEUR:
------------------------------

(Must have a reading cycle
changing-writting)

TAS 
<ae>
Taille operandes: 8
destination-0;position of the 
indicators;bit 7 of destination is
now 1.

CAS (ou CAS2 with 2 operandes)
Dc,Du,<ae>
Taille operandes: 8,16,32
destination-dc
-->position of the indicator
if Z=1:Du
--> destination sinon:
destination-->Dc 



 INSTRUCTIONS COPROCESSOR:
----------------------------
cpBcc
<label>
Taille operandes: 16,32
si cpcc true:
PC+d-->PC

cpDBcc
<label>,Dn
Taille operandes: 16
si cpcc wrong
Dn-1-->Dn
si Dn<>-1:PC+d-->PC

cpGEN
you make it
you make it
operande-->coprocessor

cpRESTORE
<ae>
Taille operandes: aucune
restitution of the context coprocssor
by the <ae>

cpSAVE
<ae>
Taille operandes: aucune
save of the context coprocessor by the
<ae>

cpScc
<ae>
Taille operandes: 8
if spss rigth
$ff-->destination
sinon $00

cpTRAPcc
aucune ou #<donnee>
Taille operandes: aucune,16,32
if cpcc right:
exection TRAPcc



Ah! J' ai finalement fini d'ecrire cet article.Je n'est pas inclu toutes
les instrutions parce que celle que j'ai laisse je ne les utiliserai pas
enfin j'espere...  


                                 RRRRRR
                                  R   RR
                                  R   RR
                                  RRRRR
                                  R RR            *
                                  R  RRRR        ***
                                  R   RRRRR       *
